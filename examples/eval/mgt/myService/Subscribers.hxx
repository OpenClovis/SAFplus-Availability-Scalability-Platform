/* 
 * File Subscribers.hxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 

#pragma once
#ifndef SUBSCRIBERS_HXX_
#define SUBSCRIBERS_HXX_

#include "MgtFactory.hxx"
#include "clMgtProv.hxx"
#include "clMgtContainer.hxx"
#include "clTransaction.hxx"
#include "Level.hxx"
#include <string>
#include "myServiceCommon.hxx"
#include <cstdint>
#include <vector>

namespace myService
  {

    class Subscribers : public SAFplus::MgtContainer {

        /* Apply MGT object factory */
        MGT_REGISTER(Subscribers);

    public:
        SAFplus::MgtProv<std::string> name;

        /*
         * True means this subscriber is in good standing, False means service is off
         */
        SAFplus::MgtProv<bool> active;
        SAFplus::MgtProv<::myService::Level> level;

        /*
         * How much of the service this subscriber can use
         */
        SAFplus::MgtProv<::int64_t> limit;

        /*
         * How much of the service this subscriber has used
         */
        SAFplus::MgtProv<::int64_t> use;

    public:
        Subscribers();
        Subscribers(std::string nameValue);
        std::vector<std::string> getKeys();
        std::vector<std::string>* getChildNames();

        /*
         * XPATH: /myService/subscribers/name
         */
        std::string getName();

        /*
         * XPATH: /myService/subscribers/name
         */
        void setName(std::string nameValue, SAFplus::Transaction &t=SAFplus::NO_TXN);

        /*
         * XPATH: /myService/subscribers/active
         */
        bool getActive();

        /*
         * XPATH: /myService/subscribers/active
         */
        void setActive(bool activeValue, SAFplus::Transaction &t=SAFplus::NO_TXN);

        /*
         * XPATH: /myService/subscribers/level
         */
        ::myService::Level getLevel();

        /*
         * XPATH: /myService/subscribers/level
         */
        void setLevel(::myService::Level &levelValue, SAFplus::Transaction &t=SAFplus::NO_TXN);

        /*
         * XPATH: /myService/subscribers/limit
         */
        ::int64_t getLimit();

        /*
         * XPATH: /myService/subscribers/limit
         */
        void setLimit(::int64_t limitValue, SAFplus::Transaction &t=SAFplus::NO_TXN);

        /*
         * XPATH: /myService/subscribers/use
         */
        ::int64_t getUse();

        /*
         * XPATH: /myService/subscribers/use
         */
        void setUse(::int64_t useValue, SAFplus::Transaction &t=SAFplus::NO_TXN);
        ~Subscribers();

    };
}
/* namespace ::myService */
#endif /* SUBSCRIBERS_HXX_ */
