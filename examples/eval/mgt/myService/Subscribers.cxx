/* 
 * File Subscribers.cxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 

#include "MgtFactory.hxx"
#include "clMgtProv.hxx"
#include "clMgtContainer.hxx"
#include "clTransaction.hxx"
#include "Level.hxx"
#include <string>
#include "myServiceCommon.hxx"
#include <cstdint>
#include <vector>
#include "Subscribers.hxx"


namespace myService
  {

    /* Apply MGT object factory */
    MGT_REGISTER_IMPL(Subscribers, /myService/subscribers)

    Subscribers::Subscribers(): SAFplus::MgtContainer("subscribers"), name("name"), active("active"), level("level"), limit("limit"), use("use")
    {
        this->addChildObject(&name, "name");
        this->addChildObject(&active, "active");
        this->addChildObject(&level, "level");
        this->addChildObject(&limit, "limit");
        this->addChildObject(&use, "use");
    };

    Subscribers::Subscribers(std::string nameValue): SAFplus::MgtContainer("subscribers"), name("name"), active("active"), level("level"), limit("limit"), use("use")
    {
        this->name.value =  nameValue;
        this->addChildObject(&name, "name");
        this->addChildObject(&active, "active");
        this->addChildObject(&level, "level");
        this->addChildObject(&limit, "limit");
        this->addChildObject(&use, "use");
    };

    std::vector<std::string> Subscribers::getKeys()
    {
        std::string keyNames[] = { "name" };
        return std::vector<std::string> (keyNames, keyNames + sizeof(keyNames) / sizeof(keyNames[0]));
    };

    std::vector<std::string>* Subscribers::getChildNames()
    {
        std::string childNames[] = { "name", "active", "level", "limit", "use" };
        return new std::vector<std::string> (childNames, childNames + sizeof(childNames) / sizeof(childNames[0]));
    };

    /*
     * XPATH: /myService/subscribers/name
     */
    std::string Subscribers::getName()
    {
        return this->name.value;
    };

    /*
     * XPATH: /myService/subscribers/name
     */
    void Subscribers::setName(std::string nameValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->name.value = nameValue;
        else
        {
            SAFplus::SimpleTxnOperation<std::string> *opt = new SAFplus::SimpleTxnOperation<std::string>(&(name.value),nameValue);
            t.addOperation(opt);
        }
    };

    /*
     * XPATH: /myService/subscribers/active
     */
    bool Subscribers::getActive()
    {
        return this->active.value;
    };

    /*
     * XPATH: /myService/subscribers/active
     */
    void Subscribers::setActive(bool activeValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->active.value = activeValue;
        else
        {
            SAFplus::SimpleTxnOperation<bool> *opt = new SAFplus::SimpleTxnOperation<bool>(&(active.value),activeValue);
            t.addOperation(opt);
        }
    };

    /*
     * XPATH: /myService/subscribers/level
     */
    ::myService::Level Subscribers::getLevel()
    {
        return this->level.value;
    };

    /*
     * XPATH: /myService/subscribers/level
     */
    void Subscribers::setLevel(::myService::Level &levelValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->level.value = levelValue;
        else
        {
            SAFplus::SimpleTxnOperation<::myService::Level> *opt = new SAFplus::SimpleTxnOperation<::myService::Level>(&(level.value),levelValue);
            t.addOperation(opt);
        }
    };

    /*
     * XPATH: /myService/subscribers/limit
     */
    ::int64_t Subscribers::getLimit()
    {
        return this->limit.value;
    };

    /*
     * XPATH: /myService/subscribers/limit
     */
    void Subscribers::setLimit(::int64_t limitValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->limit.value = limitValue;
        else
        {
            SAFplus::SimpleTxnOperation<::int64_t> *opt = new SAFplus::SimpleTxnOperation<::int64_t>(&(limit.value),limitValue);
            t.addOperation(opt);
        }
    };

    /*
     * XPATH: /myService/subscribers/use
     */
    ::int64_t Subscribers::getUse()
    {
        return this->use.value;
    };

    /*
     * XPATH: /myService/subscribers/use
     */
    void Subscribers::setUse(::int64_t useValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->use.value = useValue;
        else
        {
            SAFplus::SimpleTxnOperation<::int64_t> *opt = new SAFplus::SimpleTxnOperation<::int64_t>(&(use.value),useValue);
            t.addOperation(opt);
        }
    };

    Subscribers::~Subscribers()
    {
    };

}
/* namespace ::myService */
