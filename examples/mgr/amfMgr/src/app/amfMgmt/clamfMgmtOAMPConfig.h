/******************************************************************************
 *
 * clamfMgmtOAMPConfig.h
 *
 ******************************************************************************
 * This code is auto-generated by OpenClovis IDE Version 3.1
 *
 ***************************** Description ************************************
 *
 * This is a header file for oamp configuration. 
 *
 *****************************************************************************/
 
#ifndef _CL_AMFMGMT_OAMP_CONFIG_H_
#define _CL_AMFMGMT_OAMP_CONFIG_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <clOmApi.h>
#include <clCorApi.h>
#include <clProvOmApi.h>
#include <clProvApi.h>
#include <clAlarmApi.h>
#include <clHalApi.h>
#include <clHalObjectApi.h>

typedef ClRcT (*fp) (CL_OM_PROV_CLASS*, ClHandleT,  ClProvTxnDataT*);


CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFAPPLICATIONTABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFNODETABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFSGTABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFSUTABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFSITABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFSUSPERSIRANKTABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFSGSIRANKTABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFSGSURANKTABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFSISIDEPTABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFCOMPTABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFCOMPCSTYPESUPPORTEDTABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFCSITABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFCSICSIDEPTABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFCSINAMEVALUETABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFCSTYPEATTRNAMETABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFSUSITABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFHEALTHCHECKTABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFSCOMPCSITABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFPROXYPROXIEDTABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFSCALARS_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_ALARM_CLASS,  CL_OM_ALARM_SAAMFTRAPOBJECT_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_SAAMFTRAPOBJECT_CLASS)

CL_OM_END

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFAPPLICATIONTABLEProvDestructor (), clamfMgmtSAAMFAPPLICATIONTABLEProvValidate (),
 *  clamfMgmtSAAMFAPPLICATIONTABLEProvUpdate(), clamfMgmtSAAMFAPPLICATIONTABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFAPPLICATIONTABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFAPPLICATIONTABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFAPPLICATIONTABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFAPPLICATIONTABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFNODETABLEProvDestructor (), clamfMgmtSAAMFNODETABLEProvValidate (),
 *  clamfMgmtSAAMFNODETABLEProvUpdate(), clamfMgmtSAAMFNODETABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFNODETABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFNODETABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFNODETABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFNODETABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFSGTABLEProvDestructor (), clamfMgmtSAAMFSGTABLEProvValidate (),
 *  clamfMgmtSAAMFSGTABLEProvUpdate(), clamfMgmtSAAMFSGTABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFSGTABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFSGTABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFSGTABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFSGTABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFSUTABLEProvDestructor (), clamfMgmtSAAMFSUTABLEProvValidate (),
 *  clamfMgmtSAAMFSUTABLEProvUpdate(), clamfMgmtSAAMFSUTABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFSUTABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFSUTABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFSUTABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFSUTABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFSITABLEProvDestructor (), clamfMgmtSAAMFSITABLEProvValidate (),
 *  clamfMgmtSAAMFSITABLEProvUpdate(), clamfMgmtSAAMFSITABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFSITABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFSITABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFSITABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFSITABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFSUSPERSIRANKTABLEProvDestructor (), clamfMgmtSAAMFSUSPERSIRANKTABLEProvValidate (),
 *  clamfMgmtSAAMFSUSPERSIRANKTABLEProvUpdate(), clamfMgmtSAAMFSUSPERSIRANKTABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFSUSPERSIRANKTABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFSUSPERSIRANKTABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFSUSPERSIRANKTABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFSUSPERSIRANKTABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFSGSIRANKTABLEProvDestructor (), clamfMgmtSAAMFSGSIRANKTABLEProvValidate (),
 *  clamfMgmtSAAMFSGSIRANKTABLEProvUpdate(), clamfMgmtSAAMFSGSIRANKTABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFSGSIRANKTABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFSGSIRANKTABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFSGSIRANKTABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFSGSIRANKTABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFSGSURANKTABLEProvDestructor (), clamfMgmtSAAMFSGSURANKTABLEProvValidate (),
 *  clamfMgmtSAAMFSGSURANKTABLEProvUpdate(), clamfMgmtSAAMFSGSURANKTABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFSGSURANKTABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFSGSURANKTABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFSGSURANKTABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFSGSURANKTABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFSISIDEPTABLEProvDestructor (), clamfMgmtSAAMFSISIDEPTABLEProvValidate (),
 *  clamfMgmtSAAMFSISIDEPTABLEProvUpdate(), clamfMgmtSAAMFSISIDEPTABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFSISIDEPTABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFSISIDEPTABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFSISIDEPTABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFSISIDEPTABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPTABLEProvDestructor (), clamfMgmtSAAMFCOMPTABLEProvValidate (),
 *  clamfMgmtSAAMFCOMPTABLEProvUpdate(), clamfMgmtSAAMFCOMPTABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFCOMPTABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFCOMPTABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPTABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFCOMPTABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvDestructor (), clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvValidate (),
 *  clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvUpdate(), clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFCSITABLEProvDestructor (), clamfMgmtSAAMFCSITABLEProvValidate (),
 *  clamfMgmtSAAMFCSITABLEProvUpdate(), clamfMgmtSAAMFCSITABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFCSITABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFCSITABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFCSITABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFCSITABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFCSICSIDEPTABLEProvDestructor (), clamfMgmtSAAMFCSICSIDEPTABLEProvValidate (),
 *  clamfMgmtSAAMFCSICSIDEPTABLEProvUpdate(), clamfMgmtSAAMFCSICSIDEPTABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFCSICSIDEPTABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFCSICSIDEPTABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFCSICSIDEPTABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFCSICSIDEPTABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFCSINAMEVALUETABLEProvDestructor (), clamfMgmtSAAMFCSINAMEVALUETABLEProvValidate (),
 *  clamfMgmtSAAMFCSINAMEVALUETABLEProvUpdate(), clamfMgmtSAAMFCSINAMEVALUETABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFCSINAMEVALUETABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFCSINAMEVALUETABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFCSINAMEVALUETABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFCSINAMEVALUETABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvDestructor (), clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvValidate (),
 *  clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvUpdate(), clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFSUSITABLEProvDestructor (), clamfMgmtSAAMFSUSITABLEProvValidate (),
 *  clamfMgmtSAAMFSUSITABLEProvUpdate(), clamfMgmtSAAMFSUSITABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFSUSITABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFSUSITABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFSUSITABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFSUSITABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFHEALTHCHECKTABLEProvDestructor (), clamfMgmtSAAMFHEALTHCHECKTABLEProvValidate (),
 *  clamfMgmtSAAMFHEALTHCHECKTABLEProvUpdate(), clamfMgmtSAAMFHEALTHCHECKTABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFHEALTHCHECKTABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFHEALTHCHECKTABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFHEALTHCHECKTABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFHEALTHCHECKTABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFSCOMPCSITABLEProvDestructor (), clamfMgmtSAAMFSCOMPCSITABLEProvValidate (),
 *  clamfMgmtSAAMFSCOMPCSITABLEProvUpdate(), clamfMgmtSAAMFSCOMPCSITABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFSCOMPCSITABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFSCOMPCSITABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFSCOMPCSITABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFSCOMPCSITABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFPROXYPROXIEDTABLEProvDestructor (), clamfMgmtSAAMFPROXYPROXIEDTABLEProvValidate (),
 *  clamfMgmtSAAMFPROXYPROXIEDTABLEProvUpdate(), clamfMgmtSAAMFPROXYPROXIEDTABLEProvRollback()
 */
ClRcT clamfMgmtSAAMFPROXYPROXIEDTABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFPROXYPROXIEDTABLEProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFPROXYPROXIEDTABLEProvConstructor()
 */
ClRcT clamfMgmtSAAMFPROXYPROXIEDTABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFSCALARSProvDestructor (), clamfMgmtSAAMFSCALARSProvValidate (),
 *  clamfMgmtSAAMFSCALARSProvUpdate(), clamfMgmtSAAMFSCALARSProvRollback()
 */
ClRcT clamfMgmtSAAMFSCALARSProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFSCALARSProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFSCALARSProvConstructor()
 */
ClRcT clamfMgmtSAAMFSCALARSProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief A function called when the resource is created by the alarm library.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the alarm 
 *  library. An alarm resource specific allocation can be done in this function.
 *  The counter deallocation for this can be done in the alarm destructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFTRAPOBJECTAlarmDestructor () 
 */
ClRcT clamfMgmtSAAMFTRAPOBJECTAlarmConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief The function to deallocate the resources allocated in the alarm contructor.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  A user can call its own function to delete any resource which was created 
 *  during the call of the clAlarmOwnerCompWORKERAlarmConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFTRAPOBJECTAlarmConstructor()
 */
ClRcT clamfMgmtSAAMFTRAPOBJECTAlarmDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clamfMgmtSAAMFTRAPOBJECTProvDestructor (), clamfMgmtSAAMFTRAPOBJECTProvValidate (),
 *  clamfMgmtSAAMFTRAPOBJECTProvUpdate(), clamfMgmtSAAMFTRAPOBJECTProvRollback()
 */
ClRcT clamfMgmtSAAMFTRAPOBJECTProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clamfMgmtSAAMFTRAPOBJECTProvConstructor function.
 *
 *  \sa
 *  clamfMgmtSAAMFTRAPOBJECTProvConstructor()
 */
ClRcT clamfMgmtSAAMFTRAPOBJECTProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFAPPLICATIONTABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFAPPLICATIONTABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFAPPLICATIONTABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFAPPLICATIONTABLEProvUpdate, clamfMgmtSAAMFAPPLICATIONTABLEProvRollback
 */
ClRcT clamfMgmtSAAMFAPPLICATIONTABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFAPPLICATIONTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFAPPLICATIONTABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFAPPLICATIONTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFAPPLICATIONTABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFAPPLICATIONTABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFAPPLICATIONTABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFAPPLICATIONTABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFAPPLICATIONTABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFAPPLICATIONTABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFAPPLICATIONTABLEProvObjectUpdate, clamfMgmtSAAMFAPPLICATIONTABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFAPPLICATIONTABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFAPPLICATIONTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFAPPLICATIONTABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFAPPLICATIONTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFAPPLICATIONTABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFAPPLICATIONTABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFAPPLICATIONTABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFAPPLICATIONTABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFNODETABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFNODETABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFNODETABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFNODETABLEProvUpdate, clamfMgmtSAAMFNODETABLEProvRollback
 */
ClRcT clamfMgmtSAAMFNODETABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFNODETABLEProvValidate
 */
ClRcT clamfMgmtSAAMFNODETABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFNODETABLEProvValidate
 */
ClRcT clamfMgmtSAAMFNODETABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFNODETABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFNODETABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFNODETABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFNODETABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFNODETABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFNODETABLEProvObjectUpdate, clamfMgmtSAAMFNODETABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFNODETABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFNODETABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFNODETABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFNODETABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFNODETABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFNODETABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFNODETABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFNODETABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFSGTABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFSGTABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFSGTABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSGTABLEProvUpdate, clamfMgmtSAAMFSGTABLEProvRollback
 */
ClRcT clamfMgmtSAAMFSGTABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFSGTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSGTABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSGTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSGTABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFSGTABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSGTABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFSGTABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFSGTABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFSGTABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFSGTABLEProvObjectUpdate, clamfMgmtSAAMFSGTABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFSGTABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSGTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSGTABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSGTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSGTABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFSGTABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSGTABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFSGTABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFSUTABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFSUTABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFSUTABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSUTABLEProvUpdate, clamfMgmtSAAMFSUTABLEProvRollback
 */
ClRcT clamfMgmtSAAMFSUTABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFSUTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSUTABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSUTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSUTABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFSUTABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSUTABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFSUTABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFSUTABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFSUTABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFSUTABLEProvObjectUpdate, clamfMgmtSAAMFSUTABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFSUTABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSUTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSUTABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSUTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSUTABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFSUTABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSUTABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFSUTABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFSITABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFSITABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFSITABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSITABLEProvUpdate, clamfMgmtSAAMFSITABLEProvRollback
 */
ClRcT clamfMgmtSAAMFSITABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFSITABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSITABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSITABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSITABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFSITABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSITABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFSITABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFSITABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFSITABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFSITABLEProvObjectUpdate, clamfMgmtSAAMFSITABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFSITABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSITABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSITABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSITABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSITABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFSITABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSITABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFSITABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFSUSPERSIRANKTABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFSUSPERSIRANKTABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFSUSPERSIRANKTABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSUSPERSIRANKTABLEProvUpdate, clamfMgmtSAAMFSUSPERSIRANKTABLEProvRollback
 */
ClRcT clamfMgmtSAAMFSUSPERSIRANKTABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFSUSPERSIRANKTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSUSPERSIRANKTABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSUSPERSIRANKTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSUSPERSIRANKTABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFSUSPERSIRANKTABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSUSPERSIRANKTABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFSUSPERSIRANKTABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFSUSPERSIRANKTABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFSUSPERSIRANKTABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFSUSPERSIRANKTABLEProvObjectUpdate, clamfMgmtSAAMFSUSPERSIRANKTABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFSUSPERSIRANKTABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSUSPERSIRANKTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSUSPERSIRANKTABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSUSPERSIRANKTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSUSPERSIRANKTABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFSUSPERSIRANKTABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSUSPERSIRANKTABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFSUSPERSIRANKTABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFSGSIRANKTABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFSGSIRANKTABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFSGSIRANKTABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSGSIRANKTABLEProvUpdate, clamfMgmtSAAMFSGSIRANKTABLEProvRollback
 */
ClRcT clamfMgmtSAAMFSGSIRANKTABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFSGSIRANKTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSGSIRANKTABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSGSIRANKTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSGSIRANKTABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFSGSIRANKTABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSGSIRANKTABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFSGSIRANKTABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFSGSIRANKTABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFSGSIRANKTABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFSGSIRANKTABLEProvObjectUpdate, clamfMgmtSAAMFSGSIRANKTABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFSGSIRANKTABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSGSIRANKTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSGSIRANKTABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSGSIRANKTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSGSIRANKTABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFSGSIRANKTABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSGSIRANKTABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFSGSIRANKTABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFSGSURANKTABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFSGSURANKTABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFSGSURANKTABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSGSURANKTABLEProvUpdate, clamfMgmtSAAMFSGSURANKTABLEProvRollback
 */
ClRcT clamfMgmtSAAMFSGSURANKTABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFSGSURANKTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSGSURANKTABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSGSURANKTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSGSURANKTABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFSGSURANKTABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSGSURANKTABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFSGSURANKTABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFSGSURANKTABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFSGSURANKTABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFSGSURANKTABLEProvObjectUpdate, clamfMgmtSAAMFSGSURANKTABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFSGSURANKTABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSGSURANKTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSGSURANKTABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSGSURANKTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSGSURANKTABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFSGSURANKTABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSGSURANKTABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFSGSURANKTABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFSISIDEPTABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFSISIDEPTABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFSISIDEPTABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSISIDEPTABLEProvUpdate, clamfMgmtSAAMFSISIDEPTABLEProvRollback
 */
ClRcT clamfMgmtSAAMFSISIDEPTABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFSISIDEPTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSISIDEPTABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSISIDEPTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSISIDEPTABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFSISIDEPTABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSISIDEPTABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFSISIDEPTABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFSISIDEPTABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFSISIDEPTABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFSISIDEPTABLEProvObjectUpdate, clamfMgmtSAAMFSISIDEPTABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFSISIDEPTABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSISIDEPTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSISIDEPTABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSISIDEPTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSISIDEPTABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFSISIDEPTABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSISIDEPTABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFSISIDEPTABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFCOMPTABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFCOMPTABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFCOMPTABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPTABLEProvUpdate, clamfMgmtSAAMFCOMPTABLEProvRollback
 */
ClRcT clamfMgmtSAAMFCOMPTABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFCOMPTABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFCOMPTABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFCOMPTABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPTABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFCOMPTABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFCOMPTABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFCOMPTABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPTABLEProvObjectUpdate, clamfMgmtSAAMFCOMPTABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFCOMPTABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFCOMPTABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFCOMPTABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFCOMPTABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPTABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFCOMPTABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvUpdate, clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvRollback
 */
ClRcT clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvObjectUpdate, clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFCOMPCSTYPESUPPORTEDTABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFCSITABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFCSITABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFCSITABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFCSITABLEProvUpdate, clamfMgmtSAAMFCSITABLEProvRollback
 */
ClRcT clamfMgmtSAAMFCSITABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFCSITABLEProvValidate
 */
ClRcT clamfMgmtSAAMFCSITABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFCSITABLEProvValidate
 */
ClRcT clamfMgmtSAAMFCSITABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFCSITABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFCSITABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFCSITABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFCSITABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFCSITABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFCSITABLEProvObjectUpdate, clamfMgmtSAAMFCSITABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFCSITABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFCSITABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFCSITABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFCSITABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFCSITABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFCSITABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFCSITABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFCSITABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFCSICSIDEPTABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFCSICSIDEPTABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFCSICSIDEPTABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFCSICSIDEPTABLEProvUpdate, clamfMgmtSAAMFCSICSIDEPTABLEProvRollback
 */
ClRcT clamfMgmtSAAMFCSICSIDEPTABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFCSICSIDEPTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFCSICSIDEPTABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFCSICSIDEPTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFCSICSIDEPTABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFCSICSIDEPTABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFCSICSIDEPTABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFCSICSIDEPTABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFCSICSIDEPTABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFCSICSIDEPTABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFCSICSIDEPTABLEProvObjectUpdate, clamfMgmtSAAMFCSICSIDEPTABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFCSICSIDEPTABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFCSICSIDEPTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFCSICSIDEPTABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFCSICSIDEPTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFCSICSIDEPTABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFCSICSIDEPTABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFCSICSIDEPTABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFCSICSIDEPTABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFCSINAMEVALUETABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFCSINAMEVALUETABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFCSINAMEVALUETABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFCSINAMEVALUETABLEProvUpdate, clamfMgmtSAAMFCSINAMEVALUETABLEProvRollback
 */
ClRcT clamfMgmtSAAMFCSINAMEVALUETABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFCSINAMEVALUETABLEProvValidate
 */
ClRcT clamfMgmtSAAMFCSINAMEVALUETABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFCSINAMEVALUETABLEProvValidate
 */
ClRcT clamfMgmtSAAMFCSINAMEVALUETABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFCSINAMEVALUETABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFCSINAMEVALUETABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFCSINAMEVALUETABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFCSINAMEVALUETABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFCSINAMEVALUETABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFCSINAMEVALUETABLEProvObjectUpdate, clamfMgmtSAAMFCSINAMEVALUETABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFCSINAMEVALUETABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFCSINAMEVALUETABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFCSINAMEVALUETABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFCSINAMEVALUETABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFCSINAMEVALUETABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFCSINAMEVALUETABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFCSINAMEVALUETABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFCSINAMEVALUETABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvUpdate, clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvRollback
 */
ClRcT clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvValidate
 */
ClRcT clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvValidate
 */
ClRcT clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvObjectUpdate, clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFCSTYPEATTRNAMETABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFSUSITABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFSUSITABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFSUSITABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSUSITABLEProvUpdate, clamfMgmtSAAMFSUSITABLEProvRollback
 */
ClRcT clamfMgmtSAAMFSUSITABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFSUSITABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSUSITABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSUSITABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSUSITABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFSUSITABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSUSITABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFSUSITABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFSUSITABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFSUSITABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFSUSITABLEProvObjectUpdate, clamfMgmtSAAMFSUSITABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFSUSITABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSUSITABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSUSITABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSUSITABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSUSITABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFSUSITABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSUSITABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFSUSITABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFHEALTHCHECKTABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFHEALTHCHECKTABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFHEALTHCHECKTABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFHEALTHCHECKTABLEProvUpdate, clamfMgmtSAAMFHEALTHCHECKTABLEProvRollback
 */
ClRcT clamfMgmtSAAMFHEALTHCHECKTABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFHEALTHCHECKTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFHEALTHCHECKTABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFHEALTHCHECKTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFHEALTHCHECKTABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFHEALTHCHECKTABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFHEALTHCHECKTABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFHEALTHCHECKTABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFHEALTHCHECKTABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFHEALTHCHECKTABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFHEALTHCHECKTABLEProvObjectUpdate, clamfMgmtSAAMFHEALTHCHECKTABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFHEALTHCHECKTABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFHEALTHCHECKTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFHEALTHCHECKTABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFHEALTHCHECKTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFHEALTHCHECKTABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFHEALTHCHECKTABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFHEALTHCHECKTABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFHEALTHCHECKTABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFSCOMPCSITABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFSCOMPCSITABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFSCOMPCSITABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSCOMPCSITABLEProvUpdate, clamfMgmtSAAMFSCOMPCSITABLEProvRollback
 */
ClRcT clamfMgmtSAAMFSCOMPCSITABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFSCOMPCSITABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSCOMPCSITABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSCOMPCSITABLEProvValidate
 */
ClRcT clamfMgmtSAAMFSCOMPCSITABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFSCOMPCSITABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSCOMPCSITABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFSCOMPCSITABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFSCOMPCSITABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFSCOMPCSITABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFSCOMPCSITABLEProvObjectUpdate, clamfMgmtSAAMFSCOMPCSITABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFSCOMPCSITABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSCOMPCSITABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSCOMPCSITABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSCOMPCSITABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSCOMPCSITABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFSCOMPCSITABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSCOMPCSITABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFSCOMPCSITABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFPROXYPROXIEDTABLEProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFPROXYPROXIEDTABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFPROXYPROXIEDTABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFPROXYPROXIEDTABLEProvUpdate, clamfMgmtSAAMFPROXYPROXIEDTABLEProvRollback
 */
ClRcT clamfMgmtSAAMFPROXYPROXIEDTABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFPROXYPROXIEDTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFPROXYPROXIEDTABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFPROXYPROXIEDTABLEProvValidate
 */
ClRcT clamfMgmtSAAMFPROXYPROXIEDTABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFPROXYPROXIEDTABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFPROXYPROXIEDTABLEProvObjectEnd
 *
 */
void clamfMgmtSAAMFPROXYPROXIEDTABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFPROXYPROXIEDTABLEProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFPROXYPROXIEDTABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFPROXYPROXIEDTABLEProvObjectUpdate, clamfMgmtSAAMFPROXYPROXIEDTABLEProvObjectRollback
 */
ClRcT clamfMgmtSAAMFPROXYPROXIEDTABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFPROXYPROXIEDTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFPROXYPROXIEDTABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFPROXYPROXIEDTABLEProvObjectValidate
 */
ClRcT clamfMgmtSAAMFPROXYPROXIEDTABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFPROXYPROXIEDTABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFPROXYPROXIEDTABLEProvObjectStart
 *
 */
void clamfMgmtSAAMFPROXYPROXIEDTABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFSCALARSProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFSCALARSProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFSCALARSProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSCALARSProvUpdate, clamfMgmtSAAMFSCALARSProvRollback
 */
ClRcT clamfMgmtSAAMFSCALARSProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFSCALARSProvValidate
 */
ClRcT clamfMgmtSAAMFSCALARSProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSCALARSProvValidate
 */
ClRcT clamfMgmtSAAMFSCALARSProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFSCALARSProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSCALARSProvObjectEnd
 *
 */
void clamfMgmtSAAMFSCALARSProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFSCALARSProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFSCALARSProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFSCALARSProvObjectUpdate, clamfMgmtSAAMFSCALARSProvObjectRollback
 */
ClRcT clamfMgmtSAAMFSCALARSProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFSCALARSProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSCALARSProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFSCALARSProvObjectValidate
 */
ClRcT clamfMgmtSAAMFSCALARSProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFSCALARSProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFSCALARSProvObjectStart
 *
 */
void clamfMgmtSAAMFSCALARSProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clamfMgmtSAAMFTRAPOBJECTProvUpdate() will be
 *  called otherwise clamfMgmtSAAMFTRAPOBJECTProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clamfMgmtSAAMFTRAPOBJECTProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFTRAPOBJECTProvUpdate, clamfMgmtSAAMFTRAPOBJECTProvRollback
 */
ClRcT clamfMgmtSAAMFTRAPOBJECTProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clamfMgmtSAAMFTRAPOBJECTProvValidate
 */
ClRcT clamfMgmtSAAMFTRAPOBJECTProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFTRAPOBJECTProvValidate
 */
ClRcT clamfMgmtSAAMFTRAPOBJECTProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clamfMgmtSAAMFTRAPOBJECTProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFTRAPOBJECTProvObjectEnd
 *
 */
void clamfMgmtSAAMFTRAPOBJECTProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clamfMgmtSAAMFTRAPOBJECTProvObjectUpdate() will be
 *  called otherwise clamfMgmtSAAMFTRAPOBJECTProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clamfMgmtSAAMFTRAPOBJECTProvObjectUpdate, clamfMgmtSAAMFTRAPOBJECTProvObjectRollback
 */
ClRcT clamfMgmtSAAMFTRAPOBJECTProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clamfMgmtSAAMFTRAPOBJECTProvObjectValidate
 */
ClRcT clamfMgmtSAAMFTRAPOBJECTProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clamfMgmtSAAMFTRAPOBJECTProvObjectValidate
 */
ClRcT clamfMgmtSAAMFTRAPOBJECTProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clamfMgmtSAAMFTRAPOBJECTProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clamfMgmtSAAMFTRAPOBJECTProvObjectStart
 *
 */
void clamfMgmtSAAMFTRAPOBJECTProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);



#ifdef __cplusplus
}
#endif                                                                                                                                                                           
                                                                                                                                                                                    
#endif /* _CL_AMFMGMT_OAMP_CONFIG_H_ */
