#!/bin/bash
#
##############################################################################
#
# autobuild
#
# Prerequisites:
# /bin/mail (part of mailx package on gentoo)
#
##############################################################################
# set -x

# Print a feedback if verbosity level is high enough
# Args: 1: The desired verbosity level
#       2: The actual message
#       3(optional): Log file to log the message
feedback () {
    if [ $verbosity -ge ${1} ]; then
        if [ ${3} ]; then
            echo "${2}" | tee -a -i ${3}
        else
            echo "${2}"
        fi
    fi
}

# Send email to the selected email list.
# Body of email comes from "log" file
# Args: 1: Subject line
sendmail() {
    if [ $# -lt 1 ]
    then
        echo "sendmail usage: sendmail subject"
        return 1
    fi

    SUBJ="autobuild: $1 (`date`)"
    #mail -s "${SUBJ}" ${EMAIL_LIST}
#    if ls $workdir/*.log 2>/dev/null; then
#        $autobuild_dir/sendmail.py $USER@$HOSTNAME.openclovis.com "$EMAIL_LIST" "$SUBJ" $log $workdir/*.log
#    else
#    fi
    env WORKDIR=$workdir EMAIL_LOG=$log BINDIR=$autobuild_dir $autobuild_dir/make_email_body.sh
    $autobuild_dir/sendmail.py $USER@$HOSTNAME.openclovis.com "$EMAIL_LIST" "$SUBJ" $workdir/email_body $workdir/history.png
    return 0
}

# finish_up
# - Send log message to email list if needed
# - Clean up work area
# - Exit with provided exit code
# Args: 1: Exit code (non-zero means failure)
#       2: Final synopsis
finish_up () {

    echo "${2}" | tee -a $log
    
    toclean=0
    case $CLEANUP_MODE in
        ONSUCCESS*)
            if [ ${1} == 0 ]; then
                toclean=1
            fi
            ;;
        ALWAYS*)
            toclean=1
        ;;
    esac
    if [ $toclean == 1 -a $do_not_clean == 0 ]; then
        rm -fr svn export
    fi
    bzip2 -f $detailed_log # overwrite existing file i any
    
    echo "See detailed log information on $BUILD_SERVER at $detailed_log.bz2" >> $log
    
    # If failure, check if previous run was a failure and supress email if it
    # was. Also, mark this falire in a stamp file
    if [ ${1} == 1 ]; then
        if [ -f /tmp/autobuild/last-failed-$BUILD_NAME ]; then
            send_mail=0
        fi
        echo $build_number > /tmp/autobuild/last-failed-$BUILD_NAME
    fi
    
    if [ $send_email == 1 ]; then
        feedback 1 "Sending status email out to ${EMAIL_LIST}" $log
        sendmail "${2}"
    fi
    exit ${1}
}   
    
##############################################################################
#
# Step 1: Initializing and command line parsing
#
##############################################################################

# Trapping some critical signals, so that the script stops promptly and
# with proper error message.
trap 'echo ***Error***: abnormal exit, packages not properly built.; \
    rm -f /tmp/autobuild/lock-$BUILD_NAME; \
    kill $pid; \
    exit 1' 1 2 3 15

script=`which $0`

usage () {
    echo "$(basename $0) - product distribution package generator"
    echo ""
    echo "Usage:"
    echo "    $(basename $0) -h"
    echo "    $(basename $0) [<options>] <autobuild-config-file>"
    echo ""
    echo "Where <options> are:"
    echo "    -h            - print this help text"
    echo "    -n            - supress email notifications"
    echo "    -r <rev>      - use this revision number for SVN checkout"
    echo "    -u            - unique mode: only build if SVN revision changed"
    echo "                    since last build"
    echo "    -v            - be more verbose"
    echo "    -q            - real quite mode"
    echo "    -l            - apply a lock so that only one build is happening"
    echo "                    on the same code line (BUILD_NAME) at a time"
    echo "    -c            - Do not clean up (override config file option)"
    echo "    -b <basedir>  - cd to this dir before running the autobuild"
    echo "The following options are used for debugging purpose:"
    echo "    -w <workdir>  - re-use this workdir and use svn update"
    echo "                    instead of snv checkout"
    echo "    -o            - work off-line; do not even contact the"
    echo "                    svn server. Use -w to specify workdir."
    echo ""
}

# Initialization
send_email=1            # send email notifications by default
rev=""                  # no rev by default
resource=""             # Autobuild config file, no meaningful default value
workdir=""
reuse=0                 # re-use workdir if this is set
verbosity=1             # Default verbosity is 1; use -q for real quite mode
offline=0               # Default is on-line
unique=0                # Don't check for uniqueness by default
use_lock=0              # No locks by default
build_number=""
log=/dev/null
last_build=""
pid=""
do_not_clean=0		# Overwrite config file option, and do not clean up
autobuild_dir=`pwd`	# By default this is being run from local dir. If not, use -b option

feedback 1 "$(basename $0) - The OpenClovis auto packager - Copyright 2007"

# Command line parsing

while getopts :hnr:vb:w:qoulc options; do
    case $options in
        h)
            usage
            exit 0
            ;;
        n)
            send_email=0
            ;;
        r)
            rev=$OPTARG
            ;;
        w)
            reuse=1
            workdir=$OPTARG
            ;;
	b)
	    autobuild_dir=$OPTARG
	    cd $OPTARG
	    ;;
        o)
            offline=1
            ;;
        u)
            unique=1
            ;;
        l)
            use_lock=1
            ;;
        c)
            do_not_clean=1
            ;;
        v)
            verbosity=$(( $verbosity + 1 ))
            ;;
        q)
            verbosity=0
            ;;
        ?)
            echo "***Error***: Invalid argument, type $(basename $0) -h for help"; exit 1
            ;;
    esac
done
shift $(( $OPTIND - 1 ))

if [ $offline == 1 -a -z "$workdir" ]; then
    echo "***Error***: -o requires -w too"
    usage
    exit 1
fi

if [ $# == 1 ]; then
    resource=$1
else
    usage
    exit 1
fi

##############################################################################
#
# Step 2: Parsing the config file
#
##############################################################################

# Verify that package descriptor file exists, and source it if it does

if [ -f $resource ]; then
    source $resource
else
    echo "***Error***: file $resource does not exist"
fi

source $resource
feedback 1 "Config file used:  $resource"
 
# Processing the content of the file

if [ $send_email == 1 ]; then
    if [ ! "$EMAIL_LIST" ]; then
        send_email=0
    fi
fi

if [ ! $rev ]; then
    if [ $SVN_REV ]; then
        rev=$SVN_REV
    fi
fi

if [ $use_lock == 1 ]; then
    if [ -d /tmp/autobuild -a -f /tmp/autobuild/lock-$BUILD_NAME ]; then
        # check if process is still alive
        if ps -p `cat /tmp/autobuild/lock-$BUILD_NAME` > /dev/null; then
            echo "Previous build script still alive for $BUILD_NAME; aborting"
            # also log this in system log, so there are some records
            logger "autobuild: deferred build for $BUILD_NAME due to lock"
            exit 1
        fi
    fi
    mkdir -p /tmp/autobuild
    echo $$ > /tmp/autobuild/lock-$BUILD_NAME
fi

if [ "$unique" == 1 -a ! "$rev" -a -f /tmp/autobuild/last-$BUILD_NAME ]; then
    feedback 1 "Checking for uniqueness of build"
    last_build=`cat /tmp/autobuild/last-$BUILD_NAME`
    feedback 1 "Last build was: $last_build"
    # check for head revision unless $rev is already specified
    headrev=`svn info $SVN_URL/$SVN_PATH | awk '/^Last Changed Rev/{print $4}'`
    if [ "$last_build" == "$headrev" ]; then
        echo "Current head revision of selected tree is same as last successful build; aborting"
        # also log this in system log, so there are some records
        logger "autobuild: deferred build due to no change to $BUILD_NAME (build=$last_build)"
        exit 1
    fi
    feedback 1 "New head revision is unique: $headrev"
fi

##############################################################################
#
# Step 3: Generate working dir and log file
#
##############################################################################

if [ ! $workdir ]; then
    workdir=$WORK_DIR/$BUILD_NAME/`date +%F-%H-%M`

    if [ -d $workdir ]; then
        finish_up 1 "***Error***: Work dir $workdir exists; cannot proceed"
    fi

    if ! mkdir -p $workdir; then
        finish_up 1 "***Error***: Could not create $workdir; cannot proceed"
    fi
    feedback 2 "Created work dir $workdir" $log
else
    if [ ! -d $workdir ]; then
        finish_up 1 "***Error***: Dir $workdir does not exist"
    fi
fi

log="$workdir/log"
detailed_log="$workdir/detailed-log"

if ! echo -n "" > $log; then
    finish_up 1 "***Error***: Could not create/reset log file $log; cannot proceed"
fi

if ! echo > $detailed_log; then
    finish_up 1 "***Error***: Could not create/reset log file $detailed_log; cannot proceed"
fi

echo "This autobuild status report is brought to you by C3PO" >> $log
#echo >> $log

feedback 2 "Starting autobuild on $BUILD_SERVER at $workdir" $log

feedback 2 "Working directory: $workdir"
feedback 2 "Summary log file:  $log" $log
feedback 2 "Detailed log file: $detailed_log" $log
feedback 2 "Verbosity level:   $verbosity" $log
feedback 2 "Requested rev:     $rev" $log

curdir=$PWD
cd $workdir

##############################################################################
#
# Step 4: Check-out tree from svn (except if off-line mode is set)
#
##############################################################################

echo "Started autobuild" >> $detailed_log

if [ $offline == 0 ]; then

    if [ $reuse == 0 ]; then
        mkdir svn 2> /dev/null
        svn_cmd="svn co $SVN_URL/$SVN_PATH --username=$SVN_USER"
        if [ $SVN_PASSWD ]; then
            svn_cmd="$svn_cmd --password=$SVN_PASSWD"
        fi
    else
        svn_cmd="svn update"
    fi

    if [ $rev ]; then
        svn_cmd="$svn_cmd -r $rev"
    fi

    svn_cmd="$svn_cmd svn"

    feedback 2 "Checking out/updating SVN tree ..." $log
    feedback 3 "== svn command: $svn_cmd ..." $log

    echo "=======================================================" >> $detailed_log
    echo "| SVN checkout/update                                 |" >> $detailed_log
    echo "=======================================================" >> $detailed_log

    tail -n 0 -f $detailed_log &
    pid=$!
    $svn_cmd >> $detailed_log 2>&1
    if [ $? -ne 0 ]; then
        kill $pid
        finish_up 1 "***Error***: SVN checkout/update failed; aborting"
    fi
    kill $pid

    feedback 2 "SVN tree checkout/update completed" $log

else # off-line mode

    # check if svn dir exists and if it has been modified locally since last update/checout
    if [ ! -d svn ]; then
        finish_up 1 "***Error***: svn subdir does not exist; aborting"
    fi
    if svn info log ; then
        finish_up 1 "***Error***: svn is not an actual svn-managed subdir"
    fi
    if [ `svn diff svn | wc -l` -ne 0 ]; then
        build_number="private"
    fi
fi

# Actual revision will be the build number
if [ -z "$build_number" ]; then
    build_number=`svn info svn | awk '/^Last Changed Rev/{print $4}'`
fi

feedback 1 "Build number (rev): $build_number" $log
feedback 1 "" $log

# If this is a unique build (-u) and found last_build number, we
# collect change information.
if [ $last_build ]; then
    feedback 1 'Changes since last build:' $log
    feedback 1 '=========================' $log
    let last_build++
    svn log -r $last_build:$build_number -v svn | tee -a -i $log
fi


##############################################################################
#
# Step 5: Run make pkg in the checked out tree. This will create the
#         exportable tarballs and any other release files
#
##############################################################################

feedback 2 "Initiating 'make pkg' on tree" $log

mkdir -p $workdir/export
make_cmd="env EXPORT_DIR=$workdir/export BUILD_NUMBER=$build_number make -C svn pkg"
feedback 3 "== make command: $make_cmd" $log

echo "=======================================================" >> $detailed_log
echo "| make pkg                                            |" >> $detailed_log
echo "=======================================================" >> $detailed_log

tail -n 0 -f $detailed_log &
pid=$!
$make_cmd >> $detailed_log 2>&1
if [ $? -ne 0 ]; then
    kill $pid
    finish_up 1 "***Error***: 'make pkg' failed; aborting"
fi
kill $pid

feedback 1 "Files created:" $log
feedback 1 "`(cd $workdir/export/; md5sum *)`" $log

##############################################################################
#
# Step 6: Upload generated file to release file server
#
##############################################################################

# check if there is something to be uploaded
if [ `ls export | wc -l` -ne 0 ]; then
    feedback 2 "Files created:" $log
    feedback 2 "`(cd export; du -sh *)`" $log
    if [ $RELEASE_DEST ]; then
        feedback 1 "Uploading files to $RELEASE_DEST" $log
        rsync --progress -e ssh -avDH export/ $RELEASE_DEST | tee -a $detailed_log
        feedback 1 "Files uploaded to release server" $log
    else
        feedback 1 "No destionation specified; nothing is uploaded" $log
    fi
else
    finish_up 1 "***Error***: 'make pkg' did not create files in $workdir/export"
fi

##############################################################################
#
# Step 7: Clean up, send email summary, and kick off follow-up command
#
##############################################################################

if [ "$PRECLEANUP_CMD" ]; then
    feedback 1 "Executing pre-cleanup script $PRECLEANUP_CMD..." $log
    ( cd $curdir; \
        export SVN_PATH BUILD_NAME WORKDIR=$workdir BUILD_NUMBER=$build_number; \
        $PRECLEANUP_CMD | tee -a $detailed_log )
fi

if [ "$FOLLOWUP_CMD" ]; then
    feedback 1 "" $log
    feedback 1 "Executing follow-up script $FOLLOWUP_CMD..." $log
    ( cd $curdir; \
        export SVN_PATH BUILD_NAME WORKDIR=$workdir EMAIL_LOG=$log DETAILED_LOG=$detailed_log BUILD_NUMBER=$build_number; \
        $FOLLOWUP_CMD; )
    rc=$?
    echo "Return code from follow-up: $rc"
    if [ $rc != 0 ]; then
      finish_up 1 "***Error***: One or more TAE test runs failed to complete"
    fi
fi

if [ "$build_number" != "private" ]; then
    mkdir -p /tmp/autobuild
    echo $build_number > /tmp/autobuild/last-$BUILD_NAME
    # reset last failure file
    rm -f /tmp/autobuild/last-failed-$BUILD_NAME
fi

rm -f /tmp/autobuild/lock-$BUILD_NAME

feedback 1 "" $log

finish_up 0 "Success: Release $BUILD_NAME ($build_number) built"
# never reach here
