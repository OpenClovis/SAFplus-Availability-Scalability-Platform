// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcEvent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpcEvent.pb.hxx"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SAFplus {
namespace Rpc {
namespace rpcEvent {

namespace {

const ::google::protobuf::Descriptor* Handle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Handle_reflection_ = NULL;
const ::google::protobuf::Descriptor* eventChannelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eventChannelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* eventPublishRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eventPublishRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* eventRequestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eventRequestResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* eventGetActiveServerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eventGetActiveServerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NO_REQUEST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NO_REQUEST_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpcEvent_2eproto() {
  protobuf_AddDesc_rpcEvent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpcEvent.proto");
  GOOGLE_CHECK(file != NULL);
  Handle_descriptor_ = file->message_type(0);
  static const int Handle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handle, id0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handle, id1_),
  };
  Handle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Handle_descriptor_,
      Handle::default_instance_,
      Handle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Handle));
  eventChannelRequest_descriptor_ = file->message_type(1);
  static const int eventChannelRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventChannelRequest, clienthandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventChannelRequest, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventChannelRequest, channelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventChannelRequest, scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventChannelRequest, type_),
  };
  eventChannelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eventChannelRequest_descriptor_,
      eventChannelRequest::default_instance_,
      eventChannelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventChannelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventChannelRequest, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventChannelRequest, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eventChannelRequest));
  eventPublishRequest_descriptor_ = file->message_type(2);
  static const int eventPublishRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventPublishRequest, clienthandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventPublishRequest, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventPublishRequest, channelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventPublishRequest, scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventPublishRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventPublishRequest, data_),
  };
  eventPublishRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eventPublishRequest_descriptor_,
      eventPublishRequest::default_instance_,
      eventPublishRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventPublishRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventPublishRequest, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventPublishRequest, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eventPublishRequest));
  eventRequestResponse_descriptor_ = file->message_type(3);
  static const int eventRequestResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventRequestResponse, saerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventRequestResponse, errstr_),
  };
  eventRequestResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eventRequestResponse_descriptor_,
      eventRequestResponse::default_instance_,
      eventRequestResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventRequestResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventRequestResponse, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventRequestResponse, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eventRequestResponse));
  eventGetActiveServerResponse_descriptor_ = file->message_type(4);
  static const int eventGetActiveServerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventGetActiveServerResponse, activeserver_),
  };
  eventGetActiveServerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eventGetActiveServerResponse_descriptor_,
      eventGetActiveServerResponse::default_instance_,
      eventGetActiveServerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventGetActiveServerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventGetActiveServerResponse, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eventGetActiveServerResponse, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eventGetActiveServerResponse));
  NO_REQUEST_descriptor_ = file->message_type(5);
  static const int NO_REQUEST_offsets_[1] = {
  };
  NO_REQUEST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NO_REQUEST_descriptor_,
      NO_REQUEST::default_instance_,
      NO_REQUEST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NO_REQUEST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NO_REQUEST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NO_REQUEST));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpcEvent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Handle_descriptor_, &Handle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eventChannelRequest_descriptor_, &eventChannelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eventPublishRequest_descriptor_, &eventPublishRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eventRequestResponse_descriptor_, &eventRequestResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eventGetActiveServerResponse_descriptor_, &eventGetActiveServerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NO_REQUEST_descriptor_, &NO_REQUEST::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpcEvent_2eproto() {
  delete Handle::default_instance_;
  delete Handle_reflection_;
  delete eventChannelRequest::default_instance_;
  delete eventChannelRequest_reflection_;
  delete eventPublishRequest::default_instance_;
  delete eventPublishRequest_reflection_;
  delete eventRequestResponse::default_instance_;
  delete eventRequestResponse_reflection_;
  delete eventGetActiveServerResponse::default_instance_;
  delete eventGetActiveServerResponse_reflection_;
  delete NO_REQUEST::default_instance_;
  delete NO_REQUEST_reflection_;
}

void protobuf_AddDesc_rpcEvent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016rpcEvent.proto\022\024SAFplus.Rpc.rpcEvent\"\""
    "\n\006Handle\022\013\n\003id0\030\001 \002(\006\022\013\n\003id1\030\002 \002(\006\"\231\001\n\023e"
    "ventChannelRequest\0222\n\014clientHandle\030\001 \002(\013"
    "2\034.SAFplus.Rpc.rpcEvent.Handle\022\021\n\tchanne"
    "lId\030\002 \002(\004\022\023\n\013channelName\030\003 \002(\t\022\r\n\005scope\030"
    "\004 \002(\005\022\014\n\004type\030\005 \002(\005*\t\010\350\007\020\200\200\200\200\002\"\247\001\n\023event"
    "PublishRequest\0222\n\014clientHandle\030\001 \002(\0132\034.S"
    "AFplus.Rpc.rpcEvent.Handle\022\021\n\tchannelId\030"
    "\002 \002(\004\022\023\n\013channelName\030\003 \002(\t\022\r\n\005scope\030\004 \002("
    "\005\022\014\n\004type\030\005 \002(\005\022\014\n\004data\030\006 \002(\t*\t\010\350\007\020\200\200\200\200\002"
    "\"B\n\024eventRequestResponse\022\017\n\007saError\030\001 \001("
    "\005\022\016\n\006errStr\030\002 \001(\t*\t\010\350\007\020\200\200\200\200\002\"]\n\034eventGet"
    "ActiveServerResponse\0222\n\014activeServer\030\001 \002"
    "(\0132\034.SAFplus.Rpc.rpcEvent.Handle*\t\010\350\007\020\200\200"
    "\200\200\002\"\014\n\nNO_REQUEST2\330\002\n\010rpcEvent\022n\n\025eventC"
    "hannelRpcMethod\022).SAFplus.Rpc.rpcEvent.e"
    "ventChannelRequest\032*.SAFplus.Rpc.rpcEven"
    "t.eventRequestResponse\022n\n\025eventPublishRp"
    "cMethod\022).SAFplus.Rpc.rpcEvent.eventPubl"
    "ishRequest\032*.SAFplus.Rpc.rpcEvent.eventR"
    "equestResponse\022l\n\024eventGetActiveServer\022 "
    ".SAFplus.Rpc.rpcEvent.NO_REQUEST\0322.SAFpl"
    "us.Rpc.rpcEvent.eventGetActiveServerResp"
    "onseB\t\200\001\000\210\001\000\220\001\001", 935);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpcEvent.proto", &protobuf_RegisterTypes);
  Handle::default_instance_ = new Handle();
  eventChannelRequest::default_instance_ = new eventChannelRequest();
  eventPublishRequest::default_instance_ = new eventPublishRequest();
  eventRequestResponse::default_instance_ = new eventRequestResponse();
  eventGetActiveServerResponse::default_instance_ = new eventGetActiveServerResponse();
  NO_REQUEST::default_instance_ = new NO_REQUEST();
  Handle::default_instance_->InitAsDefaultInstance();
  eventChannelRequest::default_instance_->InitAsDefaultInstance();
  eventPublishRequest::default_instance_->InitAsDefaultInstance();
  eventRequestResponse::default_instance_->InitAsDefaultInstance();
  eventGetActiveServerResponse::default_instance_->InitAsDefaultInstance();
  NO_REQUEST::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpcEvent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpcEvent_2eproto {
  StaticDescriptorInitializer_rpcEvent_2eproto() {
    protobuf_AddDesc_rpcEvent_2eproto();
  }
} static_descriptor_initializer_rpcEvent_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Handle::kId0FieldNumber;
const int Handle::kId1FieldNumber;
#endif  // !_MSC_VER

Handle::Handle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcEvent.Handle)
}

void Handle::InitAsDefaultInstance() {
}

Handle::Handle(const Handle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcEvent.Handle)
}

void Handle::SharedCtor() {
  _cached_size_ = 0;
  id0_ = GOOGLE_ULONGLONG(0);
  id1_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Handle::~Handle() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcEvent.Handle)
  SharedDtor();
}

void Handle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Handle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Handle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Handle_descriptor_;
}

const Handle& Handle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcEvent_2eproto();
  return *default_instance_;
}

Handle* Handle::default_instance_ = NULL;

Handle* Handle::New() const {
  return new Handle;
}

void Handle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Handle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id0_, id1_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Handle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcEvent.Handle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 id0 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id0_)));
          set_has_id0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_id1;
        break;
      }

      // required fixed64 id1 = 2;
      case 2: {
        if (tag == 17) {
         parse_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id1_)));
          set_has_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcEvent.Handle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcEvent.Handle)
  return false;
#undef DO_
}

void Handle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcEvent.Handle)
  // required fixed64 id0 = 1;
  if (has_id0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id0(), output);
  }

  // required fixed64 id1 = 2;
  if (has_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->id1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcEvent.Handle)
}

::google::protobuf::uint8* Handle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcEvent.Handle)
  // required fixed64 id0 = 1;
  if (has_id0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id0(), target);
  }

  // required fixed64 id1 = 2;
  if (has_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->id1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcEvent.Handle)
  return target;
}

int Handle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 id0 = 1;
    if (has_id0()) {
      total_size += 1 + 8;
    }

    // required fixed64 id1 = 2;
    if (has_id1()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Handle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Handle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Handle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Handle::MergeFrom(const Handle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id0()) {
      set_id0(from.id0());
    }
    if (from.has_id1()) {
      set_id1(from.id1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Handle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handle::CopyFrom(const Handle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Handle::Swap(Handle* other) {
  if (other != this) {
    std::swap(id0_, other->id0_);
    std::swap(id1_, other->id1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Handle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Handle_descriptor_;
  metadata.reflection = Handle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eventChannelRequest::kClientHandleFieldNumber;
const int eventChannelRequest::kChannelIdFieldNumber;
const int eventChannelRequest::kChannelNameFieldNumber;
const int eventChannelRequest::kScopeFieldNumber;
const int eventChannelRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

eventChannelRequest::eventChannelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcEvent.eventChannelRequest)
}

void eventChannelRequest::InitAsDefaultInstance() {
  clienthandle_ = const_cast< ::SAFplus::Rpc::rpcEvent::Handle*>(&::SAFplus::Rpc::rpcEvent::Handle::default_instance());
}

eventChannelRequest::eventChannelRequest(const eventChannelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcEvent.eventChannelRequest)
}

void eventChannelRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clienthandle_ = NULL;
  channelid_ = GOOGLE_ULONGLONG(0);
  channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scope_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eventChannelRequest::~eventChannelRequest() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcEvent.eventChannelRequest)
  SharedDtor();
}

void eventChannelRequest::SharedDtor() {
  if (channelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelname_;
  }
  if (this != default_instance_) {
    delete clienthandle_;
  }
}

void eventChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eventChannelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eventChannelRequest_descriptor_;
}

const eventChannelRequest& eventChannelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcEvent_2eproto();
  return *default_instance_;
}

eventChannelRequest* eventChannelRequest::default_instance_ = NULL;

eventChannelRequest* eventChannelRequest::New() const {
  return new eventChannelRequest;
}

void eventChannelRequest::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<eventChannelRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(scope_, type_);
    if (has_clienthandle()) {
      if (clienthandle_ != NULL) clienthandle_->::SAFplus::Rpc::rpcEvent::Handle::Clear();
    }
    channelid_ = GOOGLE_ULONGLONG(0);
    if (has_channelname()) {
      if (channelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channelname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eventChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcEvent.eventChannelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SAFplus.Rpc.rpcEvent.Handle clientHandle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clienthandle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channelId;
        break;
      }

      // required uint64 channelId = 2;
      case 2: {
        if (tag == 16) {
         parse_channelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelName;
        break;
      }

      // required string channelName = 3;
      case 3: {
        if (tag == 26) {
         parse_channelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelname().data(), this->channelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channelname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_scope;
        break;
      }

      // required int32 scope = 4;
      case 4: {
        if (tag == 32) {
         parse_scope:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scope_)));
          set_has_scope();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required int32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcEvent.eventChannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcEvent.eventChannelRequest)
  return false;
#undef DO_
}

void eventChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcEvent.eventChannelRequest)
  // required .SAFplus.Rpc.rpcEvent.Handle clientHandle = 1;
  if (has_clienthandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clienthandle(), output);
  }

  // required uint64 channelId = 2;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->channelid(), output);
  }

  // required string channelName = 3;
  if (has_channelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelname(), output);
  }

  // required int32 scope = 4;
  if (has_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scope(), output);
  }

  // required int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcEvent.eventChannelRequest)
}

::google::protobuf::uint8* eventChannelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcEvent.eventChannelRequest)
  // required .SAFplus.Rpc.rpcEvent.Handle clientHandle = 1;
  if (has_clienthandle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->clienthandle(), target);
  }

  // required uint64 channelId = 2;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->channelid(), target);
  }

  // required string channelName = 3;
  if (has_channelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channelname(), target);
  }

  // required int32 scope = 4;
  if (has_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scope(), target);
  }

  // required int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcEvent.eventChannelRequest)
  return target;
}

int eventChannelRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SAFplus.Rpc.rpcEvent.Handle clientHandle = 1;
    if (has_clienthandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clienthandle());
    }

    // required uint64 channelId = 2;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channelid());
    }

    // required string channelName = 3;
    if (has_channelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelname());
    }

    // required int32 scope = 4;
    if (has_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scope());
    }

    // required int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eventChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eventChannelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eventChannelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eventChannelRequest::MergeFrom(const eventChannelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clienthandle()) {
      mutable_clienthandle()->::SAFplus::Rpc::rpcEvent::Handle::MergeFrom(from.clienthandle());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_channelname()) {
      set_channelname(from.channelname());
    }
    if (from.has_scope()) {
      set_scope(from.scope());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eventChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eventChannelRequest::CopyFrom(const eventChannelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eventChannelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_clienthandle()) {
    if (!this->clienthandle().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void eventChannelRequest::Swap(eventChannelRequest* other) {
  if (other != this) {
    std::swap(clienthandle_, other->clienthandle_);
    std::swap(channelid_, other->channelid_);
    std::swap(channelname_, other->channelname_);
    std::swap(scope_, other->scope_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata eventChannelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eventChannelRequest_descriptor_;
  metadata.reflection = eventChannelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eventPublishRequest::kClientHandleFieldNumber;
const int eventPublishRequest::kChannelIdFieldNumber;
const int eventPublishRequest::kChannelNameFieldNumber;
const int eventPublishRequest::kScopeFieldNumber;
const int eventPublishRequest::kTypeFieldNumber;
const int eventPublishRequest::kDataFieldNumber;
#endif  // !_MSC_VER

eventPublishRequest::eventPublishRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcEvent.eventPublishRequest)
}

void eventPublishRequest::InitAsDefaultInstance() {
  clienthandle_ = const_cast< ::SAFplus::Rpc::rpcEvent::Handle*>(&::SAFplus::Rpc::rpcEvent::Handle::default_instance());
}

eventPublishRequest::eventPublishRequest(const eventPublishRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcEvent.eventPublishRequest)
}

void eventPublishRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clienthandle_ = NULL;
  channelid_ = GOOGLE_ULONGLONG(0);
  channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scope_ = 0;
  type_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eventPublishRequest::~eventPublishRequest() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcEvent.eventPublishRequest)
  SharedDtor();
}

void eventPublishRequest::SharedDtor() {
  if (channelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelname_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
    delete clienthandle_;
  }
}

void eventPublishRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eventPublishRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eventPublishRequest_descriptor_;
}

const eventPublishRequest& eventPublishRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcEvent_2eproto();
  return *default_instance_;
}

eventPublishRequest* eventPublishRequest::default_instance_ = NULL;

eventPublishRequest* eventPublishRequest::New() const {
  return new eventPublishRequest;
}

void eventPublishRequest::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<eventPublishRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(scope_, type_);
    if (has_clienthandle()) {
      if (clienthandle_ != NULL) clienthandle_->::SAFplus::Rpc::rpcEvent::Handle::Clear();
    }
    channelid_ = GOOGLE_ULONGLONG(0);
    if (has_channelname()) {
      if (channelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channelname_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eventPublishRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcEvent.eventPublishRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SAFplus.Rpc.rpcEvent.Handle clientHandle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clienthandle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channelId;
        break;
      }

      // required uint64 channelId = 2;
      case 2: {
        if (tag == 16) {
         parse_channelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelName;
        break;
      }

      // required string channelName = 3;
      case 3: {
        if (tag == 26) {
         parse_channelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channelname().data(), this->channelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channelname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_scope;
        break;
      }

      // required int32 scope = 4;
      case 4: {
        if (tag == 32) {
         parse_scope:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scope_)));
          set_has_scope();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required int32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // required string data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcEvent.eventPublishRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcEvent.eventPublishRequest)
  return false;
#undef DO_
}

void eventPublishRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcEvent.eventPublishRequest)
  // required .SAFplus.Rpc.rpcEvent.Handle clientHandle = 1;
  if (has_clienthandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clienthandle(), output);
  }

  // required uint64 channelId = 2;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->channelid(), output);
  }

  // required string channelName = 3;
  if (has_channelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelname(), output);
  }

  // required int32 scope = 4;
  if (has_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scope(), output);
  }

  // required int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // required string data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->data(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcEvent.eventPublishRequest)
}

::google::protobuf::uint8* eventPublishRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcEvent.eventPublishRequest)
  // required .SAFplus.Rpc.rpcEvent.Handle clientHandle = 1;
  if (has_clienthandle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->clienthandle(), target);
  }

  // required uint64 channelId = 2;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->channelid(), target);
  }

  // required string channelName = 3;
  if (has_channelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channelname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channelname(), target);
  }

  // required int32 scope = 4;
  if (has_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scope(), target);
  }

  // required int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // required string data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->data(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcEvent.eventPublishRequest)
  return target;
}

int eventPublishRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SAFplus.Rpc.rpcEvent.Handle clientHandle = 1;
    if (has_clienthandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clienthandle());
    }

    // required uint64 channelId = 2;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channelid());
    }

    // required string channelName = 3;
    if (has_channelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelname());
    }

    // required int32 scope = 4;
    if (has_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scope());
    }

    // required int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eventPublishRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eventPublishRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eventPublishRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eventPublishRequest::MergeFrom(const eventPublishRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clienthandle()) {
      mutable_clienthandle()->::SAFplus::Rpc::rpcEvent::Handle::MergeFrom(from.clienthandle());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_channelname()) {
      set_channelname(from.channelname());
    }
    if (from.has_scope()) {
      set_scope(from.scope());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eventPublishRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eventPublishRequest::CopyFrom(const eventPublishRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eventPublishRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_clienthandle()) {
    if (!this->clienthandle().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void eventPublishRequest::Swap(eventPublishRequest* other) {
  if (other != this) {
    std::swap(clienthandle_, other->clienthandle_);
    std::swap(channelid_, other->channelid_);
    std::swap(channelname_, other->channelname_);
    std::swap(scope_, other->scope_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata eventPublishRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eventPublishRequest_descriptor_;
  metadata.reflection = eventPublishRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eventRequestResponse::kSaErrorFieldNumber;
const int eventRequestResponse::kErrStrFieldNumber;
#endif  // !_MSC_VER

eventRequestResponse::eventRequestResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcEvent.eventRequestResponse)
}

void eventRequestResponse::InitAsDefaultInstance() {
}

eventRequestResponse::eventRequestResponse(const eventRequestResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcEvent.eventRequestResponse)
}

void eventRequestResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  saerror_ = 0;
  errstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eventRequestResponse::~eventRequestResponse() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcEvent.eventRequestResponse)
  SharedDtor();
}

void eventRequestResponse::SharedDtor() {
  if (errstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errstr_;
  }
  if (this != default_instance_) {
  }
}

void eventRequestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eventRequestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eventRequestResponse_descriptor_;
}

const eventRequestResponse& eventRequestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcEvent_2eproto();
  return *default_instance_;
}

eventRequestResponse* eventRequestResponse::default_instance_ = NULL;

eventRequestResponse* eventRequestResponse::New() const {
  return new eventRequestResponse;
}

void eventRequestResponse::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 3) {
    saerror_ = 0;
    if (has_errstr()) {
      if (errstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eventRequestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcEvent.eventRequestResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 saError = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &saerror_)));
          set_has_saerror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errStr;
        break;
      }

      // optional string errStr = 2;
      case 2: {
        if (tag == 18) {
         parse_errStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errstr().data(), this->errstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcEvent.eventRequestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcEvent.eventRequestResponse)
  return false;
#undef DO_
}

void eventRequestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcEvent.eventRequestResponse)
  // optional int32 saError = 1;
  if (has_saerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->saerror(), output);
  }

  // optional string errStr = 2;
  if (has_errstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errstr().data(), this->errstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errstr(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcEvent.eventRequestResponse)
}

::google::protobuf::uint8* eventRequestResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcEvent.eventRequestResponse)
  // optional int32 saError = 1;
  if (has_saerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->saerror(), target);
  }

  // optional string errStr = 2;
  if (has_errstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errstr().data(), this->errstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errstr(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcEvent.eventRequestResponse)
  return target;
}

int eventRequestResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 saError = 1;
    if (has_saerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->saerror());
    }

    // optional string errStr = 2;
    if (has_errstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errstr());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eventRequestResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eventRequestResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eventRequestResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eventRequestResponse::MergeFrom(const eventRequestResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saerror()) {
      set_saerror(from.saerror());
    }
    if (from.has_errstr()) {
      set_errstr(from.errstr());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eventRequestResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eventRequestResponse::CopyFrom(const eventRequestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eventRequestResponse::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void eventRequestResponse::Swap(eventRequestResponse* other) {
  if (other != this) {
    std::swap(saerror_, other->saerror_);
    std::swap(errstr_, other->errstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata eventRequestResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eventRequestResponse_descriptor_;
  metadata.reflection = eventRequestResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eventGetActiveServerResponse::kActiveServerFieldNumber;
#endif  // !_MSC_VER

eventGetActiveServerResponse::eventGetActiveServerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcEvent.eventGetActiveServerResponse)
}

void eventGetActiveServerResponse::InitAsDefaultInstance() {
  activeserver_ = const_cast< ::SAFplus::Rpc::rpcEvent::Handle*>(&::SAFplus::Rpc::rpcEvent::Handle::default_instance());
}

eventGetActiveServerResponse::eventGetActiveServerResponse(const eventGetActiveServerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcEvent.eventGetActiveServerResponse)
}

void eventGetActiveServerResponse::SharedCtor() {
  _cached_size_ = 0;
  activeserver_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eventGetActiveServerResponse::~eventGetActiveServerResponse() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcEvent.eventGetActiveServerResponse)
  SharedDtor();
}

void eventGetActiveServerResponse::SharedDtor() {
  if (this != default_instance_) {
    delete activeserver_;
  }
}

void eventGetActiveServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eventGetActiveServerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eventGetActiveServerResponse_descriptor_;
}

const eventGetActiveServerResponse& eventGetActiveServerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcEvent_2eproto();
  return *default_instance_;
}

eventGetActiveServerResponse* eventGetActiveServerResponse::default_instance_ = NULL;

eventGetActiveServerResponse* eventGetActiveServerResponse::New() const {
  return new eventGetActiveServerResponse;
}

void eventGetActiveServerResponse::Clear() {
  _extensions_.Clear();
  if (has_activeserver()) {
    if (activeserver_ != NULL) activeserver_->::SAFplus::Rpc::rpcEvent::Handle::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eventGetActiveServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcEvent.eventGetActiveServerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SAFplus.Rpc.rpcEvent.Handle activeServer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activeserver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcEvent.eventGetActiveServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcEvent.eventGetActiveServerResponse)
  return false;
#undef DO_
}

void eventGetActiveServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcEvent.eventGetActiveServerResponse)
  // required .SAFplus.Rpc.rpcEvent.Handle activeServer = 1;
  if (has_activeserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activeserver(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcEvent.eventGetActiveServerResponse)
}

::google::protobuf::uint8* eventGetActiveServerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcEvent.eventGetActiveServerResponse)
  // required .SAFplus.Rpc.rpcEvent.Handle activeServer = 1;
  if (has_activeserver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activeserver(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcEvent.eventGetActiveServerResponse)
  return target;
}

int eventGetActiveServerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SAFplus.Rpc.rpcEvent.Handle activeServer = 1;
    if (has_activeserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activeserver());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eventGetActiveServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eventGetActiveServerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eventGetActiveServerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eventGetActiveServerResponse::MergeFrom(const eventGetActiveServerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeserver()) {
      mutable_activeserver()->::SAFplus::Rpc::rpcEvent::Handle::MergeFrom(from.activeserver());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eventGetActiveServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eventGetActiveServerResponse::CopyFrom(const eventGetActiveServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eventGetActiveServerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_activeserver()) {
    if (!this->activeserver().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void eventGetActiveServerResponse::Swap(eventGetActiveServerResponse* other) {
  if (other != this) {
    std::swap(activeserver_, other->activeserver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata eventGetActiveServerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eventGetActiveServerResponse_descriptor_;
  metadata.reflection = eventGetActiveServerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NO_REQUEST::NO_REQUEST()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcEvent.NO_REQUEST)
}

void NO_REQUEST::InitAsDefaultInstance() {
}

NO_REQUEST::NO_REQUEST(const NO_REQUEST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcEvent.NO_REQUEST)
}

void NO_REQUEST::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NO_REQUEST::~NO_REQUEST() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcEvent.NO_REQUEST)
  SharedDtor();
}

void NO_REQUEST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NO_REQUEST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NO_REQUEST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NO_REQUEST_descriptor_;
}

const NO_REQUEST& NO_REQUEST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcEvent_2eproto();
  return *default_instance_;
}

NO_REQUEST* NO_REQUEST::default_instance_ = NULL;

NO_REQUEST* NO_REQUEST::New() const {
  return new NO_REQUEST;
}

void NO_REQUEST::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NO_REQUEST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcEvent.NO_REQUEST)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcEvent.NO_REQUEST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcEvent.NO_REQUEST)
  return false;
#undef DO_
}

void NO_REQUEST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcEvent.NO_REQUEST)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcEvent.NO_REQUEST)
}

::google::protobuf::uint8* NO_REQUEST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcEvent.NO_REQUEST)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcEvent.NO_REQUEST)
  return target;
}

int NO_REQUEST::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NO_REQUEST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NO_REQUEST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NO_REQUEST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NO_REQUEST::MergeFrom(const NO_REQUEST& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NO_REQUEST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NO_REQUEST::CopyFrom(const NO_REQUEST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NO_REQUEST::IsInitialized() const {

  return true;
}

void NO_REQUEST::Swap(NO_REQUEST* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NO_REQUEST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NO_REQUEST_descriptor_;
  metadata.reflection = NO_REQUEST_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcEvent
}  // namespace Rpc
}  // namespace SAFplus

// @@protoc_insertion_point(global_scope)
