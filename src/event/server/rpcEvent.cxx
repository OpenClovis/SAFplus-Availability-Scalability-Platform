// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "clRpcChannel.hxx"
#include "rpcEvent.hxx"

namespace SAFplus {
namespace Rpc {
namespace rpcEvent {

namespace {

const ::google::protobuf::ServiceDescriptor* rpcEvent_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Rpc_rpcEvent_2eproto() {
  protobuf_AddDesc_rpcEvent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpcEvent.proto");
  GOOGLE_CHECK(file != NULL);
  rpcEvent_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Rpc_rpcEvent_2eproto);
}

}  // namespace
rpcEvent::~rpcEvent() {}

const ::google::protobuf::ServiceDescriptor* rpcEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rpcEvent_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* rpcEvent::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return rpcEvent_descriptor_;
}

void rpcEvent::eventChannelRpcMethod(const ::SAFplus::Rpc::rpcEvent::eventChannelRequest*,
                         ::SAFplus::Rpc::rpcEvent::eventRequestResponse*)
{
  logError("RPC","SVR","Method eventChannelRpcMethod() not implemented.");
}

void rpcEvent::eventPublishRpcMethod(const ::SAFplus::Rpc::rpcEvent::eventPublishRequest*,
                         ::SAFplus::Rpc::rpcEvent::eventRequestResponse*)
{
  logError("RPC","SVR","Method eventPublishRpcMethod() not implemented.");
}

void rpcEvent::eventGetActiveServer(const ::SAFplus::Rpc::rpcEvent::NO_REQUEST*,
                         ::SAFplus::Rpc::rpcEvent::eventGetActiveServerResponse*)
{
  logError("RPC","SVR","Method eventGetActiveServer() not implemented.");
}

void rpcEvent::eventChannelRpcMethod(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::rpcEvent::eventChannelRequest* request,
                     ::SAFplus::Rpc::rpcEvent::eventRequestResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method eventChannelRpcMethod() not implemented.");
}

void rpcEvent::eventPublishRpcMethod(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::rpcEvent::eventPublishRequest* request,
                     ::SAFplus::Rpc::rpcEvent::eventRequestResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method eventPublishRpcMethod() not implemented.");
}

void rpcEvent::eventGetActiveServer(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::rpcEvent::NO_REQUEST* request,
                     ::SAFplus::Rpc::rpcEvent::eventGetActiveServerResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method eventGetActiveServer() not implemented.");
}

void rpcEvent::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             SAFplus::Handle destination,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             SAFplus::Wakeable& wakeable) {
  GOOGLE_DCHECK_EQ(method->service(), rpcEvent_descriptor_);
  switch(method->index()) {
    case 0:
      eventChannelRpcMethod(::google::protobuf::down_cast<const ::SAFplus::Rpc::rpcEvent::eventChannelRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::rpcEvent::eventRequestResponse*>(response));
      break;
    case 1:
      eventPublishRpcMethod(::google::protobuf::down_cast<const ::SAFplus::Rpc::rpcEvent::eventPublishRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::rpcEvent::eventRequestResponse*>(response));
      break;
    case 2:
      eventGetActiveServer(::google::protobuf::down_cast<const ::SAFplus::Rpc::rpcEvent::NO_REQUEST*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::rpcEvent::eventGetActiveServerResponse*>(response));
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& rpcEvent::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SAFplus::Rpc::rpcEvent::eventChannelRequest::default_instance();
    case 1:
      return ::SAFplus::Rpc::rpcEvent::eventPublishRequest::default_instance();
    case 2:
      return ::SAFplus::Rpc::rpcEvent::NO_REQUEST::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& rpcEvent::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SAFplus::Rpc::rpcEvent::eventRequestResponse::default_instance();
    case 1:
      return ::SAFplus::Rpc::rpcEvent::eventRequestResponse::default_instance();
    case 2:
      return ::SAFplus::Rpc::rpcEvent::eventGetActiveServerResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

rpcEvent_Stub::rpcEvent_Stub(SAFplus::Rpc::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
rpcEvent_Stub::rpcEvent_Stub(
    SAFplus::Rpc::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
rpcEvent_Stub::~rpcEvent_Stub() {
  if (owns_channel_) delete channel_;
}

void rpcEvent_Stub::eventChannelRpcMethod(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::rpcEvent::eventChannelRequest* request,
                              ::SAFplus::Rpc::rpcEvent::eventRequestResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(0), dest, request, response, wakeable);
}
void rpcEvent_Stub::eventPublishRpcMethod(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::rpcEvent::eventPublishRequest* request,
                              ::SAFplus::Rpc::rpcEvent::eventRequestResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(1), dest, request, response, wakeable);
}
void rpcEvent_Stub::eventGetActiveServer(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::rpcEvent::NO_REQUEST* request,
                              ::SAFplus::Rpc::rpcEvent::eventGetActiveServerResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(2), dest, request, response, wakeable);
}

}  // namespace rpcEvent
}  // namespace Rpc
}  // namespace SAFplus
