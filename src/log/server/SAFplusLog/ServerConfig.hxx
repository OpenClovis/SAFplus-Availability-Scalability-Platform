/* 
 * File ServerConfig.hxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 

#pragma once
#ifndef SERVERCONFIG_HXX_
#define SERVERCONFIG_HXX_

#include "MgtFactory.hxx"
#include "SAFplusLogCommon.hxx"
#include "clMgtContainer.hxx"
#include "clTransaction.hxx"
#include "clMgtProv.hxx"
#include <cstdint>
#include <vector>

namespace SAFplusLog
  {

    class ServerConfig : public SAFplus::MgtContainer {

        /* Apply MGT object factory */
        MGT_REGISTER(ServerConfig);

    public:

        /*
         * Maximum number of log streams that can exist
         */
        SAFplus::MgtProv<::uint32_t> maximumStreams;

        /*
         * 
         */
        SAFplus::MgtProv<::uint32_t> maximumComponents;

        /*
         * Maximum size of shared memory to hold logs from all log streams
         */
        SAFplus::MgtProv<::uint32_t> maximumSharedMemoryPages;

        /*
         * When logs are forwarded to another node, this specifies the maximum number of logs placed in a single message.
         */
        SAFplus::MgtProv<::uint32_t> maximumRecordsInPacket;

        /*
         * The log server wakes up every processingInterval ms and outputs all logs in shared memory.  This field therefore defines the maximum age of unposted logs during light log use.
         */
        SAFplus::MgtProv<::uint64_t> processingInterval;

    public:
        ServerConfig();
        std::vector<std::string>* getChildNames();

        /*
         * XPATH: /SAFplusLog/safplusLog/serverConfig/maximumStreams
         */
        ::uint32_t getMaximumStreams();

        /*
         * XPATH: /SAFplusLog/safplusLog/serverConfig/maximumStreams
         */
        void setMaximumStreams(::uint32_t maximumStreamsValue, SAFplus::Transaction &txn=SAFplus::NO_TXN);

        /*
         * XPATH: /SAFplusLog/safplusLog/serverConfig/maximumComponents
         */
        ::uint32_t getMaximumComponents();

        /*
         * XPATH: /SAFplusLog/safplusLog/serverConfig/maximumComponents
         */
        void setMaximumComponents(::uint32_t maximumComponentsValue, SAFplus::Transaction &txn=SAFplus::NO_TXN);

        /*
         * XPATH: /SAFplusLog/safplusLog/serverConfig/maximumSharedMemoryPages
         */
        ::uint32_t getMaximumSharedMemoryPages();

        /*
         * XPATH: /SAFplusLog/safplusLog/serverConfig/maximumSharedMemoryPages
         */
        void setMaximumSharedMemoryPages(::uint32_t maximumSharedMemoryPagesValue, SAFplus::Transaction &txn=SAFplus::NO_TXN);

        /*
         * XPATH: /SAFplusLog/safplusLog/serverConfig/maximumRecordsInPacket
         */
        ::uint32_t getMaximumRecordsInPacket();

        /*
         * XPATH: /SAFplusLog/safplusLog/serverConfig/maximumRecordsInPacket
         */
        void setMaximumRecordsInPacket(::uint32_t maximumRecordsInPacketValue, SAFplus::Transaction &txn=SAFplus::NO_TXN);

        /*
         * XPATH: /SAFplusLog/safplusLog/serverConfig/processingInterval
         */
        ::uint64_t getProcessingInterval();

        /*
         * XPATH: /SAFplusLog/safplusLog/serverConfig/processingInterval
         */
        void setProcessingInterval(::uint64_t processingIntervalValue, SAFplus::Transaction &txn=SAFplus::NO_TXN);
        ~ServerConfig();

    };
}
/* namespace ::SAFplusLog */
#endif /* SERVERCONFIG_HXX_ */
