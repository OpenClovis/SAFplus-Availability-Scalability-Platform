/* 
 * File ProcessStats.cxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 
#include "SAFplusTypesCommon.hxx"

#include "ResidentMem.hxx"
#include "PageFaults.hxx"
#include "clMgtContainer.hxx"
#include "clTransaction.hxx"
#include "ResidentMem.hxx"
#include "NumThreads.hxx"
#include "PageFaults.hxx"
#include "MemUtilization.hxx"
#include "Failures.hxx"
#include "CpuUtilization.hxx"
#include "Failures.hxx"
#include "CpuUtilization.hxx"
#include "MemUtilization.hxx"
#include "clMgtProv.hxx"
#include "NumThreads.hxx"
#include <vector>
#include "ProcessState.hxx"
#include "ProcessStats.hxx"


namespace SAFplusTypes
  {

    ProcessStats::ProcessStats(): SAFplus::MgtContainer("processStats"), ProcessState("ProcessState")
    {
        this->addChildObject(&ProcessState, "ProcessState");
        this->addChildObject(&failures, "failures");
        this->addChildObject(&cpuUtilization, "cpuUtilization");
        this->addChildObject(&memUtilization, "memUtilization");
        this->addChildObject(&pageFaults, "pageFaults");
        this->addChildObject(&numThreads, "numThreads");
        this->addChildObject(&residentMem, "residentMem");
    };

    std::vector<std::string>* ProcessStats::getChildNames()
    {
        std::string childNames[] = { "failures", "cpuUtilization", "memUtilization", "pageFaults", "numThreads", "residentMem", "ProcessState" };
        return new std::vector<std::string> (childNames, childNames + sizeof(childNames) / sizeof(childNames[0]));
    };

    /*
     * XPATH: /SAFplusTypes/processStats/ProcessState
     */
    SAFplusTypes::ProcessState ProcessStats::getProcessState()
    {
        return this->ProcessState.value;
    };

    /*
     * XPATH: /SAFplusTypes/processStats/ProcessState
     */
    void ProcessStats::setProcessState(SAFplusTypes::ProcessState &ProcessStateValue, SAFplus::Transaction &txn)
    {
        this->ProcessState.set(ProcessStateValue,txn);
    };

    /*
     * XPATH: /SAFplusTypes/processStats/failures
     */
    SAFplusTypes::Failures* ProcessStats::getFailures()
    {
        return dynamic_cast<Failures*>(this->getChildObject("failures"));
    };

    /*
     * XPATH: /SAFplusTypes/processStats/failures
     */
    void ProcessStats::addFailures(SAFplusTypes::Failures *failuresValue)
    {
        this->addChildObject(failuresValue, "failures");
    };

    /*
     * XPATH: /SAFplusTypes/processStats/cpuUtilization
     */
    SAFplusTypes::CpuUtilization* ProcessStats::getCpuUtilization()
    {
        return dynamic_cast<CpuUtilization*>(this->getChildObject("cpuUtilization"));
    };

    /*
     * XPATH: /SAFplusTypes/processStats/cpuUtilization
     */
    void ProcessStats::addCpuUtilization(SAFplusTypes::CpuUtilization *cpuUtilizationValue)
    {
        this->addChildObject(cpuUtilizationValue, "cpuUtilization");
    };

    /*
     * XPATH: /SAFplusTypes/processStats/memUtilization
     */
    SAFplusTypes::MemUtilization* ProcessStats::getMemUtilization()
    {
        return dynamic_cast<MemUtilization*>(this->getChildObject("memUtilization"));
    };

    /*
     * XPATH: /SAFplusTypes/processStats/memUtilization
     */
    void ProcessStats::addMemUtilization(SAFplusTypes::MemUtilization *memUtilizationValue)
    {
        this->addChildObject(memUtilizationValue, "memUtilization");
    };

    /*
     * XPATH: /SAFplusTypes/processStats/pageFaults
     */
    SAFplusTypes::PageFaults* ProcessStats::getPageFaults()
    {
        return dynamic_cast<PageFaults*>(this->getChildObject("pageFaults"));
    };

    /*
     * XPATH: /SAFplusTypes/processStats/pageFaults
     */
    void ProcessStats::addPageFaults(SAFplusTypes::PageFaults *pageFaultsValue)
    {
        this->addChildObject(pageFaultsValue, "pageFaults");
    };

    /*
     * XPATH: /SAFplusTypes/processStats/numThreads
     */
    SAFplusTypes::NumThreads* ProcessStats::getNumThreads()
    {
        return dynamic_cast<NumThreads*>(this->getChildObject("numThreads"));
    };

    /*
     * XPATH: /SAFplusTypes/processStats/numThreads
     */
    void ProcessStats::addNumThreads(SAFplusTypes::NumThreads *numThreadsValue)
    {
        this->addChildObject(numThreadsValue, "numThreads");
    };

    /*
     * XPATH: /SAFplusTypes/processStats/residentMem
     */
    SAFplusTypes::ResidentMem* ProcessStats::getResidentMem()
    {
        return dynamic_cast<ResidentMem*>(this->getChildObject("residentMem"));
    };

    /*
     * XPATH: /SAFplusTypes/processStats/residentMem
     */
    void ProcessStats::addResidentMem(SAFplusTypes::ResidentMem *residentMemValue)
    {
        this->addChildObject(residentMemValue, "residentMem");
    };

    ProcessStats::~ProcessStats()
    {
    };

}
/* namespace SAFplusTypes */
