# Copyright (C) 2002-2012 OpenClovis Solutions Inc.  All Rights Reserved.
# This file is available  under  a  commercial  license  from  the
# copyright  holder or the GNU General Public License Version 2.0.
#
# The source code for  this program is not published  or otherwise 
# divested of  its trade secrets, irrespective  of  what  has been 
# deposited with the U.S. Copyright office.
# 
# This program is distributed in the  hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied  warranty  of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
# General Public License for more details.
# 
# For more  information,  see the  file COPYING provided with this
# material.
################################################################################
# ModuleName  : common
# File        : make-cross.mk.in
################################################################################
# Description :
#  Cross compilation make include for all SAFplus directories
#
#  Note that SAFplus Makefiles typically don't directly include this
#  file, but include it via make-subdir.mk, make-client.mk,
#  make-server.mk or make-kernel.mk
#
#  Interface:
#
#  The following variables may be defined to control this file:
#
#  CROSS_BUILD          <name of toolchain directory under
#                        /opt/clovis/buildtools to use for the build>
#
#  KERNEL               (Optional) Name of kernel source tree under
#                       /opt/clovis/buildtools/$(CROSS_BUILD)/src.
#                       If not specified, the default "linux" link
#                       will be used.
#
#  All bianry build tools, header files, and libraries will be picked up
#  from the selected subdirectory.
#
#  In addition, the defintions of many Makefile variables will be also
#  obtained from the XXX file in the specified toolchain directory.
#
#  When this file is included, the following are then defined.
#  
#  KERNEL_PATH:         the full path to the kernel source tree
#
#  CC, GCC, LD, AR:     the path to the right binary to use
#
#  CFLAGS:              to contain system file references
#  LDFLAGS:             to contain system library references
#
#  LDFLAGS:             to contain additional -m options
#
#  PATH:                path to the toolchain's bin directory is added
#
#  NET_SNMP_CONFIG:     env variable to define where the net-snmp-config
#                       program is found
#
################################################################################
export CROSS_FLAG=@CROSS_FLAG@
export KERNEL_FLAG=@KERNEL_FLAG@

ifeq ($(CROSS_FLAG),1)
    export CROSS_BUILD=@CROSS_BUILD@
    ifeq ($(KERNEL_VERSION),1)
        export KERNEL=@KERNEL@
    endif
endif

export BUILD_ROOT=@BUILD_ROOT@
include $(BUILD_ROOT)/mk/define.mk

#
# If it is a native build, just leave everythin normal
# FIXME: This should not even be here:
#
ifndef CROSS_BUILD
BUILDTOOLS_PATH:=       $(buildtools_dir)/local

# This is the native build
ifeq ($(CC),cc)  # If CC is not defined by the environment, override it because we do not want to use "cc" as the compiler.   CC ?= gcc cannot be used because make implicitly defines CC if it is not defined in the env. So ?= will never set CC.
  ifeq ($(BUILD_PLUS),1)
    ifeq ($(CL_BINMODE),32)
      CC  := g++ -m32
    else
      CC  := g++
    endif
  else
    ifeq ($(CL_BINMODE),32)
      CC  := gcc -m32
    else
      CC  := gcc
    endif
  endif
endif


GCC ?= $(CC)
CXX ?= g++
AR  ?= ar
LD  ?= ld
NET_SNMP_CONFIG = @NET_SNMP_CONFIG@
CFLAGS	+= -I$(BUILDTOOLS_PATH)/include
LDFLAGS	+= -L$(BUILDTOOLS_PATH)/lib

MACHINE = $(shell uname -m)
ifeq ($(MACHINE),ppc)
LDFLAGS += -m elf32ppclinux
#else
# we are now assuming it is ia32, if it is not ppc. this may also have
# to change.
#LDFLAGS += -m elf_i386
endif				# LDFLAGS

ifeq ($(ARCH),x86_64)
 ifeq ($(CL_BINMODE),32)
    LDEMULATION = elf_i386
    LDFLAGS += -m $(LDEMULATION)
 else
    LDEMULATION = elf_x86_64
    LDFLAGS += -m $(LDEMULATION)
 endif
endif

export LDEMULATION


export KERNEL_HEADERS := $(shell ls -d /lib/modules/*`uname -r`/build/include 2>/dev/null)

ifdef SOLARIS_BUILD
export TIPC_INCLUDE   = /opt/SUNWtipc/include/solaris
CFLAGS += -I/opt/SUNWtipc/include/solaris
CFLAGS += -I$(CLOVIS_ROOT)/SAFplus/3rdparty/Solaris/openhpi/include
else
export TIPC_INCLUDE   ?= /lib/modules/$(shell uname -r)/build/$(TIPC_INC_DIR)
endif

export TIPC_CFLAGS = -I$(TIPC_INCLUDE)

#
# If it is not native build then get the toolchains from the
# appropriate path.
#
else # ifndef CROSS_BUILD

# Need to define: ARCH, MARCH, 

BUILDTOOLS_PATH:=       $(buildtools_dir)/$(CROSS_BUILD)

export PATH:=$(PATH):$(BUILDTOOLS_PATH)/bin

# Pick up the ARCH, MACH, and TARGET variables from the config.mk file from
# the toolchain.

#
# FIXME: Need to test of file exists, and hsout if it does not.
#

ifneq ($(wildcard $(BUILDTOOLS_PATH)/config.mk),) 
include $(BUILDTOOLS_PATH)/config.mk
endif

export ARCH=@ARCH@
export MARCH=@MARCH@
export TARGET=@TARGET@

#$(warning $(ARCH))
#$(warning $(MACH))
#$(warning $(TARGET))

KERNEL          ?= @KERNEL@
KERNEL_PATH      = $(BUILDTOOLS_PATH)/src/$(KERNEL)

ifeq ($(TARGET_QNX), 1)
CFLAGS          += -DQNX_BUILD
endif

CFLAGS          += -I $(KERNEL_PATH)/include \
                   -I $(BUILDTOOLS_PATH)/include \
                   -I $(BUILDTOOLS_PATH)/target/include \
		   -I $(BUILDTOOLS_PATH)/$(TARGET)/include \
                   -I$(BUILDTOOLS_PATH)/include \
                   -I$(BUILDTOOLS_PATH)/target/include

LDFLAGS         += -L $(BUILDTOOLS_PATH)/local/lib \
		   -L $(BUILDTOOLS_PATH)/lib

ifneq ($(TARGET_QNX), 1)
LDFLAGS         += -Xlinker -R -Xlinker $(BUILDTOOLS_PATH)/local/lib \
		   -Xlinker -R -Xlinker $(BUILDTOOLS_PATH)/lib
endif

ifneq ($(BUILD_PLUS),1)
    ifeq ($(WIND_VER),0)
	CFLAGS	+= -fgnu89-inline
    endif
endif

ifeq ($(BUILD_PLUS),1)
    ifeq ($(WIND_VER),1.2)
     ifeq ($(CL_BINMODE),32)
        CC       = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(TARGET)-$(CPU)-pne-g++ -m32
     else
        CC       = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(TARGET)-$(CPU)-pne-g++
     endif
    else
      ifeq ($(WIND_VER),0)
       ifeq ($(CL_BINMODE),32)
        CC       = env ARCH=$(ARCH) \
                   $(BUILDTOOLS_PATH)/bin/$(CPU)-g++ -m32
       else
        CC       = env ARCH=$(ARCH) \
                   $(BUILDTOOLS_PATH)/bin/$(CPU)-g++
       endif
       ifeq ($(CL_BINMODE),64)
        CC       = env ARCH=$(ARCH) \
                   $(BUILDTOOLS_PATH)/bin/$(CPU)-g++ -m64
       endif
      else
       ifeq ($(CL_BINMODE),32)
        CC       = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(TARGET)-g++
       else
        CC       = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(TARGET)-g++
       endif
      endif
    endif
else
    ifeq ($(WIND_VER),1.2)
       ifeq ($(CL_BINMODE),32)
        CC       = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(TARGET)-$(CPU)-pne-gcc -m32
       else
        CC       = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(TARGET)-$(CPU)-pne-gcc
       endif
    else
      ifeq ($(WIND_VER),0)
       ifeq ($(CL_BINMODE),32)
        CC       = env ARCH=$(ARCH) \
                   $(BUILDTOOLS_PATH)/bin/$(CPU)-gcc -m32
       else
        CC       = env ARCH=$(ARCH) \
                   $(BUILDTOOLS_PATH)/bin/$(CPU)-gcc
       endif
       ifeq ($(CL_BINMODE),64)
        CC       = env ARCH=$(ARCH) \
                   $(BUILDTOOLS_PATH)/bin/$(CPU)-gcc -m64
       endif
      else
       ifeq ($(CL_BINMODE),32)
        CC       = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(TARGET)-gcc -m32
       else
        CC       = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(TARGET)-gcc
       endif
      endif
    endif
endif

ifeq ($(TARGET_QNX),1)
    ifeq ($(ARCH),i386)
        ifeq ($(BUILD_PLUS),1)
            CC = i386-pc-nto-qnx6.4.0-g++
        else
            CC = i386-pc-nto-qnx6.4.0-gcc
        endif
    else
        ifeq ($(BUILD_PLUS),1)
            CC = powerpc-unknown-nto-qnx6.4.0-g++
        else
            CC = powerpc-unknown-nto-qnx6.4.0-gcc
        endif
    endif
endif

ifeq ($(WIND_VER),1.2)
 ifeq ($(CL_BINMODE),32)
  CXX	    	 = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(TARGET)-$(CPU)-pne-g++ -m32
 else
  CXX	    	 = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(TARGET)-$(CPU)-pne-g++
 endif
  GCC		 = $(CC)
  AR             = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(TARGET)-$(CPU)-pne-ar
  LD             = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(TARGET)-$(CPU)-pne-ld $(LDFLAGS)
else
  ifeq ($(WIND_VER),0)
   ifeq ($(CL_BINMODE),32)
    CXX          = env ARCH=$(ARCH) \
                   $(BUILDTOOLS_PATH)/bin/$(CPU)-g++ -m32
   else
    CXX          = env ARCH=$(ARCH) \
                   $(BUILDTOOLS_PATH)/bin/$(CPU)-g++
   endif
   ifeq ($(CL_BINMODE),64)
    CXX          = env ARCH=$(ARCH) \
                   $(BUILDTOOLS_PATH)/bin/$(CPU)-g++ -m64
   endif
    GCC          = $(CC)
    AR           = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(CPU)-ar
    LD           = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(CPU)-ld $(LDFLAGS)
  else
   ifeq ($(CL_BINMODE),32)
    CXX	    	 = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(TARGET)-g++ -m32
   else
    CXX	    	 = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(TARGET)-g++
   endif
    GCC          = $(CC)
    AR           = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(TARGET)-ar
    LD           = env ARCH=$(ARCH) \
                   CROSS_COMPILE=$(BUILDTOOLS_PATH)/bin/ \
                   $(BUILDTOOLS_PATH)/bin/$(TARGET)-ld $(LDFLAGS)
  endif
endif

ifdef WIND_VER
 ifeq ($(WIND_VER),0)
   NET_SNMP_CONFIG = $(BUILDTOOLS_PATH)/target/bin/net-snmp-config
 else
   NET_SNMP_CONFIG = $(BUILDTOOLS_PATH)/local/bin/net-snmp-config
 endif
else
   NET_SNMP_CONFIG = $(BUILDTOOLS_PATH)/bin/net-snmp-config
endif

ifeq ($(WIND_VER),2.0)
    ifeq ($(BUILD_PLUS),1)
        CC      = env ARCH=$(ARCH) \
                  $(BUILDTOOLS_PATH)/bin/$(TARGET)-$(CPU)-$(ROOTFS)-g++
    else
        CC      = env ARCH=$(ARCH) \
                  $(BUILDTOOLS_PATH)/bin/$(TARGET)-$(CPU)-$(ROOTFS)-gcc
    endif
    CXX         = env ARCH=$(ARCH) \
                  $(BUILDTOOLS_PATH)/bin/$(TARGET)-$(CPU)-$(ROOTFS)-g++
    AR          = env ARCH=$(ARCH) \
                  $(BUILDTOOLS_PATH)/bin/$(TARGET)-$(CPU)-$(ROOTFS)-ar
    LD          = env ARCH=$(ARCH) \
                  $(BUILDTOOLS_PATH)/bin/$(TARGET)-$(CPU)-$(ROOTFS)-ld
    GCC         = $(CC)
    LDEMULATION = $(TARGET_LDEMULATION)

    include $(BUILD_ROOT)/mk/wrs.mk
endif

#$(warning $(KERNEL_PATH))
#$(warning $(CFLAGS))
#$(warning $(CC))
#$(warning $(GCC))
#$(warning $(AR))
#$(warning $(LD))
#$(warning $(NET_SNMP_CONFIG))

ifneq ($(TARGET_QNX), 1)
    ifeq ($(ARCH),ppc)
        LDEMULATION = elf32ppclinux
    endif
    ifeq ($(ARCH),i386)
        LDEMULATION = elf_i386
    endif
    ifeq ($(ARCH),ppc64)
     ifeq ($(CL_BINMODE),32)
        LDEMULATION = elf32ppclinux
	CFLAGS += -m32
	LDFLAGS += -m32
     else
        LDEMULATION = elf64ppc
	CFLAGS += -m64
	LDFLAGS += -m64
     endif
    endif
    ifeq ($(ARCH),x86_64)
     ifeq ($(CL_BINMODE),32)
        LDEMULATION = elf_i386
        CFLAGS += -m32
     else
        LDEMULATION = elf_x86_64
     endif
    endif
endif

#ifndef LDEMULATION
#    $(error "Building on $(ARCH) is not supported yet")
#endif
ifdef LDEMULATION
LDFLAGS += -m $(LDEMULATION)
endif

#$(warning $(LDFLAGS))
#$(warning $(LDEMULATION))

export LDEMULATION

export TIPC_CFLAGS = -I$(BUILDTOOLS_PATH)/include/net/tipc -I$(BUILDTOOLS_PATH)/include

endif # ifndef CROSS_BUILD

all:

.PHONY: crosshelp
crosshelp:
	@echo '  CROSS_BUILD=<toolchain-name> '
	@echo '                      - Triggers a host-independent build using the specified' 
	@echo '                        toolchain.  The following toolchains are available'
	@echo '                        at your host:'
	@(cd $(buildtools_dir); ls | awk '{print "                       ",$$1}')
	@echo '  KERNEL=<kernel-src-dir-name> '
	@echo '                      - Name of an alternative kernel under the given'
	@echo '                        toolchain.  See directories under the'
	@echo '                        /opt/clovis/buildtools/<CROSS_BUILD>/src directory'
	@echo '                        for alternative kernel choices.  The default is'
	@echo '                        the "linux" symbolic link.'

# End of the file
