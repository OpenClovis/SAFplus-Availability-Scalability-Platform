/* 
 * File Stream.cxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 

#include <vector>
#include "MgtFactory.hxx"
#include "clMgtObject.hxx"
#include "NumLogs.hxx"
#include "clMgtProv.hxx"
#include <string>
#include "Stream.hxx"
#include "clCustomization.hxx"
 
using namespace std;
using namespace SAFplusI;

namespace SAFplusLog {

    /* Apply MGT object factory */
    REGISTERIMPL(Stream, /SAFplusLog/StreamConfig/stream)

    Stream::Stream(): ClMgtObject("stream"), name("name"), fileName("fileName"), fileLocation("fileLocation"), fileUnitSize("fileUnitSize"), recordSize("recordSize"), fileFullAction("fileFullAction"), maximumFilesRotated("maximumFilesRotated"), flushFreq("flushFreq"), flushInterval("flushInterval"), syslog("syslog"), streamScope("streamScope")
      ,fileBuffer(LogDefaultFileBufferSize),msgBuffer(LogDefaultMessageBufferSize),fp(NULL)  // additions 
 {
        this->addChildObject(&name, "name");
        this->addChildObject(&fileName, "fileName");
        this->addChildObject(&fileLocation, "fileLocation");
        this->addChildObject(&fileUnitSize, "fileUnitSize");
        this->addChildObject(&recordSize, "recordSize");
        this->addChildObject(&fileFullAction, "fileFullAction");
        this->addChildObject(&maximumFilesRotated, "maximumFilesRotated");
        this->addChildObject(&flushFreq, "flushFreq");
        this->addChildObject(&flushInterval, "flushInterval");
        this->addChildObject(&syslog, "syslog");
        this->addChildObject(&streamScope, "streamScope");
        this->addKey("name");
    };

    Stream::Stream(string nameValue): ClMgtObject("stream"), name("name"), fileName("fileName"), fileLocation("fileLocation"), fileUnitSize("fileUnitSize"), recordSize("recordSize"), fileFullAction("fileFullAction"), maximumFilesRotated("maximumFilesRotated"), flushFreq("flushFreq"), flushInterval("flushInterval"), syslog("syslog"), streamScope("streamScope")
      ,fileBuffer(LogDefaultFileBufferSize),msgBuffer(LogDefaultMessageBufferSize),fp(NULL)  // additions 
 {
        this->name.Value =  nameValue;
        this->addKey("name");
        this->addChildObject(&name, "name");
        this->addChildObject(&fileName, "fileName");
        this->addChildObject(&fileLocation, "fileLocation");
        this->addChildObject(&fileUnitSize, "fileUnitSize");
        this->addChildObject(&recordSize, "recordSize");
        this->addChildObject(&fileFullAction, "fileFullAction");
        this->addChildObject(&maximumFilesRotated, "maximumFilesRotated");
        this->addChildObject(&flushFreq, "flushFreq");
        this->addChildObject(&flushInterval, "flushInterval");
        this->addChildObject(&syslog, "syslog");
        this->addChildObject(&streamScope, "streamScope");
    };

    vector<string> Stream::getKeys() {
        string keyNames[] = { "name" };
        return vector<string> (keyNames, keyNames + sizeof(keyNames) / sizeof(keyNames[0]));
    };

    vector<string> *Stream::getChildNames() {
        string childNames[] = { "name", "fileName", "fileLocation", "fileUnitSize", "recordSize", "fileFullAction", "maximumFilesRotated", "flushFreq", "flushInterval", "syslog", "streamScope", "numLogs" };
        return new vector<string> (childNames, childNames + sizeof(childNames) / sizeof(childNames[0]));
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/name
     */
    string Stream::getName() {
        return this->name.Value;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/name
     */
    void Stream::setName(string nameValue) {
        this->name.Value = nameValue;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/fileName
     */
    string Stream::getFileName() {
        return this->fileName.Value;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/fileName
     */
    void Stream::setFileName(string fileNameValue) {
        this->fileName.Value = fileNameValue;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/fileLocation
     */
    string Stream::getFileLocation() {
        return this->fileLocation.Value;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/fileLocation
     */
    void Stream::setFileLocation(string fileLocationValue) {
        this->fileLocation.Value = fileLocationValue;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/fileUnitSize
     */
    unsigned long int Stream::getFileUnitSize() {
        return this->fileUnitSize.Value;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/fileUnitSize
     */
    void Stream::setFileUnitSize(unsigned long int fileUnitSizeValue) {
        this->fileUnitSize.Value = fileUnitSizeValue;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/recordSize
     */
    unsigned long int Stream::getRecordSize() {
        return this->recordSize.Value;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/recordSize
     */
    void Stream::setRecordSize(unsigned long int recordSizeValue) {
        this->recordSize.Value = recordSizeValue;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/fileFullAction
     */
    FileFullActionOption Stream::getFileFullAction() {
        return static_cast<FileFullActionOption>(this->fileFullAction.Value);
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/fileFullAction
     */
    void Stream::setFileFullAction(FileFullActionOption fileFullActionValue) {
        this->fileFullAction.Value = static_cast<int>(fileFullActionValue);
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/maximumFilesRotated
     */
    unsigned int Stream::getMaximumFilesRotated() {
        return this->maximumFilesRotated.Value;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/maximumFilesRotated
     */
    void Stream::setMaximumFilesRotated(unsigned int maximumFilesRotatedValue) {
        this->maximumFilesRotated.Value = maximumFilesRotatedValue;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/flushFreq
     */
    unsigned int Stream::getFlushFreq() {
        return this->flushFreq.Value;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/flushFreq
     */
    void Stream::setFlushFreq(unsigned int flushFreqValue) {
        this->flushFreq.Value = flushFreqValue;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/flushInterval
     */
    unsigned long int Stream::getFlushInterval() {
        return this->flushInterval.Value;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/flushInterval
     */
    void Stream::setFlushInterval(unsigned long int flushIntervalValue) {
        this->flushInterval.Value = flushIntervalValue;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/syslog
     */
    bool Stream::getSyslog() {
        return this->syslog.Value;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/syslog
     */
    void Stream::setSyslog(bool syslogValue) {
        this->syslog.Value = syslogValue;
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/streamScope
     */
    StreamScopeOption Stream::getStreamScope() {
        return static_cast<StreamScopeOption>(this->streamScope.Value);
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/streamScope
     */
    void Stream::setStreamScope(StreamScopeOption streamScopeValue) {
        this->streamScope.Value = static_cast<int>(streamScopeValue);
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/numLogs
     */
    NumLogs* Stream::getNumLogs() {
        return (NumLogs*)this->getChildObject("numLogs");
    };

    /*
     * XPATH: /SAFplusLog/StreamConfig/stream/numLogs
     */
    void Stream::addNumLogs(NumLogs *numLogsValue) {
        this->addChildObject(numLogsValue, "numLogs");
    };

    Stream::~Stream() {
    };

}
/* namespace SAFplusLog */
