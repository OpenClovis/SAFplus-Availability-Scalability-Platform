/* 
 * File Stream.hxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 

#ifndef STREAM_HXX_
#define STREAM_HXX_

#include <vector>
#include "MgtFactory.hxx"
#include "clMgtObject.hxx"
#include "NumLogs.hxx"
#include "clMgtProv.hxx"
#include <string>

#include "boost/asio.hpp"
#include "DoublingBuffer.hxx"

namespace SAFplusLog {

    enum FileFullActionOption { ROTATE, WRAP, HALT };
    enum StreamScopeOption { GLOBAL, LOCAL };

    class Stream : public ClMgtObject {

        /* Apply MGT object factory */
        REGISTER(Stream);

    public:

        /*
         * Name of the stream
         */
        ClMgtProv<std::string> name;

        /*
         * Output file name
         */
        ClMgtProv<std::string> fileName;

        /*
         * Node and directory where the file is to be output
         */
        ClMgtProv<std::string> fileLocation;

        /*
         * Maximum size of a log file
         */
        ClMgtProv<unsigned long int> fileUnitSize;

        /*
         * Maximum size of a single log record
         */
        ClMgtProv<unsigned long int> recordSize;

        /*
         * Action to take when the log file is full
         */
        ClMgtProv<int> fileFullAction;

        /*
         * If fileFullAction is ROTATE, this field indicates the number of files to rotate.
         */
        ClMgtProv<unsigned int> maximumFilesRotated;

        /*
         * When this number of logs are available in shared memory, the log server is triggered to output them.  This field controls how often logs are posted during heavy log use.
         */
        ClMgtProv<unsigned int> flushFreq;

        /*
         * The log server wakes up every flushInterval ms and outputs all logs in shared memory.  This field therefore defines the maximum age of unposted logs during light log use.
         */
        ClMgtProv<unsigned long int> flushInterval;

        /*
         * Should these logs be output to syslog
         */
        ClMgtProv<bool> syslog;

        /*
         * Is this log stream available across the entire cluster, or just available on the node?
         */
        ClMgtProv<int> streamScope;

    public:
        Stream();
        Stream(std::string nameValue);
        std::vector<std::string> getKeys();
        std::vector<std::string> *getChildNames();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/name
         */
        std::string getName();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/name
         */
        void setName(std::string nameValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/fileName
         */
        std::string getFileName();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/fileName
         */
        void setFileName(std::string fileNameValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/fileLocation
         */
        std::string getFileLocation();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/fileLocation
         */
        void setFileLocation(std::string fileLocationValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/fileUnitSize
         */
        unsigned long int getFileUnitSize();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/fileUnitSize
         */
        void setFileUnitSize(unsigned long int fileUnitSizeValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/recordSize
         */
        unsigned long int getRecordSize();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/recordSize
         */
        void setRecordSize(unsigned long int recordSizeValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/fileFullAction
         */
        FileFullActionOption getFileFullAction();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/fileFullAction
         */
        void setFileFullAction(FileFullActionOption fileFullActionValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/maximumFilesRotated
         */
        unsigned int getMaximumFilesRotated();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/maximumFilesRotated
         */
        void setMaximumFilesRotated(unsigned int maximumFilesRotatedValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/flushFreq
         */
        unsigned int getFlushFreq();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/flushFreq
         */
        void setFlushFreq(unsigned int flushFreqValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/flushInterval
         */
        unsigned long int getFlushInterval();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/flushInterval
         */
        void setFlushInterval(unsigned long int flushIntervalValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/syslog
         */
        bool getSyslog();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/syslog
         */
        void setSyslog(bool syslogValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/streamScope
         */
        StreamScopeOption getStreamScope();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/streamScope
         */
        void setStreamScope(StreamScopeOption streamScopeValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/numLogs
         */
        NumLogs* getNumLogs();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/numLogs
         */
        void addNumLogs(NumLogs *numLogsValue);
        ~Stream();

       /* Custom code -- NOT autogenerated */
 
       FILE* fp;  // If this stream will be output to a file on this node, this is pointer to that file handle.  Otherwise NULL
       int fileIdx;  // If the file is being rotated, this is the current file count.  i.e. file name is ("%s%d.log",fileName,fileIdx)
       int fileSize; // Current length of the open file
       //boost::asio::streambuf fileBuffer; //char* fileBuffer; // logs are spooled to this buffer and then written to the file all at once
       //std::ostream fileStream;
       //boost::asio::streambuf msgBuffer; //char* msgBuffer; // logs are spooled to this buffer and then written to the network as one packet
       //std::ostream msgStream;
       SAFplus::DoublingCharBuffer fileBuffer; // logs are spooled to this buffer and then written to the file all at once
       SAFplus::DoublingCharBuffer msgBuffer;  // logs are spooled to this buffer and then written to the network as one packet
       bool sendMsg;                               // Does this stream need to be sent to anyone else?
       bool dirty;                             // Has this stream been changed?

       /* End custom code */
    };
}
/* namespace SAFplusLog */
#endif /* STREAM_HXX_ */
