/* 
 * File Stream.hxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 

#ifndef STREAM_HXX_
#define STREAM_HXX_

#include <vector>
#include "MgtFactory.hxx"
#include "clMgtObject.hxx"
#include "NumLogs.hxx"
#include "clMgtProv.hxx"
#include <string>

using namespace std;

namespace SAFplusLog {

    class Stream : public ClMgtObject {

        /* Apply MGT object factory */
        REGISTER(Stream);

    public:

        /*
         * Name of the stream
         */
        ClMgtProv<string> name;

        /*
         * Output file name
         */
        ClMgtProv<string> fileName;

        /*
         * Node and directory where the file is to be output
         */
        ClMgtProv<string> fileLocation;

        /*
         * Maximum size of a log file
         */
        ClMgtProv<unsigned long int> fileUnitSize;

        /*
         * Maximum size of a single log record
         */
        ClMgtProv<unsigned long int> recordSize;

        /*
         * Action to take when the log file is full
         */
        ClMgtProv<string> fileFullAction;

        /*
         * If fileFullAction is ROTATE, this field indicates the number of files to rotate.
         */
        ClMgtProv<unsigned int> maximumFilesRotated;

        /*
         * When this number of logs are available in shared memory, the log server is triggered to output them.  This field controls how often logs are posted during heavy log use.
         */
        ClMgtProv<unsigned int> flushFreq;

        /*
         * The log server wakes up every flushInterval ms and outputs all logs in shared memory.  This field therefore defines the maximum age of unposted logs during light log use.
         */
        ClMgtProv<unsigned long int> flushInterval;

        /*
         * Should these logs be output to syslog
         */
        ClMgtProv<bool> syslog;

        /*
         * Is this log stream available across the entire cluster, or just available on the node?
         */
        ClMgtProv<string> streamScope;

    public:
        Stream();
        Stream(string nameValue);
        vector<string> getKeys();
        vector<string> *getChildNames();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/name
         */
        string getNameValue();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/name
         */
        void setNameValue(string nameValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/fileName
         */
        string getFileNameValue();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/fileName
         */
        void setFileNameValue(string fileNameValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/fileLocation
         */
        string getFileLocationValue();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/fileLocation
         */
        void setFileLocationValue(string fileLocationValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/fileUnitSize
         */
        unsigned long int getFileUnitSizeValue();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/fileUnitSize
         */
        void setFileUnitSizeValue(unsigned long int fileUnitSizeValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/recordSize
         */
        unsigned long int getRecordSizeValue();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/recordSize
         */
        void setRecordSizeValue(unsigned long int recordSizeValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/fileFullAction
         */
        string getFileFullActionValue();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/fileFullAction
         */
        void setFileFullActionValue(string fileFullActionValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/maximumFilesRotated
         */
        unsigned int getMaximumFilesRotatedValue();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/maximumFilesRotated
         */
        void setMaximumFilesRotatedValue(unsigned int maximumFilesRotatedValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/flushFreq
         */
        unsigned int getFlushFreqValue();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/flushFreq
         */
        void setFlushFreqValue(unsigned int flushFreqValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/flushInterval
         */
        unsigned long int getFlushIntervalValue();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/flushInterval
         */
        void setFlushIntervalValue(unsigned long int flushIntervalValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/syslog
         */
        bool getSyslogValue();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/syslog
         */
        void setSyslogValue(bool syslogValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/streamScope
         */
        string getStreamScopeValue();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/streamScope
         */
        void setStreamScopeValue(string streamScopeValue);

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/numLogs
         */
        NumLogs* getNumLogs();

        /*
         * XPATH: /SAFplusLog/StreamConfig/stream/numLogs
         */
        void addNumLogs(NumLogs *numLogsValue);
        ~Stream();

    };
}
/* namespace SAFplusLog */
#endif /* STREAM_HXX_ */
