"""
@mainpage
The ASP Runtime Director asppybinding library is a set of APIs used to access the OpenClovis ASP middleware.

It consists of two parts:
  - "asp::" A set of autogenerated Python APIs that correspond directly to the ASP C APIs.  These APIs are often hard to use (and sometimes impossible) due to the fact that the C-to-Python binding logic is not perfect.  However they do work quite well for simple function calls.  These APIs are delivered "as is"!  All of these APIs are located under the "asp" module/namespace.

  - A Python class layer that abstracts a subset of the ASP C APIs into a much more comprehensible object oriented framework.  These APIs are well maintained and tested.  Every module/namespace OTHER than "asp" belongs to this layer.

The key sections for quick access are as follows:

  - @ref aspAmf.Session All cluster modifications.  Start, stop entities.  Push created objects to the cluster. 
  - @ref clusterinfo::ClusterInfo  Current state and configuration of the cluster.
  - @ref aspAmfEntity   Object representation of every AMF entity
  - @ref aspApp Application bundle management
  - @ref appdeploy.deploy  Deploy an application
  - @ref upgrade Upgrade an application
  - @ref aspAmfModify, @ref aspAmfCreate  High level functions to create or modify AMF entities
  - @ref misc.log, @ref misc.LogClass  Simple OpenClovis application logging

  - @ref examples.interactive, @ref examples.http, @ref examples.xml   Example code

@example apiexample.py
@example httpserverexample.py
@example xmlserverexample.py
@example xmlclientexample.py

@namespace aspAmf
The aspAmf module centralizes all communications with the ASP AMF C layer.

The functions are divided into several major categories:

  - 1. Entity installation/deletion/configuration modification.
    These functions add and remove entities from the AMF, or change the entity configuration.  When creating a bunch of entities, it is recommended to use the DWIM function \ref Session.InstallApp, which calls other functions in this class.  But it is possible to do it yourself by using the InstallEntity and Install<entity type>Config APIs.  The important thing to remember is that it is an error to configure an entity to refer to another non-existent entity.  Since the entities are mutually referential, you must FIRST "Install" ALL mutually referential entities and THEN configure them.

    To reconfigure existing entities, use the Install<entity type>Config, for example @ref Session.InstallSgConfig.
    To delete entities, use the @ref Session.DeleteEntities API.

  - 2. Entity state changes.

   Use the @ref Session.Startup, @ref Session.Shutdown, @ref Session.Quiesce, and @ref Session.Idle functions to move entities though startup states.

  - 3. Entity state access.
    The @ref clusterinfo.ci object provides much more comprehensive access to entity state.  However there are some functions in this file that may be useful as they may return the exact subset of data that you need in a more convenient format than clusterinfo, which returns the entire ASP AMF information model.
"""

import sys
import types
import inspect
import time
from types import *

from misc import *
from aspMisc import *
import aspLog
import asp
import asppycustom

from aspAmfEntity import *

AUDIT_LOG_PREPEND_STR = "Audit Log : "

## Identify CPU Load types
CpuLoadMetric = asp.CL_METRIC_CPU

def EntityRef(type,name):
  """Build an entity reference tuple out of the entity type and its instance name
     This is really just a wrapper for creating a python tuple.

  Parameters:
  @param type        entity type (see aspAmfEntity.py)
  @param name        string identifying the entity


  @returns EntityRef = (type,name)
  """
  return((type,name))


class AmfError(Error):
  """Basic error exception class for AMF problems.
  """

  def __init__(self,s,aspretcode=0):
    """Constructor

    Parameters:
      s:             A string describing the problem
      aspretcode:    Optional: The error code returned from ASP
      """
    Error.__init__(self,s,aspretcode)
    self.text = s
    self.aspErrorCode = aspretcode

  def __str__(self):
    return "%s: Return code [0x%x]" % (self.text, self.aspErrorCode)



class Session:
  """Interface into ASP Availability Management Framework (AMF) functionality.
     All communications to the AMF occur through a Session object, which provides all-or-none semantics.  Multiple sessions can be used simultaneously.
  """

  def __init__(self):
    """Constructor.

    The constructor makes the initial connection to the underlying AMF and grabs the needed handles.
    """
    ver = asp.ClVersionT()
    ver.releaseCode = ord("B")
    ver.majorVersion = 1
    ver.minorVersion = 1
    self.cbs = asp.ClAmsMgmtCallbacksT()
    self.hdl = None
    self.hdl = asp.clAmsMgmtInitialize(self.cbs,ver)
    self.entity = asp.ClAmsEntityConfigT()
    self.targetentity = asp.ClAmsEntityConfigT()
    self.metric = asp.ClMetricT()

    self.cname = asp.SaNameT()

    self.defaultAssociatedDataKey = None

    self.configHdl = asp.clAmsMgmtCCBInitialize(self.hdl)

  def Finalize(self):
    """Clean up allocated resources (AMF session handles)

    This function must be called when you are done with this session or handles will be leaked.
    """
    asp.clAmsMgmtCCBFinalize(self.configHdl)
    self.configHdl = None
    asp.clAmsMgmtFinalize(self.hdl)
    self.hdl = None

  def InstallApp(self, newEntityList, modifiedEntityList=[]):
    """Install a created application into the AMF.

    This function takes a list of amfEntity objects, creates them down in the AMF C layer, and then sets their configuration correctly.  It is expected that this list of objects will completely describe an application.  Passing partial sets of objects may confuse the AMF since it may cause an invalid configuration.  Hint: use the functions in aspAmfCreate to make the entity list.

    @param newEntityList: The list of created entity objects, for example created by the CreateApp function
    @param modifiedEntityList: The list of modified entity objects
    """
    self.InstallEntities(newEntityList)
    entities = newEntityList + modifiedEntityList
    self.InstallCsiConfig(entities)
    self.InstallCompConfig(entities)
    self.InstallSgConfig(entities)
    self.InstallSiConfig(entities)
    self.InstallSuConfig(entities)
    self.InstallNodeConfig(entities)

  def GetRunningAmfNodes(self):
    """Return a list of existing nodes as AmfNode objects.    
    The \ref clusterinfo.ClusterInfo module provides a much more extensive API
    """
    nodedict = asppycustom.GetRunningNodeList()
    ret = []
    for node in nodedict:
      ret.append(AmfNode(node["name"],node["slot"]))
    return ret

  def GetNodes(self):
    """Return a list of existing nodes where each node is a dictionary
    The \ref clusterinfo module provides a much more extensive API
    """
    nodes = self.GetConfiguredNodeNames()
    running = asppycustom.GetRunningNodeList()
    name2slot = {}
    for r in running:
      name2slot[r['name']] = r['slot']
    ret = []
    for nodename in nodes:
      config = asp.clAmsMgmtNodeGetConfig(self.hdl,nodename)
      state = asp.clAmsMgmtNodeGetStatus(self.hdl,nodename)
      slot = name2slot.get(nodename, None)
      n = AmfNode(nodename,slot)
      n.setConfig(config)
      n.setState(state)
      ret.append(n)
    return ret

  def GetConfiguredNodeNames(self):
    """Return a list of existing nodes as (type, name) pairs
    The \ref clusterinfo module provides a much more extensive API
    """
    return [x[1] for x in asppycustom.GetConfiguredEntities(NodeType)]

  def GetConfiguredEntities(self,*entityTypes):
    """Return a list of entities by name
       @param entityTypes integer types of the entities you want. For example, \ref aspAmfEntity.NodeType (preferred) or \ref asp.CL_AMS_ENTITY_TYPE_NODE
    """ 
    return asppycustom.GetConfiguredEntities(*entityTypes)

  def GetConfiguredServiceGroupNames(self):
    """Return a list of existing nodes where each node is a dictionary
    The \ref clusterinfo module provides a much more extensive API
    """
    return asppycustom.GetConfiguredEntities(ServiceGroupType)

  def GetMasterNode(self):
    """Returns the master node address"""
    return asppycustom.GetMasterNode();

  def GetWorkOnServiceGroup(self,serviceGroupInstance):
    """Return a dictionary describing the Service Instances and contained Component Service Instances in a particular service group
       @param serviceGroupInstance  A string containing the name of the service group instance
    """
    return asppycustom.GetWorkOnServiceGroup(serviceGroupInstance)

  def GetCluster(self):
    """
    Deprecated: Return a large nested dictionary describing the cluster's current work assignment state
    """
    return self.GetAllWorkAssignments()

  def GetAllWorkAssignments(self):
    """ Return a large nested dictionary describing the cluster's current work assignment state
    The \ref clusterinfo module provides a much more extensive API
    """
    ret = {}
    nodes = asppycustom.GetRunningNodeList()
    for node in nodes:
      node.update(asppycustom.GetWorkOnNode(node["name"]))
      ret[node["name"]] = node
    return ret

  def RedundancyMigrate(self,sgName,prefix,active,standby):
    """Change redundancy modes using the underlying C clAmsMgmtMigrateSG "one-stop-shopping" function
    Note that you can also modify redundancy modes by hand (add Service Units) using the Python layers directly.
    This may be necessary if this function does not provide that exact functionality you need.
    See \ref aspAmfEntity and \ref aspAmfModify APIs

    @param sgName A string containing the name of the Service Group to be modified
    @param prefix A string containing the basename for any newly created entities
    @param active The desired number of active SUs in this SG  (SUs will be added or removed to match this value)
    @param standby The desired number of standby SUs in this SG (SUs will be added or removed to match this value)
    """
    createdEntities = asp.ClAmsMgmtMigrateListT()
    try:
      asp.clAmsMgmtMigrateSG(self.hdl,sgName,prefix,active,standby,createdEntities)
    except SystemError,ex:
      raise AmfError("Error during redundancy type migration (Service Group: %s, prefix: %s, active: %d, standby: %d)" %  (sgName,prefix,active,standby), ex[0])
    ret = []
    for arr in [createdEntities.node, createdEntities.su, createdEntities.si, createdEntities.csi, createdEntities.comp]:
      for i in range(0,arr.count):
        e=asp.ClAmsEntityT_array_getitem(arr.entity,i)
        ret.append(EntityRef(e.type,e.name.value))
    return ret


  def DeleteEntities(self,entityList):
    """Delete AMF entities.
       @param entityList List of entities to delete (or a single entity).  The entities can either by specified by name or as an \ref aspAmfEntity object
    """
    if not type(entityList) is ListType:
      entityList = [entityList]
    for e in entityList:
      try:
        self.Shutdown(e)  # Turn off before deleting
      except AmfError, err: # But if turning off has no meaning for this entity its ok
        pass
      eRef =  SetCEntity(self.entity, e)
      self.Log("Delete entity %s Type %d" % (e.name,e.type),asp.CL_LOG_SEV_INFO)
      auditLog("Deleting entity [ %s ]" % getEntityName(e))

      try:
        asp.clAmsMgmtCCBEntityDelete(self.configHdl, eRef)
      except SystemError, ex:
        self.Log("Delete Error: %s" % str(ex),asp.CL_LOG_SEV_ERROR)
      else:
        self.Log("Entity delete ok", asp.CL_LOG_SEV_DEBUG)

    self.Log("Committing deletions", asp.CL_LOG_SEV_DEBUG)
    AspExcHandler(asp.clAmsMgmtCCBCommit,(self.configHdl,),[e.name for e in entityList])
    self.Log("Commit OK", asp.CL_LOG_SEV_DEBUG)
    


  def Shutdown(self,entity):
    """Stop an entity, regardless of its current state.
    This function moves the entity into SAF LOCKED_I state, or into SAF LOCKED_A state if the entity does not have a LOCKED_I state.
    The entity will be transitioned through the LOCKED_A state if this is necessary.  In this case, the SIs are not quiesced, 
    but aborted.  To quiesce, uses the \ref Quiesce member function.

    @param entity.  A pair (entity type, entity name) or an instance of a class derived from AspEntity (i.e. AmfServiceGroup, AmfServiceUnit, AmfNode, etc), or a list of those
 
    @exception AmfError is raised if the entity cannot be moved to the appropriate state.
    @returns Nothing
    """
    if type(entity) is types.ListType:
      for e in entity: self.Shutdown(e)
      return
    
    e =  SetCEntity(self.entity, entity)

    # Service Instances can't be LOCKED_I -- LOCKED_A (idle) is the equivalent 
    if e.type == ServiceInstanceType: return self.Idle(entity)
    auditLog("Shutting down entity [ %s ]" % getEntityName(entity))

    if True:
      ret = asp.CL_ERR_TRY_AGAIN
      while ErrCode(ret) == asp.CL_ERR_TRY_AGAIN:
        ret = exc2ret(asp.clAmsMgmtEntityLockInstantiation,(self.hdl, e))
      if ret and ErrCode(ret) != asp.CL_ERR_NO_OP:  # I don't care if it was already this
        self.Log("Shutdown error: 0x%x, moving to idle first" % ret, asp.CL_LOG_SEV_INFO)
        ret = asp.CL_ERR_TRY_AGAIN
        while ErrCode(ret) == asp.CL_ERR_TRY_AGAIN:
          ret = exc2ret(asp.clAmsMgmtEntityLockAssignment,(self.hdl, e))
        if ret and ErrCode(ret) != asp.CL_ERR_NO_OP:  # I don't care if it was already in this state
          raise AmfError("Error when shutting down (removing work) %s" % str(entity),ret)
        else:
          ret = asp.CL_ERR_TRY_AGAIN
          while ErrCode(ret) == asp.CL_ERR_TRY_AGAIN:
            ret = exc2ret(asp.clAmsMgmtEntityLockInstantiation,(self.hdl, e))
          if ret: raise AmfError("Error when shutting down %s" % str(entity),ret)

  def Quiesce(self, entity):
    """Move an entity into the idle state gently.
    @desc
    Puts an entity in the idle state (running but no assigned work), regardless of its current state.  Allows the entity to finish its work before quitting.
    @param entity.  A pair (entity type, entity name) or an instance of a class derived from AspEntity (i.e. AmfServiceGroup, AmfServiceUnit, AmfNode, etc), or a list of those
    @exception AmfError is raised if the entity cannot be moved to the appropriate state.
    @returns Nothing
    """
    if type(entity) is types.ListType:
      for e in entity: self.Quiesce(e)
      return
 
    e =  SetCEntity(self.entity, entity)
    auditLog("Idling entity [ %s ]" % getEntityName(entity))

    if True:
      ret = asp.CL_ERR_TRY_AGAIN
      while ErrCode(ret) == asp.CL_ERR_TRY_AGAIN:
        ret = exc2ret(asp.clAmsMgmtEntityShutdown,(self.hdl, e))
      if ret:
        if ErrCode(ret) != asp.CL_ERR_BAD_OPERATION and ErrCode(ret) != asp.CL_ERR_NO_OP:  # I don't care if it was already idle
          raise AmfError("Error when idling (lock assignment state) %s" % str(entity),ret)



  def Idle(self, entity):
    """Puts an entity in the idle state (running but no assigned work), regardless of its current state.
    @param entity.  A pair (entity type, entity name) or an instance of a class derived from AspEntity (i.e. AmfServiceGroup, AmfServiceUnit, AmfNode, etc), or a list of those
    @exception AmfError is raised if the entity cannot be moved to the appropriate state.
    @returns Nothing
    """
    if type(entity) is types.ListType:
      for e in entity: self.Idle(e)
      return

    e =  SetCEntity(self.entity, entity)
    auditLog("Idling entity [ %s ]" % getEntityName(entity))

    if True:
      ret = asp.CL_ERR_TRY_AGAIN
      while ErrCode(ret) == asp.CL_ERR_TRY_AGAIN:
        ret = exc2ret(asp.clAmsMgmtEntityLockAssignment,(self.hdl, e))
      if ret:
        if ErrCode(ret) != asp.CL_ERR_NO_OP:  # I don't care if it was already idle
          raise AmfError("Error when idling (lock assignment state) %s" % str(entity),ret)


  def Startup(self, entity):
    """Starts an entity running and assigns work, regardless of its current state.
    @param entity.  A pair (entity type, entity name), an instance of a class derived from AspEntity (i.e. AmfServiceGroup, AmfServiceUnit, AmfNode, etc), or a list of those.

    @exception AmfError is raised if the entity cannot be moved to the appropriate state.
    @returns Nothing
    """
    if type(entity) is types.ListType:
      for e in entity: self.Startup(e)
      return

    e =  SetCEntity(self.entity, entity)
    auditLog("Starting up entity [ %s ]" % getEntityName(entity))
    if True:
      ret = asp.CL_ERR_TRY_AGAIN
      while ErrCode(ret) == asp.CL_ERR_TRY_AGAIN:
        ret = exc2ret(asp.clAmsMgmtEntityUnlock,(self.hdl, e))
      if ret and ErrCode(ret) != asp.CL_ERR_NO_OP:  # I don't care if it was already this
        self.Log("return code 0x%x, moving to lock assignment first" % ret,asp.CL_LOG_SEV_DEBUG)
        ret = asp.CL_ERR_TRY_AGAIN
        while ErrCode(ret) == asp.CL_ERR_TRY_AGAIN:
          ret = exc2ret(asp.clAmsMgmtEntityLockAssignment,(self.hdl, e))
        if ret and ErrCode(ret) != asp.CL_ERR_NO_OP:  # I don't care if it was already idle
          raise AmfError("Error when starting up (adding work) %s" % str(entity),ret)
        else:
          ret = asp.CL_ERR_TRY_AGAIN
          while ErrCode(ret) == asp.CL_ERR_TRY_AGAIN:
            ret = exc2ret(asp.clAmsMgmtEntityUnlock,(self.hdl, e))
          if ret and ErrCode(ret) != asp.CL_ERR_NO_OP: raise AmfError("Error when starting up %s" % str(entity),ret)



  def UpdateCsiAttributes(self, csi, kvdict):
    """Add or change CSI attributes
       @param csi An object of type AmfComponentServiceInstance
       @param kvdict a dictionary of key/value pairs to add or change.
    """
   
    e =  SetCEntity(self.entity, csi)
    nvp = asp.ClAmsCSINameValuePairT()
  
    for (k,v) in kvdict.items():
      setCNameT(nvp.csiName,csi.name)
      setCNameT(nvp.paramName,k)
      if v is not None:
        setCNameT(nvp.paramValue,v)
        self.Log("Adding [%s->%s] to CSI [%s]" % (k,v,csi.name),asp.CL_LOG_SEV_INFO)
        auditLog("Adding %s->%s to CSI [ %s ]" % (k,v,getEntityName(csi)))
        asp.clAmsMgmtCCBCSISetNVP(self.configHdl,e,nvp)
        #if ret: raise AmfError("Error when assigning [%s:%s] to CSI [%s]" % (k,v,str(entity)),ret)
      else:
        setCNameT(nvp.paramValue,"")
        self.Log("Removing [%s] from CSI [%s]" % (k,csi.name),asp.CL_LOG_SEV_INFO)
        auditLog("Removing %s from CSI [ %s ]" % (k,getEntityName(csi)))
        asp.clAmsMgmtCCBCSIDeleteNVP(self.configHdl,e,nvp)    
        #if ret: raise AmfError("Error when assigning [%s:%s] to CSI [%s]" % (k,v,str(entity)),ret)

    asp.clAmsMgmtCCBCommit(self.configHdl)

  def GetAssociatedData(self,entity,key=None):
    """Sets user data to be associated with this entity.
       @param entity An object derived from AmfEntity or a (type,name) pair
       @param key The key to use to retrieve this data.  If None or unspecified, the default key for this session will be used.
    """
    if key is None: key = self.defaultAssociatedDataKey
    if key is not None:
      setCNameT(self.cname,key)

    SetCEntity(self.entity,entity)
    if key is None:
      result = asp.clAmsMgmtEntityUserDataGet(self.hdl,self.entity)
    else:
      result = asp.clAmsMgmtEntityUserDataGetKey(self.hdl,self.entity,self.cname)
    return result

  def SetAssociatedData(self,entity,value,key=None):
    """Sets user data to be associated with this entity.
       @param entity An object derived from AmfEntity or a (type,name) pair
       @param value String to set the associated data to
       @param key The key to use to retrieve this data.  If None or unspecified, the default key for this session will be used.
    """
    if key is None: key = self.defaultAssociatedDataKey
    if key is not None:
      setCNameT(self.cname,key)

    SetCEntity(self.entity,entity)
    if key is None:
      asp.clAmsMgmtEntityUserDataSet(self.hdl,self.entity,value)
    else:
      asp.clAmsMgmtEntityUserDataSetKey(self.hdl,self.entity,self.cname,value)

    


  def SetLoad(self, entity, value, loadType=CpuLoadMetric):
    """Sets the load of an entity for use with the AMF triggering mechanism"""
    e = SetCEntity(self.entity, entity)
    self.metric.id = loadType
    self.metric.currentThreshold = value
    ret = asp.clAmsTriggerLoad(e, self.metric)
    if ret: # if failed to get it, it means it was not yet set, assuming 0
      raise AmfError("Error while setting load value for %s" % str(entity), ret)

  def GetLoad(self, entity, loadType=CpuLoadMetric):
    """Gets the load of an entity for use with the AMF triggering mechanism"""
    e = SetCEntity(self.entity, entity)
    ret = asp.clAmsTriggerGetMetric(e, loadType, self.metric)
    if ret: # if failed to get it, it means it was not yet set, assuming 0
      return (0,100)
    else:
      return (self.metric.currentThreshold, self.metric.maxThreshold)

  def Log(self, s, lvl=None,unwind=1):
    """Private. Writes an ASP log.  This is not actually an ASP AMF API, but is included here for convenience.
    Use @ref misc.Log
    @param s       The log you want written
    @param lvl     The log level (ex. @ref misc.LogLevelError)
    @param unwind  (optional) Stack location of the original log producer.  Useful if you wrap this Log function. (1 is you, 2 is your parent, etc)
    """
    aspLog.Log(s,lvl,unwind+1)

  def InstallEntities(self,amfentitylist):
    """Creates all entities in the passed list in the AMF, but does NOT configure them.  Therefore calling InstallApp is recommended.
    @param amfentitylist A list of @ref aspAmfEntity objects to be created in the AMF
    """
    for amfEnt in amfentitylist:
      e =  SetCEntity(self.entity, amfEnt)
      auditLog("Creating entity [ %s ]" % getEntityName(amfEnt))
      AspExcHandler(asp.clAmsMgmtCCBEntityCreate,(self.configHdl, e),amfEnt,[asp.CL_ERR_DUPLICATE])
      AspExcHandler(asp.clAmsMgmtCCBCommit,(self.configHdl,),None,[asp.CL_ERR_DUPLICATE])

      self.Log("Created entity [%s], type [%d]" % (amfEnt.name,amfEnt.type))

  def InstallSgConfig(self, sg):
    """Sets the configuration of service groups in the passed list in the AMF.
    Call @ref InstallApp if you want to create the entity if it does not exist.

    @param sg A list or singleton of type @ref aspAmfEntity.ServiceGroup

    @exception AssertionError is raised if an unhandleable ASP error occurs.
    @returns None
    """
    # If a list is passed then dive in.
    if type(sg) is types.ListType:
      for i in sg:
        self.InstallSgConfig(i)
      return

    if sg.type != ServiceGroupType: return
    auditLog("Installing service group [ %s ]" % getEntityName(sg))

    if sg.associatedData is not None:
      self.SetAssociatedData(sg,sg.associatedData)

    # Set the config parameters

    # If there is a "C" config, then apply the entire thing as the baseline
    if hasattr(sg,'cconfig') and sg.cconfig:
      config = sg.cconfig
      mask = 0xffffffff
    else:
      config = asp.ClAmsSGConfigT()
      mask = 0
    
    me = SetCEntity(config.entity, sg)

    # Set all elements that are specified
    try:
      print "Changing RED model to:", int(sg._redundancyModel)
      config.redundancyModel = sg._redundancyModel
      mask |= asp.SG_CONFIG_REDUNDANCY_MODEL
    except AttributeError: pass

    try:
      config.loadingStrategy = sg.loadingStrategy
      mask |= asp.SG_CONFIG_LOADING_STRATEGY
    except AttributeError: pass

    try:
      config.failbackOption = sg.failback
      mask |= asp.SG_CONFIG_FAILBACK_OPTION
    except AttributeError: pass

    try:
      config.autoRepair = sg.autoRepair
      mask |= asp.SG_CONFIG_AUTO_REPAIR
    except AttributeError: pass

    try:
      config.instantiateDuration = int(sg.instantiateDuration)
      mask |= asp.SG_CONFIG_INSTANTIATE_DURATION
    except AttributeError: pass

    try:
      config.numPrefActiveSUs = sg.activeServiceUnits
      mask |= asp.SG_CONFIG_NUM_PREF_ACTIVE_SUS
    except AttributeError: pass

    try:
      config.numPrefStandbySUs = sg.standbyServiceUnits
      mask |= asp.SG_CONFIG_NUM_PREF_STANDBY_SUS
    except AttributeError: pass

    try:
      config.numPrefInserviceSUs = sg.instantiatedServiceUnits
      mask |= asp.SG_CONFIG_NUM_PREF_INSERVICE_SUS
    except AttributeError: pass

    try:
      config.numPrefAssignedSUs = sg.assignedServiceUnits
      mask |= asp.SG_CONFIG_NUM_PREF_ASSIGNED_SUS
    except AttributeError: pass

    try:
      config.maxActiveSIsPerSU = sg.maxActiveSIsPerSU
      mask |= asp.SG_CONFIG_MAX_ACTIVE_SIS_PER_SU
    except AttributeError: pass

    try:
      config.maxStandbySIsPerSU = sg.maxStandbySIsPerSU
      mask |= asp.SG_CONFIG_MAX_STANDBY_SIS_PER_SU
    except AttributeError: pass

    try:
      config.reductionProcedure = sg.reductionProcedure
      mask |= asp.SG_CONFIG_REDUCTION_PROCEDURE
    except AttributeError: pass

    try:
      config.compRestartDuration = int(sg.processValidationPeriod)
      mask |= asp.SG_CONFIG_COMP_RESTART_DURATION
    except AttributeError: pass

    try:
      config.compRestartCountMax = sg.compRestartCountMax
      mask |= asp.SG_CONFIG_COMP_RESTART_COUNT_MAX
    except AttributeError: pass

    try:
      config.suRestartDuration = int(sg.suRestartDuration)
      mask |= asp.SG_CONFIG_SU_RESTART_DURATION
    except AttributeError: pass

    try:
      config.suRestartCountMax = sg.suRestartCountMax
      mask |= asp.SG_CONFIG_SU_RESTART_COUNT_MAX
    except AttributeError: pass

    try:
      config.isCollocationAllowed = sg.collocation
      mask |= asp.SG_CONFIG_COLOCATION_ALLOWED
    except AttributeError: pass

    try:
      config.alpha = sg.redundancyDegradationRatio
      mask |= asp.SG_CONFIG_ALPHA_FACTOR
    except AttributeError: pass

    try:
      config.autoAdjust = sg.autoAdjust
      mask |= asp.SG_CONFIG_AUTO_ADJUST 
    except AttributeError: pass

    try:
      config.autoAdjustProbation = int(sg.autoAdjustInterval)
      mask |= asp.SG_CONFIG_AUTO_ADJUST_PROBATION
    except AttributeError: pass

    try:
      config.reductionProcedure = sg.reductionProcedure
      mask |= asp.SG_CONFIG_REDUCTION_PROCEDURE
    except AttributeError: pass

    self.Log("SG Config settings: %s mask: %x" % (str(config),mask))

    AspExcHandler(asp.clAmsMgmtCCBEntitySetConfig,(self.configHdl, me,mask),sg)
    AspExcHandler(asp.clAmsMgmtCCBEntitySetConfig,(self.configHdl, me,mask),sg)
    #self.Log("SG Config change 1 returned: %x" % ret)
    
    AspExcHandler(asp.clAmsMgmtCCBCommit,(self.configHdl,),sg,[asp.CL_ERR_ALREADY_EXIST])
    #self.Log("SG Config change 2 returned: %x" % ret)

    # Add the SIs
    for si in sg.si:
      e = SetCEntity(self.targetentity, si)
      AspExcHandler(asp.clAmsMgmtCCBSetSGSIList,(self.configHdl, me, e),si)
      AspExcHandler(asp.clAmsMgmtCCBCommit,(self.configHdl,),(si.name, sg.name),[asp.CL_ERR_ALREADY_EXIST])


    # Add the SUs
    for su in sg.su:
      e = SetCEntity(self.targetentity, su)
      AspExcHandler(asp.clAmsMgmtCCBSetSGSUList,(self.configHdl, me, e),su)
      AspExcHandler(asp.clAmsMgmtCCBCommit,(self.configHdl,),(su.name, sg.name),[asp.CL_ERR_ALREADY_EXIST])

    self.Log("Committed service group %s" % sg.name)


  def InstallNodeConfig(self, node):
    """Sets the configuration of nodes in the passed list in the AMF.
    Call @ref InstallApp if you want to create the entity if it does not exist.

    @param node A list or singleton of type @ref aspAmfEntity.Node
    @exception AssertionError is raised if an unhandleable ASP error occurs.
    @returns None
    """

    # If a list is passed then dive in.
    if type(node) is types.ListType:
      for i in node:
        self.InstallNodeConfig(i)
      return

    if node.type != NodeType: return
    auditLog("Installing node [ %s ]" % getEntityName(node))

    if node.associatedData is not None:
      self.SetAssociatedData(node,node.associatedData)

    # Set the config parameters
    # GAS TODO

    me = SetCEntity(self.entity, node)

    # Add the SUs
    for su in node.su:
      e = SetCEntity(self.targetentity, su)
      AspExcHandler(asp.clAmsMgmtCCBSetNodeSUList,(self.configHdl, me, e),su)
      AspExcHandler(asp.clAmsMgmtCCBCommit,(self.configHdl,),su,[asp.CL_ERR_ALREADY_EXIST])

    self.Log("Committed node %s" % node.name)



  def InstallSiConfig(self,si):
    """Sets the configuration of service instances in the passed list in the AMF.
    Call InstallApp if you want to create the entity if it does not exist.

    @param si A list or singleton of type @ref aspAmfEntity.ServiceInstance

    @exception AssertionError is raised if an unhandleable ASP error occurs.
    @returns None        
    """
    # If a list is passed then dive in.
    if type(si) is types.ListType:
      for i in si:
        self.InstallSiConfig(i)
      return

    if si.type != ServiceInstanceType: return
    auditLog("Installing service instance [ %s ]" % getEntityName(si))

    if si.associatedData is not None:
      self.SetAssociatedData(si,si.associatedData)

    # Set the config parameters

    # Pull the c configuration if the object has one
    if hasattr(si,'cconfig') and si.cconfig:
      config = si.cconfig
      mask = 0xffffffff
    else:
      config = asp.ClAmsSIConfigT()
      mask = 0

    # Override the Python changes
    mask   |= asp.SI_CONFIG_NUM_CSIS
    config.numCSIs = len(si.csi)

    try:
      config.rank = si.rank
      mask   |= asp.SI_CONFIG_RANK
    except AttributeError: pass

    try:
      config.numStandbyAssignments = si.numStandbyAssignments
      mask |= asp.SI_CONFIG_NUM_STANDBY_ASSIGNMENTS
    except AttributeError: pass

    try:
      config.adminState = asp.CL_AMS_ADMIN_STATE_UNLOCKED
      mask |= asp.SI_CONFIG_ADMIN_STATE
    except AttributeError: pass
      
    SetCEntity(config.entity, si)
    AspExcHandler(asp.clAmsMgmtCCBEntitySetConfig,(self.configHdl,config.entity,mask),config)

    for csi in si.csi:
      e = SetCEntity(self.entity, csi)
      AspExcHandler(asp.clAmsMgmtCCBSetSICSIList,(self.configHdl,config.entity,e),csi)

      if 0:
        csiConfig = asp.ClAmsCSIConfigT()
        csiConfig.type.value = str(csi.csiType)
        csiConfig.type.length = len(csi.csiType)+1
        SetCEntity(csiConfig.entity, csi)
        mask = asp.CSI_CONFIG_TYPE
        AspExcHandler(asp.clAmsMgmtCCBEntitySetConfig,(self.configHdl,csiConfig.entity,mask),csi)
    
    AspExcHandler(asp.clAmsMgmtCCBCommit,(self.configHdl,),si,[asp.CL_ERR_ALREADY_EXIST])

    self.Log("Committed work assignment %s" % si.name)


  def InstallSuConfig(self,su):
    """Sets the configuration of service units in the passed list in the AMF.
    Call @ref InstallApp if you want to create the entity if it does not exist.

    @param su A list or singleton of type @ref aspAmfEntity.ServiceUnit

    @exception AssertionError is raised if an unhandleable ASP error occurs.
    @returns None
    """

    # If a list is passed then dive in.
    if type(su) is types.ListType:
      for i in su:
        self.InstallSuConfig(i)
      return

    if su.type != ServiceUnitType: return
    auditLog("installing service unit [ %s ]" % getEntityName(su))

    if su.associatedData is not None:
      self.SetAssociatedData(su,su.associatedData)

    # Set the config parameters

    # If there is a "C" config, then apply the entire thing as the baseline
    if hasattr(su,'cconfig') and su.cconfig:
      config = su.cconfig
      mask = 0xffffffff
    else:
      config = asp.ClAmsSUConfigT()
      mask = 0
    
    SetCEntity(config.entity, su)

    # assign the components list length properly
    mask |= asp.SU_CONFIG_NUM_COMPONENTS
    config.numComponents = len(su.comp)

    # Modifying the rank
    try:
      config.rank = su.rank
      mask = mask | asp.SU_CONFIG_RANK
    except AttributeError: pass

    try:
      s = self.initialState
      try:
        config.adminState = s
        mask = mask | SU_CONFIG_RANK
      except AttributeError:
        pass
    except AttributeError:
      pass # No special state to be set

    AspExcHandler(asp.clAmsMgmtCCBEntitySetConfig,(self.configHdl,config.entity,mask),config)

    # Add the components
    for comp in su.comp:
      e = SetCEntity(self.entity, comp)
      AspExcHandler(asp.clAmsMgmtCCBSetSUCompList,(self.configHdl,config.entity,e),comp)

    AspExcHandler(asp.clAmsMgmtCCBCommit,(self.configHdl,),su,[asp.CL_ERR_ALREADY_EXIST])

    self.Log("Committed service unit %s" % su.name)


  def InstallCompConfig(self,comp):
    """Sets the configuration of components in the passed list in the AMF.
    Call @ref InstallApp if you want to create the entity if it does not exist.

    @param comp A list or singleton of type @ref aspAmfEntity.Component

    @exception AssertionError is raised if an unhandleable ASP error occurs.
    @returns None
    """

    # If a list is passed then dive in.
    if type(comp) is types.ListType:
      for i in comp:
        self.InstallCompConfig(i)
      return

    if comp.type != ComponentType: return
    auditLog("Installing component [ %s ]" % getEntityName(comp))

    if comp.associatedData is not None:
      self.SetAssociatedData(comp,comp.associatedData)

    numSupportedCsis = len(comp.supportedCsis)

    # Set the config parameters

    # If there is a "C" config, then apply the entire thing as the baseline
    if hasattr(comp,'cconfig') and comp.cconfig:
      config = comp.cconfig
      mask = 0xffffffff
    else:
      config = asp.ClAmsCompConfigT()
      mask = 0

    SetCEntity(config.entity, comp)

    # Apply python overrides on top of the base "C" config
    try:
      config.capabilityModel = comp.capabilityModel
      mask |= asp.COMP_CONFIG_CAPABILITY_MODEL
    except AttributeError: pass
    try:
      config.timeouts        = comp.timeouts
      mask |= asp.COMP_CONFIG_TIMEOUTS
    except AttributeError: pass

    try:
      config.recoveryOnTimeout = comp.recoveryOnTimeout
      mask |= asp.COMP_CONFIG_RECOVERY_ON_TIMEOUT
    except AttributeError: pass

    try:
      config.numMaxStandbyCSIs = comp.numMaxStandbyCSIs
      mask |= asp.COMP_CONFIG_NUM_MAX_STANDBY_CSIS
    except AttributeError: pass

    try:
      config.numMaxActiveCSIs = comp.numMaxActiveCSIs
      mask |= asp.COMP_CONFIG_NUM_MAX_ACTIVE_CSIS
    except AttributeError: pass

    try:
      config.numSupportedCSITypes = numSupportedCsis
      mask |= asp.COMP_CONFIG_SUPPORTED_CSI_TYPE
 
      # Add the CSI types to the config    
      cCsiList = asp.new_SaNameT_array(numSupportedCsis)
      index = 0
      tempcName = asp.SaNameT()
      for csiType in comp.supportedCsis:
        #self.Log("CSI: %s" % csi.name)
        setCNameT(tempcName,str(csiType))
        asp.SaNameT_array_setitem(cCsiList, index, tempcName) # Add this csi to the list of supported CSIs
        index += 1

      config.pSupportedCSITypes = cCsiList
      self.Log("SupportedCSITypes: %s, Len: %s" % (str(comp.supportedCsis), numSupportedCsis))
    except AttributeError: pass

    try:
      if comp.instantiateCommand:
        config.instantiateCommand = str(comp.instantiateCommand)
      else:
        config.instantiateCommand = str(comp.name)
      mask |= asp.COMP_CONFIG_INSTANTIATE_COMMAND
    except AttributeError: pass

    AspExcHandler(asp.clAmsMgmtCCBEntitySetConfig,(self.configHdl,config.entity,mask),config)
    AspExcHandler(asp.clAmsMgmtCCBCommit,(self.configHdl,),(comp,config),[],{0x220105:AmfError(0x220105)})
    asp.delete_SaNameT_array(cCsiList)
   
    self.Log("Committed component %s (command line: %s)" % (comp.name, config.instantiateCommand))


  def InstallCsiConfig(self, entityList):
    """Sets the supported csi types to the component.

    @param sg A list or singleton of type @ref aspAmfEntity.ComponentServiceInstance

    @exception AssertionError is raised if an unhandleable ASP error occurs.
    @returns None
    """
    
    csis = []
    for e in entityList:
      if e.type is ComponentServiceInstanceType:
        csis.append(e)

    self.Log("Install component work info: %s" % str([x.name for x in csis]))

    nvp = asp.ClAmsCSINameValuePairT()

        
    for csi in csis:

      # Pull the c configuration if the object has one
      if hasattr(csi,'cconfig') and csi.cconfig:
        config = csi.cconfig
        mask = 0xffffffff
      else:
        config = asp.ClAmsCSIConfigT()
        mask = 0

      SetCEntity(config.entity, csi)
      
      mask |= asp.CSI_CONFIG_TYPE;
      setCNameT(config.type,csi.csiType)

      try:
        config.rank = csi.rank
        mask |= asp.CSI_CONFIG_RANK;
      except AttributeError:
        pass

      auditLog("Installing component service instance [ %s ]" % getEntityName(csi))
      AspExcHandler(asp.clAmsMgmtCCBEntitySetConfig,(self.configHdl,config.entity,mask),config)

      AspExcHandler(asp.clAmsMgmtCCBCommit,(self.configHdl,),(csi,config),[],{0x220105:AmfError(0x220105)})

      # Set the name/value pairs for this CSI
      SetCEntity(self.entity, csi)
      #self.Log("Adding work to %s" % csi.name)
      for (k,v) in csi.kvdict.items():
        setCNameT(nvp.csiName,csi.name)
        setCNameT(nvp.paramName,k)
        setCNameT(nvp.paramValue,v)
        #self.Log("Work: %s Adding info %s -> %s" % (csi.name, k,v))
        AspExcHandler(asp.clAmsMgmtCCBCSISetNVP,(self.configHdl,self.entity,nvp),(csi,k,v))
 
    AspExcHandler(asp.clAmsMgmtCCBCommit,(self.configHdl,), csis)
   

def auditLog(logStr, context=None):
  print AUDIT_LOG_PREPEND_STR + "%s" % logStr

def getEntityName(entity):
  if type(entity) is types.TupleType:
    return entity[1]
  else:
    return entity.name
    
def SetCEntity(entity, obj):
  """Sets the C level "Entity" object to an entity
     @param entity  The C level entity object.  Pass "None" to create one.
     @param obj     The entity as either a tuple (type, name), or an AmfEntity object
  """
  if entity==None:
      entity = asp.ClAmsEntityConfigT()

  if type(obj) is type(()):  # (Type, Name) pair
    setCNameT(entity.name,obj[1])
    entity.type        = obj[0]
  elif type(obj) is types.InstanceType:
    #Log("SetCEntity: obj [%s]" % str(obj))
    #Log("SetCEntity: name [%s] type [%d]" % (obj.name, obj.type))
    setCNameT(entity.name,obj.name)
    entity.type        = obj.type
  else:
    assert(0)

  return entity

def ErrCode(retval):
  """Strip the component off of an ASP return code"""
  return retval & 0xffff

 
def exc2ret(fn,args):
  try:
    fn(*args)
  except SystemError, ex:
    return ex[0]
  return 0


def AspExcHandler(fn,args,obj = None,okset=[],errDict={}):
  ret = None
  try:
    ret = fn(*args)
  except SystemError,ex:
    retcode = ex[0]
    errcode = ErrCode(retcode)

    # A specific return code can override any error codes
    if errDict.has_key(retcode): raise errDict[retcode]
    if retcode in okset: return ret
    # Check if the error code is in the ok or error set
    if errDict.has_key(errcode): raise errDict[errcode]
    if errcode in okset: return ret

    # Not found, so we will raise a standard error about it
    aspLog.Log("Error Code: %x" % errcode,asp.CL_LOG_SEV_ERROR)
    if obj:
      aspLog.Log("Related object: %s" % str(obj),asp.CL_LOG_SEV_ERROR)
    raise
  return ret


def ChkAspErr(ret,obj = None,okset=[],errDict={}):
  """Internal function to check for C level errors"""
  if ret == asp.CL_OK: return
  if ErrCode(ret) in okset: return
  if errDict.has_key(ret): raise errDict[ret]
  if errDict.has_key(ret&0xffff):raise errDict[ret]
  aspLog.Log("Error.  Error Code: %x" % ret,asp.CL_LOG_SEV_ERROR)
  if obj:
    aspLog.Log("Related object: %s" % str(obj),asp.CL_LOG_SEV_ERROR)
  assert(ret == asp.CL_OK)



def Test():
  """Internal module unit test"""
  global amf
  amf = Session()
  amf.Shutdown((3,"GuestMgrSGI0"))
  amf.Startup((3,"GuestMgrSGI0"))

def TestCreate(name):
  """Internal module unit test"""
  import aspAmfCreate
  import dot
  s = Session()
  n = s.GetRunningAmfNodes()
  ent = aspAmfCreate.CreateApp(name,n,dot.Dot({"rModel":"2N"}),[{"key":"value"}])
  s.InstallEntities(ent)
  s.InstallCsiConfig(ent)
  s.InstallCompConfig(ent)
  s.InstallNodeConfig(ent)
  s.InstallSgConfig(ent)
  s.InstallSiConfig(ent)
  s.InstallSuConfig(ent)
  s.Startup((ServiceGroupType,name + "SGi0"))
  s.Startup((ServiceUnitType,name + "SUi0_1"))

def TestGetConfig():
  """Internal module unit test"""
  s = Session()
  nodes = s.GetConfiguredNodeNames()
  config = asp.ClAmsNodeConfigT()

  print "Nodes: ", nodes
  for n in nodes:
    config = asp.clAmsMgmtNodeGetConfig(s.hdl,n[1])
    print config   

  sgs = s.GetConfiguredEntities(ServiceGroupType)
  print sgs
  for sg in sgs:
    config = asp.clAmsMgmtServiceGroupGetConfig(s.hdl,sg[1])
    print config

  sus = s.GetConfiguredEntities(ServiceUnitType)
  print sus
  for su in sgs:
    config = asp.clAmsMgmtServiceUnitGetConfig(s.hdl,su[1])
    print config

  sis = s.GetConfiguredEntities(WorkAssignmentType)
  print "SIs: ", sis
  for si in sis:
    config = asp.clAmsMgmtServiceInstanceGetConfig(s.hdl,si[1])
    print config

  csis = s.GetConfiguredEntities(ComponentWorkAssignmentType)
  print "CSIs: ", csis
  for csi in csis:
    config = asp.clAmsMgmtCompServiceInstanceGetConfig(s.hdl,csi[1])
    print config

  comps = s.GetConfiguredEntities(ComponentType)
  print "comps: ", comps
  for comp in comps:
    config = asp.clAmsMgmtCompGetConfig(s.hdl,comp[1])
    print config

