/* 
 * File ComponentServiceInstance.hxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 

#pragma once
#ifndef COMPONENTSERVICEINSTANCE_HXX_
#define COMPONENTSERVICEINSTANCE_HXX_
#include "SAFplusAmfCommon.hxx"

#include <string>
#include "clTransaction.hxx"
#include "clMgtProv.hxx"
#include "ServiceInstance.hxx"
#include "Component.hxx"
#include "clMgtList.hxx"
#include <vector>
#include "MgtFactory.hxx"
#include "EntityId.hxx"
#include "clMgtProvList.hxx"
#include "clMgtIdentifier.hxx"
#include "clMgtIdentifierList.hxx"

namespace SAFplusAmf
  {

    class ComponentServiceInstance : public EntityId {

        /* Apply MGT object factory */
        MGT_REGISTER(ComponentServiceInstance);

    public:

        /*
         * A protection group for a specific component service instance is the group of components to which the component service instance has been assigned
         */
        SAFplus::MgtProvList<std::string> protectionGroup;

        /*
         * 
         */
        SAFplus::MgtIdentifierList<SAFplusAmf::ComponentServiceInstance*> dependencies;
        SAFplus::MgtIdentifier<SAFplusAmf::ServiceInstance*> serviceInstance;

        /*
         * This work is assigned standby to these components
         */
        SAFplus::MgtIdentifierList<SAFplusAmf::Component*> standbyComponents;

        /*
         * This work is assigned active to these components
         */
        SAFplus::MgtIdentifierList<SAFplusAmf::Component*> activeComponents;

        /*
         * Arbitrary data that defines the work needed to be done.
         */
        SAFplus::MgtList<std::string> dataList;

    public:
        ComponentServiceInstance();
        ComponentServiceInstance(std::string myNameValue);
        std::vector<std::string> getKeys();
        std::vector<std::string>* getChildNames();

        /*
         * XPATH: /SAFplusAmf/ComponentServiceInstance/protectionGroup
         */
        std::vector<std::string> getProtectionGroup();

        /*
         * XPATH: /SAFplusAmf/ComponentServiceInstance/protectionGroup
         */
        void setProtectionGroup(std::string protectionGroupValue);

        /*
         * XPATH: /SAFplusAmf/ComponentServiceInstance/dependencies
         */
        std::vector<SAFplusAmf::ComponentServiceInstance*> getDependencies();

        /*
         * XPATH: /SAFplusAmf/ComponentServiceInstance/dependencies
         */
        void setDependencies(SAFplusAmf::ComponentServiceInstance* dependenciesValue);

        /*
         * XPATH: /SAFplusAmf/ComponentServiceInstance/serviceInstance
         */
        SAFplusAmf::ServiceInstance* getServiceInstance();

        /*
         * XPATH: /SAFplusAmf/ComponentServiceInstance/serviceInstance
         */
        void setServiceInstance(SAFplusAmf::ServiceInstance* serviceInstanceValue, SAFplus::Transaction &t=SAFplus::NO_TXN);

        /*
         * XPATH: /SAFplusAmf/ComponentServiceInstance/standbyComponents
         */
        std::vector<SAFplusAmf::Component*> getStandbyComponents();

        /*
         * XPATH: /SAFplusAmf/ComponentServiceInstance/standbyComponents
         */
        void setStandbyComponents(SAFplusAmf::Component* standbyComponentsValue);

        /*
         * XPATH: /SAFplusAmf/ComponentServiceInstance/activeComponents
         */
        std::vector<SAFplusAmf::Component*> getActiveComponents();

        /*
         * XPATH: /SAFplusAmf/ComponentServiceInstance/activeComponents
         */
        void setActiveComponents(SAFplusAmf::Component* activeComponentsValue);
        ~ComponentServiceInstance();

    };
}
/* namespace SAFplusAmf */
#endif /* COMPONENTSERVICEINSTANCE_HXX_ */
