/* 
 * File ServiceInstance.cxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 
#include "SAFplusAmfCommon.hxx"

#include "AssignmentState.hxx"
#include <string>
#include "clTransaction.hxx"
#include "StandbyAssignments.hxx"
#include "ComponentServiceInstance.hxx"
#include "clMgtList.hxx"
#include "MgtFactory.hxx"
#include "ActiveAssignments.hxx"
#include "AdministrativeState.hxx"
#include "clMgtProv.hxx"
#include "StandbyAssignments.hxx"
#include "ServiceGroup.hxx"
#include <vector>
#include "ActiveAssignments.hxx"
#include "EntityId.hxx"
#include "clMgtProvList.hxx"
#include "ServiceInstance.hxx"


namespace SAFplusAmf
  {

    /* Apply MGT object factory */
    MGT_REGISTER_IMPL(ServiceInstance, /SAFplusAmf/ServiceInstance)

    ServiceInstance::ServiceInstance(): adminState("adminState"), assignmentState("assignmentState"), preferredActiveAssignments("preferredActiveAssignments"), preferredStandbyAssignments("preferredStandbyAssignments"), rank("rank"), componentServiceInstances("componentServiceInstances"), serviceGroup("serviceGroup"), activeWeightList("activeWeight"), standbyWeightList("standbyWeight")
    {
        this->addChildObject(&adminState, "adminState");
        this->addChildObject(&assignmentState, "assignmentState");
        this->addChildObject(&preferredActiveAssignments, "preferredActiveAssignments");
        this->addChildObject(&preferredStandbyAssignments, "preferredStandbyAssignments");
        this->addChildObject(&rank, "rank");
        this->addChildObject(&componentServiceInstances, "componentServiceInstances");
        this->addChildObject(&serviceGroup, "serviceGroup");
        this->addChildObject(&activeWeightList, "activeWeight");
        this->addChildObject(&standbyWeightList, "standbyWeight");
        this->name.assign("ServiceInstance");
    };

    ServiceInstance::ServiceInstance(std::string nameValue): adminState("adminState"), assignmentState("assignmentState"), preferredActiveAssignments("preferredActiveAssignments"), preferredStandbyAssignments("preferredStandbyAssignments"), rank("rank"), componentServiceInstances("componentServiceInstances"), serviceGroup("serviceGroup"), activeWeightList("activeWeight"), standbyWeightList("standbyWeight")
    {
        this->name.value =  nameValue;
        this->addChildObject(&adminState, "adminState");
        this->addChildObject(&assignmentState, "assignmentState");
        this->addChildObject(&preferredActiveAssignments, "preferredActiveAssignments");
        this->addChildObject(&preferredStandbyAssignments, "preferredStandbyAssignments");
        this->addChildObject(&rank, "rank");
        this->addChildObject(&componentServiceInstances, "componentServiceInstances");
        this->addChildObject(&serviceGroup, "serviceGroup");
        this->addChildObject(&activeWeightList, "activeWeight");
        this->addChildObject(&standbyWeightList, "standbyWeight");
        this->name.assign("ServiceInstance");
    };

    std::vector<std::string> ServiceInstance::getKeys()
    {
        std::string keyNames[] = { "name" };
        return std::vector<std::string> (keyNames, keyNames + sizeof(keyNames) / sizeof(keyNames[0]));
    };

    std::vector<std::string>* ServiceInstance::getChildNames()
    {
        std::string childNames[] = { "name", "id", "adminState", "assignmentState", "preferredActiveAssignments", "preferredStandbyAssignments", "rank", "activeWeight", "standbyWeight", "activeAssignments", "standbyAssignments", "componentServiceInstances", "serviceGroup" };
        return new std::vector<std::string> (childNames, childNames + sizeof(childNames) / sizeof(childNames[0]));
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/adminState
     */
    SAFplusAmf::AdministrativeState ServiceInstance::getAdminState()
    {
        return this->adminState.value;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/adminState
     */
    void ServiceInstance::setAdminState(SAFplusAmf::AdministrativeState adminStateValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->adminState.value = adminStateValue;
        else
        {
            SAFplus::SimpleTxnOperation<SAFplusAmf::AdministrativeState> *opt = new SAFplus::SimpleTxnOperation<SAFplusAmf::AdministrativeState>(&(adminState.value),adminStateValue);
            t.addOperation(opt);
        }
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/assignmentState
     */
    SAFplusAmf::AssignmentState ServiceInstance::getAssignmentState()
    {
        return this->assignmentState.value;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/assignmentState
     */
    void ServiceInstance::setAssignmentState(SAFplusAmf::AssignmentState assignmentStateValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->assignmentState.value = assignmentStateValue;
        else
        {
            SAFplus::SimpleTxnOperation<SAFplusAmf::AssignmentState> *opt = new SAFplus::SimpleTxnOperation<SAFplusAmf::AssignmentState>(&(assignmentState.value),assignmentStateValue);
            t.addOperation(opt);
        }
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/preferredActiveAssignments
     */
    unsigned int ServiceInstance::getPreferredActiveAssignments()
    {
        return this->preferredActiveAssignments.value;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/preferredActiveAssignments
     */
    void ServiceInstance::setPreferredActiveAssignments(unsigned int preferredActiveAssignmentsValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->preferredActiveAssignments.value = preferredActiveAssignmentsValue;
        else
        {
            SAFplus::SimpleTxnOperation<unsigned int> *opt = new SAFplus::SimpleTxnOperation<unsigned int>(&(preferredActiveAssignments.value),preferredActiveAssignmentsValue);
            t.addOperation(opt);
        }
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/preferredStandbyAssignments
     */
    unsigned int ServiceInstance::getPreferredStandbyAssignments()
    {
        return this->preferredStandbyAssignments.value;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/preferredStandbyAssignments
     */
    void ServiceInstance::setPreferredStandbyAssignments(unsigned int preferredStandbyAssignmentsValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->preferredStandbyAssignments.value = preferredStandbyAssignmentsValue;
        else
        {
            SAFplus::SimpleTxnOperation<unsigned int> *opt = new SAFplus::SimpleTxnOperation<unsigned int>(&(preferredStandbyAssignments.value),preferredStandbyAssignmentsValue);
            t.addOperation(opt);
        }
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/rank
     */
    unsigned int ServiceInstance::getRank()
    {
        return this->rank.value;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/rank
     */
    void ServiceInstance::setRank(unsigned int rankValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->rank.value = rankValue;
        else
        {
            SAFplus::SimpleTxnOperation<unsigned int> *opt = new SAFplus::SimpleTxnOperation<unsigned int>(&(rank.value),rankValue);
            t.addOperation(opt);
        }
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/componentServiceInstances
     */
    std::vector<SAFplusAmf::ComponentServiceInstance*> ServiceInstance::getComponentServiceInstances()
    {
        return this->componentServiceInstances.value;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/componentServiceInstances
     */
    void ServiceInstance::setComponentServiceInstances(SAFplusAmf::ComponentServiceInstance* componentServiceInstancesValue)
    {
        this->componentServiceInstances.value.push_back(componentServiceInstancesValue);
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/serviceGroup
     */
    SAFplusAmf::ServiceGroup* ServiceInstance::getServiceGroup()
    {
        return this->serviceGroup.value;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/serviceGroup
     */
    void ServiceInstance::setServiceGroup(SAFplusAmf::ServiceGroup* serviceGroupValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->serviceGroup.value = serviceGroupValue;
        else
        {
            SAFplus::SimpleTxnOperation<SAFplusAmf::ServiceGroup*> *opt = new SAFplus::SimpleTxnOperation<SAFplusAmf::ServiceGroup*>(&(serviceGroup.value),serviceGroupValue);
            t.addOperation(opt);
        }
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/activeAssignments
     */
    SAFplusAmf::ActiveAssignments* ServiceInstance::getActiveAssignments()
    {
        return dynamic_cast<ActiveAssignments*>(this->getChildObject("activeAssignments"));
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/activeAssignments
     */
    void ServiceInstance::addActiveAssignments(SAFplusAmf::ActiveAssignments *activeAssignmentsValue)
    {
        this->addChildObject(activeAssignmentsValue, "activeAssignments");
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/standbyAssignments
     */
    SAFplusAmf::StandbyAssignments* ServiceInstance::getStandbyAssignments()
    {
        return dynamic_cast<StandbyAssignments*>(this->getChildObject("standbyAssignments"));
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/standbyAssignments
     */
    void ServiceInstance::addStandbyAssignments(SAFplusAmf::StandbyAssignments *standbyAssignmentsValue)
    {
        this->addChildObject(standbyAssignmentsValue, "standbyAssignments");
    };

    ServiceInstance::~ServiceInstance()
    {
    };

}
/* namespace SAFplusAmf */
