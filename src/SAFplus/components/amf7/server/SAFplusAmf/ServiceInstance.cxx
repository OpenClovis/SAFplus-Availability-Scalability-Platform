/* 
 * File ServiceInstance.cxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 

#include <map>
#include "clMgtObject.hxx"
#include "StandbyWeight.hxx"
#include "clMgtProv.hxx"
#include "StandbyAssignments.hxx"
#include <vector>
#include "MgtFactory.hxx"
#include "ActiveAssignments.hxx"
#include "AdministrativeState.hxx"
#include "ActiveWeight.hxx"
#include <string>
#include "ServiceInstance.hxx"

using namespace std;
using namespace SAFplusAmf;

namespace SAFplusAmf {

    /* Apply MGT object factory */
    REGISTERIMPL(ServiceInstance, /SAFplusAmf/ServiceInstance)

    ServiceInstance::ServiceInstance(): ClMgtObject("ServiceInstance"), name("name"), id("id"), adminState("adminState"), assignmentState("assignmentState"), rank("rank") {
        this->addChildObject(&name, "name");
        this->addChildObject(&id, "id");
        this->addChildObject(&adminState, "adminState");
        this->addChildObject(&assignmentState, "assignmentState");
        this->addChildObject(&rank, "rank");
        this->addKey("name");
    };

    ServiceInstance::ServiceInstance(string nameValue): ClMgtObject("ServiceInstance"), name("name"), id("id"), adminState("adminState"), assignmentState("assignmentState"), rank("rank") {
        this->name.Value =  nameValue;
        this->addKey("name");
        this->addChildObject(&name, "name");
        this->addChildObject(&id, "id");
        this->addChildObject(&adminState, "adminState");
        this->addChildObject(&assignmentState, "assignmentState");
        this->addChildObject(&rank, "rank");
    };

    vector<string> ServiceInstance::getKeys() {
        string keyNames[] = { "name" };
        return vector<string> (keyNames, keyNames + sizeof(keyNames) / sizeof(keyNames[0]));
    };

    vector<string> *ServiceInstance::getChildNames() {
        string childNames[] = { "name", "id", "adminState", "assignmentState", "rank", "activeWeight", "standbyWeight", "activeAssignments", "standbyAssignments" };
        return new vector<string> (childNames, childNames + sizeof(childNames) / sizeof(childNames[0]));
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/name
     */
    string ServiceInstance::getName() {
        return this->name.Value;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/name
     */
    void ServiceInstance::setName(string nameValue) {
        this->name.Value = nameValue;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/id
     */
    unsigned short int ServiceInstance::getId() {
        return this->id.Value;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/id
     */
    void ServiceInstance::setId(unsigned short int idValue) {
        this->id.Value = idValue;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/adminState
     */
    AdministrativeState ServiceInstance::getAdminState() {
        return this->adminState.Value;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/adminState
     */
    void ServiceInstance::setAdminState(AdministrativeState adminStateValue) {
        this->adminState.Value = adminStateValue;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/assignmentState
     */
    AssignmentStateOption ServiceInstance::getAssignmentState() {
        return static_cast<AssignmentStateOption>(this->assignmentState.Value);
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/assignmentState
     */
    void ServiceInstance::setAssignmentState(AssignmentStateOption assignmentStateValue) {
        this->assignmentState.Value = static_cast<int>(assignmentStateValue);
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/rank
     */
    unsigned int ServiceInstance::getRank() {
        return this->rank.Value;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/rank
     */
    void ServiceInstance::setRank(unsigned int rankValue) {
        this->rank.Value = rankValue;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/activeWeight
     */
    ActiveWeight* ServiceInstance::getActiveWeight(string resourceValue) {
        map<string, vector<ClMgtObject*>* >::iterator mapIndex = mChildren.find("activeWeight");
        /* Check if MGT module already exists in the database */
        if (mapIndex != mChildren.end()) {
            vector<ClMgtObject*> *objs = (vector<ClMgtObject*>*) (*mapIndex).second;
            for (unsigned int i = 0; i < objs->size(); i++) {
                ClMgtObject* childObject = (*objs)[i];
                if (((ActiveWeight*)childObject)->getResource() == resourceValue) {
                    return (ActiveWeight*)childObject;
                }
            }
        }
        return NULL;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/activeWeight
     */
    void ServiceInstance::addActiveWeight(ActiveWeight *activeWeightValue) {
        this->addChildObject(activeWeightValue, "activeWeight");
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/activeWeight
     */
    void ServiceInstance::addActiveWeight(string resourceValue) {
        ActiveWeight *objactiveWeight = new ActiveWeight(resourceValue);
        this->addChildObject(objactiveWeight, "activeWeight");
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/standbyWeight
     */
    StandbyWeight* ServiceInstance::getStandbyWeight(string resourceValue) {
        map<string, vector<ClMgtObject*>* >::iterator mapIndex = mChildren.find("standbyWeight");
        /* Check if MGT module already exists in the database */
        if (mapIndex != mChildren.end()) {
            vector<ClMgtObject*> *objs = (vector<ClMgtObject*>*) (*mapIndex).second;
            for (unsigned int i = 0; i < objs->size(); i++) {
                ClMgtObject* childObject = (*objs)[i];
                if (((StandbyWeight*)childObject)->getResource() == resourceValue) {
                    return (StandbyWeight*)childObject;
                }
            }
        }
        return NULL;
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/standbyWeight
     */
    void ServiceInstance::addStandbyWeight(StandbyWeight *standbyWeightValue) {
        this->addChildObject(standbyWeightValue, "standbyWeight");
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/standbyWeight
     */
    void ServiceInstance::addStandbyWeight(string resourceValue) {
        StandbyWeight *objstandbyWeight = new StandbyWeight(resourceValue);
        this->addChildObject(objstandbyWeight, "standbyWeight");
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/activeAssignments
     */
    ActiveAssignments* ServiceInstance::getActiveAssignments() {
        return (ActiveAssignments*)this->getChildObject("activeAssignments");
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/activeAssignments
     */
    void ServiceInstance::addActiveAssignments(ActiveAssignments *activeAssignmentsValue) {
        this->addChildObject(activeAssignmentsValue, "activeAssignments");
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/standbyAssignments
     */
    StandbyAssignments* ServiceInstance::getStandbyAssignments() {
        return (StandbyAssignments*)this->getChildObject("standbyAssignments");
    };

    /*
     * XPATH: /SAFplusAmf/ServiceInstance/standbyAssignments
     */
    void ServiceInstance::addStandbyAssignments(StandbyAssignments *standbyAssignmentsValue) {
        this->addChildObject(standbyAssignmentsValue, "standbyAssignments");
    };

    ServiceInstance::~ServiceInstance() {
    };

}
/* namespace SAFplusAmf */
