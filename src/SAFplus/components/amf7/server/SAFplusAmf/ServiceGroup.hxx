/* 
 * File ServiceGroup.hxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 

#ifndef SERVICEGROUP_HXX_
#define SERVICEGROUP_HXX_

#include "SpareServiceUnits.hxx"
#include "clMgtObject.hxx"
#include "AssignedServiceUnits.hxx"
#include "clMgtProv.hxx"
#include "SaTimeT.hxx"
#include "ComponentRestart.hxx"
#include "IdleServiceUnits.hxx"
#include "ServiceUnitRestart.hxx"
#include <vector>
#include "MgtFactory.hxx"
#include "AdministrativeState.hxx"
#include <string>

namespace SAFplusAmf {

    class ServiceGroup : public ClMgtObject {

        /* Apply MGT object factory */
        REGISTER(ServiceGroup);

    public:

        /*
         * Unique name of this entity
         */
        ClMgtProv<std::string> name;

        /*
         * Each SAFplus AMF entity gets a unique numerical identifier
         */
        ClMgtProv<unsigned short int> id;

        /*
         * Does the operator want this entity to be off, idle, or in service?
         */
        ClMgtProv<AdministrativeState> adminState;

        /*
         * Automatically attempt to bring this entity back into a healthy state if its operational state becomes disabled.
         */
        ClMgtProv<bool> autoRepair;
        ClMgtProv<bool> autoAdjust;

        /*
         * The time between checks to see if auto adjustment is needed.
         */
        ClMgtProv<SaTimeT> autoAdjustInterval;

        /*
         * 
         */
        ClMgtProv<unsigned int> preferredNumActiveServiceUnits;

        /*
         * 
         */
        ClMgtProv<unsigned int> preferredNumStandbyServiceUnits;

        /*
         * An idle service unit is running but is not assigned active or standby.  This concept is functionally equivalent to the saAmfSGNumPrefInserviceSUs since Active+Standby+Idle = Inservice
         */
        ClMgtProv<unsigned int> preferredNumIdleServiceUnits;

        /*
         * The maximum number of active work assignments that can be placed on a single service unit (and therefore component/process) simultaneously.
         */
        ClMgtProv<unsigned int> maxActiveWorkAssignments;

        /*
         * The maximum number of standby work assignments that can be placed on a single service unit (and therefore component/process) simultaneously.
         */
        ClMgtProv<unsigned int> maxStandbyWorkAssignments;

    public:
        ServiceGroup();
        ServiceGroup(std::string nameValue);
        std::vector<std::string> getKeys();
        std::vector<std::string> *getChildNames();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/name
         */
        std::string getName();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/name
         */
        void setName(std::string nameValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/id
         */
        unsigned short int getId();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/id
         */
        void setId(unsigned short int idValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/adminState
         */
        AdministrativeState getAdminState();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/adminState
         */
        void setAdminState(AdministrativeState adminStateValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/autoRepair
         */
        bool getAutoRepair();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/autoRepair
         */
        void setAutoRepair(bool autoRepairValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/autoAdjust
         */
        bool getAutoAdjust();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/autoAdjust
         */
        void setAutoAdjust(bool autoAdjustValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/autoAdjustInterval
         */
        SaTimeT getAutoAdjustInterval();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/autoAdjustInterval
         */
        void setAutoAdjustInterval(SaTimeT autoAdjustIntervalValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/preferredNumActiveServiceUnits
         */
        unsigned int getPreferredNumActiveServiceUnits();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/preferredNumActiveServiceUnits
         */
        void setPreferredNumActiveServiceUnits(unsigned int preferredNumActiveServiceUnitsValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/preferredNumStandbyServiceUnits
         */
        unsigned int getPreferredNumStandbyServiceUnits();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/preferredNumStandbyServiceUnits
         */
        void setPreferredNumStandbyServiceUnits(unsigned int preferredNumStandbyServiceUnitsValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/preferredNumIdleServiceUnits
         */
        unsigned int getPreferredNumIdleServiceUnits();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/preferredNumIdleServiceUnits
         */
        void setPreferredNumIdleServiceUnits(unsigned int preferredNumIdleServiceUnitsValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/maxActiveWorkAssignments
         */
        unsigned int getMaxActiveWorkAssignments();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/maxActiveWorkAssignments
         */
        void setMaxActiveWorkAssignments(unsigned int maxActiveWorkAssignmentsValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/maxStandbyWorkAssignments
         */
        unsigned int getMaxStandbyWorkAssignments();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/maxStandbyWorkAssignments
         */
        void setMaxStandbyWorkAssignments(unsigned int maxStandbyWorkAssignmentsValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/ComponentRestart
         */
        ComponentRestart* getComponentRestart();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/ComponentRestart
         */
        void addComponentRestart(ComponentRestart *ComponentRestartValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/ServiceUnitRestart
         */
        ServiceUnitRestart* getServiceUnitRestart();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/ServiceUnitRestart
         */
        void addServiceUnitRestart(ServiceUnitRestart *ServiceUnitRestartValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/assignedServiceUnits
         */
        AssignedServiceUnits* getAssignedServiceUnits();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/assignedServiceUnits
         */
        void addAssignedServiceUnits(AssignedServiceUnits *assignedServiceUnitsValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/idleServiceUnits
         */
        IdleServiceUnits* getIdleServiceUnits();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/idleServiceUnits
         */
        void addIdleServiceUnits(IdleServiceUnits *idleServiceUnitsValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/spareServiceUnits
         */
        SpareServiceUnits* getSpareServiceUnits();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/spareServiceUnits
         */
        void addSpareServiceUnits(SpareServiceUnits *spareServiceUnitsValue);
        ~ServiceGroup();

    };
}
/* namespace SAFplusAmf */
#endif /* SERVICEGROUP_HXX_ */
