/* 
 * File ServiceGroup.hxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 

#pragma once
#ifndef SERVICEGROUP_HXX_
#define SERVICEGROUP_HXX_
#include "SAFplusAmfCommon.hxx"

#include <string>
#include "MgtFactory.hxx"
#include "NumSpareServiceUnits.hxx"
#include "ServiceUnitRestart.hxx"
#include "AdministrativeState.hxx"
#include "ComponentRestart.hxx"
#include "NumIdleServiceUnits.hxx"
#include "clMgtProv.hxx"
#include "Application.hxx"
#include "ServiceInstance.hxx"
#include "ComponentRestart.hxx"
#include "NumIdleServiceUnits.hxx"
#include "ServiceUnitRestart.hxx"
#include <vector>
#include "NumAssignedServiceUnits.hxx"
#include "NumSpareServiceUnits.hxx"
#include "NumAssignedServiceUnits.hxx"
#include "EntityId.hxx"
#include "clMgtProvList.hxx"
#include "ServiceUnit.hxx"

namespace SAFplusAmf
  {

    class ServiceGroup : public EntityId {

        /* Apply MGT object factory */
        MGT_REGISTER(ServiceGroup);

    public:

        /*
         * Unique name of this entity
         */
        SAFplus::ClMgtProv<std::string> name;

        /*
         * Each SAFplus AMF entity gets a unique numerical identifier
         */
        SAFplus::ClMgtProv<unsigned short int> id;

        /*
         * Does the operator want this entity to be off, idle, or in service?
         */
        SAFplus::ClMgtProv<SAFplusAmf::AdministrativeState> adminState;

        /*
         * Automatically attempt to bring this entity back into a healthy state if its operational state becomes disabled.  A 'false' value will cause the system to wait for operator intervention (via the repair API) before attempting to restart this entity.
         */
        SAFplus::ClMgtProv<bool> autoRepair;

        /*
         * Match this service group as closely as possible to the preferred high availability configuration.  For example, if the preferred active comes online, 'fail-back' to it.  Another example is if a new work assignment is provisioned, the system could remove an existing standby assignment so the new active can be provisioned.
         */
        SAFplus::ClMgtProv<bool> autoAdjust;

        /*
         * The time between checks to see if adjustment is needed.
         */
        SAFplus::ClMgtProv<SaTimeT> autoAdjustInterval;

        /*
         * 
         */
        SAFplus::ClMgtProv<unsigned int> preferredNumActiveServiceUnits;

        /*
         * 
         */
        SAFplus::ClMgtProv<unsigned int> preferredNumStandbyServiceUnits;

        /*
         * An idle service unit is running but is not assigned active or standby.  This concept is functionally equivalent to the saAmfSGNumPrefInserviceSUs since Active+Standby+Idle = Inservice
         */
        SAFplus::ClMgtProv<unsigned int> preferredNumIdleServiceUnits;

        /*
         * The maximum number of active work assignments that can be placed on a single service unit (and therefore component/process) simultaneously.
         */
        SAFplus::ClMgtProv<unsigned int> maxActiveWorkAssignments;

        /*
         * The maximum number of standby work assignments that can be placed on a single service unit (and therefore component/process) simultaneously.
         */
        SAFplus::ClMgtProv<unsigned int> maxStandbyWorkAssignments;

        /*
         * Service Units in this Service Group
         */
        SAFplus::ClMgtProvList<SAFplusAmf::ServiceUnit*> serviceUnits;

        /*
         * Service Instances (work) in this Service group
         */
        SAFplus::ClMgtProvList<SAFplusAmf::ServiceInstance*> serviceInstances;
        SAFplus::ClMgtProv<SAFplusAmf::Application*> application;

    public:
        ServiceGroup();
        ServiceGroup(std::string nameValue);
        std::vector<std::string> getKeys();
        std::vector<std::string>* getChildNames();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/name
         */
        std::string getName();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/name
         */
        void setName(std::string nameValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/id
         */
        unsigned short int getId();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/id
         */
        void setId(unsigned short int idValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/adminState
         */
        SAFplusAmf::AdministrativeState getAdminState();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/adminState
         */
        void setAdminState(SAFplusAmf::AdministrativeState adminStateValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/autoRepair
         */
        bool getAutoRepair();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/autoRepair
         */
        void setAutoRepair(bool autoRepairValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/autoAdjust
         */
        bool getAutoAdjust();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/autoAdjust
         */
        void setAutoAdjust(bool autoAdjustValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/autoAdjustInterval
         */
        SaTimeT getAutoAdjustInterval();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/autoAdjustInterval
         */
        void setAutoAdjustInterval(SaTimeT autoAdjustIntervalValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/preferredNumActiveServiceUnits
         */
        unsigned int getPreferredNumActiveServiceUnits();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/preferredNumActiveServiceUnits
         */
        void setPreferredNumActiveServiceUnits(unsigned int preferredNumActiveServiceUnitsValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/preferredNumStandbyServiceUnits
         */
        unsigned int getPreferredNumStandbyServiceUnits();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/preferredNumStandbyServiceUnits
         */
        void setPreferredNumStandbyServiceUnits(unsigned int preferredNumStandbyServiceUnitsValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/preferredNumIdleServiceUnits
         */
        unsigned int getPreferredNumIdleServiceUnits();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/preferredNumIdleServiceUnits
         */
        void setPreferredNumIdleServiceUnits(unsigned int preferredNumIdleServiceUnitsValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/maxActiveWorkAssignments
         */
        unsigned int getMaxActiveWorkAssignments();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/maxActiveWorkAssignments
         */
        void setMaxActiveWorkAssignments(unsigned int maxActiveWorkAssignmentsValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/maxStandbyWorkAssignments
         */
        unsigned int getMaxStandbyWorkAssignments();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/maxStandbyWorkAssignments
         */
        void setMaxStandbyWorkAssignments(unsigned int maxStandbyWorkAssignmentsValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/serviceUnits
         */
        std::vector<SAFplusAmf::ServiceUnit*> getServiceUnits();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/serviceUnits
         */
        void setServiceUnits(SAFplusAmf::ServiceUnit* serviceUnitsValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/serviceInstances
         */
        std::vector<SAFplusAmf::ServiceInstance*> getServiceInstances();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/serviceInstances
         */
        void setServiceInstances(SAFplusAmf::ServiceInstance* serviceInstancesValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/application
         */
        SAFplusAmf::Application* getApplication();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/application
         */
        void setApplication(SAFplusAmf::Application* applicationValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/componentRestart
         */
        SAFplusAmf::ComponentRestart* getComponentRestart();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/componentRestart
         */
        void addComponentRestart(SAFplusAmf::ComponentRestart *componentRestartValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/serviceUnitRestart
         */
        SAFplusAmf::ServiceUnitRestart* getServiceUnitRestart();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/serviceUnitRestart
         */
        void addServiceUnitRestart(SAFplusAmf::ServiceUnitRestart *serviceUnitRestartValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/numAssignedServiceUnits
         */
        SAFplusAmf::NumAssignedServiceUnits* getNumAssignedServiceUnits();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/numAssignedServiceUnits
         */
        void addNumAssignedServiceUnits(SAFplusAmf::NumAssignedServiceUnits *numAssignedServiceUnitsValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/numIdleServiceUnits
         */
        SAFplusAmf::NumIdleServiceUnits* getNumIdleServiceUnits();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/numIdleServiceUnits
         */
        void addNumIdleServiceUnits(SAFplusAmf::NumIdleServiceUnits *numIdleServiceUnitsValue);

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/numSpareServiceUnits
         */
        SAFplusAmf::NumSpareServiceUnits* getNumSpareServiceUnits();

        /*
         * XPATH: /SAFplusAmf/ServiceGroup/numSpareServiceUnits
         */
        void addNumSpareServiceUnits(SAFplusAmf::NumSpareServiceUnits *numSpareServiceUnitsValue);
        ~ServiceGroup();

    };
}
/* namespace SAFplusAmf */
#endif /* SERVICEGROUP_HXX_ */
