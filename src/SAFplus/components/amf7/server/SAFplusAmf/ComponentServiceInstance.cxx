/* 
 * File ComponentServiceInstance.cxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 
#include "SAFplusAmfCommon.hxx"

#include "clMgtObject.hxx"
#include "clMgtProv.hxx"
#include "ServiceInstance.hxx"
#include "Data.hxx"
#include "Component.hxx"
#include "clMgtList.hxx"
#include <vector>
#include "MgtFactory.hxx"
#include "Data.hxx"
#include <string>
#include "clMgtProvList.hxx"
#include "ComponentServiceInstance.hxx"


namespace SAFplusAmf
  {

    /* Apply MGT object factory */
    MGT_REGISTER_IMPL(ComponentServiceInstance, /SAFplusAmf/ComponentServiceInstance)

    ComponentServiceInstance::ComponentServiceInstance(): SAFplus::ClMgtObject("ComponentServiceInstance"), name("name"), id("id"), protectionGroup("protectionGroup"), dependencies("dependencies"), serviceInstance("serviceInstance"), component("component"), dataList("data")
    {
        this->addChildObject(&name, "name");
        this->addChildObject(&id, "id");
        this->addChildObject(&protectionGroup, "protectionGroup");
        this->addChildObject(&dependencies, "dependencies");
        this->addChildObject(&serviceInstance, "serviceInstance");
        this->addChildObject(&component, "component");
        this->addChildObject(&dataList, "data");
        this->addKey("name");
    };

    ComponentServiceInstance::ComponentServiceInstance(std::string nameValue): SAFplus::ClMgtObject("ComponentServiceInstance"), name("name"), id("id"), protectionGroup("protectionGroup"), dependencies("dependencies"), serviceInstance("serviceInstance"), component("component"), dataList("data")
    {
        this->name.Value =  nameValue;
        this->addKey("name");
        this->addChildObject(&name, "name");
        this->addChildObject(&id, "id");
        this->addChildObject(&protectionGroup, "protectionGroup");
        this->addChildObject(&dependencies, "dependencies");
        this->addChildObject(&serviceInstance, "serviceInstance");
        this->addChildObject(&component, "component");
        this->addChildObject(&dataList, "data");
    };

    std::vector<std::string> ComponentServiceInstance::getKeys()
    {
        std::string keyNames[] = { "name" };
        return std::vector<std::string> (keyNames, keyNames + sizeof(keyNames) / sizeof(keyNames[0]));
    };

    std::vector<std::string>* ComponentServiceInstance::getChildNames()
    {
        std::string childNames[] = { "name", "id", "protectionGroup", "dependencies", "data", "serviceInstance", "component" };
        return new std::vector<std::string> (childNames, childNames + sizeof(childNames) / sizeof(childNames[0]));
    };

    /*
     * XPATH: /SAFplusAmf/ComponentServiceInstance/name
     */
    std::string ComponentServiceInstance::getName()
    {
        return this->name.Value;
    };

    /*
     * XPATH: /SAFplusAmf/ComponentServiceInstance/name
     */
    void ComponentServiceInstance::setName(std::string nameValue)
    {
        this->name.Value = nameValue;
    };

    /*
     * XPATH: /SAFplusAmf/ComponentServiceInstance/id
     */
    unsigned short int ComponentServiceInstance::getId()
    {
        return this->id.Value;
    };

    /*
     * XPATH: /SAFplusAmf/ComponentServiceInstance/id
     */
    void ComponentServiceInstance::setId(unsigned short int idValue)
    {
        this->id.Value = idValue;
    };

    /*
     * XPATH: /SAFplusAmf/ComponentServiceInstance/protectionGroup
     */
    std::vector<std::string> ComponentServiceInstance::getProtectionGroup()
    {
        return this->protectionGroup.Value;
    };

    /*
     * XPATH: /SAFplusAmf/ComponentServiceInstance/protectionGroup
     */
    void ComponentServiceInstance::setProtectionGroup(std::string protectionGroupValue)
    {
        this->protectionGroup.Value.push_back(protectionGroupValue);
    };

    /*
     * XPATH: /SAFplusAmf/ComponentServiceInstance/dependencies
     */
    std::vector<SAFplusAmf::ComponentServiceInstance*> ComponentServiceInstance::getDependencies()
    {
        return this->dependencies.Value;
    };

    /*
     * XPATH: /SAFplusAmf/ComponentServiceInstance/dependencies
     */
    void ComponentServiceInstance::setDependencies(SAFplusAmf::ComponentServiceInstance* dependenciesValue)
    {
        this->dependencies.Value.push_back(dependenciesValue);
    };

    /*
     * XPATH: /SAFplusAmf/ComponentServiceInstance/serviceInstance
     */
    SAFplusAmf::ServiceInstance* ComponentServiceInstance::getServiceInstance()
    {
        return this->serviceInstance.Value;
    };

    /*
     * XPATH: /SAFplusAmf/ComponentServiceInstance/serviceInstance
     */
    void ComponentServiceInstance::setServiceInstance(SAFplusAmf::ServiceInstance* serviceInstanceValue)
    {
        this->serviceInstance.Value = serviceInstanceValue;
    };

    /*
     * XPATH: /SAFplusAmf/ComponentServiceInstance/component
     */
    SAFplusAmf::Component* ComponentServiceInstance::getComponent()
    {
        return this->component.Value;
    };

    /*
     * XPATH: /SAFplusAmf/ComponentServiceInstance/component
     */
    void ComponentServiceInstance::setComponent(SAFplusAmf::Component* componentValue)
    {
        this->component.Value = componentValue;
    };

    /*
     * XPATH: /SAFplusAmf/ComponentServiceInstance/data
     */
    SAFplusAmf::Data* ComponentServiceInstance::getData(std::string nameValue)
    {
        for (unsigned int i = 0; i < this->dataList.getEntrySize(); i++)
        {
            Data* childObject = (Data*)this->dataList.getEntry(i);
            if (childObject->getName() == nameValue)
            {
                return childObject;
            }
        }
        return NULL;
    };

    /*
     * XPATH: /SAFplusAmf/ComponentServiceInstance/data
     */
    void ComponentServiceInstance::addData(SAFplusAmf::Data *dataValue)
    {
        this->dataList.addEntry(dataValue);
    };

    ComponentServiceInstance::~ComponentServiceInstance()
    {
    };

}
/* namespace SAFplusAmf */
