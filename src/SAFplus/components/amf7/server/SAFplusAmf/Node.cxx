/* 
 * File Node.cxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 

#include <map>
#include "Capacity.hxx"
#include "clMgtObject.hxx"
#include "clMgtProv.hxx"
#include <vector>
#include "MgtFactory.hxx"
#include "AdministrativeState.hxx"
#include "ServiceUnitFailureEscalationPolicy.hxx"
#include <string>
#include "Node.hxx"

using namespace std;
using namespace SAFplusAmf;

namespace SAFplusAmf {

    /* Apply MGT object factory */
    REGISTERIMPL(Node, /SAFplusAmf/Node)

    Node::Node(): ClMgtObject("Node"), name("name"), id("id"), adminState("adminState"), operState("operState"), autoRepair("autoRepair"), failFastOnInstantiationFailure("failFastOnInstantiationFailure"), failFastOnCleanupFailure("failFastOnCleanupFailure") {
        this->addChildObject(&name, "name");
        this->addChildObject(&id, "id");
        this->addChildObject(&adminState, "adminState");
        this->addChildObject(&operState, "operState");
        this->addChildObject(&autoRepair, "autoRepair");
        this->addChildObject(&failFastOnInstantiationFailure, "failFastOnInstantiationFailure");
        this->addChildObject(&failFastOnCleanupFailure, "failFastOnCleanupFailure");
        this->addKey("name");
    };

    Node::Node(string nameValue): ClMgtObject("Node"), name("name"), id("id"), adminState("adminState"), operState("operState"), autoRepair("autoRepair"), failFastOnInstantiationFailure("failFastOnInstantiationFailure"), failFastOnCleanupFailure("failFastOnCleanupFailure") {
        this->name.Value =  nameValue;
        this->addKey("name");
        this->addChildObject(&name, "name");
        this->addChildObject(&id, "id");
        this->addChildObject(&adminState, "adminState");
        this->addChildObject(&operState, "operState");
        this->addChildObject(&autoRepair, "autoRepair");
        this->addChildObject(&failFastOnInstantiationFailure, "failFastOnInstantiationFailure");
        this->addChildObject(&failFastOnCleanupFailure, "failFastOnCleanupFailure");
    };

    vector<string> Node::getKeys() {
        string keyNames[] = { "name" };
        return vector<string> (keyNames, keyNames + sizeof(keyNames) / sizeof(keyNames[0]));
    };

    vector<string> *Node::getChildNames() {
        string childNames[] = { "name", "id", "adminState", "operState", "capacity", "serviceUnitFailureEscalationPolicy", "autoRepair", "failFastOnInstantiationFailure", "failFastOnCleanupFailure" };
        return new vector<string> (childNames, childNames + sizeof(childNames) / sizeof(childNames[0]));
    };

    /*
     * XPATH: /SAFplusAmf/Node/name
     */
    string Node::getName() {
        return this->name.Value;
    };

    /*
     * XPATH: /SAFplusAmf/Node/name
     */
    void Node::setName(string nameValue) {
        this->name.Value = nameValue;
    };

    /*
     * XPATH: /SAFplusAmf/Node/id
     */
    unsigned short int Node::getId() {
        return this->id.Value;
    };

    /*
     * XPATH: /SAFplusAmf/Node/id
     */
    void Node::setId(unsigned short int idValue) {
        this->id.Value = idValue;
    };

    /*
     * XPATH: /SAFplusAmf/Node/adminState
     */
    AdministrativeState Node::getAdminState() {
        return this->adminState.Value;
    };

    /*
     * XPATH: /SAFplusAmf/Node/adminState
     */
    void Node::setAdminState(AdministrativeState adminStateValue) {
        this->adminState.Value = adminStateValue;
    };

    /*
     * XPATH: /SAFplusAmf/Node/operState
     */
    bool Node::getOperState() {
        return this->operState.Value;
    };

    /*
     * XPATH: /SAFplusAmf/Node/operState
     */
    void Node::setOperState(bool operStateValue) {
        this->operState.Value = operStateValue;
    };

    /*
     * XPATH: /SAFplusAmf/Node/autoRepair
     */
    bool Node::getAutoRepair() {
        return this->autoRepair.Value;
    };

    /*
     * XPATH: /SAFplusAmf/Node/autoRepair
     */
    void Node::setAutoRepair(bool autoRepairValue) {
        this->autoRepair.Value = autoRepairValue;
    };

    /*
     * XPATH: /SAFplusAmf/Node/failFastOnInstantiationFailure
     */
    bool Node::getFailFastOnInstantiationFailure() {
        return this->failFastOnInstantiationFailure.Value;
    };

    /*
     * XPATH: /SAFplusAmf/Node/failFastOnInstantiationFailure
     */
    void Node::setFailFastOnInstantiationFailure(bool failFastOnInstantiationFailureValue) {
        this->failFastOnInstantiationFailure.Value = failFastOnInstantiationFailureValue;
    };

    /*
     * XPATH: /SAFplusAmf/Node/failFastOnCleanupFailure
     */
    bool Node::getFailFastOnCleanupFailure() {
        return this->failFastOnCleanupFailure.Value;
    };

    /*
     * XPATH: /SAFplusAmf/Node/failFastOnCleanupFailure
     */
    void Node::setFailFastOnCleanupFailure(bool failFastOnCleanupFailureValue) {
        this->failFastOnCleanupFailure.Value = failFastOnCleanupFailureValue;
    };

    /*
     * XPATH: /SAFplusAmf/Node/capacity
     */
    Capacity* Node::getCapacity(string resourceValue) {
        map<string, vector<ClMgtObject*>* >::iterator mapIndex = mChildren.find("capacity");
        /* Check if MGT module already exists in the database */
        if (mapIndex != mChildren.end()) {
            vector<ClMgtObject*> *objs = (vector<ClMgtObject*>*) (*mapIndex).second;
            for (unsigned int i = 0; i < objs->size(); i++) {
                ClMgtObject* childObject = (*objs)[i];
                if (((Capacity*)childObject)->getResource() == resourceValue) {
                    return (Capacity*)childObject;
                }
            }
        }
        return NULL;
    };

    /*
     * XPATH: /SAFplusAmf/Node/capacity
     */
    void Node::addCapacity(Capacity *capacityValue) {
        this->addChildObject(capacityValue, "capacity");
    };

    /*
     * XPATH: /SAFplusAmf/Node/capacity
     */
    void Node::addCapacity(string resourceValue) {
        Capacity *objcapacity = new Capacity(resourceValue);
        this->addChildObject(objcapacity, "capacity");
    };

    /*
     * XPATH: /SAFplusAmf/Node/serviceUnitFailureEscalationPolicy
     */
    ServiceUnitFailureEscalationPolicy* Node::getServiceUnitFailureEscalationPolicy() {
        return (ServiceUnitFailureEscalationPolicy*)this->getChildObject("serviceUnitFailureEscalationPolicy");
    };

    /*
     * XPATH: /SAFplusAmf/Node/serviceUnitFailureEscalationPolicy
     */
    void Node::addServiceUnitFailureEscalationPolicy(ServiceUnitFailureEscalationPolicy *serviceUnitFailureEscalationPolicyValue) {
        this->addChildObject(serviceUnitFailureEscalationPolicyValue, "serviceUnitFailureEscalationPolicy");
    };

    Node::~Node() {
    };

}
/* namespace SAFplusAmf */
