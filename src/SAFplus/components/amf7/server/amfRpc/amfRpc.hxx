// Generated by the protocol buffer compiler.
#pragma once
#include <string>

#include <google/protobuf/service.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <clRpcService.hxx>
#include "amfRpc.pb.h"

namespace SAFplus {
  namespace Rpc {
    class RpcChannel;
  }
}

namespace SAFplus {
namespace Rpc {
namespace amfRpc {
class amfRpc_Stub;

class amfRpc : public SAFplus::Rpc::RpcService {
 protected:
  // This class should be treated as an abstract interface.
  inline amfRpc() {};
 public:
  virtual ~amfRpc();

  typedef amfRpc_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void startComponent(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::StartComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::StartComponentResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  virtual void stopComponent(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::StopComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::StopComponentResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  SAFplus::Handle destination,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(amfRpc);
};

class amfRpc_Stub : public amfRpc {
 public:
  amfRpc_Stub(SAFplus::Rpc::RpcChannel* channel);
  amfRpc_Stub(SAFplus::Rpc::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~amfRpc_Stub();

  inline SAFplus::Rpc::RpcChannel* channel() { return channel_; }

  // implements amfRpc ------------------------------------------

  void startComponent(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::StartComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::StartComponentResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  void stopComponent(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::StopComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::StopComponentResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
 private:
  SAFplus::Rpc::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(amfRpc_Stub);
};

class amfRpcImpl : public amfRpc {
 public:
  amfRpcImpl();
  ~amfRpcImpl();

  // implements amfRpcImpl 
  void startComponent(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::StartComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::StartComponentResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  void stopComponent(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::StopComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::StopComponentResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
};

}  // namespace amfRpc
}  // namespace Rpc
}  // namespace SAFplus
