// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// http://code.google.com/p/protobuf/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.

// Modified by OpenClovis

#include "clRpcImplGenerator.hxx"
#include <google/protobuf/stubs/strutil.h>
#include <google/protobuf/stubs/common.h>
#include <string>
#include <iostream>

namespace SAFplus
  {
    namespace Rpc
      {

        using std::string;

        // Convert a file name into a valid identifier.
        string FilenameIdentifier(const string& filename)
          {
            string result;
            for (unsigned int i = 0; i < filename.size(); i++)
              {
                if (google::protobuf::ascii_isalnum(filename[i]))
                  {
                    result.push_back(filename[i]);
                  }
                else
                  {
                    // Not alphanumeric.  To avoid any possibility of name conflicts we
                    // use the hex code for the character.
                    result.push_back('_');
                    char buffer[google::protobuf::kFastToBufferSize];
                    result.append(google::protobuf::FastHexToBuffer(static_cast<uint8_t>(filename[i]), buffer));
                  }
              }
            return result;
          }

        RpcImplGenerator::RpcImplGenerator(const google::protobuf::FileDescriptor *fileDesc, const std::string &fileName) :
            fileDesc(fileDesc), fileName(fileName)
          {
            google::protobuf::SplitStringUsing(fileDesc->package(), ".", &package_parts_);
            for (int i = 0; i < fileDesc->service_count(); i++)
              {
                service_generators.push_back(new ServiceGenerator(fileDesc->service(i)));
              }
          }

        RpcImplGenerator::~RpcImplGenerator()
          {
            // TODO Auto-generated destructor stub
          }

        void RpcImplGenerator::GenerateHeader(google::protobuf::io::Printer* printer)
          {
            string filename_identifier = FilenameIdentifier(fileName);

            // Generate top of header.
            printer->Print("// Generated by the protocol buffer compiler.\n"
                "#pragma once\n"
                "#include <string>\n"
                "\n", "filename", fileDesc->name(), "filename_identifier", filename_identifier);

            printer->Print("#include <google/protobuf/stubs/common.h>\n"
                "#include <$stubs$>\n", "stubs", google::protobuf::StripSuffixString(fileDesc->name(), ".proto") + ".pb.h");

            GenerateNamespaceOpeners(printer);

            // Generate service definitions.
            for (int i = 0; i < fileDesc->service_count(); i++)
              {
                if (i > 0)
                  {
                    printer->Print("\n");
                  }
                service_generators[i]->GenerateDeclarations(printer);
              }

            // Close up namespace.
            GenerateNamespaceClosers(printer);
          }

        void RpcImplGenerator::GenerateImplementation(google::protobuf::io::Printer* printer)
          {
            printer->Print("#include \"$header$\"\n", "header", fileName + ".hxx");

            GenerateNamespaceOpeners(printer);

            // Generate service definitions.
            for (int i = 0; i < fileDesc->service_count(); i++)
              {
                if (i > 0)
                  {
                    printer->Print("\n");
                  }
                service_generators[i]->GenerateImplementation(printer);
              }

            // Close up namespace.
            GenerateNamespaceClosers(printer);
          }

        void RpcImplGenerator::GenerateNamespaceOpeners(google::protobuf::io::Printer* printer)
          {
            if (package_parts_.size() > 0)
              printer->Print("\n");

            for (int i = 0; i < package_parts_.size(); i++)
              {
                printer->Print("namespace $part$ {\n", "part", package_parts_[i]);
              }
          }

        void RpcImplGenerator::GenerateNamespaceClosers(google::protobuf::io::Printer* printer)
          {
            if (package_parts_.size() > 0)
              printer->Print("\n");

            for (int i = package_parts_.size() - 1; i >= 0; i--)
              {
                printer->Print("}  // namespace $part$\n", "part", package_parts_[i]);
              }
          }
      } /* namespace Rpc */
  } /* namespace SAFplus */
