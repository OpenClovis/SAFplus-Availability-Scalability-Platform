/*
 * Copyright (C) 2002-2012 OpenClovis Solutions Inc.  All Rights Reserved.
 *
 * This file is available  under  a  commercial  license  from  the
 * copyright  holder or the GNU General Public License Version 2.0.
 * 
 * The source code for  this program is not published  or otherwise 
 * divested of  its trade secrets, irrespective  of  what  has been 
 * deposited with the U.S. Copyright office.
 * 
 * This program is distributed in the  hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied  warranty  of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 * 
 * For more  information, see  the file  COPYING provided with this
 * material.
 */


/*********************************************************************
* ModuleName  : idl
*********************************************************************/
/*********************************************************************
* Description : This file contains the declarations for marshall 
*               and unmarshall funtions of ClAmsCompStatusT 
*     
* THIS FILE IS AUTO-GENERATED BY OPENCLOVIS IDE. EDIT THIS FILE AT
* YOUR OWN RISK. ANY CHANGE TO THIS FILE WILL BE OVERWRITTEN ON
* RE-GENERATION.
*     
*********************************************************************/

#ifndef _XDR_CL_AMS_COMP_STATUS_T_H_
#define _XDR_CL_AMS_COMP_STATUS_T_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "clXdrApi.h"

#include "clAmsEntities.h"
#include "clAmsMgmtCommon.h"
#include "clMetricApi.h"
#include "clIocApi.h"
#include "clAmsNotifications.h"
#include "clAmsMgmtServerApi.h"
#include "xdrClAmsReadinessStateT.h"
#include "xdrClAmsPresenceStateT.h"
#include "xdrClAmsEntityStatusT.h"
#include "xdrClAmsRecoveryT.h"
#include "xdrClAmsOperStateT.h"

struct _ClAmsCompStatusT_4_0_0;


ClRcT  clXdrMarshallClAmsCompStatusT_4_0_0(void *,ClBufferHandleT , ClUint32T);

ClRcT  clXdrUnmarshallClAmsCompStatusT_4_0_0(ClBufferHandleT, void *);

#define clXdrMarshallArrayClAmsCompStatusT_4_0_0(pointer, multiplicity, msg, isDelete) \
clXdrMarshallArray((pointer), sizeof(ClAmsCompStatusT_4_0_0), (multiplicity), clXdrMarshallClAmsCompStatusT_4_0_0, (msg), (isDelete))

#define clXdrUnmarshallArrayClAmsCompStatusT_4_0_0(msg,pointer, multiplicity) \
clXdrUnmarshallArray((msg),(pointer), sizeof(ClAmsCompStatusT_4_0_0), (multiplicity), clXdrUnmarshallClAmsCompStatusT_4_0_0)

#define clXdrMarshallPointerClAmsCompStatusT_4_0_0(pointer, multiplicity, msg, isDelete) \
clXdrMarshallPointer((pointer), sizeof(ClAmsCompStatusT_4_0_0), (multiplicity), clXdrMarshallClAmsCompStatusT_4_0_0, (msg), (isDelete))

#define clXdrUnmarshallPointerClAmsCompStatusT_4_0_0(msg,pointer) \
clXdrUnmarshallPointer((msg),(pointer), sizeof(ClAmsCompStatusT_4_0_0), clXdrUnmarshallClAmsCompStatusT_4_0_0)

#define clXdrMarshallPtrClAmsCompStatusT_4_0_0(pointer, multiplicity, msg, isDelete) \
clXdrMarshallPtr((pointer), sizeof(ClAmsCompStatusT_4_0_0), (multiplicity), clXdrMarshallClAmsCompStatusT_4_0_0, (msg), (isDelete))

#define clXdrUnmarshallPtrClAmsCompStatusT_4_0_0(msg,pointer,multiplicity) \
clXdrUnmarshallPtr((msg),(pointer), sizeof(ClAmsCompStatusT_4_0_0),multiplicity, clXdrUnmarshallClAmsCompStatusT_4_0_0)


typedef ClAmsCompStatusT ClAmsCompStatusT_4_0_0;


struct _ClAmsCompStatusT_5_1_0;


ClRcT  clXdrMarshallClAmsCompStatusT_5_1_0(void *,ClBufferHandleT , ClUint32T);

ClRcT  clXdrUnmarshallClAmsCompStatusT_5_1_0(ClBufferHandleT, void *);

#define clXdrMarshallArrayClAmsCompStatusT_5_1_0(pointer, multiplicity, msg, isDelete) \
clXdrMarshallArray((pointer), sizeof(ClAmsCompStatusT_5_1_0), (multiplicity), clXdrMarshallClAmsCompStatusT_5_1_0, (msg), (isDelete))

#define clXdrUnmarshallArrayClAmsCompStatusT_5_1_0(msg,pointer, multiplicity) \
clXdrUnmarshallArray((msg),(pointer), sizeof(ClAmsCompStatusT_5_1_0), (multiplicity), clXdrUnmarshallClAmsCompStatusT_5_1_0)

#define clXdrMarshallPointerClAmsCompStatusT_5_1_0(pointer, multiplicity, msg, isDelete) \
clXdrMarshallPointer((pointer), sizeof(ClAmsCompStatusT_5_1_0), (multiplicity), clXdrMarshallClAmsCompStatusT_5_1_0, (msg), (isDelete))

#define clXdrUnmarshallPointerClAmsCompStatusT_5_1_0(msg,pointer) \
clXdrUnmarshallPointer((msg),(pointer), sizeof(ClAmsCompStatusT_5_1_0), clXdrUnmarshallClAmsCompStatusT_5_1_0)

#define clXdrMarshallPtrClAmsCompStatusT_5_1_0(pointer, multiplicity, msg, isDelete) \
clXdrMarshallPtr((pointer), sizeof(ClAmsCompStatusT_5_1_0), (multiplicity), clXdrMarshallClAmsCompStatusT_5_1_0, (msg), (isDelete))

#define clXdrUnmarshallPtrClAmsCompStatusT_5_1_0(msg,pointer,multiplicity) \
clXdrUnmarshallPtr((msg),(pointer), sizeof(ClAmsCompStatusT_5_1_0),multiplicity, clXdrUnmarshallClAmsCompStatusT_5_1_0)



#ifdef __cplusplus
}
#endif

#endif /*_XDR_CL_AMS_COMP_STATUS_T_H_*/
