
/*********************************************************************
* ModuleName  : idl
*********************************************************************/
/*********************************************************************
* Description : This file contains the declartions for client stub
*               routines
*     
* THIS FILE IS AUTO-GENERATED BY OPENCLOVIS IDE. EDIT THIS FILE AT
* YOUR OWN RISK. ANY CHANGE TO THIS FILE WILL BE OVERWRITTEN ON
* RE-GENERATION.
*     
*********************************************************************/
#ifndef _CKPT_EO_CKPT_SERVER_MASTER_ACTIVE_CLIENT_H_
#define _CKPT_EO_CKPT_SERVER_MASTER_ACTIVE_CLIENT_H_
#ifdef __cplusplus
extern "C" {
#endif
#include <clXdrApi.h>
#include <clIdlApi.h>
#include "../clientIDDefinitions.h"
#include "xdrClCkptIOVectorElementT.h"
#include "xdrCkptMasterDBClientInfoT.h"
#include "xdrCkptDynamicSyncupT.h"
#include "xdrCkptXlationDBEntryT.h"
#include "xdrCkptPeerListInfoT.h"
#include "xdrCkptCreateInfoT.h"
#include "xdrClCkptCheckpointCreationAttributesT.h"
#include "xdrClCkptSectionIdT.h"
#include "xdrCkptHdlDbT.h"
#include "xdrClCkptSectionDescriptorT.h"
#include "xdrCkptInfoT.h"
#include "xdrCkptMasterDBEntryIDLT.h"
#include "xdrCkptMasterDBInfoIDLT.h"
#include "xdrCkptOpenInfoT.h"
#include "xdrClCkptSectionCreationAttributesT.h"
#include "xdrClCkptCheckpointDescriptorT.h"
#include "xdrCkptDynamicInfoT.h"



ClRcT clCkptDeputyCkptCreateClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptMastHdl, CL_IN ClHandleT ckptClntHdl, CL_IN SaNameT* pCkptName, CL_IN ClCkptCheckpointCreationAttributesT_4_0_0* pCkptCreatAtrr, CL_IN ClUint32T localAddr, CL_IN ClUint32T portId, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEoClCkptDeputyCkptCreateAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptMastHdl, CL_IN ClHandleT  ckptClntHdl, CL_IN SaNameT* pCkptName, CL_IN ClCkptCheckpointCreationAttributesT_4_0_0* pCkptCreatAtrr, CL_IN ClUint32T  localAddr, CL_IN ClUint32T  portId, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptDeputyCkptCreateAsyncCallbackT_4_0_0 CkptEoClCkptDeputyCkptCreateAsyncCallbackT;

ClRcT clCkptDeputyCkptCreateClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptMastHdl, CL_IN ClHandleT  ckptClntHdl, CL_IN SaNameT* pCkptName, CL_IN ClCkptCheckpointCreationAttributesT_4_0_0* pCkptCreatAtrr, CL_IN ClUint32T  localAddr, CL_IN ClUint32T  portId, CL_INOUT ClVersionT* pVersion,CL_IN CkptEoClCkptDeputyCkptCreateAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptDeputyCkptOpenClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptMastHdl, CL_IN ClHandleT ckptClntHdl, CL_IN ClUint32T localAddr, CL_IN ClUint32T portId, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEoClCkptDeputyCkptOpenAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptMastHdl, CL_IN ClHandleT  ckptClntHdl, CL_IN ClUint32T  localAddr, CL_IN ClUint32T  portId, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptDeputyCkptOpenAsyncCallbackT_4_0_0 CkptEoClCkptDeputyCkptOpenAsyncCallbackT;

ClRcT clCkptDeputyCkptOpenClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptMastHdl, CL_IN ClHandleT  ckptClntHdl, CL_IN ClUint32T  localAddr, CL_IN ClUint32T  portId, CL_INOUT ClVersionT* pVersion,CL_IN CkptEoClCkptDeputyCkptOpenAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptDeputyCkptInfoUpdateClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClUint32T numOfCkpts, CL_IN CkptInfoT_4_0_0* pCkptInfo);

typedef void (*CkptEoClCkptDeputyCkptInfoUpdateAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClUint32T  numOfCkpts, CL_IN CkptInfoT_4_0_0* pCkptInfo, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptDeputyCkptInfoUpdateAsyncCallbackT_4_0_0 CkptEoClCkptDeputyCkptInfoUpdateAsyncCallbackT;

ClRcT clCkptDeputyCkptInfoUpdateClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClUint32T  numOfCkpts, CL_IN CkptInfoT_4_0_0* pCkptInfo,CL_IN CkptEoClCkptDeputyCkptInfoUpdateAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptDeputyCkptInfoUpdateClientSync_5_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClUint32T numOfCkpts, CL_IN CkptInfoT_5_0_0* pCkptInfo);

typedef void (*CkptEoClCkptDeputyCkptInfoUpdateAsyncCallbackT_5_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClUint32T  numOfCkpts, CL_IN CkptInfoT_5_0_0* pCkptInfo, CL_IN ClRcT rc, CL_IN void* pCookie);

ClRcT clCkptDeputyCkptInfoUpdateClientAsync_5_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClUint32T  numOfCkpts, CL_IN CkptInfoT_5_0_0* pCkptInfo,CL_IN CkptEoClCkptDeputyCkptInfoUpdateAsyncCallbackT_5_0_0 fpAsyncCallback, CL_IN void *cookie);

typedef void (*CkptEoClCkptCreateInfoDeputyUpdateAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN CkptOpenInfoT_4_0_0* openInfo, CL_IN CkptCreateInfoT_4_0_0* pCreateInfo, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptCreateInfoDeputyUpdateAsyncCallbackT_4_0_0 CkptEoClCkptCreateInfoDeputyUpdateAsyncCallbackT;

ClRcT clCkptCreateInfoDeputyUpdateClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN CkptOpenInfoT_4_0_0* openInfo, CL_IN CkptCreateInfoT_4_0_0* pCreateInfo,CL_IN CkptEoClCkptCreateInfoDeputyUpdateAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptActiveCkptOpenClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT ckptMastHdl, CL_IN SaNameT* pCkptName, CL_IN ClUint32T ckptOpenFlags, CL_IN ClCkptCheckpointCreationAttributesT_4_0_0* pCkptCreateAttr, CL_IN ClUint32T peerAddr, CL_IN ClUint32T portId);

typedef void (*CkptEoClCkptActiveCkptOpenAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptMastHdl, CL_IN SaNameT* pCkptName, CL_IN ClUint32T  ckptOpenFlags, CL_IN ClCkptCheckpointCreationAttributesT_4_0_0* pCkptCreateAttr, CL_IN ClUint32T  peerAddr, CL_IN ClUint32T  portId, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptActiveCkptOpenAsyncCallbackT_4_0_0 CkptEoClCkptActiveCkptOpenAsyncCallbackT;

ClRcT clCkptActiveCkptOpenClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptMastHdl, CL_IN SaNameT* pCkptName, CL_IN ClUint32T  ckptOpenFlags, CL_IN ClCkptCheckpointCreationAttributesT_4_0_0* pCkptCreateAttr, CL_IN ClUint32T  peerAddr, CL_IN ClUint32T  portId,CL_IN CkptEoClCkptActiveCkptOpenAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

typedef void (*CkptEoClCkptReplicaNotifyAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptMastHdl, CL_IN ClUint32T  ckptActiveAddr, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptReplicaNotifyAsyncCallbackT_4_0_0 CkptEoClCkptReplicaNotifyAsyncCallbackT;

ClRcT clCkptReplicaNotifyClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptMastHdl, CL_IN ClUint32T  ckptActiveAddr,CL_IN CkptEoClCkptReplicaNotifyAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

typedef void (*CkptEoClCkptDeputyReplicaListUpdateAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClVersionT* pVersion, CL_IN ClHandleT  ckptMastHdl, CL_IN ClUint32T  peerAddr, CL_IN ClUint32T  addToList, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptDeputyReplicaListUpdateAsyncCallbackT_4_0_0 CkptEoClCkptDeputyReplicaListUpdateAsyncCallbackT;

ClRcT clCkptDeputyReplicaListUpdateClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClVersionT* pVersion, CL_IN ClHandleT  ckptMastHdl, CL_IN ClUint32T  peerAddr, CL_IN ClUint32T  addToList,CL_IN CkptEoClCkptDeputyReplicaListUpdateAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

typedef void (*CkptEoClCkptActiveCkptDeleteAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClVersionT  inVersion, CL_IN ClHandleT  ckptActiveHdl, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptActiveCkptDeleteAsyncCallbackT_4_0_0 CkptEoClCkptActiveCkptDeleteAsyncCallbackT;

ClRcT clCkptActiveCkptDeleteClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClVersionT  inVersion, CL_IN ClHandleT  ckptActiveHdl,CL_IN CkptEoClCkptActiveCkptDeleteAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptActiveAddrSetClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClVersionT inVersion, CL_IN ClHandleT masterHdl, CL_IN ClUint32T prevActiveAddr);

typedef void (*CkptEoClCkptActiveAddrInformAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClVersionT  inVersion, CL_IN ClHandleT  masterHdl, CL_IN ClUint32T  activeAddr, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptActiveAddrInformAsyncCallbackT_4_0_0 CkptEoClCkptActiveAddrInformAsyncCallbackT;

ClRcT clCkptActiveAddrInformClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClVersionT  inVersion, CL_IN ClHandleT  masterHdl, CL_IN ClUint32T  activeAddr,CL_IN CkptEoClCkptActiveAddrInformAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptDeputyDynamicUpdateClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN CkptDynamicSyncupT_4_0_0 updateFlag, CL_IN CkptDynamicInfoT_4_0_0* pDynamicInfo);

typedef void (*CkptEoClCkptDeputyDynamicUpdateAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN CkptDynamicSyncupT_4_0_0  updateFlag, CL_IN CkptDynamicInfoT_4_0_0* pDynamicInfo, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptDeputyDynamicUpdateAsyncCallbackT_4_0_0 CkptEoClCkptDeputyDynamicUpdateAsyncCallbackT;

ClRcT clCkptDeputyDynamicUpdateClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN CkptDynamicSyncupT_4_0_0  updateFlag, CL_IN CkptDynamicInfoT_4_0_0* pDynamicInfo,CL_IN CkptEoClCkptDeputyDynamicUpdateAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

typedef void (*CkptEoClCkptDeputyPeerListUpdateAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClVersionT  version, CL_IN ClUint32T  peerAddr, CL_IN ClUint8T  credential, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptDeputyPeerListUpdateAsyncCallbackT_4_0_0 CkptEoClCkptDeputyPeerListUpdateAsyncCallbackT;

ClRcT clCkptDeputyPeerListUpdateClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClVersionT  version, CL_IN ClUint32T  peerAddr, CL_IN ClUint8T  credential,CL_IN CkptEoClCkptDeputyPeerListUpdateAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);


#ifdef __cplusplus
}
#endif
#endif /*_CKPT_EO_CKPT_SERVER_MASTER_ACTIVE_CLIENT_H_*/
