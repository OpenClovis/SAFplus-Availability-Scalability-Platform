// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcTest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpcTest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SAFplus {
namespace Rpc {
namespace rpcTest {

namespace {

const ::google::protobuf::Descriptor* TestGetRpcMethodRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestGetRpcMethodRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestGetRpcMethodResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestGetRpcMethodResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* rpcTest_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpcTest_2eproto() {
  protobuf_AddDesc_rpcTest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpcTest.proto");
  GOOGLE_CHECK(file != NULL);
  TestGetRpcMethodRequest_descriptor_ = file->message_type(0);
  static const int TestGetRpcMethodRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethodRequest, name_),
  };
  TestGetRpcMethodRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestGetRpcMethodRequest_descriptor_,
      TestGetRpcMethodRequest::default_instance_,
      TestGetRpcMethodRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethodRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethodRequest, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethodRequest, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestGetRpcMethodRequest));
  DataResult_descriptor_ = file->message_type(1);
  static const int DataResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResult, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResult, status_),
  };
  DataResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataResult_descriptor_,
      DataResult::default_instance_,
      DataResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResult, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResult, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataResult));
  TestGetRpcMethodResponse_descriptor_ = file->message_type(2);
  static const int TestGetRpcMethodResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethodResponse, dataresult_),
  };
  TestGetRpcMethodResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestGetRpcMethodResponse_descriptor_,
      TestGetRpcMethodResponse::default_instance_,
      TestGetRpcMethodResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethodResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethodResponse, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethodResponse, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestGetRpcMethodResponse));
  rpcTest_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpcTest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestGetRpcMethodRequest_descriptor_, &TestGetRpcMethodRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataResult_descriptor_, &DataResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestGetRpcMethodResponse_descriptor_, &TestGetRpcMethodResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpcTest_2eproto() {
  delete TestGetRpcMethodRequest::default_instance_;
  delete TestGetRpcMethodRequest_reflection_;
  delete DataResult::default_instance_;
  delete DataResult_reflection_;
  delete TestGetRpcMethodResponse::default_instance_;
  delete TestGetRpcMethodResponse_reflection_;
}

void protobuf_AddDesc_rpcTest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SAFplus::Rpc::protobuf_AddDesc_SAFplusPBExt_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rrpcTest.proto\022\023SAFplus.Rpc.rpcTest\032\022SA"
    "FplusPBExt.proto\"2\n\027TestGetRpcMethodRequ"
    "est\022\014\n\004name\030\001 \001(\t*\t\010\350\007\020\200\200\200\200\002\"5\n\nDataResu"
    "lt\022\014\n\004name\030\001 \001(\t\022\016\n\006status\030\002 \001(\005*\t\010\350\007\020\200\200"
    "\200\200\002\"Z\n\030TestGetRpcMethodResponse\0223\n\ndataR"
    "esult\030\001 \001(\0132\037.SAFplus.Rpc.rpcTest.DataRe"
    "sult*\t\010\350\007\020\200\200\200\200\0022z\n\007rpcTest\022o\n\020testGetRpc"
    "Method\022,.SAFplus.Rpc.rpcTest.TestGetRpcM"
    "ethodRequest\032-.SAFplus.Rpc.rpcTest.TestG"
    "etRpcMethodResponseB\t\200\001\001\210\001\000\220\001\001", 390);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpcTest.proto", &protobuf_RegisterTypes);
  TestGetRpcMethodRequest::default_instance_ = new TestGetRpcMethodRequest();
  DataResult::default_instance_ = new DataResult();
  TestGetRpcMethodResponse::default_instance_ = new TestGetRpcMethodResponse();
  TestGetRpcMethodRequest::default_instance_->InitAsDefaultInstance();
  DataResult::default_instance_->InitAsDefaultInstance();
  TestGetRpcMethodResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpcTest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpcTest_2eproto {
  StaticDescriptorInitializer_rpcTest_2eproto() {
    protobuf_AddDesc_rpcTest_2eproto();
  }
} static_descriptor_initializer_rpcTest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TestGetRpcMethodRequest::kNameFieldNumber;
#endif  // !_MSC_VER

TestGetRpcMethodRequest::TestGetRpcMethodRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestGetRpcMethodRequest::InitAsDefaultInstance() {
}

TestGetRpcMethodRequest::TestGetRpcMethodRequest(const TestGetRpcMethodRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestGetRpcMethodRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestGetRpcMethodRequest::~TestGetRpcMethodRequest() {
  SharedDtor();
}

void TestGetRpcMethodRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TestGetRpcMethodRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestGetRpcMethodRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestGetRpcMethodRequest_descriptor_;
}

const TestGetRpcMethodRequest& TestGetRpcMethodRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcTest_2eproto();
  return *default_instance_;
}

TestGetRpcMethodRequest* TestGetRpcMethodRequest::default_instance_ = NULL;

TestGetRpcMethodRequest* TestGetRpcMethodRequest::New() const {
  return new TestGetRpcMethodRequest;
}

void TestGetRpcMethodRequest::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestGetRpcMethodRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestGetRpcMethodRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestGetRpcMethodRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestGetRpcMethodRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestGetRpcMethodRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestGetRpcMethodRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestGetRpcMethodRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestGetRpcMethodRequest::MergeFrom(const TestGetRpcMethodRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestGetRpcMethodRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestGetRpcMethodRequest::CopyFrom(const TestGetRpcMethodRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGetRpcMethodRequest::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TestGetRpcMethodRequest::Swap(TestGetRpcMethodRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata TestGetRpcMethodRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestGetRpcMethodRequest_descriptor_;
  metadata.reflection = TestGetRpcMethodRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataResult::kNameFieldNumber;
const int DataResult::kStatusFieldNumber;
#endif  // !_MSC_VER

DataResult::DataResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataResult::InitAsDefaultInstance() {
}

DataResult::DataResult(const DataResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataResult::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataResult::~DataResult() {
  SharedDtor();
}

void DataResult::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DataResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataResult_descriptor_;
}

const DataResult& DataResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcTest_2eproto();
  return *default_instance_;
}

DataResult* DataResult::default_instance_ = NULL;

DataResult* DataResult::New() const {
  return new DataResult;
}

void DataResult::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataResult::MergeFrom(const DataResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataResult::CopyFrom(const DataResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataResult::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void DataResult::Swap(DataResult* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata DataResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataResult_descriptor_;
  metadata.reflection = DataResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestGetRpcMethodResponse::kDataResultFieldNumber;
#endif  // !_MSC_VER

TestGetRpcMethodResponse::TestGetRpcMethodResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestGetRpcMethodResponse::InitAsDefaultInstance() {
  dataresult_ = const_cast< ::SAFplus::Rpc::rpcTest::DataResult*>(&::SAFplus::Rpc::rpcTest::DataResult::default_instance());
}

TestGetRpcMethodResponse::TestGetRpcMethodResponse(const TestGetRpcMethodResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestGetRpcMethodResponse::SharedCtor() {
  _cached_size_ = 0;
  dataresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestGetRpcMethodResponse::~TestGetRpcMethodResponse() {
  SharedDtor();
}

void TestGetRpcMethodResponse::SharedDtor() {
  if (this != default_instance_) {
    delete dataresult_;
  }
}

void TestGetRpcMethodResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestGetRpcMethodResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestGetRpcMethodResponse_descriptor_;
}

const TestGetRpcMethodResponse& TestGetRpcMethodResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcTest_2eproto();
  return *default_instance_;
}

TestGetRpcMethodResponse* TestGetRpcMethodResponse::default_instance_ = NULL;

TestGetRpcMethodResponse* TestGetRpcMethodResponse::New() const {
  return new TestGetRpcMethodResponse;
}

void TestGetRpcMethodResponse::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dataresult()) {
      if (dataresult_ != NULL) dataresult_->::SAFplus::Rpc::rpcTest::DataResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestGetRpcMethodResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataresult()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestGetRpcMethodResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
  if (has_dataresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dataresult(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestGetRpcMethodResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
  if (has_dataresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dataresult(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestGetRpcMethodResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
    if (has_dataresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dataresult());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestGetRpcMethodResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestGetRpcMethodResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestGetRpcMethodResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestGetRpcMethodResponse::MergeFrom(const TestGetRpcMethodResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataresult()) {
      mutable_dataresult()->::SAFplus::Rpc::rpcTest::DataResult::MergeFrom(from.dataresult());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestGetRpcMethodResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestGetRpcMethodResponse::CopyFrom(const TestGetRpcMethodResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGetRpcMethodResponse::IsInitialized() const {

  if (has_dataresult()) {
    if (!this->dataresult().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TestGetRpcMethodResponse::Swap(TestGetRpcMethodResponse* other) {
  if (other != this) {
    std::swap(dataresult_, other->dataresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata TestGetRpcMethodResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestGetRpcMethodResponse_descriptor_;
  metadata.reflection = TestGetRpcMethodResponse_reflection_;
  return metadata;
}


// ===================================================================

rpcTest::~rpcTest() {}

const ::google::protobuf::ServiceDescriptor* rpcTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rpcTest_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* rpcTest::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return rpcTest_descriptor_;
}

void rpcTest::testGetRpcMethod(::google::protobuf::RpcController* controller,
                         const ::SAFplus::Rpc::rpcTest::TestGetRpcMethodRequest*,
                         ::SAFplus::Rpc::rpcTest::TestGetRpcMethodResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method testGetRpcMethod() not implemented.");
  done->Run();
}

void rpcTest::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), rpcTest_descriptor_);
  switch(method->index()) {
    case 0:
      testGetRpcMethod(controller,
             ::google::protobuf::down_cast<const ::SAFplus::Rpc::rpcTest::TestGetRpcMethodRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::rpcTest::TestGetRpcMethodResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& rpcTest::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SAFplus::Rpc::rpcTest::TestGetRpcMethodRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& rpcTest::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SAFplus::Rpc::rpcTest::TestGetRpcMethodResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

rpcTest_Stub::rpcTest_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
rpcTest_Stub::rpcTest_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
rpcTest_Stub::~rpcTest_Stub() {
  if (owns_channel_) delete channel_;
}

void rpcTest_Stub::testGetRpcMethod(::google::protobuf::RpcController* controller,
                              const ::SAFplus::Rpc::rpcTest::TestGetRpcMethodRequest* request,
                              ::SAFplus::Rpc::rpcTest::TestGetRpcMethodResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcTest
}  // namespace Rpc
}  // namespace SAFplus

// @@protoc_insertion_point(global_scope)
