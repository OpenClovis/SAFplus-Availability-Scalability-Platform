/*
 * Copyright (C) 2002-2013 OpenClovis Solutions Inc.  All Rights Reserved.
 *
 * This file is available  under  a  commercial  license  from  the
 * copyright  holder or the GNU General Public License Version 2.0.
 * 
 * The source code for  this program is not published  or otherwise 
 * divested of  its trade secrets, irrespective  of  what  has been 
 * deposited with the U.S. Copyright office.
 * 
 * This program is distributed in the  hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied  warranty  of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 *
 * This file is autogenerated by OpenClovis IDE, 
 */

// SAFplus includes.
#include <clApp.hxx>
#include <clCheckpoint.hxx>

// A wrapper for our logging. You can change "MAI" and CL_LOG_CONTEXT_UNSPECIFIED
// to another 3 letter acronym meaningful more meaningful to this module. 
#define clprintf(severity, ...)   clAppLog(CL_LOG_HANDLE_APP, severity, 10, "MAI", CL_LOG_CONTEXT_UNSPECIFIED,__VA_ARGS__)

using namespace std;
using namespace SAFplus;

class MyApp : public SAFplus::App
{
public:
  bool isRunning;
  bool initDone;
  ClOsalMutexT exclusion;
  ClHandleT notificationHandle;

  MyApp();

  // Standard SA-forum services
  void ActivateWorkAssignment(const SaAmfCSIDescriptorT& workDescriptor);
  void StandbyWorkAssignment(const SaAmfCSIDescriptorT& workDescriptor);
  void QuiesceWorkAssignment(const SaAmfCSIDescriptorT& workDescriptor);
  void AbortWorkAssignment(const SaAmfCSIDescriptorT& workDescriptor);
  void RemoveWorkAssignment(const SaNameT* workName, int all);

  ~MyApp();

  ClOsalTaskIdT thread;
  int argc;
  char **argv;
};

MyApp::MyApp()
{
   isRunning = false;
   initDone  = false;
}

void MyApp::ActivateWorkAssignment(const SaAmfCSIDescriptorT& workDescriptor)
{
}

void MyApp::StandbyWorkAssignment(const SaAmfCSIDescriptorT& workDescriptor)
{
}

void MyApp::QuiesceWorkAssignment(const SaAmfCSIDescriptorT& workDescriptor)
{
}

void MyApp::AbortWorkAssignment(const SaAmfCSIDescriptorT& workDescriptor)
{
}

void MyApp::RemoveWorkAssignment(const SaNameT* workName, int all)
{
  //clOsalTaskJoin(thread);
}


MyApp::~MyApp()
{
    // Cleanup your application
}



int main(int argc, char *argv[])
{
    MyApp app;
    app.argc = argc;
    app.argv = argv;

    // Connect to the SAF AMF
    app.init();

    // If I am NOT under AMF control, I won't get active/stdby assignments so lets just fake an active assignment
    if (getenv("ASP_WITHOUT_CPM") != NULL) 
      {
        SaAmfCSIDescriptorT workDescriptor; 
        memset(&workDescriptor,0,sizeof(SaAmfCSIDescriptorT));
        // TO DO: Fill in a work descriptor that makes sense to your application
        app.ActivateWorkAssignment(workDescriptor);        
      }

    app.dispatchForever();
}

