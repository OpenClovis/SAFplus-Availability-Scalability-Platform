// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcTest.proto

#ifndef PROTOBUF_rpcTest_2eproto__INCLUDED
#define PROTOBUF_rpcTest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "SAFplusPBExt.pb.hxx"
// @@protoc_insertion_point(includes)

namespace SAFplus {
namespace Rpc {
namespace rpcTest {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpcTest_2eproto();
void protobuf_AssignDesc_rpcTest_2eproto();
void protobuf_ShutdownFile_rpcTest_2eproto();

class TestGetRpcMethodRequest;
class DataResult2;
class DataResult;
class TestGetRpcMethodResponse;
class TestGetRpcMethod2Request;
class TestGetRpcMethod2Response;
class TestGetRpcMethod3Request;
class TestGetRpcMethod3Response;

// ===================================================================

class TestGetRpcMethodRequest : public ::google::protobuf::Message {
 public:
  TestGetRpcMethodRequest();
  virtual ~TestGetRpcMethodRequest();

  TestGetRpcMethodRequest(const TestGetRpcMethodRequest& from);

  inline TestGetRpcMethodRequest& operator=(const TestGetRpcMethodRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestGetRpcMethodRequest& default_instance();

  void Swap(TestGetRpcMethodRequest* other);

  // implements Message ----------------------------------------------

  TestGetRpcMethodRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestGetRpcMethodRequest& from);
  void MergeFrom(const TestGetRpcMethodRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestGetRpcMethodRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static TestGetRpcMethodRequest* default_instance_;
};
// -------------------------------------------------------------------

class DataResult2 : public ::google::protobuf::Message {
 public:
  DataResult2();
  virtual ~DataResult2();

  DataResult2(const DataResult2& from);

  inline DataResult2& operator=(const DataResult2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataResult2& default_instance();

  void Swap(DataResult2* other);

  // implements Message ----------------------------------------------

  DataResult2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataResult2& from);
  void MergeFrom(const DataResult2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes option2 = 1;
  inline int option2_size() const;
  inline void clear_option2();
  static const int kOption2FieldNumber = 1;
  inline const ::std::string& option2(int index) const;
  inline ::std::string* mutable_option2(int index);
  inline void set_option2(int index, const ::std::string& value);
  inline void set_option2(int index, const char* value);
  inline void set_option2(int index, const void* value, size_t size);
  inline ::std::string* add_option2();
  inline void add_option2(const ::std::string& value);
  inline void add_option2(const char* value);
  inline void add_option2(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& option2() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_option2();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DataResult2)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.DataResult2)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> option2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static DataResult2* default_instance_;
};
// -------------------------------------------------------------------

class DataResult : public ::google::protobuf::Message {
 public:
  DataResult();
  virtual ~DataResult();

  DataResult(const DataResult& from);

  inline DataResult& operator=(const DataResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataResult& default_instance();

  void Swap(DataResult* other);

  // implements Message ----------------------------------------------

  DataResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataResult& from);
  void MergeFrom(const DataResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // repeated bytes testbinary = 3;
  inline int testbinary_size() const;
  inline void clear_testbinary();
  static const int kTestbinaryFieldNumber = 3;
  inline const ::std::string& testbinary(int index) const;
  inline ::std::string* mutable_testbinary(int index);
  inline void set_testbinary(int index, const ::std::string& value);
  inline void set_testbinary(int index, const char* value);
  inline void set_testbinary(int index, const void* value, size_t size);
  inline ::std::string* add_testbinary();
  inline void add_testbinary(const ::std::string& value);
  inline void add_testbinary(const char* value);
  inline void add_testbinary(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& testbinary() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_testbinary();

  // optional .SAFplus.Rpc.rpcTest.DataResult2 dataResult2 = 4;
  inline bool has_dataresult2() const;
  inline void clear_dataresult2();
  static const int kDataResult2FieldNumber = 4;
  inline const ::SAFplus::Rpc::rpcTest::DataResult2& dataresult2() const;
  inline ::SAFplus::Rpc::rpcTest::DataResult2* mutable_dataresult2();
  inline ::SAFplus::Rpc::rpcTest::DataResult2* release_dataresult2();
  inline void set_allocated_dataresult2(::SAFplus::Rpc::rpcTest::DataResult2* dataresult2);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DataResult)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.DataResult)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_dataresult2();
  inline void clear_has_dataresult2();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> testbinary_;
  ::SAFplus::Rpc::rpcTest::DataResult2* dataresult2_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static DataResult* default_instance_;
};
// -------------------------------------------------------------------

class TestGetRpcMethodResponse : public ::google::protobuf::Message {
 public:
  TestGetRpcMethodResponse();
  virtual ~TestGetRpcMethodResponse();

  TestGetRpcMethodResponse(const TestGetRpcMethodResponse& from);

  inline TestGetRpcMethodResponse& operator=(const TestGetRpcMethodResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestGetRpcMethodResponse& default_instance();

  void Swap(TestGetRpcMethodResponse* other);

  // implements Message ----------------------------------------------

  TestGetRpcMethodResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestGetRpcMethodResponse& from);
  void MergeFrom(const TestGetRpcMethodResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
  inline bool has_dataresult() const;
  inline void clear_dataresult();
  static const int kDataResultFieldNumber = 1;
  inline const ::SAFplus::Rpc::rpcTest::DataResult& dataresult() const;
  inline ::SAFplus::Rpc::rpcTest::DataResult* mutable_dataresult();
  inline ::SAFplus::Rpc::rpcTest::DataResult* release_dataresult();
  inline void set_allocated_dataresult(::SAFplus::Rpc::rpcTest::DataResult* dataresult);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestGetRpcMethodResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.TestGetRpcMethodResponse)
 private:
  inline void set_has_dataresult();
  inline void clear_has_dataresult();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SAFplus::Rpc::rpcTest::DataResult* dataresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static TestGetRpcMethodResponse* default_instance_;
};
// -------------------------------------------------------------------

class TestGetRpcMethod2Request : public ::google::protobuf::Message {
 public:
  TestGetRpcMethod2Request();
  virtual ~TestGetRpcMethod2Request();

  TestGetRpcMethod2Request(const TestGetRpcMethod2Request& from);

  inline TestGetRpcMethod2Request& operator=(const TestGetRpcMethod2Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestGetRpcMethod2Request& default_instance();

  void Swap(TestGetRpcMethod2Request* other);

  // implements Message ----------------------------------------------

  TestGetRpcMethod2Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestGetRpcMethod2Request& from);
  void MergeFrom(const TestGetRpcMethod2Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestGetRpcMethod2Request)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static TestGetRpcMethod2Request* default_instance_;
};
// -------------------------------------------------------------------

class TestGetRpcMethod2Response : public ::google::protobuf::Message {
 public:
  TestGetRpcMethod2Response();
  virtual ~TestGetRpcMethod2Response();

  TestGetRpcMethod2Response(const TestGetRpcMethod2Response& from);

  inline TestGetRpcMethod2Response& operator=(const TestGetRpcMethod2Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestGetRpcMethod2Response& default_instance();

  void Swap(TestGetRpcMethod2Response* other);

  // implements Message ----------------------------------------------

  TestGetRpcMethod2Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestGetRpcMethod2Response& from);
  void MergeFrom(const TestGetRpcMethod2Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
  inline bool has_dataresult() const;
  inline void clear_dataresult();
  static const int kDataResultFieldNumber = 1;
  inline const ::SAFplus::Rpc::rpcTest::DataResult& dataresult() const;
  inline ::SAFplus::Rpc::rpcTest::DataResult* mutable_dataresult();
  inline ::SAFplus::Rpc::rpcTest::DataResult* release_dataresult();
  inline void set_allocated_dataresult(::SAFplus::Rpc::rpcTest::DataResult* dataresult);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestGetRpcMethod2Response)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Response)
 private:
  inline void set_has_dataresult();
  inline void clear_has_dataresult();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SAFplus::Rpc::rpcTest::DataResult* dataresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static TestGetRpcMethod2Response* default_instance_;
};
// -------------------------------------------------------------------

class TestGetRpcMethod3Request : public ::google::protobuf::Message {
 public:
  TestGetRpcMethod3Request();
  virtual ~TestGetRpcMethod3Request();

  TestGetRpcMethod3Request(const TestGetRpcMethod3Request& from);

  inline TestGetRpcMethod3Request& operator=(const TestGetRpcMethod3Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestGetRpcMethod3Request& default_instance();

  void Swap(TestGetRpcMethod3Request* other);

  // implements Message ----------------------------------------------

  TestGetRpcMethod3Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestGetRpcMethod3Request& from);
  void MergeFrom(const TestGetRpcMethod3Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestGetRpcMethod3Request)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static TestGetRpcMethod3Request* default_instance_;
};
// -------------------------------------------------------------------

class TestGetRpcMethod3Response : public ::google::protobuf::Message {
 public:
  TestGetRpcMethod3Response();
  virtual ~TestGetRpcMethod3Response();

  TestGetRpcMethod3Response(const TestGetRpcMethod3Response& from);

  inline TestGetRpcMethod3Response& operator=(const TestGetRpcMethod3Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestGetRpcMethod3Response& default_instance();

  void Swap(TestGetRpcMethod3Response* other);

  // implements Message ----------------------------------------------

  TestGetRpcMethod3Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestGetRpcMethod3Response& from);
  void MergeFrom(const TestGetRpcMethod3Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
  inline bool has_dataresult() const;
  inline void clear_dataresult();
  static const int kDataResultFieldNumber = 1;
  inline const ::SAFplus::Rpc::rpcTest::DataResult& dataresult() const;
  inline ::SAFplus::Rpc::rpcTest::DataResult* mutable_dataresult();
  inline ::SAFplus::Rpc::rpcTest::DataResult* release_dataresult();
  inline void set_allocated_dataresult(::SAFplus::Rpc::rpcTest::DataResult* dataresult);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestGetRpcMethod3Response)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Response)
 private:
  inline void set_has_dataresult();
  inline void clear_has_dataresult();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SAFplus::Rpc::rpcTest::DataResult* dataresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static TestGetRpcMethod3Response* default_instance_;
};
// ===================================================================


// ===================================================================

// TestGetRpcMethodRequest

// optional string name = 1;
inline bool TestGetRpcMethodRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestGetRpcMethodRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestGetRpcMethodRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestGetRpcMethodRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TestGetRpcMethodRequest::name() const {
  return *name_;
}
inline void TestGetRpcMethodRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TestGetRpcMethodRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TestGetRpcMethodRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestGetRpcMethodRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TestGetRpcMethodRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TestGetRpcMethodRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DataResult2

// repeated bytes option2 = 1;
inline int DataResult2::option2_size() const {
  return option2_.size();
}
inline void DataResult2::clear_option2() {
  option2_.Clear();
}
inline const ::std::string& DataResult2::option2(int index) const {
  return option2_.Get(index);
}
inline ::std::string* DataResult2::mutable_option2(int index) {
  return option2_.Mutable(index);
}
inline void DataResult2::set_option2(int index, const ::std::string& value) {
  option2_.Mutable(index)->assign(value);
}
inline void DataResult2::set_option2(int index, const char* value) {
  option2_.Mutable(index)->assign(value);
}
inline void DataResult2::set_option2(int index, const void* value, size_t size) {
  option2_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataResult2::add_option2() {
  return option2_.Add();
}
inline void DataResult2::add_option2(const ::std::string& value) {
  option2_.Add()->assign(value);
}
inline void DataResult2::add_option2(const char* value) {
  option2_.Add()->assign(value);
}
inline void DataResult2::add_option2(const void* value, size_t size) {
  option2_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataResult2::option2() const {
  return option2_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DataResult2::mutable_option2() {
  return &option2_;
}

// -------------------------------------------------------------------

// DataResult

// optional string name = 1;
inline bool DataResult::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataResult::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataResult::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataResult::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DataResult::name() const {
  return *name_;
}
inline void DataResult::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataResult::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataResult::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataResult::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DataResult::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataResult::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 status = 2;
inline bool DataResult::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataResult::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataResult::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataResult::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 DataResult::status() const {
  return status_;
}
inline void DataResult::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// repeated bytes testbinary = 3;
inline int DataResult::testbinary_size() const {
  return testbinary_.size();
}
inline void DataResult::clear_testbinary() {
  testbinary_.Clear();
}
inline const ::std::string& DataResult::testbinary(int index) const {
  return testbinary_.Get(index);
}
inline ::std::string* DataResult::mutable_testbinary(int index) {
  return testbinary_.Mutable(index);
}
inline void DataResult::set_testbinary(int index, const ::std::string& value) {
  testbinary_.Mutable(index)->assign(value);
}
inline void DataResult::set_testbinary(int index, const char* value) {
  testbinary_.Mutable(index)->assign(value);
}
inline void DataResult::set_testbinary(int index, const void* value, size_t size) {
  testbinary_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataResult::add_testbinary() {
  return testbinary_.Add();
}
inline void DataResult::add_testbinary(const ::std::string& value) {
  testbinary_.Add()->assign(value);
}
inline void DataResult::add_testbinary(const char* value) {
  testbinary_.Add()->assign(value);
}
inline void DataResult::add_testbinary(const void* value, size_t size) {
  testbinary_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataResult::testbinary() const {
  return testbinary_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DataResult::mutable_testbinary() {
  return &testbinary_;
}

// optional .SAFplus.Rpc.rpcTest.DataResult2 dataResult2 = 4;
inline bool DataResult::has_dataresult2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataResult::set_has_dataresult2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataResult::clear_has_dataresult2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataResult::clear_dataresult2() {
  if (dataresult2_ != NULL) dataresult2_->::SAFplus::Rpc::rpcTest::DataResult2::Clear();
  clear_has_dataresult2();
}
inline const ::SAFplus::Rpc::rpcTest::DataResult2& DataResult::dataresult2() const {
  return dataresult2_ != NULL ? *dataresult2_ : *default_instance_->dataresult2_;
}
inline ::SAFplus::Rpc::rpcTest::DataResult2* DataResult::mutable_dataresult2() {
  set_has_dataresult2();
  if (dataresult2_ == NULL) dataresult2_ = new ::SAFplus::Rpc::rpcTest::DataResult2;
  return dataresult2_;
}
inline ::SAFplus::Rpc::rpcTest::DataResult2* DataResult::release_dataresult2() {
  clear_has_dataresult2();
  ::SAFplus::Rpc::rpcTest::DataResult2* temp = dataresult2_;
  dataresult2_ = NULL;
  return temp;
}
inline void DataResult::set_allocated_dataresult2(::SAFplus::Rpc::rpcTest::DataResult2* dataresult2) {
  delete dataresult2_;
  dataresult2_ = dataresult2;
  if (dataresult2) {
    set_has_dataresult2();
  } else {
    clear_has_dataresult2();
  }
}

// -------------------------------------------------------------------

// TestGetRpcMethodResponse

// optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
inline bool TestGetRpcMethodResponse::has_dataresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestGetRpcMethodResponse::set_has_dataresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestGetRpcMethodResponse::clear_has_dataresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestGetRpcMethodResponse::clear_dataresult() {
  if (dataresult_ != NULL) dataresult_->::SAFplus::Rpc::rpcTest::DataResult::Clear();
  clear_has_dataresult();
}
inline const ::SAFplus::Rpc::rpcTest::DataResult& TestGetRpcMethodResponse::dataresult() const {
  return dataresult_ != NULL ? *dataresult_ : *default_instance_->dataresult_;
}
inline ::SAFplus::Rpc::rpcTest::DataResult* TestGetRpcMethodResponse::mutable_dataresult() {
  set_has_dataresult();
  if (dataresult_ == NULL) dataresult_ = new ::SAFplus::Rpc::rpcTest::DataResult;
  return dataresult_;
}
inline ::SAFplus::Rpc::rpcTest::DataResult* TestGetRpcMethodResponse::release_dataresult() {
  clear_has_dataresult();
  ::SAFplus::Rpc::rpcTest::DataResult* temp = dataresult_;
  dataresult_ = NULL;
  return temp;
}
inline void TestGetRpcMethodResponse::set_allocated_dataresult(::SAFplus::Rpc::rpcTest::DataResult* dataresult) {
  delete dataresult_;
  dataresult_ = dataresult;
  if (dataresult) {
    set_has_dataresult();
  } else {
    clear_has_dataresult();
  }
}

// -------------------------------------------------------------------

// TestGetRpcMethod2Request

// optional string name = 1;
inline bool TestGetRpcMethod2Request::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestGetRpcMethod2Request::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestGetRpcMethod2Request::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestGetRpcMethod2Request::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TestGetRpcMethod2Request::name() const {
  return *name_;
}
inline void TestGetRpcMethod2Request::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TestGetRpcMethod2Request::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TestGetRpcMethod2Request::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestGetRpcMethod2Request::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TestGetRpcMethod2Request::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TestGetRpcMethod2Request::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TestGetRpcMethod2Response

// optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
inline bool TestGetRpcMethod2Response::has_dataresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestGetRpcMethod2Response::set_has_dataresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestGetRpcMethod2Response::clear_has_dataresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestGetRpcMethod2Response::clear_dataresult() {
  if (dataresult_ != NULL) dataresult_->::SAFplus::Rpc::rpcTest::DataResult::Clear();
  clear_has_dataresult();
}
inline const ::SAFplus::Rpc::rpcTest::DataResult& TestGetRpcMethod2Response::dataresult() const {
  return dataresult_ != NULL ? *dataresult_ : *default_instance_->dataresult_;
}
inline ::SAFplus::Rpc::rpcTest::DataResult* TestGetRpcMethod2Response::mutable_dataresult() {
  set_has_dataresult();
  if (dataresult_ == NULL) dataresult_ = new ::SAFplus::Rpc::rpcTest::DataResult;
  return dataresult_;
}
inline ::SAFplus::Rpc::rpcTest::DataResult* TestGetRpcMethod2Response::release_dataresult() {
  clear_has_dataresult();
  ::SAFplus::Rpc::rpcTest::DataResult* temp = dataresult_;
  dataresult_ = NULL;
  return temp;
}
inline void TestGetRpcMethod2Response::set_allocated_dataresult(::SAFplus::Rpc::rpcTest::DataResult* dataresult) {
  delete dataresult_;
  dataresult_ = dataresult;
  if (dataresult) {
    set_has_dataresult();
  } else {
    clear_has_dataresult();
  }
}

// -------------------------------------------------------------------

// TestGetRpcMethod3Request

// optional string name = 1;
inline bool TestGetRpcMethod3Request::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestGetRpcMethod3Request::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestGetRpcMethod3Request::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestGetRpcMethod3Request::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TestGetRpcMethod3Request::name() const {
  return *name_;
}
inline void TestGetRpcMethod3Request::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TestGetRpcMethod3Request::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TestGetRpcMethod3Request::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestGetRpcMethod3Request::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TestGetRpcMethod3Request::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TestGetRpcMethod3Request::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TestGetRpcMethod3Response

// optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
inline bool TestGetRpcMethod3Response::has_dataresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestGetRpcMethod3Response::set_has_dataresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestGetRpcMethod3Response::clear_has_dataresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestGetRpcMethod3Response::clear_dataresult() {
  if (dataresult_ != NULL) dataresult_->::SAFplus::Rpc::rpcTest::DataResult::Clear();
  clear_has_dataresult();
}
inline const ::SAFplus::Rpc::rpcTest::DataResult& TestGetRpcMethod3Response::dataresult() const {
  return dataresult_ != NULL ? *dataresult_ : *default_instance_->dataresult_;
}
inline ::SAFplus::Rpc::rpcTest::DataResult* TestGetRpcMethod3Response::mutable_dataresult() {
  set_has_dataresult();
  if (dataresult_ == NULL) dataresult_ = new ::SAFplus::Rpc::rpcTest::DataResult;
  return dataresult_;
}
inline ::SAFplus::Rpc::rpcTest::DataResult* TestGetRpcMethod3Response::release_dataresult() {
  clear_has_dataresult();
  ::SAFplus::Rpc::rpcTest::DataResult* temp = dataresult_;
  dataresult_ = NULL;
  return temp;
}
inline void TestGetRpcMethod3Response::set_allocated_dataresult(::SAFplus::Rpc::rpcTest::DataResult* dataresult) {
  delete dataresult_;
  dataresult_ = dataresult;
  if (dataresult) {
    set_has_dataresult();
  } else {
    clear_has_dataresult();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcTest
}  // namespace Rpc
}  // namespace SAFplus

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpcTest_2eproto__INCLUDED
