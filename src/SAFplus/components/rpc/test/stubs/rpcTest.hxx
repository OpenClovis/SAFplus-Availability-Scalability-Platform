// Generated by the protocol buffer compiler.
#pragma once
#include <string>

#include <google/protobuf/service.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <clRpcService.hxx>
#include "rpcTest.pb.hxx"

namespace SAFplus {
  namespace Rpc {
    class RpcChannel;
  }
}

namespace SAFplus {
namespace Rpc {
namespace rpcTest {
class rpcTest_Stub;

class rpcTest : public SAFplus::Rpc::RpcService {
 protected:
  // This class should be treated as an abstract interface.
  inline rpcTest() {};
 public:
  virtual ~rpcTest();

  typedef rpcTest_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();


  // implements rpcTestImpl ----------------------------------------------
  virtual void testGetRpcMethod(const ::SAFplus::Rpc::rpcTest::TestGetRpcMethodRequest* request,
                       ::SAFplus::Rpc::rpcTest::TestGetRpcMethodResponse* response);
  virtual void testGetRpcMethod2(const ::SAFplus::Rpc::rpcTest::TestGetRpcMethod2Request* request,
                       ::SAFplus::Rpc::rpcTest::TestGetRpcMethod2Response* response);
  virtual void testGetRpcMethod3(const ::SAFplus::Rpc::rpcTest::TestGetRpcMethod3Request* request,
                       ::SAFplus::Rpc::rpcTest::TestGetRpcMethod3Response* response);
  virtual void workOperation(const ::SAFplus::Rpc::rpcTest::WorkOperationRequest* request,
                       ::SAFplus::Rpc::NO_RESPONSE* response);
  virtual void workOperationResponse(const ::SAFplus::Rpc::rpcTest::WorkOperationResponseRequest* request,
                       ::SAFplus::Rpc::NO_RESPONSE* response);

  // implements rpcTest ------------------------------------------
  virtual void testGetRpcMethod(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::rpcTest::TestGetRpcMethodRequest* request,
                       ::SAFplus::Rpc::rpcTest::TestGetRpcMethodResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  virtual void testGetRpcMethod2(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::rpcTest::TestGetRpcMethod2Request* request,
                       ::SAFplus::Rpc::rpcTest::TestGetRpcMethod2Response* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  virtual void testGetRpcMethod3(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::rpcTest::TestGetRpcMethod3Request* request,
                       ::SAFplus::Rpc::rpcTest::TestGetRpcMethod3Response* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  virtual void workOperation(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::rpcTest::WorkOperationRequest* request,
                       ::SAFplus::Rpc::NO_RESPONSE* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  virtual void workOperationResponse(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::rpcTest::WorkOperationResponseRequest* request,
                       ::SAFplus::Rpc::NO_RESPONSE* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));


  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  SAFplus::Handle destination,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(rpcTest);
};

class rpcTest_Stub : public rpcTest {
 public:
  rpcTest_Stub(SAFplus::Rpc::RpcChannel* channel);
  rpcTest_Stub(SAFplus::Rpc::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~rpcTest_Stub();

  inline SAFplus::Rpc::RpcChannel* channel() { return channel_; }


  // implements rpcTest ------------------------------------------
  void testGetRpcMethod(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::rpcTest::TestGetRpcMethodRequest* request,
                       ::SAFplus::Rpc::rpcTest::TestGetRpcMethodResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  void testGetRpcMethod2(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::rpcTest::TestGetRpcMethod2Request* request,
                       ::SAFplus::Rpc::rpcTest::TestGetRpcMethod2Response* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  void testGetRpcMethod3(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::rpcTest::TestGetRpcMethod3Request* request,
                       ::SAFplus::Rpc::rpcTest::TestGetRpcMethod3Response* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  void workOperation(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::rpcTest::WorkOperationRequest* request,
                       ::SAFplus::Rpc::NO_RESPONSE* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  void workOperationResponse(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::rpcTest::WorkOperationResponseRequest* request,
                       ::SAFplus::Rpc::NO_RESPONSE* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
 private:
  SAFplus::Rpc::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(rpcTest_Stub);
};

class rpcTestImpl : public rpcTest {
 public:
  rpcTestImpl();
  ~rpcTestImpl();


  // implements rpcTestImpl ----------------------------------------------
  void testGetRpcMethod(const ::SAFplus::Rpc::rpcTest::TestGetRpcMethodRequest* request,
                       ::SAFplus::Rpc::rpcTest::TestGetRpcMethodResponse* response);
  void testGetRpcMethod2(const ::SAFplus::Rpc::rpcTest::TestGetRpcMethod2Request* request,
                       ::SAFplus::Rpc::rpcTest::TestGetRpcMethod2Response* response);
  void testGetRpcMethod3(const ::SAFplus::Rpc::rpcTest::TestGetRpcMethod3Request* request,
                       ::SAFplus::Rpc::rpcTest::TestGetRpcMethod3Response* response);
  void workOperation(const ::SAFplus::Rpc::rpcTest::WorkOperationRequest* request,
                       ::SAFplus::Rpc::NO_RESPONSE* response);
  void workOperationResponse(const ::SAFplus::Rpc::rpcTest::WorkOperationResponseRequest* request,
                       ::SAFplus::Rpc::NO_RESPONSE* response);
};

}  // namespace rpcTest
}  // namespace Rpc
}  // namespace SAFplus
