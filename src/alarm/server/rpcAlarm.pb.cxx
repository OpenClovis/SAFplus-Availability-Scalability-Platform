// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcAlarm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpcAlarm.pb.hxx"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SAFplus {
namespace Rpc {
namespace rpcAlarm {

namespace {

const ::google::protobuf::Descriptor* Handle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Handle_reflection_ = NULL;
const ::google::protobuf::Descriptor* alarmProfileCreateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  alarmProfileCreateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* alarmProfileDeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  alarmProfileDeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* alarmDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  alarmDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* alarmResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  alarmResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NO_REQUEST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NO_REQUEST_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpcAlarm_2eproto() {
  protobuf_AddDesc_rpcAlarm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpcAlarm.proto");
  GOOGLE_CHECK(file != NULL);
  Handle_descriptor_ = file->message_type(0);
  static const int Handle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handle, id0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handle, id1_),
  };
  Handle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Handle_descriptor_,
      Handle::default_instance_,
      Handle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Handle));
  alarmProfileCreateRequest_descriptor_ = file->message_type(1);
  static const int alarmProfileCreateRequest_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileCreateRequest, resourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileCreateRequest, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileCreateRequest, probcause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileCreateRequest, specificproblem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileCreateRequest, issend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileCreateRequest, intassertsoakingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileCreateRequest, intclearsoakingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileCreateRequest, generationrulebitmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileCreateRequest, genrulerelation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileCreateRequest, suppressionrulebitmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileCreateRequest, supprulerelation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileCreateRequest, intindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileCreateRequest, affectedbitmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileCreateRequest, issuppresschild_),
  };
  alarmProfileCreateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      alarmProfileCreateRequest_descriptor_,
      alarmProfileCreateRequest::default_instance_,
      alarmProfileCreateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileCreateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileCreateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(alarmProfileCreateRequest));
  alarmProfileDeleteRequest_descriptor_ = file->message_type(2);
  static const int alarmProfileDeleteRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileDeleteRequest, resourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileDeleteRequest, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileDeleteRequest, probcause_),
  };
  alarmProfileDeleteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      alarmProfileDeleteRequest_descriptor_,
      alarmProfileDeleteRequest::default_instance_,
      alarmProfileDeleteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileDeleteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmProfileDeleteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(alarmProfileDeleteRequest));
  alarmDataRequest_descriptor_ = file->message_type(3);
  static const int alarmDataRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmDataRequest, resourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmDataRequest, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmDataRequest, probcause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmDataRequest, specificproblem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmDataRequest, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmDataRequest, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmDataRequest, syncdata_),
  };
  alarmDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      alarmDataRequest_descriptor_,
      alarmDataRequest::default_instance_,
      alarmDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(alarmDataRequest));
  alarmResponse_descriptor_ = file->message_type(4);
  static const int alarmResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmResponse, saerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmResponse, errstr_),
  };
  alarmResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      alarmResponse_descriptor_,
      alarmResponse::default_instance_,
      alarmResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarmResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(alarmResponse));
  NO_REQUEST_descriptor_ = file->message_type(5);
  static const int NO_REQUEST_offsets_[1] = {
  };
  NO_REQUEST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NO_REQUEST_descriptor_,
      NO_REQUEST::default_instance_,
      NO_REQUEST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NO_REQUEST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NO_REQUEST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NO_REQUEST));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpcAlarm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Handle_descriptor_, &Handle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    alarmProfileCreateRequest_descriptor_, &alarmProfileCreateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    alarmProfileDeleteRequest_descriptor_, &alarmProfileDeleteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    alarmDataRequest_descriptor_, &alarmDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    alarmResponse_descriptor_, &alarmResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NO_REQUEST_descriptor_, &NO_REQUEST::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpcAlarm_2eproto() {
  delete Handle::default_instance_;
  delete Handle_reflection_;
  delete alarmProfileCreateRequest::default_instance_;
  delete alarmProfileCreateRequest_reflection_;
  delete alarmProfileDeleteRequest::default_instance_;
  delete alarmProfileDeleteRequest_reflection_;
  delete alarmDataRequest::default_instance_;
  delete alarmDataRequest_reflection_;
  delete alarmResponse::default_instance_;
  delete alarmResponse_reflection_;
  delete NO_REQUEST::default_instance_;
  delete NO_REQUEST_reflection_;
}

void protobuf_AddDesc_rpcAlarm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016rpcAlarm.proto\022\024SAFplus.Rpc.rpcAlarm\"\""
    "\n\006Handle\022\013\n\003id0\030\001 \002(\006\022\013\n\003id1\030\002 \002(\006\"\353\002\n\031a"
    "larmProfileCreateRequest\022\022\n\nresourceId\030\001"
    " \002(\t\022\020\n\010category\030\002 \002(\r\022\021\n\tprobCause\030\003 \002("
    "\r\022\027\n\017specificProblem\030\004 \002(\r\022\016\n\006isSend\030\005 \002"
    "(\010\022\034\n\024intAssertSoakingTime\030\006 \002(\005\022\033\n\023intC"
    "learSoakingTime\030\007 \002(\005\022\034\n\024generationRuleB"
    "itmap\030\010 \002(\006\022\027\n\017genRuleRelation\030\t \002(\r\022\035\n\025"
    "suppressionRuleBitmap\030\n \002(\006\022\030\n\020suppRuleR"
    "elation\030\013 \002(\r\022\020\n\010intIndex\030\014 \002(\005\022\026\n\016affec"
    "tedBitmap\030\r \002(\006\022\027\n\017isSuppressChild\030\016 \002(\010"
    "\"T\n\031alarmProfileDeleteRequest\022\022\n\nresourc"
    "eId\030\001 \002(\t\022\020\n\010category\030\002 \002(\r\022\021\n\tprobCause"
    "\030\003 \002(\r\"\227\001\n\020alarmDataRequest\022\022\n\nresourceI"
    "d\030\001 \002(\t\022\020\n\010category\030\002 \002(\r\022\021\n\tprobCause\030\003"
    " \002(\r\022\027\n\017specificProblem\030\004 \002(\r\022\020\n\010severit"
    "y\030\005 \002(\r\022\r\n\005state\030\006 \002(\r\022\020\n\010syncData\030\007 \002(\t"
    "\"0\n\ralarmResponse\022\017\n\007saError\030\001 \001(\005\022\016\n\006er"
    "rStr\030\002 \001(\t\"\014\n\nNO_REQUEST2\312\002\n\010rpcAlarm\022l\n"
    "\024alarmCreateRpcMethod\022/.SAFplus.Rpc.rpcA"
    "larm.alarmProfileCreateRequest\032#.SAFplus"
    ".Rpc.rpcAlarm.alarmResponse\022l\n\024alarmDele"
    "teRpcMethod\022/.SAFplus.Rpc.rpcAlarm.alarm"
    "ProfileDeleteRequest\032#.SAFplus.Rpc.rpcAl"
    "arm.alarmResponse\022b\n\023alarmRaiseRpcMethod"
    "\022&.SAFplus.Rpc.rpcAlarm.alarmDataRequest"
    "\032#.SAFplus.Rpc.rpcAlarm.alarmResponseB\t\200"
    "\001\000\210\001\000\220\001\000", 1088);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpcAlarm.proto", &protobuf_RegisterTypes);
  Handle::default_instance_ = new Handle();
  alarmProfileCreateRequest::default_instance_ = new alarmProfileCreateRequest();
  alarmProfileDeleteRequest::default_instance_ = new alarmProfileDeleteRequest();
  alarmDataRequest::default_instance_ = new alarmDataRequest();
  alarmResponse::default_instance_ = new alarmResponse();
  NO_REQUEST::default_instance_ = new NO_REQUEST();
  Handle::default_instance_->InitAsDefaultInstance();
  alarmProfileCreateRequest::default_instance_->InitAsDefaultInstance();
  alarmProfileDeleteRequest::default_instance_->InitAsDefaultInstance();
  alarmDataRequest::default_instance_->InitAsDefaultInstance();
  alarmResponse::default_instance_->InitAsDefaultInstance();
  NO_REQUEST::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpcAlarm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpcAlarm_2eproto {
  StaticDescriptorInitializer_rpcAlarm_2eproto() {
    protobuf_AddDesc_rpcAlarm_2eproto();
  }
} static_descriptor_initializer_rpcAlarm_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Handle::kId0FieldNumber;
const int Handle::kId1FieldNumber;
#endif  // !_MSC_VER

Handle::Handle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcAlarm.Handle)
}

void Handle::InitAsDefaultInstance() {
}

Handle::Handle(const Handle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcAlarm.Handle)
}

void Handle::SharedCtor() {
  _cached_size_ = 0;
  id0_ = GOOGLE_ULONGLONG(0);
  id1_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Handle::~Handle() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcAlarm.Handle)
  SharedDtor();
}

void Handle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Handle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Handle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Handle_descriptor_;
}

const Handle& Handle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcAlarm_2eproto();
  return *default_instance_;
}

Handle* Handle::default_instance_ = NULL;

Handle* Handle::New() const {
  return new Handle;
}

void Handle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Handle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id0_, id1_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Handle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcAlarm.Handle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 id0 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id0_)));
          set_has_id0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_id1;
        break;
      }

      // required fixed64 id1 = 2;
      case 2: {
        if (tag == 17) {
         parse_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id1_)));
          set_has_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcAlarm.Handle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcAlarm.Handle)
  return false;
#undef DO_
}

void Handle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcAlarm.Handle)
  // required fixed64 id0 = 1;
  if (has_id0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id0(), output);
  }

  // required fixed64 id1 = 2;
  if (has_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->id1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcAlarm.Handle)
}

::google::protobuf::uint8* Handle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcAlarm.Handle)
  // required fixed64 id0 = 1;
  if (has_id0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id0(), target);
  }

  // required fixed64 id1 = 2;
  if (has_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->id1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcAlarm.Handle)
  return target;
}

int Handle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 id0 = 1;
    if (has_id0()) {
      total_size += 1 + 8;
    }

    // required fixed64 id1 = 2;
    if (has_id1()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Handle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Handle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Handle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Handle::MergeFrom(const Handle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id0()) {
      set_id0(from.id0());
    }
    if (from.has_id1()) {
      set_id1(from.id1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Handle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handle::CopyFrom(const Handle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Handle::Swap(Handle* other) {
  if (other != this) {
    std::swap(id0_, other->id0_);
    std::swap(id1_, other->id1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Handle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Handle_descriptor_;
  metadata.reflection = Handle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int alarmProfileCreateRequest::kResourceIdFieldNumber;
const int alarmProfileCreateRequest::kCategoryFieldNumber;
const int alarmProfileCreateRequest::kProbCauseFieldNumber;
const int alarmProfileCreateRequest::kSpecificProblemFieldNumber;
const int alarmProfileCreateRequest::kIsSendFieldNumber;
const int alarmProfileCreateRequest::kIntAssertSoakingTimeFieldNumber;
const int alarmProfileCreateRequest::kIntClearSoakingTimeFieldNumber;
const int alarmProfileCreateRequest::kGenerationRuleBitmapFieldNumber;
const int alarmProfileCreateRequest::kGenRuleRelationFieldNumber;
const int alarmProfileCreateRequest::kSuppressionRuleBitmapFieldNumber;
const int alarmProfileCreateRequest::kSuppRuleRelationFieldNumber;
const int alarmProfileCreateRequest::kIntIndexFieldNumber;
const int alarmProfileCreateRequest::kAffectedBitmapFieldNumber;
const int alarmProfileCreateRequest::kIsSuppressChildFieldNumber;
#endif  // !_MSC_VER

alarmProfileCreateRequest::alarmProfileCreateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcAlarm.alarmProfileCreateRequest)
}

void alarmProfileCreateRequest::InitAsDefaultInstance() {
}

alarmProfileCreateRequest::alarmProfileCreateRequest(const alarmProfileCreateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcAlarm.alarmProfileCreateRequest)
}

void alarmProfileCreateRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resourceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_ = 0u;
  probcause_ = 0u;
  specificproblem_ = 0u;
  issend_ = false;
  intassertsoakingtime_ = 0;
  intclearsoakingtime_ = 0;
  generationrulebitmap_ = GOOGLE_ULONGLONG(0);
  genrulerelation_ = 0u;
  suppressionrulebitmap_ = GOOGLE_ULONGLONG(0);
  supprulerelation_ = 0u;
  intindex_ = 0;
  affectedbitmap_ = GOOGLE_ULONGLONG(0);
  issuppresschild_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

alarmProfileCreateRequest::~alarmProfileCreateRequest() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcAlarm.alarmProfileCreateRequest)
  SharedDtor();
}

void alarmProfileCreateRequest::SharedDtor() {
  if (resourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resourceid_;
  }
  if (this != default_instance_) {
  }
}

void alarmProfileCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* alarmProfileCreateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return alarmProfileCreateRequest_descriptor_;
}

const alarmProfileCreateRequest& alarmProfileCreateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcAlarm_2eproto();
  return *default_instance_;
}

alarmProfileCreateRequest* alarmProfileCreateRequest::default_instance_ = NULL;

alarmProfileCreateRequest* alarmProfileCreateRequest::New() const {
  return new alarmProfileCreateRequest;
}

void alarmProfileCreateRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<alarmProfileCreateRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(category_, intclearsoakingtime_);
    if (has_resourceid()) {
      if (resourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resourceid_->clear();
      }
    }
    issend_ = false;
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(genrulerelation_, suppressionrulebitmap_);
    ZR_(issuppresschild_, intindex_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool alarmProfileCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcAlarm.alarmProfileCreateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string resourceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resourceid().data(), this->resourceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resourceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_category;
        break;
      }

      // required uint32 category = 2;
      case 2: {
        if (tag == 16) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_probCause;
        break;
      }

      // required uint32 probCause = 3;
      case 3: {
        if (tag == 24) {
         parse_probCause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &probcause_)));
          set_has_probcause();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_specificProblem;
        break;
      }

      // required uint32 specificProblem = 4;
      case 4: {
        if (tag == 32) {
         parse_specificProblem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &specificproblem_)));
          set_has_specificproblem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isSend;
        break;
      }

      // required bool isSend = 5;
      case 5: {
        if (tag == 40) {
         parse_isSend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issend_)));
          set_has_issend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_intAssertSoakingTime;
        break;
      }

      // required int32 intAssertSoakingTime = 6;
      case 6: {
        if (tag == 48) {
         parse_intAssertSoakingTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intassertsoakingtime_)));
          set_has_intassertsoakingtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_intClearSoakingTime;
        break;
      }

      // required int32 intClearSoakingTime = 7;
      case 7: {
        if (tag == 56) {
         parse_intClearSoakingTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intclearsoakingtime_)));
          set_has_intclearsoakingtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_generationRuleBitmap;
        break;
      }

      // required fixed64 generationRuleBitmap = 8;
      case 8: {
        if (tag == 65) {
         parse_generationRuleBitmap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &generationrulebitmap_)));
          set_has_generationrulebitmap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_genRuleRelation;
        break;
      }

      // required uint32 genRuleRelation = 9;
      case 9: {
        if (tag == 72) {
         parse_genRuleRelation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &genrulerelation_)));
          set_has_genrulerelation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_suppressionRuleBitmap;
        break;
      }

      // required fixed64 suppressionRuleBitmap = 10;
      case 10: {
        if (tag == 81) {
         parse_suppressionRuleBitmap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &suppressionrulebitmap_)));
          set_has_suppressionrulebitmap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_suppRuleRelation;
        break;
      }

      // required uint32 suppRuleRelation = 11;
      case 11: {
        if (tag == 88) {
         parse_suppRuleRelation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &supprulerelation_)));
          set_has_supprulerelation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_intIndex;
        break;
      }

      // required int32 intIndex = 12;
      case 12: {
        if (tag == 96) {
         parse_intIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intindex_)));
          set_has_intindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_affectedBitmap;
        break;
      }

      // required fixed64 affectedBitmap = 13;
      case 13: {
        if (tag == 105) {
         parse_affectedBitmap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &affectedbitmap_)));
          set_has_affectedbitmap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_isSuppressChild;
        break;
      }

      // required bool isSuppressChild = 14;
      case 14: {
        if (tag == 112) {
         parse_isSuppressChild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuppresschild_)));
          set_has_issuppresschild();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcAlarm.alarmProfileCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcAlarm.alarmProfileCreateRequest)
  return false;
#undef DO_
}

void alarmProfileCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcAlarm.alarmProfileCreateRequest)
  // required string resourceId = 1;
  if (has_resourceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resourceid().data(), this->resourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resourceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->resourceid(), output);
  }

  // required uint32 category = 2;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->category(), output);
  }

  // required uint32 probCause = 3;
  if (has_probcause()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->probcause(), output);
  }

  // required uint32 specificProblem = 4;
  if (has_specificproblem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->specificproblem(), output);
  }

  // required bool isSend = 5;
  if (has_issend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->issend(), output);
  }

  // required int32 intAssertSoakingTime = 6;
  if (has_intassertsoakingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->intassertsoakingtime(), output);
  }

  // required int32 intClearSoakingTime = 7;
  if (has_intclearsoakingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->intclearsoakingtime(), output);
  }

  // required fixed64 generationRuleBitmap = 8;
  if (has_generationrulebitmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->generationrulebitmap(), output);
  }

  // required uint32 genRuleRelation = 9;
  if (has_genrulerelation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->genrulerelation(), output);
  }

  // required fixed64 suppressionRuleBitmap = 10;
  if (has_suppressionrulebitmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->suppressionrulebitmap(), output);
  }

  // required uint32 suppRuleRelation = 11;
  if (has_supprulerelation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->supprulerelation(), output);
  }

  // required int32 intIndex = 12;
  if (has_intindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->intindex(), output);
  }

  // required fixed64 affectedBitmap = 13;
  if (has_affectedbitmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->affectedbitmap(), output);
  }

  // required bool isSuppressChild = 14;
  if (has_issuppresschild()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->issuppresschild(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcAlarm.alarmProfileCreateRequest)
}

::google::protobuf::uint8* alarmProfileCreateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcAlarm.alarmProfileCreateRequest)
  // required string resourceId = 1;
  if (has_resourceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resourceid().data(), this->resourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resourceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resourceid(), target);
  }

  // required uint32 category = 2;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->category(), target);
  }

  // required uint32 probCause = 3;
  if (has_probcause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->probcause(), target);
  }

  // required uint32 specificProblem = 4;
  if (has_specificproblem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->specificproblem(), target);
  }

  // required bool isSend = 5;
  if (has_issend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->issend(), target);
  }

  // required int32 intAssertSoakingTime = 6;
  if (has_intassertsoakingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->intassertsoakingtime(), target);
  }

  // required int32 intClearSoakingTime = 7;
  if (has_intclearsoakingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->intclearsoakingtime(), target);
  }

  // required fixed64 generationRuleBitmap = 8;
  if (has_generationrulebitmap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->generationrulebitmap(), target);
  }

  // required uint32 genRuleRelation = 9;
  if (has_genrulerelation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->genrulerelation(), target);
  }

  // required fixed64 suppressionRuleBitmap = 10;
  if (has_suppressionrulebitmap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->suppressionrulebitmap(), target);
  }

  // required uint32 suppRuleRelation = 11;
  if (has_supprulerelation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->supprulerelation(), target);
  }

  // required int32 intIndex = 12;
  if (has_intindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->intindex(), target);
  }

  // required fixed64 affectedBitmap = 13;
  if (has_affectedbitmap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(13, this->affectedbitmap(), target);
  }

  // required bool isSuppressChild = 14;
  if (has_issuppresschild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->issuppresschild(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcAlarm.alarmProfileCreateRequest)
  return target;
}

int alarmProfileCreateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string resourceId = 1;
    if (has_resourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourceid());
    }

    // required uint32 category = 2;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->category());
    }

    // required uint32 probCause = 3;
    if (has_probcause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->probcause());
    }

    // required uint32 specificProblem = 4;
    if (has_specificproblem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->specificproblem());
    }

    // required bool isSend = 5;
    if (has_issend()) {
      total_size += 1 + 1;
    }

    // required int32 intAssertSoakingTime = 6;
    if (has_intassertsoakingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intassertsoakingtime());
    }

    // required int32 intClearSoakingTime = 7;
    if (has_intclearsoakingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intclearsoakingtime());
    }

    // required fixed64 generationRuleBitmap = 8;
    if (has_generationrulebitmap()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 genRuleRelation = 9;
    if (has_genrulerelation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->genrulerelation());
    }

    // required fixed64 suppressionRuleBitmap = 10;
    if (has_suppressionrulebitmap()) {
      total_size += 1 + 8;
    }

    // required uint32 suppRuleRelation = 11;
    if (has_supprulerelation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->supprulerelation());
    }

    // required int32 intIndex = 12;
    if (has_intindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intindex());
    }

    // required fixed64 affectedBitmap = 13;
    if (has_affectedbitmap()) {
      total_size += 1 + 8;
    }

    // required bool isSuppressChild = 14;
    if (has_issuppresschild()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void alarmProfileCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const alarmProfileCreateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const alarmProfileCreateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void alarmProfileCreateRequest::MergeFrom(const alarmProfileCreateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resourceid()) {
      set_resourceid(from.resourceid());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_probcause()) {
      set_probcause(from.probcause());
    }
    if (from.has_specificproblem()) {
      set_specificproblem(from.specificproblem());
    }
    if (from.has_issend()) {
      set_issend(from.issend());
    }
    if (from.has_intassertsoakingtime()) {
      set_intassertsoakingtime(from.intassertsoakingtime());
    }
    if (from.has_intclearsoakingtime()) {
      set_intclearsoakingtime(from.intclearsoakingtime());
    }
    if (from.has_generationrulebitmap()) {
      set_generationrulebitmap(from.generationrulebitmap());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_genrulerelation()) {
      set_genrulerelation(from.genrulerelation());
    }
    if (from.has_suppressionrulebitmap()) {
      set_suppressionrulebitmap(from.suppressionrulebitmap());
    }
    if (from.has_supprulerelation()) {
      set_supprulerelation(from.supprulerelation());
    }
    if (from.has_intindex()) {
      set_intindex(from.intindex());
    }
    if (from.has_affectedbitmap()) {
      set_affectedbitmap(from.affectedbitmap());
    }
    if (from.has_issuppresschild()) {
      set_issuppresschild(from.issuppresschild());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void alarmProfileCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void alarmProfileCreateRequest::CopyFrom(const alarmProfileCreateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool alarmProfileCreateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void alarmProfileCreateRequest::Swap(alarmProfileCreateRequest* other) {
  if (other != this) {
    std::swap(resourceid_, other->resourceid_);
    std::swap(category_, other->category_);
    std::swap(probcause_, other->probcause_);
    std::swap(specificproblem_, other->specificproblem_);
    std::swap(issend_, other->issend_);
    std::swap(intassertsoakingtime_, other->intassertsoakingtime_);
    std::swap(intclearsoakingtime_, other->intclearsoakingtime_);
    std::swap(generationrulebitmap_, other->generationrulebitmap_);
    std::swap(genrulerelation_, other->genrulerelation_);
    std::swap(suppressionrulebitmap_, other->suppressionrulebitmap_);
    std::swap(supprulerelation_, other->supprulerelation_);
    std::swap(intindex_, other->intindex_);
    std::swap(affectedbitmap_, other->affectedbitmap_);
    std::swap(issuppresschild_, other->issuppresschild_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata alarmProfileCreateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = alarmProfileCreateRequest_descriptor_;
  metadata.reflection = alarmProfileCreateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int alarmProfileDeleteRequest::kResourceIdFieldNumber;
const int alarmProfileDeleteRequest::kCategoryFieldNumber;
const int alarmProfileDeleteRequest::kProbCauseFieldNumber;
#endif  // !_MSC_VER

alarmProfileDeleteRequest::alarmProfileDeleteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcAlarm.alarmProfileDeleteRequest)
}

void alarmProfileDeleteRequest::InitAsDefaultInstance() {
}

alarmProfileDeleteRequest::alarmProfileDeleteRequest(const alarmProfileDeleteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcAlarm.alarmProfileDeleteRequest)
}

void alarmProfileDeleteRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resourceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_ = 0u;
  probcause_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

alarmProfileDeleteRequest::~alarmProfileDeleteRequest() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcAlarm.alarmProfileDeleteRequest)
  SharedDtor();
}

void alarmProfileDeleteRequest::SharedDtor() {
  if (resourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resourceid_;
  }
  if (this != default_instance_) {
  }
}

void alarmProfileDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* alarmProfileDeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return alarmProfileDeleteRequest_descriptor_;
}

const alarmProfileDeleteRequest& alarmProfileDeleteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcAlarm_2eproto();
  return *default_instance_;
}

alarmProfileDeleteRequest* alarmProfileDeleteRequest::default_instance_ = NULL;

alarmProfileDeleteRequest* alarmProfileDeleteRequest::New() const {
  return new alarmProfileDeleteRequest;
}

void alarmProfileDeleteRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<alarmProfileDeleteRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(category_, probcause_);
    if (has_resourceid()) {
      if (resourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resourceid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool alarmProfileDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcAlarm.alarmProfileDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string resourceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resourceid().data(), this->resourceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resourceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_category;
        break;
      }

      // required uint32 category = 2;
      case 2: {
        if (tag == 16) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_probCause;
        break;
      }

      // required uint32 probCause = 3;
      case 3: {
        if (tag == 24) {
         parse_probCause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &probcause_)));
          set_has_probcause();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcAlarm.alarmProfileDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcAlarm.alarmProfileDeleteRequest)
  return false;
#undef DO_
}

void alarmProfileDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcAlarm.alarmProfileDeleteRequest)
  // required string resourceId = 1;
  if (has_resourceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resourceid().data(), this->resourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resourceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->resourceid(), output);
  }

  // required uint32 category = 2;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->category(), output);
  }

  // required uint32 probCause = 3;
  if (has_probcause()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->probcause(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcAlarm.alarmProfileDeleteRequest)
}

::google::protobuf::uint8* alarmProfileDeleteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcAlarm.alarmProfileDeleteRequest)
  // required string resourceId = 1;
  if (has_resourceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resourceid().data(), this->resourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resourceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resourceid(), target);
  }

  // required uint32 category = 2;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->category(), target);
  }

  // required uint32 probCause = 3;
  if (has_probcause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->probcause(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcAlarm.alarmProfileDeleteRequest)
  return target;
}

int alarmProfileDeleteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string resourceId = 1;
    if (has_resourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourceid());
    }

    // required uint32 category = 2;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->category());
    }

    // required uint32 probCause = 3;
    if (has_probcause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->probcause());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void alarmProfileDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const alarmProfileDeleteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const alarmProfileDeleteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void alarmProfileDeleteRequest::MergeFrom(const alarmProfileDeleteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resourceid()) {
      set_resourceid(from.resourceid());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_probcause()) {
      set_probcause(from.probcause());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void alarmProfileDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void alarmProfileDeleteRequest::CopyFrom(const alarmProfileDeleteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool alarmProfileDeleteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void alarmProfileDeleteRequest::Swap(alarmProfileDeleteRequest* other) {
  if (other != this) {
    std::swap(resourceid_, other->resourceid_);
    std::swap(category_, other->category_);
    std::swap(probcause_, other->probcause_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata alarmProfileDeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = alarmProfileDeleteRequest_descriptor_;
  metadata.reflection = alarmProfileDeleteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int alarmDataRequest::kResourceIdFieldNumber;
const int alarmDataRequest::kCategoryFieldNumber;
const int alarmDataRequest::kProbCauseFieldNumber;
const int alarmDataRequest::kSpecificProblemFieldNumber;
const int alarmDataRequest::kSeverityFieldNumber;
const int alarmDataRequest::kStateFieldNumber;
const int alarmDataRequest::kSyncDataFieldNumber;
#endif  // !_MSC_VER

alarmDataRequest::alarmDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcAlarm.alarmDataRequest)
}

void alarmDataRequest::InitAsDefaultInstance() {
}

alarmDataRequest::alarmDataRequest(const alarmDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcAlarm.alarmDataRequest)
}

void alarmDataRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resourceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_ = 0u;
  probcause_ = 0u;
  specificproblem_ = 0u;
  severity_ = 0u;
  state_ = 0u;
  syncdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

alarmDataRequest::~alarmDataRequest() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcAlarm.alarmDataRequest)
  SharedDtor();
}

void alarmDataRequest::SharedDtor() {
  if (resourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resourceid_;
  }
  if (syncdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete syncdata_;
  }
  if (this != default_instance_) {
  }
}

void alarmDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* alarmDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return alarmDataRequest_descriptor_;
}

const alarmDataRequest& alarmDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcAlarm_2eproto();
  return *default_instance_;
}

alarmDataRequest* alarmDataRequest::default_instance_ = NULL;

alarmDataRequest* alarmDataRequest::New() const {
  return new alarmDataRequest;
}

void alarmDataRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<alarmDataRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(category_, severity_);
    if (has_resourceid()) {
      if (resourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resourceid_->clear();
      }
    }
    state_ = 0u;
    if (has_syncdata()) {
      if (syncdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        syncdata_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool alarmDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcAlarm.alarmDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string resourceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resourceid().data(), this->resourceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resourceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_category;
        break;
      }

      // required uint32 category = 2;
      case 2: {
        if (tag == 16) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_probCause;
        break;
      }

      // required uint32 probCause = 3;
      case 3: {
        if (tag == 24) {
         parse_probCause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &probcause_)));
          set_has_probcause();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_specificProblem;
        break;
      }

      // required uint32 specificProblem = 4;
      case 4: {
        if (tag == 32) {
         parse_specificProblem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &specificproblem_)));
          set_has_specificproblem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_severity;
        break;
      }

      // required uint32 severity = 5;
      case 5: {
        if (tag == 40) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // required uint32 state = 6;
      case 6: {
        if (tag == 48) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_syncData;
        break;
      }

      // required string syncData = 7;
      case 7: {
        if (tag == 58) {
         parse_syncData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_syncdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->syncdata().data(), this->syncdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "syncdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcAlarm.alarmDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcAlarm.alarmDataRequest)
  return false;
#undef DO_
}

void alarmDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcAlarm.alarmDataRequest)
  // required string resourceId = 1;
  if (has_resourceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resourceid().data(), this->resourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resourceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->resourceid(), output);
  }

  // required uint32 category = 2;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->category(), output);
  }

  // required uint32 probCause = 3;
  if (has_probcause()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->probcause(), output);
  }

  // required uint32 specificProblem = 4;
  if (has_specificproblem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->specificproblem(), output);
  }

  // required uint32 severity = 5;
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->severity(), output);
  }

  // required uint32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->state(), output);
  }

  // required string syncData = 7;
  if (has_syncdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->syncdata().data(), this->syncdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "syncdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->syncdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcAlarm.alarmDataRequest)
}

::google::protobuf::uint8* alarmDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcAlarm.alarmDataRequest)
  // required string resourceId = 1;
  if (has_resourceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resourceid().data(), this->resourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resourceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resourceid(), target);
  }

  // required uint32 category = 2;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->category(), target);
  }

  // required uint32 probCause = 3;
  if (has_probcause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->probcause(), target);
  }

  // required uint32 specificProblem = 4;
  if (has_specificproblem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->specificproblem(), target);
  }

  // required uint32 severity = 5;
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->severity(), target);
  }

  // required uint32 state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->state(), target);
  }

  // required string syncData = 7;
  if (has_syncdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->syncdata().data(), this->syncdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "syncdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->syncdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcAlarm.alarmDataRequest)
  return target;
}

int alarmDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string resourceId = 1;
    if (has_resourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourceid());
    }

    // required uint32 category = 2;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->category());
    }

    // required uint32 probCause = 3;
    if (has_probcause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->probcause());
    }

    // required uint32 specificProblem = 4;
    if (has_specificproblem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->specificproblem());
    }

    // required uint32 severity = 5;
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->severity());
    }

    // required uint32 state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // required string syncData = 7;
    if (has_syncdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->syncdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void alarmDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const alarmDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const alarmDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void alarmDataRequest::MergeFrom(const alarmDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resourceid()) {
      set_resourceid(from.resourceid());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_probcause()) {
      set_probcause(from.probcause());
    }
    if (from.has_specificproblem()) {
      set_specificproblem(from.specificproblem());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_syncdata()) {
      set_syncdata(from.syncdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void alarmDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void alarmDataRequest::CopyFrom(const alarmDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool alarmDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void alarmDataRequest::Swap(alarmDataRequest* other) {
  if (other != this) {
    std::swap(resourceid_, other->resourceid_);
    std::swap(category_, other->category_);
    std::swap(probcause_, other->probcause_);
    std::swap(specificproblem_, other->specificproblem_);
    std::swap(severity_, other->severity_);
    std::swap(state_, other->state_);
    std::swap(syncdata_, other->syncdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata alarmDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = alarmDataRequest_descriptor_;
  metadata.reflection = alarmDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int alarmResponse::kSaErrorFieldNumber;
const int alarmResponse::kErrStrFieldNumber;
#endif  // !_MSC_VER

alarmResponse::alarmResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcAlarm.alarmResponse)
}

void alarmResponse::InitAsDefaultInstance() {
}

alarmResponse::alarmResponse(const alarmResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcAlarm.alarmResponse)
}

void alarmResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  saerror_ = 0;
  errstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

alarmResponse::~alarmResponse() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcAlarm.alarmResponse)
  SharedDtor();
}

void alarmResponse::SharedDtor() {
  if (errstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errstr_;
  }
  if (this != default_instance_) {
  }
}

void alarmResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* alarmResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return alarmResponse_descriptor_;
}

const alarmResponse& alarmResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcAlarm_2eproto();
  return *default_instance_;
}

alarmResponse* alarmResponse::default_instance_ = NULL;

alarmResponse* alarmResponse::New() const {
  return new alarmResponse;
}

void alarmResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    saerror_ = 0;
    if (has_errstr()) {
      if (errstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool alarmResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcAlarm.alarmResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 saError = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &saerror_)));
          set_has_saerror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errStr;
        break;
      }

      // optional string errStr = 2;
      case 2: {
        if (tag == 18) {
         parse_errStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errstr().data(), this->errstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcAlarm.alarmResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcAlarm.alarmResponse)
  return false;
#undef DO_
}

void alarmResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcAlarm.alarmResponse)
  // optional int32 saError = 1;
  if (has_saerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->saerror(), output);
  }

  // optional string errStr = 2;
  if (has_errstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errstr().data(), this->errstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcAlarm.alarmResponse)
}

::google::protobuf::uint8* alarmResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcAlarm.alarmResponse)
  // optional int32 saError = 1;
  if (has_saerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->saerror(), target);
  }

  // optional string errStr = 2;
  if (has_errstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errstr().data(), this->errstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcAlarm.alarmResponse)
  return target;
}

int alarmResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 saError = 1;
    if (has_saerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->saerror());
    }

    // optional string errStr = 2;
    if (has_errstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void alarmResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const alarmResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const alarmResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void alarmResponse::MergeFrom(const alarmResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saerror()) {
      set_saerror(from.saerror());
    }
    if (from.has_errstr()) {
      set_errstr(from.errstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void alarmResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void alarmResponse::CopyFrom(const alarmResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool alarmResponse::IsInitialized() const {

  return true;
}

void alarmResponse::Swap(alarmResponse* other) {
  if (other != this) {
    std::swap(saerror_, other->saerror_);
    std::swap(errstr_, other->errstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata alarmResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = alarmResponse_descriptor_;
  metadata.reflection = alarmResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NO_REQUEST::NO_REQUEST()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcAlarm.NO_REQUEST)
}

void NO_REQUEST::InitAsDefaultInstance() {
}

NO_REQUEST::NO_REQUEST(const NO_REQUEST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcAlarm.NO_REQUEST)
}

void NO_REQUEST::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NO_REQUEST::~NO_REQUEST() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcAlarm.NO_REQUEST)
  SharedDtor();
}

void NO_REQUEST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NO_REQUEST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NO_REQUEST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NO_REQUEST_descriptor_;
}

const NO_REQUEST& NO_REQUEST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcAlarm_2eproto();
  return *default_instance_;
}

NO_REQUEST* NO_REQUEST::default_instance_ = NULL;

NO_REQUEST* NO_REQUEST::New() const {
  return new NO_REQUEST;
}

void NO_REQUEST::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NO_REQUEST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcAlarm.NO_REQUEST)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcAlarm.NO_REQUEST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcAlarm.NO_REQUEST)
  return false;
#undef DO_
}

void NO_REQUEST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcAlarm.NO_REQUEST)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcAlarm.NO_REQUEST)
}

::google::protobuf::uint8* NO_REQUEST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcAlarm.NO_REQUEST)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcAlarm.NO_REQUEST)
  return target;
}

int NO_REQUEST::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NO_REQUEST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NO_REQUEST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NO_REQUEST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NO_REQUEST::MergeFrom(const NO_REQUEST& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NO_REQUEST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NO_REQUEST::CopyFrom(const NO_REQUEST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NO_REQUEST::IsInitialized() const {

  return true;
}

void NO_REQUEST::Swap(NO_REQUEST* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NO_REQUEST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NO_REQUEST_descriptor_;
  metadata.reflection = NO_REQUEST_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcAlarm
}  // namespace Rpc
}  // namespace SAFplus

// @@protoc_insertion_point(global_scope)
