// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "clRpcChannel.hxx"
#include "rpcAlarm.hxx"

namespace SAFplus {
namespace Rpc {
namespace rpcAlarm {

namespace {

const ::google::protobuf::ServiceDescriptor* rpcAlarm_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Rpc_rpcAlarm_2eproto() {
  protobuf_AddDesc_rpcAlarm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpcAlarm.proto");
  GOOGLE_CHECK(file != NULL);
  rpcAlarm_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Rpc_rpcAlarm_2eproto);
}

}  // namespace
rpcAlarm::~rpcAlarm() {}

const ::google::protobuf::ServiceDescriptor* rpcAlarm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rpcAlarm_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* rpcAlarm::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return rpcAlarm_descriptor_;
}

void rpcAlarm::alarmCreateRpcMethod(const ::SAFplus::Rpc::rpcAlarm::alarmProfileCreateRequest*,
                         ::SAFplus::Rpc::rpcAlarm::alarmResponse*)
{
  logError("RPC","SVR","Method alarmCreateRpcMethod() not implemented.");
}

void rpcAlarm::alarmDeleteRpcMethod(const ::SAFplus::Rpc::rpcAlarm::alarmProfileDeleteRequest*,
                         ::SAFplus::Rpc::rpcAlarm::alarmResponse*)
{
  logError("RPC","SVR","Method alarmDeleteRpcMethod() not implemented.");
}

void rpcAlarm::alarmRaiseRpcMethod(const ::SAFplus::Rpc::rpcAlarm::alarmDataRequest*,
                         ::SAFplus::Rpc::rpcAlarm::alarmResponse*)
{
  logError("RPC","SVR","Method alarmRaiseRpcMethod() not implemented.");
}

void rpcAlarm::alarmCreateRpcMethod(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::rpcAlarm::alarmProfileCreateRequest* request,
                     ::SAFplus::Rpc::rpcAlarm::alarmResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method alarmCreateRpcMethod() not implemented.");
}

void rpcAlarm::alarmDeleteRpcMethod(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::rpcAlarm::alarmProfileDeleteRequest* request,
                     ::SAFplus::Rpc::rpcAlarm::alarmResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method alarmDeleteRpcMethod() not implemented.");
}

void rpcAlarm::alarmRaiseRpcMethod(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::rpcAlarm::alarmDataRequest* request,
                     ::SAFplus::Rpc::rpcAlarm::alarmResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method alarmRaiseRpcMethod() not implemented.");
}

void rpcAlarm::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             SAFplus::Handle destination,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             SAFplus::Wakeable& wakeable) {
  GOOGLE_DCHECK_EQ(method->service(), rpcAlarm_descriptor_);
  switch(method->index()) {
    case 0:
      alarmCreateRpcMethod(::google::protobuf::down_cast<const ::SAFplus::Rpc::rpcAlarm::alarmProfileCreateRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::rpcAlarm::alarmResponse*>(response));
      break;
    case 1:
      alarmDeleteRpcMethod(::google::protobuf::down_cast<const ::SAFplus::Rpc::rpcAlarm::alarmProfileDeleteRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::rpcAlarm::alarmResponse*>(response));
      break;
    case 2:
      alarmRaiseRpcMethod(::google::protobuf::down_cast<const ::SAFplus::Rpc::rpcAlarm::alarmDataRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::rpcAlarm::alarmResponse*>(response));
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& rpcAlarm::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SAFplus::Rpc::rpcAlarm::alarmProfileCreateRequest::default_instance();
    case 1:
      return ::SAFplus::Rpc::rpcAlarm::alarmProfileDeleteRequest::default_instance();
    case 2:
      return ::SAFplus::Rpc::rpcAlarm::alarmDataRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& rpcAlarm::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SAFplus::Rpc::rpcAlarm::alarmResponse::default_instance();
    case 1:
      return ::SAFplus::Rpc::rpcAlarm::alarmResponse::default_instance();
    case 2:
      return ::SAFplus::Rpc::rpcAlarm::alarmResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

rpcAlarm_Stub::rpcAlarm_Stub(SAFplus::Rpc::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
rpcAlarm_Stub::rpcAlarm_Stub(
    SAFplus::Rpc::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
rpcAlarm_Stub::~rpcAlarm_Stub() {
  if (owns_channel_) delete channel_;
}

void rpcAlarm_Stub::alarmCreateRpcMethod(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::rpcAlarm::alarmProfileCreateRequest* request,
                              ::SAFplus::Rpc::rpcAlarm::alarmResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(0), dest, request, response, wakeable);
}
void rpcAlarm_Stub::alarmDeleteRpcMethod(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::rpcAlarm::alarmProfileDeleteRequest* request,
                              ::SAFplus::Rpc::rpcAlarm::alarmResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(1), dest, request, response, wakeable);
}
void rpcAlarm_Stub::alarmRaiseRpcMethod(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::rpcAlarm::alarmDataRequest* request,
                              ::SAFplus::Rpc::rpcAlarm::alarmResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(2), dest, request, response, wakeable);
}

}  // namespace rpcAlarm
}  // namespace Rpc
}  // namespace SAFplus
