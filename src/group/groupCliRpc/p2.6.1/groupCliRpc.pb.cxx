// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: groupCliRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "groupCliRpc.pb.hxx"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SAFplus {
namespace Rpc {
namespace groupCliRpc {

namespace {

const ::google::protobuf::Descriptor* GetClusterViewRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClusterViewRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClusterViewResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClusterViewResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_groupCliRpc_2eproto() {
  protobuf_AddDesc_groupCliRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "groupCliRpc.proto");
  GOOGLE_CHECK(file != NULL);
  GetClusterViewRequest_descriptor_ = file->message_type(0);
  static const int GetClusterViewRequest_offsets_[1] = {
  };
  GetClusterViewRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetClusterViewRequest_descriptor_,
      GetClusterViewRequest::default_instance_,
      GetClusterViewRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterViewRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterViewRequest, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterViewRequest, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetClusterViewRequest));
  GetClusterViewResponse_descriptor_ = file->message_type(1);
  static const int GetClusterViewResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterViewResponse, clusterview_),
  };
  GetClusterViewResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetClusterViewResponse_descriptor_,
      GetClusterViewResponse::default_instance_,
      GetClusterViewResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterViewResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterViewResponse, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterViewResponse, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetClusterViewResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_groupCliRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetClusterViewRequest_descriptor_, &GetClusterViewRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetClusterViewResponse_descriptor_, &GetClusterViewResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_groupCliRpc_2eproto() {
  delete GetClusterViewRequest::default_instance_;
  delete GetClusterViewRequest_reflection_;
  delete GetClusterViewResponse::default_instance_;
  delete GetClusterViewResponse_reflection_;
}

void protobuf_AddDesc_groupCliRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SAFplus::Rpc::protobuf_AddDesc_SAFplusPBExt_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021groupCliRpc.proto\022\027SAFplus.Rpc.groupCl"
    "iRpc\032\022SAFplusPBExt.proto\"\"\n\025GetClusterVi"
    "ewRequest*\t\010\350\007\020\200\200\200\200\002\"8\n\026GetClusterViewRe"
    "sponse\022\023\n\013clusterView\030\001 \001(\t*\t\010\350\007\020\200\200\200\200\0022\200"
    "\001\n\013groupCliRpc\022q\n\016getClusterView\022..SAFpl"
    "us.Rpc.groupCliRpc.GetClusterViewRequest"
    "\032/.SAFplus.Rpc.groupCliRpc.GetClusterVie"
    "wResponseB\t\200\001\000\210\001\000\220\001\001", 300);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "groupCliRpc.proto", &protobuf_RegisterTypes);
  GetClusterViewRequest::default_instance_ = new GetClusterViewRequest();
  GetClusterViewResponse::default_instance_ = new GetClusterViewResponse();
  GetClusterViewRequest::default_instance_->InitAsDefaultInstance();
  GetClusterViewResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_groupCliRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_groupCliRpc_2eproto {
  StaticDescriptorInitializer_groupCliRpc_2eproto() {
    protobuf_AddDesc_groupCliRpc_2eproto();
  }
} static_descriptor_initializer_groupCliRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetClusterViewRequest::GetClusterViewRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.groupCliRpc.GetClusterViewRequest)
}

void GetClusterViewRequest::InitAsDefaultInstance() {
}

GetClusterViewRequest::GetClusterViewRequest(const GetClusterViewRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.groupCliRpc.GetClusterViewRequest)
}

void GetClusterViewRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetClusterViewRequest::~GetClusterViewRequest() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.groupCliRpc.GetClusterViewRequest)
  SharedDtor();
}

void GetClusterViewRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetClusterViewRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterViewRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClusterViewRequest_descriptor_;
}

const GetClusterViewRequest& GetClusterViewRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupCliRpc_2eproto();
  return *default_instance_;
}

GetClusterViewRequest* GetClusterViewRequest::default_instance_ = NULL;

GetClusterViewRequest* GetClusterViewRequest::New() const {
  return new GetClusterViewRequest;
}

void GetClusterViewRequest::Clear() {
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetClusterViewRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.groupCliRpc.GetClusterViewRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    if ((8000u <= tag)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_,
                                  mutable_unknown_fields()));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.groupCliRpc.GetClusterViewRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.groupCliRpc.GetClusterViewRequest)
  return false;
#undef DO_
}

void GetClusterViewRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.groupCliRpc.GetClusterViewRequest)
  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.groupCliRpc.GetClusterViewRequest)
}

::google::protobuf::uint8* GetClusterViewRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.groupCliRpc.GetClusterViewRequest)
  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.groupCliRpc.GetClusterViewRequest)
  return target;
}

int GetClusterViewRequest::ByteSize() const {
  int total_size = 0;

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterViewRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetClusterViewRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetClusterViewRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetClusterViewRequest::MergeFrom(const GetClusterViewRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetClusterViewRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterViewRequest::CopyFrom(const GetClusterViewRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterViewRequest::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void GetClusterViewRequest::Swap(GetClusterViewRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata GetClusterViewRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClusterViewRequest_descriptor_;
  metadata.reflection = GetClusterViewRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetClusterViewResponse::kClusterViewFieldNumber;
#endif  // !_MSC_VER

GetClusterViewResponse::GetClusterViewResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.groupCliRpc.GetClusterViewResponse)
}

void GetClusterViewResponse::InitAsDefaultInstance() {
}

GetClusterViewResponse::GetClusterViewResponse(const GetClusterViewResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.groupCliRpc.GetClusterViewResponse)
}

void GetClusterViewResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clusterview_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetClusterViewResponse::~GetClusterViewResponse() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.groupCliRpc.GetClusterViewResponse)
  SharedDtor();
}

void GetClusterViewResponse::SharedDtor() {
  if (clusterview_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clusterview_;
  }
  if (this != default_instance_) {
  }
}

void GetClusterViewResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterViewResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClusterViewResponse_descriptor_;
}

const GetClusterViewResponse& GetClusterViewResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupCliRpc_2eproto();
  return *default_instance_;
}

GetClusterViewResponse* GetClusterViewResponse::default_instance_ = NULL;

GetClusterViewResponse* GetClusterViewResponse::New() const {
  return new GetClusterViewResponse;
}

void GetClusterViewResponse::Clear() {
  _extensions_.Clear();
  if (has_clusterview()) {
    if (clusterview_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      clusterview_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetClusterViewResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.groupCliRpc.GetClusterViewResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clusterView = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clusterview()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clusterview().data(), this->clusterview().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clusterview");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.groupCliRpc.GetClusterViewResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.groupCliRpc.GetClusterViewResponse)
  return false;
#undef DO_
}

void GetClusterViewResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.groupCliRpc.GetClusterViewResponse)
  // optional string clusterView = 1;
  if (has_clusterview()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clusterview().data(), this->clusterview().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clusterview");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clusterview(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.groupCliRpc.GetClusterViewResponse)
}

::google::protobuf::uint8* GetClusterViewResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.groupCliRpc.GetClusterViewResponse)
  // optional string clusterView = 1;
  if (has_clusterview()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clusterview().data(), this->clusterview().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clusterview");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clusterview(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.groupCliRpc.GetClusterViewResponse)
  return target;
}

int GetClusterViewResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string clusterView = 1;
    if (has_clusterview()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clusterview());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterViewResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetClusterViewResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetClusterViewResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetClusterViewResponse::MergeFrom(const GetClusterViewResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clusterview()) {
      set_clusterview(from.clusterview());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetClusterViewResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterViewResponse::CopyFrom(const GetClusterViewResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterViewResponse::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void GetClusterViewResponse::Swap(GetClusterViewResponse* other) {
  if (other != this) {
    std::swap(clusterview_, other->clusterview_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata GetClusterViewResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClusterViewResponse_descriptor_;
  metadata.reflection = GetClusterViewResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace groupCliRpc
}  // namespace Rpc
}  // namespace SAFplus

// @@protoc_insertion_point(global_scope)
