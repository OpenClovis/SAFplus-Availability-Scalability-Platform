// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcTest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpcTest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SAFplus {
namespace Rpc {
namespace rpcTest {

namespace {

const ::google::protobuf::Descriptor* TestGetRpcMethodRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestGetRpcMethodRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestGetRpcMethodResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestGetRpcMethodResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestGetRpcMethod2Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestGetRpcMethod2Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestGetRpcMethod2Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestGetRpcMethod2Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestGetRpcMethod3Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestGetRpcMethod3Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestGetRpcMethod3Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestGetRpcMethod3Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkOperationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkOperationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkOperationResponseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkOperationResponseRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpcTest_2eproto() {
  protobuf_AddDesc_rpcTest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpcTest.proto");
  GOOGLE_CHECK(file != NULL);
  TestGetRpcMethodRequest_descriptor_ = file->message_type(0);
  static const int TestGetRpcMethodRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethodRequest, name_),
  };
  TestGetRpcMethodRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestGetRpcMethodRequest_descriptor_,
      TestGetRpcMethodRequest::default_instance_,
      TestGetRpcMethodRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethodRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethodRequest, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethodRequest, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestGetRpcMethodRequest));
  DataResult_descriptor_ = file->message_type(1);
  static const int DataResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResult, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResult, status_),
  };
  DataResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataResult_descriptor_,
      DataResult::default_instance_,
      DataResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResult, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResult, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataResult));
  TestGetRpcMethodResponse_descriptor_ = file->message_type(2);
  static const int TestGetRpcMethodResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethodResponse, dataresult_),
  };
  TestGetRpcMethodResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestGetRpcMethodResponse_descriptor_,
      TestGetRpcMethodResponse::default_instance_,
      TestGetRpcMethodResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethodResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethodResponse, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethodResponse, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestGetRpcMethodResponse));
  TestGetRpcMethod2Request_descriptor_ = file->message_type(3);
  static const int TestGetRpcMethod2Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethod2Request, name_),
  };
  TestGetRpcMethod2Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestGetRpcMethod2Request_descriptor_,
      TestGetRpcMethod2Request::default_instance_,
      TestGetRpcMethod2Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethod2Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethod2Request, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethod2Request, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestGetRpcMethod2Request));
  TestGetRpcMethod2Response_descriptor_ = file->message_type(4);
  static const int TestGetRpcMethod2Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethod2Response, dataresult_),
  };
  TestGetRpcMethod2Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestGetRpcMethod2Response_descriptor_,
      TestGetRpcMethod2Response::default_instance_,
      TestGetRpcMethod2Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethod2Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethod2Response, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethod2Response, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestGetRpcMethod2Response));
  TestGetRpcMethod3Request_descriptor_ = file->message_type(5);
  static const int TestGetRpcMethod3Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethod3Request, name_),
  };
  TestGetRpcMethod3Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestGetRpcMethod3Request_descriptor_,
      TestGetRpcMethod3Request::default_instance_,
      TestGetRpcMethod3Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethod3Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethod3Request, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethod3Request, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestGetRpcMethod3Request));
  TestGetRpcMethod3Response_descriptor_ = file->message_type(6);
  static const int TestGetRpcMethod3Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethod3Response, dataresult_),
  };
  TestGetRpcMethod3Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestGetRpcMethod3Response_descriptor_,
      TestGetRpcMethod3Response::default_instance_,
      TestGetRpcMethod3Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethod3Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethod3Response, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestGetRpcMethod3Response, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestGetRpcMethod3Response));
  WorkOperationRequest_descriptor_ = file->message_type(7);
  static const int WorkOperationRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, invocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, componentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, componenthandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, target_),
  };
  WorkOperationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkOperationRequest_descriptor_,
      WorkOperationRequest::default_instance_,
      WorkOperationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkOperationRequest));
  WorkOperationResponseRequest_descriptor_ = file->message_type(8);
  static const int WorkOperationResponseRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationResponseRequest, invocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationResponseRequest, result_),
  };
  WorkOperationResponseRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkOperationResponseRequest_descriptor_,
      WorkOperationResponseRequest::default_instance_,
      WorkOperationResponseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationResponseRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationResponseRequest, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationResponseRequest, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkOperationResponseRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpcTest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestGetRpcMethodRequest_descriptor_, &TestGetRpcMethodRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataResult_descriptor_, &DataResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestGetRpcMethodResponse_descriptor_, &TestGetRpcMethodResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestGetRpcMethod2Request_descriptor_, &TestGetRpcMethod2Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestGetRpcMethod2Response_descriptor_, &TestGetRpcMethod2Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestGetRpcMethod3Request_descriptor_, &TestGetRpcMethod3Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestGetRpcMethod3Response_descriptor_, &TestGetRpcMethod3Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkOperationRequest_descriptor_, &WorkOperationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkOperationResponseRequest_descriptor_, &WorkOperationResponseRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpcTest_2eproto() {
  delete TestGetRpcMethodRequest::default_instance_;
  delete TestGetRpcMethodRequest_reflection_;
  delete DataResult::default_instance_;
  delete DataResult_reflection_;
  delete TestGetRpcMethodResponse::default_instance_;
  delete TestGetRpcMethodResponse_reflection_;
  delete TestGetRpcMethod2Request::default_instance_;
  delete TestGetRpcMethod2Request_reflection_;
  delete TestGetRpcMethod2Response::default_instance_;
  delete TestGetRpcMethod2Response_reflection_;
  delete TestGetRpcMethod3Request::default_instance_;
  delete TestGetRpcMethod3Request_reflection_;
  delete TestGetRpcMethod3Response::default_instance_;
  delete TestGetRpcMethod3Response_reflection_;
  delete WorkOperationRequest::default_instance_;
  delete WorkOperationRequest_reflection_;
  delete WorkOperationResponseRequest::default_instance_;
  delete WorkOperationResponseRequest_reflection_;
}

void protobuf_AddDesc_rpcTest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SAFplus::Rpc::protobuf_AddDesc_SAFplusPBExt_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rrpcTest.proto\022\023SAFplus.Rpc.rpcTest\032\022SA"
    "FplusPBExt.proto\"2\n\027TestGetRpcMethodRequ"
    "est\022\014\n\004name\030\001 \001(\t*\t\010\350\007\020\200\200\200\200\002\"5\n\nDataResu"
    "lt\022\014\n\004name\030\001 \001(\t\022\016\n\006status\030\002 \001(\005*\t\010\350\007\020\200\200"
    "\200\200\002\"Z\n\030TestGetRpcMethodResponse\0223\n\ndataR"
    "esult\030\001 \001(\0132\037.SAFplus.Rpc.rpcTest.DataRe"
    "sult*\t\010\350\007\020\200\200\200\200\002\"3\n\030TestGetRpcMethod2Requ"
    "est\022\014\n\004name\030\001 \001(\t*\t\010\350\007\020\200\200\200\200\002\"[\n\031TestGetR"
    "pcMethod2Response\0223\n\ndataResult\030\001 \001(\0132\037."
    "SAFplus.Rpc.rpcTest.DataResult*\t\010\350\007\020\200\200\200\200"
    "\002\"3\n\030TestGetRpcMethod3Request\022\014\n\004name\030\001 "
    "\001(\t*\t\010\350\007\020\200\200\200\200\002\"[\n\031TestGetRpcMethod3Respo"
    "nse\0223\n\ndataResult\030\001 \001(\0132\037.SAFplus.Rpc.rp"
    "cTest.DataResult*\t\010\350\007\020\200\200\200\200\002\"\210\001\n\024WorkOper"
    "ationRequest\022\022\n\ninvocation\030\001 \001(\004\022\025\n\rcomp"
    "onentName\030\002 \001(\t\022\027\n\017componentHandle\030\003 \003(\t"
    "\022\021\n\toperation\030\004 \001(\r\022\016\n\006target\030\005 \001(\r*\t\010\350\007"
    "\020\200\200\200\200\002\"M\n\034WorkOperationResponseRequest\022\022"
    "\n\ninvocation\030\001 \001(\004\022\016\n\006result\030\002 \001(\r*\t\010\350\007\020"
    "\200\200\200\200\0022\236\004\n\007rpcTest\022o\n\020testGetRpcMethod\022,."
    "SAFplus.Rpc.rpcTest.TestGetRpcMethodRequ"
    "est\032-.SAFplus.Rpc.rpcTest.TestGetRpcMeth"
    "odResponse\022r\n\021testGetRpcMethod2\022-.SAFplu"
    "s.Rpc.rpcTest.TestGetRpcMethod2Request\032."
    ".SAFplus.Rpc.rpcTest.TestGetRpcMethod2Re"
    "sponse\022r\n\021testGetRpcMethod3\022-.SAFplus.Rp"
    "c.rpcTest.TestGetRpcMethod3Request\032..SAF"
    "plus.Rpc.rpcTest.TestGetRpcMethod3Respon"
    "se\022T\n\rworkOperation\022).SAFplus.Rpc.rpcTes"
    "t.WorkOperationRequest\032\030.SAFplus.Rpc.NO_"
    "RESPONSE\022d\n\025workOperationResponse\0221.SAFp"
    "lus.Rpc.rpcTest.WorkOperationResponseReq"
    "uest\032\030.SAFplus.Rpc.NO_RESPONSEB\t\200\001\000\210\001\000\220\001"
    "\001", 1321);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpcTest.proto", &protobuf_RegisterTypes);
  TestGetRpcMethodRequest::default_instance_ = new TestGetRpcMethodRequest();
  DataResult::default_instance_ = new DataResult();
  TestGetRpcMethodResponse::default_instance_ = new TestGetRpcMethodResponse();
  TestGetRpcMethod2Request::default_instance_ = new TestGetRpcMethod2Request();
  TestGetRpcMethod2Response::default_instance_ = new TestGetRpcMethod2Response();
  TestGetRpcMethod3Request::default_instance_ = new TestGetRpcMethod3Request();
  TestGetRpcMethod3Response::default_instance_ = new TestGetRpcMethod3Response();
  WorkOperationRequest::default_instance_ = new WorkOperationRequest();
  WorkOperationResponseRequest::default_instance_ = new WorkOperationResponseRequest();
  TestGetRpcMethodRequest::default_instance_->InitAsDefaultInstance();
  DataResult::default_instance_->InitAsDefaultInstance();
  TestGetRpcMethodResponse::default_instance_->InitAsDefaultInstance();
  TestGetRpcMethod2Request::default_instance_->InitAsDefaultInstance();
  TestGetRpcMethod2Response::default_instance_->InitAsDefaultInstance();
  TestGetRpcMethod3Request::default_instance_->InitAsDefaultInstance();
  TestGetRpcMethod3Response::default_instance_->InitAsDefaultInstance();
  WorkOperationRequest::default_instance_->InitAsDefaultInstance();
  WorkOperationResponseRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpcTest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpcTest_2eproto {
  StaticDescriptorInitializer_rpcTest_2eproto() {
    protobuf_AddDesc_rpcTest_2eproto();
  }
} static_descriptor_initializer_rpcTest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TestGetRpcMethodRequest::kNameFieldNumber;
#endif  // !_MSC_VER

TestGetRpcMethodRequest::TestGetRpcMethodRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest)
}

void TestGetRpcMethodRequest::InitAsDefaultInstance() {
}

TestGetRpcMethodRequest::TestGetRpcMethodRequest(const TestGetRpcMethodRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest)
}

void TestGetRpcMethodRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestGetRpcMethodRequest::~TestGetRpcMethodRequest() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest)
  SharedDtor();
}

void TestGetRpcMethodRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TestGetRpcMethodRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestGetRpcMethodRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestGetRpcMethodRequest_descriptor_;
}

const TestGetRpcMethodRequest& TestGetRpcMethodRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcTest_2eproto();
  return *default_instance_;
}

TestGetRpcMethodRequest* TestGetRpcMethodRequest::default_instance_ = NULL;

TestGetRpcMethodRequest* TestGetRpcMethodRequest::New() const {
  return new TestGetRpcMethodRequest;
}

void TestGetRpcMethodRequest::Clear() {
  _extensions_.Clear();
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestGetRpcMethodRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest)
  return false;
#undef DO_
}

void TestGetRpcMethodRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest)
}

::google::protobuf::uint8* TestGetRpcMethodRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest)
  return target;
}

int TestGetRpcMethodRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestGetRpcMethodRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestGetRpcMethodRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestGetRpcMethodRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestGetRpcMethodRequest::MergeFrom(const TestGetRpcMethodRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestGetRpcMethodRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestGetRpcMethodRequest::CopyFrom(const TestGetRpcMethodRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGetRpcMethodRequest::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TestGetRpcMethodRequest::Swap(TestGetRpcMethodRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata TestGetRpcMethodRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestGetRpcMethodRequest_descriptor_;
  metadata.reflection = TestGetRpcMethodRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataResult::kNameFieldNumber;
const int DataResult::kStatusFieldNumber;
#endif  // !_MSC_VER

DataResult::DataResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcTest.DataResult)
}

void DataResult::InitAsDefaultInstance() {
}

DataResult::DataResult(const DataResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcTest.DataResult)
}

void DataResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataResult::~DataResult() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcTest.DataResult)
  SharedDtor();
}

void DataResult::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DataResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataResult_descriptor_;
}

const DataResult& DataResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcTest_2eproto();
  return *default_instance_;
}

DataResult* DataResult::default_instance_ = NULL;

DataResult* DataResult::New() const {
  return new DataResult;
}

void DataResult::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcTest.DataResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcTest.DataResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcTest.DataResult)
  return false;
#undef DO_
}

void DataResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcTest.DataResult)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcTest.DataResult)
}

::google::protobuf::uint8* DataResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcTest.DataResult)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcTest.DataResult)
  return target;
}

int DataResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataResult::MergeFrom(const DataResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataResult::CopyFrom(const DataResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataResult::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void DataResult::Swap(DataResult* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata DataResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataResult_descriptor_;
  metadata.reflection = DataResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestGetRpcMethodResponse::kDataResultFieldNumber;
#endif  // !_MSC_VER

TestGetRpcMethodResponse::TestGetRpcMethodResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcTest.TestGetRpcMethodResponse)
}

void TestGetRpcMethodResponse::InitAsDefaultInstance() {
  dataresult_ = const_cast< ::SAFplus::Rpc::rpcTest::DataResult*>(&::SAFplus::Rpc::rpcTest::DataResult::default_instance());
}

TestGetRpcMethodResponse::TestGetRpcMethodResponse(const TestGetRpcMethodResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcTest.TestGetRpcMethodResponse)
}

void TestGetRpcMethodResponse::SharedCtor() {
  _cached_size_ = 0;
  dataresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestGetRpcMethodResponse::~TestGetRpcMethodResponse() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcTest.TestGetRpcMethodResponse)
  SharedDtor();
}

void TestGetRpcMethodResponse::SharedDtor() {
  if (this != default_instance_) {
    delete dataresult_;
  }
}

void TestGetRpcMethodResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestGetRpcMethodResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestGetRpcMethodResponse_descriptor_;
}

const TestGetRpcMethodResponse& TestGetRpcMethodResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcTest_2eproto();
  return *default_instance_;
}

TestGetRpcMethodResponse* TestGetRpcMethodResponse::default_instance_ = NULL;

TestGetRpcMethodResponse* TestGetRpcMethodResponse::New() const {
  return new TestGetRpcMethodResponse;
}

void TestGetRpcMethodResponse::Clear() {
  _extensions_.Clear();
  if (has_dataresult()) {
    if (dataresult_ != NULL) dataresult_->::SAFplus::Rpc::rpcTest::DataResult::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestGetRpcMethodResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcTest.TestGetRpcMethodResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcTest.TestGetRpcMethodResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcTest.TestGetRpcMethodResponse)
  return false;
#undef DO_
}

void TestGetRpcMethodResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcTest.TestGetRpcMethodResponse)
  // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
  if (has_dataresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dataresult(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcTest.TestGetRpcMethodResponse)
}

::google::protobuf::uint8* TestGetRpcMethodResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcTest.TestGetRpcMethodResponse)
  // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
  if (has_dataresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dataresult(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcTest.TestGetRpcMethodResponse)
  return target;
}

int TestGetRpcMethodResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
    if (has_dataresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dataresult());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestGetRpcMethodResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestGetRpcMethodResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestGetRpcMethodResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestGetRpcMethodResponse::MergeFrom(const TestGetRpcMethodResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataresult()) {
      mutable_dataresult()->::SAFplus::Rpc::rpcTest::DataResult::MergeFrom(from.dataresult());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestGetRpcMethodResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestGetRpcMethodResponse::CopyFrom(const TestGetRpcMethodResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGetRpcMethodResponse::IsInitialized() const {

  if (has_dataresult()) {
    if (!this->dataresult().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TestGetRpcMethodResponse::Swap(TestGetRpcMethodResponse* other) {
  if (other != this) {
    std::swap(dataresult_, other->dataresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata TestGetRpcMethodResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestGetRpcMethodResponse_descriptor_;
  metadata.reflection = TestGetRpcMethodResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestGetRpcMethod2Request::kNameFieldNumber;
#endif  // !_MSC_VER

TestGetRpcMethod2Request::TestGetRpcMethod2Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request)
}

void TestGetRpcMethod2Request::InitAsDefaultInstance() {
}

TestGetRpcMethod2Request::TestGetRpcMethod2Request(const TestGetRpcMethod2Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request)
}

void TestGetRpcMethod2Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestGetRpcMethod2Request::~TestGetRpcMethod2Request() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request)
  SharedDtor();
}

void TestGetRpcMethod2Request::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TestGetRpcMethod2Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestGetRpcMethod2Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestGetRpcMethod2Request_descriptor_;
}

const TestGetRpcMethod2Request& TestGetRpcMethod2Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcTest_2eproto();
  return *default_instance_;
}

TestGetRpcMethod2Request* TestGetRpcMethod2Request::default_instance_ = NULL;

TestGetRpcMethod2Request* TestGetRpcMethod2Request::New() const {
  return new TestGetRpcMethod2Request;
}

void TestGetRpcMethod2Request::Clear() {
  _extensions_.Clear();
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestGetRpcMethod2Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request)
  return false;
#undef DO_
}

void TestGetRpcMethod2Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request)
}

::google::protobuf::uint8* TestGetRpcMethod2Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request)
  return target;
}

int TestGetRpcMethod2Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestGetRpcMethod2Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestGetRpcMethod2Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestGetRpcMethod2Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestGetRpcMethod2Request::MergeFrom(const TestGetRpcMethod2Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestGetRpcMethod2Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestGetRpcMethod2Request::CopyFrom(const TestGetRpcMethod2Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGetRpcMethod2Request::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TestGetRpcMethod2Request::Swap(TestGetRpcMethod2Request* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata TestGetRpcMethod2Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestGetRpcMethod2Request_descriptor_;
  metadata.reflection = TestGetRpcMethod2Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestGetRpcMethod2Response::kDataResultFieldNumber;
#endif  // !_MSC_VER

TestGetRpcMethod2Response::TestGetRpcMethod2Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Response)
}

void TestGetRpcMethod2Response::InitAsDefaultInstance() {
  dataresult_ = const_cast< ::SAFplus::Rpc::rpcTest::DataResult*>(&::SAFplus::Rpc::rpcTest::DataResult::default_instance());
}

TestGetRpcMethod2Response::TestGetRpcMethod2Response(const TestGetRpcMethod2Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Response)
}

void TestGetRpcMethod2Response::SharedCtor() {
  _cached_size_ = 0;
  dataresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestGetRpcMethod2Response::~TestGetRpcMethod2Response() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Response)
  SharedDtor();
}

void TestGetRpcMethod2Response::SharedDtor() {
  if (this != default_instance_) {
    delete dataresult_;
  }
}

void TestGetRpcMethod2Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestGetRpcMethod2Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestGetRpcMethod2Response_descriptor_;
}

const TestGetRpcMethod2Response& TestGetRpcMethod2Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcTest_2eproto();
  return *default_instance_;
}

TestGetRpcMethod2Response* TestGetRpcMethod2Response::default_instance_ = NULL;

TestGetRpcMethod2Response* TestGetRpcMethod2Response::New() const {
  return new TestGetRpcMethod2Response;
}

void TestGetRpcMethod2Response::Clear() {
  _extensions_.Clear();
  if (has_dataresult()) {
    if (dataresult_ != NULL) dataresult_->::SAFplus::Rpc::rpcTest::DataResult::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestGetRpcMethod2Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Response)
  return false;
#undef DO_
}

void TestGetRpcMethod2Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Response)
  // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
  if (has_dataresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dataresult(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Response)
}

::google::protobuf::uint8* TestGetRpcMethod2Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Response)
  // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
  if (has_dataresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dataresult(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Response)
  return target;
}

int TestGetRpcMethod2Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
    if (has_dataresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dataresult());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestGetRpcMethod2Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestGetRpcMethod2Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestGetRpcMethod2Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestGetRpcMethod2Response::MergeFrom(const TestGetRpcMethod2Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataresult()) {
      mutable_dataresult()->::SAFplus::Rpc::rpcTest::DataResult::MergeFrom(from.dataresult());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestGetRpcMethod2Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestGetRpcMethod2Response::CopyFrom(const TestGetRpcMethod2Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGetRpcMethod2Response::IsInitialized() const {

  if (has_dataresult()) {
    if (!this->dataresult().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TestGetRpcMethod2Response::Swap(TestGetRpcMethod2Response* other) {
  if (other != this) {
    std::swap(dataresult_, other->dataresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata TestGetRpcMethod2Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestGetRpcMethod2Response_descriptor_;
  metadata.reflection = TestGetRpcMethod2Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestGetRpcMethod3Request::kNameFieldNumber;
#endif  // !_MSC_VER

TestGetRpcMethod3Request::TestGetRpcMethod3Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request)
}

void TestGetRpcMethod3Request::InitAsDefaultInstance() {
}

TestGetRpcMethod3Request::TestGetRpcMethod3Request(const TestGetRpcMethod3Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request)
}

void TestGetRpcMethod3Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestGetRpcMethod3Request::~TestGetRpcMethod3Request() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request)
  SharedDtor();
}

void TestGetRpcMethod3Request::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TestGetRpcMethod3Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestGetRpcMethod3Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestGetRpcMethod3Request_descriptor_;
}

const TestGetRpcMethod3Request& TestGetRpcMethod3Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcTest_2eproto();
  return *default_instance_;
}

TestGetRpcMethod3Request* TestGetRpcMethod3Request::default_instance_ = NULL;

TestGetRpcMethod3Request* TestGetRpcMethod3Request::New() const {
  return new TestGetRpcMethod3Request;
}

void TestGetRpcMethod3Request::Clear() {
  _extensions_.Clear();
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestGetRpcMethod3Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request)
  return false;
#undef DO_
}

void TestGetRpcMethod3Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request)
}

::google::protobuf::uint8* TestGetRpcMethod3Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request)
  return target;
}

int TestGetRpcMethod3Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestGetRpcMethod3Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestGetRpcMethod3Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestGetRpcMethod3Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestGetRpcMethod3Request::MergeFrom(const TestGetRpcMethod3Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestGetRpcMethod3Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestGetRpcMethod3Request::CopyFrom(const TestGetRpcMethod3Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGetRpcMethod3Request::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TestGetRpcMethod3Request::Swap(TestGetRpcMethod3Request* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata TestGetRpcMethod3Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestGetRpcMethod3Request_descriptor_;
  metadata.reflection = TestGetRpcMethod3Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestGetRpcMethod3Response::kDataResultFieldNumber;
#endif  // !_MSC_VER

TestGetRpcMethod3Response::TestGetRpcMethod3Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Response)
}

void TestGetRpcMethod3Response::InitAsDefaultInstance() {
  dataresult_ = const_cast< ::SAFplus::Rpc::rpcTest::DataResult*>(&::SAFplus::Rpc::rpcTest::DataResult::default_instance());
}

TestGetRpcMethod3Response::TestGetRpcMethod3Response(const TestGetRpcMethod3Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Response)
}

void TestGetRpcMethod3Response::SharedCtor() {
  _cached_size_ = 0;
  dataresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestGetRpcMethod3Response::~TestGetRpcMethod3Response() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Response)
  SharedDtor();
}

void TestGetRpcMethod3Response::SharedDtor() {
  if (this != default_instance_) {
    delete dataresult_;
  }
}

void TestGetRpcMethod3Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestGetRpcMethod3Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestGetRpcMethod3Response_descriptor_;
}

const TestGetRpcMethod3Response& TestGetRpcMethod3Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcTest_2eproto();
  return *default_instance_;
}

TestGetRpcMethod3Response* TestGetRpcMethod3Response::default_instance_ = NULL;

TestGetRpcMethod3Response* TestGetRpcMethod3Response::New() const {
  return new TestGetRpcMethod3Response;
}

void TestGetRpcMethod3Response::Clear() {
  _extensions_.Clear();
  if (has_dataresult()) {
    if (dataresult_ != NULL) dataresult_->::SAFplus::Rpc::rpcTest::DataResult::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestGetRpcMethod3Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Response)
  return false;
#undef DO_
}

void TestGetRpcMethod3Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Response)
  // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
  if (has_dataresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dataresult(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Response)
}

::google::protobuf::uint8* TestGetRpcMethod3Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Response)
  // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
  if (has_dataresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dataresult(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Response)
  return target;
}

int TestGetRpcMethod3Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
    if (has_dataresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dataresult());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestGetRpcMethod3Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestGetRpcMethod3Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestGetRpcMethod3Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestGetRpcMethod3Response::MergeFrom(const TestGetRpcMethod3Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataresult()) {
      mutable_dataresult()->::SAFplus::Rpc::rpcTest::DataResult::MergeFrom(from.dataresult());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestGetRpcMethod3Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestGetRpcMethod3Response::CopyFrom(const TestGetRpcMethod3Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGetRpcMethod3Response::IsInitialized() const {

  if (has_dataresult()) {
    if (!this->dataresult().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TestGetRpcMethod3Response::Swap(TestGetRpcMethod3Response* other) {
  if (other != this) {
    std::swap(dataresult_, other->dataresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata TestGetRpcMethod3Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestGetRpcMethod3Response_descriptor_;
  metadata.reflection = TestGetRpcMethod3Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkOperationRequest::kInvocationFieldNumber;
const int WorkOperationRequest::kComponentNameFieldNumber;
const int WorkOperationRequest::kComponentHandleFieldNumber;
const int WorkOperationRequest::kOperationFieldNumber;
const int WorkOperationRequest::kTargetFieldNumber;
#endif  // !_MSC_VER

WorkOperationRequest::WorkOperationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcTest.WorkOperationRequest)
}

void WorkOperationRequest::InitAsDefaultInstance() {
}

WorkOperationRequest::WorkOperationRequest(const WorkOperationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcTest.WorkOperationRequest)
}

void WorkOperationRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invocation_ = GOOGLE_ULONGLONG(0);
  componentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_ = 0u;
  target_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkOperationRequest::~WorkOperationRequest() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcTest.WorkOperationRequest)
  SharedDtor();
}

void WorkOperationRequest::SharedDtor() {
  if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentname_;
  }
  if (this != default_instance_) {
  }
}

void WorkOperationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkOperationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkOperationRequest_descriptor_;
}

const WorkOperationRequest& WorkOperationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcTest_2eproto();
  return *default_instance_;
}

WorkOperationRequest* WorkOperationRequest::default_instance_ = NULL;

WorkOperationRequest* WorkOperationRequest::New() const {
  return new WorkOperationRequest;
}

void WorkOperationRequest::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorkOperationRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(operation_, target_);
    invocation_ = GOOGLE_ULONGLONG(0);
    if (has_componentname()) {
      if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        componentname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  componenthandle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkOperationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcTest.WorkOperationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invocation = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invocation_)));
          set_has_invocation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_componentName;
        break;
      }

      // optional string componentName = 2;
      case 2: {
        if (tag == 18) {
         parse_componentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->componentname().data(), this->componentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "componentname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_componentHandle;
        break;
      }

      // repeated string componentHandle = 3;
      case 3: {
        if (tag == 26) {
         parse_componentHandle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_componenthandle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->componenthandle(this->componenthandle_size() - 1).data(),
            this->componenthandle(this->componenthandle_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "componenthandle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_componentHandle;
        if (input->ExpectTag(32)) goto parse_operation;
        break;
      }

      // optional uint32 operation = 4;
      case 4: {
        if (tag == 32) {
         parse_operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_target;
        break;
      }

      // optional uint32 target = 5;
      case 5: {
        if (tag == 40) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcTest.WorkOperationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcTest.WorkOperationRequest)
  return false;
#undef DO_
}

void WorkOperationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcTest.WorkOperationRequest)
  // optional uint64 invocation = 1;
  if (has_invocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invocation(), output);
  }

  // optional string componentName = 2;
  if (has_componentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->componentname().data(), this->componentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "componentname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->componentname(), output);
  }

  // repeated string componentHandle = 3;
  for (int i = 0; i < this->componenthandle_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->componenthandle(i).data(), this->componenthandle(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "componenthandle");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->componenthandle(i), output);
  }

  // optional uint32 operation = 4;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->operation(), output);
  }

  // optional uint32 target = 5;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcTest.WorkOperationRequest)
}

::google::protobuf::uint8* WorkOperationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcTest.WorkOperationRequest)
  // optional uint64 invocation = 1;
  if (has_invocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invocation(), target);
  }

  // optional string componentName = 2;
  if (has_componentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->componentname().data(), this->componentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "componentname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->componentname(), target);
  }

  // repeated string componentHandle = 3;
  for (int i = 0; i < this->componenthandle_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->componenthandle(i).data(), this->componenthandle(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "componenthandle");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->componenthandle(i), target);
  }

  // optional uint32 operation = 4;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->operation(), target);
  }

  // optional uint32 target = 5;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcTest.WorkOperationRequest)
  return target;
}

int WorkOperationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 invocation = 1;
    if (has_invocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invocation());
    }

    // optional string componentName = 2;
    if (has_componentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentname());
    }

    // optional uint32 operation = 4;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operation());
    }

    // optional uint32 target = 5;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target());
    }

  }
  // repeated string componentHandle = 3;
  total_size += 1 * this->componenthandle_size();
  for (int i = 0; i < this->componenthandle_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->componenthandle(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkOperationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkOperationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkOperationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkOperationRequest::MergeFrom(const WorkOperationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  componenthandle_.MergeFrom(from.componenthandle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invocation()) {
      set_invocation(from.invocation());
    }
    if (from.has_componentname()) {
      set_componentname(from.componentname());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkOperationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkOperationRequest::CopyFrom(const WorkOperationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkOperationRequest::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void WorkOperationRequest::Swap(WorkOperationRequest* other) {
  if (other != this) {
    std::swap(invocation_, other->invocation_);
    std::swap(componentname_, other->componentname_);
    componenthandle_.Swap(&other->componenthandle_);
    std::swap(operation_, other->operation_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata WorkOperationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkOperationRequest_descriptor_;
  metadata.reflection = WorkOperationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkOperationResponseRequest::kInvocationFieldNumber;
const int WorkOperationResponseRequest::kResultFieldNumber;
#endif  // !_MSC_VER

WorkOperationResponseRequest::WorkOperationResponseRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.rpcTest.WorkOperationResponseRequest)
}

void WorkOperationResponseRequest::InitAsDefaultInstance() {
}

WorkOperationResponseRequest::WorkOperationResponseRequest(const WorkOperationResponseRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.rpcTest.WorkOperationResponseRequest)
}

void WorkOperationResponseRequest::SharedCtor() {
  _cached_size_ = 0;
  invocation_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkOperationResponseRequest::~WorkOperationResponseRequest() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.rpcTest.WorkOperationResponseRequest)
  SharedDtor();
}

void WorkOperationResponseRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkOperationResponseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkOperationResponseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkOperationResponseRequest_descriptor_;
}

const WorkOperationResponseRequest& WorkOperationResponseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcTest_2eproto();
  return *default_instance_;
}

WorkOperationResponseRequest* WorkOperationResponseRequest::default_instance_ = NULL;

WorkOperationResponseRequest* WorkOperationResponseRequest::New() const {
  return new WorkOperationResponseRequest;
}

void WorkOperationResponseRequest::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorkOperationResponseRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(invocation_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkOperationResponseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.rpcTest.WorkOperationResponseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invocation = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invocation_)));
          set_has_invocation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.rpcTest.WorkOperationResponseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.rpcTest.WorkOperationResponseRequest)
  return false;
#undef DO_
}

void WorkOperationResponseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.rpcTest.WorkOperationResponseRequest)
  // optional uint64 invocation = 1;
  if (has_invocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invocation(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.rpcTest.WorkOperationResponseRequest)
}

::google::protobuf::uint8* WorkOperationResponseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.rpcTest.WorkOperationResponseRequest)
  // optional uint64 invocation = 1;
  if (has_invocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invocation(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.rpcTest.WorkOperationResponseRequest)
  return target;
}

int WorkOperationResponseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 invocation = 1;
    if (has_invocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invocation());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkOperationResponseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkOperationResponseRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkOperationResponseRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkOperationResponseRequest::MergeFrom(const WorkOperationResponseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invocation()) {
      set_invocation(from.invocation());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkOperationResponseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkOperationResponseRequest::CopyFrom(const WorkOperationResponseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkOperationResponseRequest::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void WorkOperationResponseRequest::Swap(WorkOperationResponseRequest* other) {
  if (other != this) {
    std::swap(invocation_, other->invocation_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata WorkOperationResponseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkOperationResponseRequest_descriptor_;
  metadata.reflection = WorkOperationResponseRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcTest
}  // namespace Rpc
}  // namespace SAFplus

// @@protoc_insertion_point(global_scope)
