// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcTest.proto

#ifndef PROTOBUF_rpcTest_2eproto__INCLUDED
#define PROTOBUF_rpcTest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "SAFplusPBExt.pb.h"
// @@protoc_insertion_point(includes)

namespace SAFplus {
namespace Rpc {
namespace rpcTest {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpcTest_2eproto();
void protobuf_AssignDesc_rpcTest_2eproto();
void protobuf_ShutdownFile_rpcTest_2eproto();

class TestGetRpcMethodRequest;
class DataResult;
class TestGetRpcMethodResponse;
class TestGetRpcMethod2Request;
class TestGetRpcMethod2Response;
class TestGetRpcMethod3Request;
class TestGetRpcMethod3Response;
class WorkOperationRequest;
class WorkOperationResponseRequest;

// ===================================================================

class TestGetRpcMethodRequest : public ::google::protobuf::Message {
 public:
  TestGetRpcMethodRequest();
  virtual ~TestGetRpcMethodRequest();

  TestGetRpcMethodRequest(const TestGetRpcMethodRequest& from);

  inline TestGetRpcMethodRequest& operator=(const TestGetRpcMethodRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestGetRpcMethodRequest& default_instance();

  void Swap(TestGetRpcMethodRequest* other);

  // implements Message ----------------------------------------------

  TestGetRpcMethodRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestGetRpcMethodRequest& from);
  void MergeFrom(const TestGetRpcMethodRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestGetRpcMethodRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static TestGetRpcMethodRequest* default_instance_;
};
// -------------------------------------------------------------------

class DataResult : public ::google::protobuf::Message {
 public:
  DataResult();
  virtual ~DataResult();

  DataResult(const DataResult& from);

  inline DataResult& operator=(const DataResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataResult& default_instance();

  void Swap(DataResult* other);

  // implements Message ----------------------------------------------

  DataResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataResult& from);
  void MergeFrom(const DataResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DataResult)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.DataResult)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 status_;
  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static DataResult* default_instance_;
};
// -------------------------------------------------------------------

class TestGetRpcMethodResponse : public ::google::protobuf::Message {
 public:
  TestGetRpcMethodResponse();
  virtual ~TestGetRpcMethodResponse();

  TestGetRpcMethodResponse(const TestGetRpcMethodResponse& from);

  inline TestGetRpcMethodResponse& operator=(const TestGetRpcMethodResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestGetRpcMethodResponse& default_instance();

  void Swap(TestGetRpcMethodResponse* other);

  // implements Message ----------------------------------------------

  TestGetRpcMethodResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestGetRpcMethodResponse& from);
  void MergeFrom(const TestGetRpcMethodResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
  inline bool has_dataresult() const;
  inline void clear_dataresult();
  static const int kDataResultFieldNumber = 1;
  inline const ::SAFplus::Rpc::rpcTest::DataResult& dataresult() const;
  inline ::SAFplus::Rpc::rpcTest::DataResult* mutable_dataresult();
  inline ::SAFplus::Rpc::rpcTest::DataResult* release_dataresult();
  inline void set_allocated_dataresult(::SAFplus::Rpc::rpcTest::DataResult* dataresult);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestGetRpcMethodResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.TestGetRpcMethodResponse)
 private:
  inline void set_has_dataresult();
  inline void clear_has_dataresult();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::rpcTest::DataResult* dataresult_;
  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static TestGetRpcMethodResponse* default_instance_;
};
// -------------------------------------------------------------------

class TestGetRpcMethod2Request : public ::google::protobuf::Message {
 public:
  TestGetRpcMethod2Request();
  virtual ~TestGetRpcMethod2Request();

  TestGetRpcMethod2Request(const TestGetRpcMethod2Request& from);

  inline TestGetRpcMethod2Request& operator=(const TestGetRpcMethod2Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestGetRpcMethod2Request& default_instance();

  void Swap(TestGetRpcMethod2Request* other);

  // implements Message ----------------------------------------------

  TestGetRpcMethod2Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestGetRpcMethod2Request& from);
  void MergeFrom(const TestGetRpcMethod2Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestGetRpcMethod2Request)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static TestGetRpcMethod2Request* default_instance_;
};
// -------------------------------------------------------------------

class TestGetRpcMethod2Response : public ::google::protobuf::Message {
 public:
  TestGetRpcMethod2Response();
  virtual ~TestGetRpcMethod2Response();

  TestGetRpcMethod2Response(const TestGetRpcMethod2Response& from);

  inline TestGetRpcMethod2Response& operator=(const TestGetRpcMethod2Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestGetRpcMethod2Response& default_instance();

  void Swap(TestGetRpcMethod2Response* other);

  // implements Message ----------------------------------------------

  TestGetRpcMethod2Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestGetRpcMethod2Response& from);
  void MergeFrom(const TestGetRpcMethod2Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
  inline bool has_dataresult() const;
  inline void clear_dataresult();
  static const int kDataResultFieldNumber = 1;
  inline const ::SAFplus::Rpc::rpcTest::DataResult& dataresult() const;
  inline ::SAFplus::Rpc::rpcTest::DataResult* mutable_dataresult();
  inline ::SAFplus::Rpc::rpcTest::DataResult* release_dataresult();
  inline void set_allocated_dataresult(::SAFplus::Rpc::rpcTest::DataResult* dataresult);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestGetRpcMethod2Response)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Response)
 private:
  inline void set_has_dataresult();
  inline void clear_has_dataresult();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::rpcTest::DataResult* dataresult_;
  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static TestGetRpcMethod2Response* default_instance_;
};
// -------------------------------------------------------------------

class TestGetRpcMethod3Request : public ::google::protobuf::Message {
 public:
  TestGetRpcMethod3Request();
  virtual ~TestGetRpcMethod3Request();

  TestGetRpcMethod3Request(const TestGetRpcMethod3Request& from);

  inline TestGetRpcMethod3Request& operator=(const TestGetRpcMethod3Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestGetRpcMethod3Request& default_instance();

  void Swap(TestGetRpcMethod3Request* other);

  // implements Message ----------------------------------------------

  TestGetRpcMethod3Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestGetRpcMethod3Request& from);
  void MergeFrom(const TestGetRpcMethod3Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestGetRpcMethod3Request)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static TestGetRpcMethod3Request* default_instance_;
};
// -------------------------------------------------------------------

class TestGetRpcMethod3Response : public ::google::protobuf::Message {
 public:
  TestGetRpcMethod3Response();
  virtual ~TestGetRpcMethod3Response();

  TestGetRpcMethod3Response(const TestGetRpcMethod3Response& from);

  inline TestGetRpcMethod3Response& operator=(const TestGetRpcMethod3Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestGetRpcMethod3Response& default_instance();

  void Swap(TestGetRpcMethod3Response* other);

  // implements Message ----------------------------------------------

  TestGetRpcMethod3Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestGetRpcMethod3Response& from);
  void MergeFrom(const TestGetRpcMethod3Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
  inline bool has_dataresult() const;
  inline void clear_dataresult();
  static const int kDataResultFieldNumber = 1;
  inline const ::SAFplus::Rpc::rpcTest::DataResult& dataresult() const;
  inline ::SAFplus::Rpc::rpcTest::DataResult* mutable_dataresult();
  inline ::SAFplus::Rpc::rpcTest::DataResult* release_dataresult();
  inline void set_allocated_dataresult(::SAFplus::Rpc::rpcTest::DataResult* dataresult);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestGetRpcMethod3Response)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Response)
 private:
  inline void set_has_dataresult();
  inline void clear_has_dataresult();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::rpcTest::DataResult* dataresult_;
  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static TestGetRpcMethod3Response* default_instance_;
};
// -------------------------------------------------------------------

class WorkOperationRequest : public ::google::protobuf::Message {
 public:
  WorkOperationRequest();
  virtual ~WorkOperationRequest();

  WorkOperationRequest(const WorkOperationRequest& from);

  inline WorkOperationRequest& operator=(const WorkOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkOperationRequest& default_instance();

  void Swap(WorkOperationRequest* other);

  // implements Message ----------------------------------------------

  WorkOperationRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkOperationRequest& from);
  void MergeFrom(const WorkOperationRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 invocation = 1;
  inline bool has_invocation() const;
  inline void clear_invocation();
  static const int kInvocationFieldNumber = 1;
  inline ::google::protobuf::uint64 invocation() const;
  inline void set_invocation(::google::protobuf::uint64 value);

  // optional string componentName = 2;
  inline bool has_componentname() const;
  inline void clear_componentname();
  static const int kComponentNameFieldNumber = 2;
  inline const ::std::string& componentname() const;
  inline void set_componentname(const ::std::string& value);
  inline void set_componentname(const char* value);
  inline void set_componentname(const char* value, size_t size);
  inline ::std::string* mutable_componentname();
  inline ::std::string* release_componentname();
  inline void set_allocated_componentname(::std::string* componentname);

  // repeated string componentHandle = 3;
  inline int componenthandle_size() const;
  inline void clear_componenthandle();
  static const int kComponentHandleFieldNumber = 3;
  inline const ::std::string& componenthandle(int index) const;
  inline ::std::string* mutable_componenthandle(int index);
  inline void set_componenthandle(int index, const ::std::string& value);
  inline void set_componenthandle(int index, const char* value);
  inline void set_componenthandle(int index, const char* value, size_t size);
  inline ::std::string* add_componenthandle();
  inline void add_componenthandle(const ::std::string& value);
  inline void add_componenthandle(const char* value);
  inline void add_componenthandle(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& componenthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_componenthandle();

  // optional uint32 operation = 4;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 4;
  inline ::google::protobuf::uint32 operation() const;
  inline void set_operation(::google::protobuf::uint32 value);

  // optional uint32 target = 5;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 5;
  inline ::google::protobuf::uint32 target() const;
  inline void set_target(::google::protobuf::uint32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(WorkOperationRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.WorkOperationRequest)
 private:
  inline void set_has_invocation();
  inline void clear_has_invocation();
  inline void set_has_componentname();
  inline void clear_has_componentname();
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_target();
  inline void clear_has_target();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 invocation_;
  ::std::string* componentname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> componenthandle_;
  ::google::protobuf::uint32 operation_;
  ::google::protobuf::uint32 target_;
  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static WorkOperationRequest* default_instance_;
};
// -------------------------------------------------------------------

class WorkOperationResponseRequest : public ::google::protobuf::Message {
 public:
  WorkOperationResponseRequest();
  virtual ~WorkOperationResponseRequest();

  WorkOperationResponseRequest(const WorkOperationResponseRequest& from);

  inline WorkOperationResponseRequest& operator=(const WorkOperationResponseRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkOperationResponseRequest& default_instance();

  void Swap(WorkOperationResponseRequest* other);

  // implements Message ----------------------------------------------

  WorkOperationResponseRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkOperationResponseRequest& from);
  void MergeFrom(const WorkOperationResponseRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 invocation = 1;
  inline bool has_invocation() const;
  inline void clear_invocation();
  static const int kInvocationFieldNumber = 1;
  inline ::google::protobuf::uint64 invocation() const;
  inline void set_invocation(::google::protobuf::uint64 value);

  // optional uint32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(WorkOperationResponseRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcTest.WorkOperationResponseRequest)
 private:
  inline void set_has_invocation();
  inline void clear_has_invocation();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 invocation_;
  ::google::protobuf::uint32 result_;
  friend void  protobuf_AddDesc_rpcTest_2eproto();
  friend void protobuf_AssignDesc_rpcTest_2eproto();
  friend void protobuf_ShutdownFile_rpcTest_2eproto();

  void InitAsDefaultInstance();
  static WorkOperationResponseRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// TestGetRpcMethodRequest

// optional string name = 1;
inline bool TestGetRpcMethodRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestGetRpcMethodRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestGetRpcMethodRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestGetRpcMethodRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TestGetRpcMethodRequest::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest.name)
  return *name_;
}
inline void TestGetRpcMethodRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest.name)
}
inline void TestGetRpcMethodRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest.name)
}
inline void TestGetRpcMethodRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest.name)
}
inline ::std::string* TestGetRpcMethodRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest.name)
  return name_;
}
inline ::std::string* TestGetRpcMethodRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TestGetRpcMethodRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.rpcTest.TestGetRpcMethodRequest.name)
}

// -------------------------------------------------------------------

// DataResult

// optional string name = 1;
inline bool DataResult::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataResult::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataResult::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataResult::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DataResult::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcTest.DataResult.name)
  return *name_;
}
inline void DataResult::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcTest.DataResult.name)
}
inline void DataResult::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.rpcTest.DataResult.name)
}
inline void DataResult::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.rpcTest.DataResult.name)
}
inline ::std::string* DataResult::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.rpcTest.DataResult.name)
  return name_;
}
inline ::std::string* DataResult::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataResult::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.rpcTest.DataResult.name)
}

// optional int32 status = 2;
inline bool DataResult::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataResult::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataResult::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataResult::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 DataResult::status() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcTest.DataResult.status)
  return status_;
}
inline void DataResult::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcTest.DataResult.status)
}

// -------------------------------------------------------------------

// TestGetRpcMethodResponse

// optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
inline bool TestGetRpcMethodResponse::has_dataresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestGetRpcMethodResponse::set_has_dataresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestGetRpcMethodResponse::clear_has_dataresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestGetRpcMethodResponse::clear_dataresult() {
  if (dataresult_ != NULL) dataresult_->::SAFplus::Rpc::rpcTest::DataResult::Clear();
  clear_has_dataresult();
}
inline const ::SAFplus::Rpc::rpcTest::DataResult& TestGetRpcMethodResponse::dataresult() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcTest.TestGetRpcMethodResponse.dataResult)
  return dataresult_ != NULL ? *dataresult_ : *default_instance_->dataresult_;
}
inline ::SAFplus::Rpc::rpcTest::DataResult* TestGetRpcMethodResponse::mutable_dataresult() {
  set_has_dataresult();
  if (dataresult_ == NULL) dataresult_ = new ::SAFplus::Rpc::rpcTest::DataResult;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.rpcTest.TestGetRpcMethodResponse.dataResult)
  return dataresult_;
}
inline ::SAFplus::Rpc::rpcTest::DataResult* TestGetRpcMethodResponse::release_dataresult() {
  clear_has_dataresult();
  ::SAFplus::Rpc::rpcTest::DataResult* temp = dataresult_;
  dataresult_ = NULL;
  return temp;
}
inline void TestGetRpcMethodResponse::set_allocated_dataresult(::SAFplus::Rpc::rpcTest::DataResult* dataresult) {
  delete dataresult_;
  dataresult_ = dataresult;
  if (dataresult) {
    set_has_dataresult();
  } else {
    clear_has_dataresult();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.rpcTest.TestGetRpcMethodResponse.dataResult)
}

// -------------------------------------------------------------------

// TestGetRpcMethod2Request

// optional string name = 1;
inline bool TestGetRpcMethod2Request::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestGetRpcMethod2Request::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestGetRpcMethod2Request::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestGetRpcMethod2Request::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TestGetRpcMethod2Request::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request.name)
  return *name_;
}
inline void TestGetRpcMethod2Request::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request.name)
}
inline void TestGetRpcMethod2Request::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request.name)
}
inline void TestGetRpcMethod2Request::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request.name)
}
inline ::std::string* TestGetRpcMethod2Request::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request.name)
  return name_;
}
inline ::std::string* TestGetRpcMethod2Request::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TestGetRpcMethod2Request::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Request.name)
}

// -------------------------------------------------------------------

// TestGetRpcMethod2Response

// optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
inline bool TestGetRpcMethod2Response::has_dataresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestGetRpcMethod2Response::set_has_dataresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestGetRpcMethod2Response::clear_has_dataresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestGetRpcMethod2Response::clear_dataresult() {
  if (dataresult_ != NULL) dataresult_->::SAFplus::Rpc::rpcTest::DataResult::Clear();
  clear_has_dataresult();
}
inline const ::SAFplus::Rpc::rpcTest::DataResult& TestGetRpcMethod2Response::dataresult() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Response.dataResult)
  return dataresult_ != NULL ? *dataresult_ : *default_instance_->dataresult_;
}
inline ::SAFplus::Rpc::rpcTest::DataResult* TestGetRpcMethod2Response::mutable_dataresult() {
  set_has_dataresult();
  if (dataresult_ == NULL) dataresult_ = new ::SAFplus::Rpc::rpcTest::DataResult;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Response.dataResult)
  return dataresult_;
}
inline ::SAFplus::Rpc::rpcTest::DataResult* TestGetRpcMethod2Response::release_dataresult() {
  clear_has_dataresult();
  ::SAFplus::Rpc::rpcTest::DataResult* temp = dataresult_;
  dataresult_ = NULL;
  return temp;
}
inline void TestGetRpcMethod2Response::set_allocated_dataresult(::SAFplus::Rpc::rpcTest::DataResult* dataresult) {
  delete dataresult_;
  dataresult_ = dataresult;
  if (dataresult) {
    set_has_dataresult();
  } else {
    clear_has_dataresult();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.rpcTest.TestGetRpcMethod2Response.dataResult)
}

// -------------------------------------------------------------------

// TestGetRpcMethod3Request

// optional string name = 1;
inline bool TestGetRpcMethod3Request::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestGetRpcMethod3Request::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestGetRpcMethod3Request::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestGetRpcMethod3Request::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TestGetRpcMethod3Request::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request.name)
  return *name_;
}
inline void TestGetRpcMethod3Request::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request.name)
}
inline void TestGetRpcMethod3Request::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request.name)
}
inline void TestGetRpcMethod3Request::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request.name)
}
inline ::std::string* TestGetRpcMethod3Request::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request.name)
  return name_;
}
inline ::std::string* TestGetRpcMethod3Request::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TestGetRpcMethod3Request::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Request.name)
}

// -------------------------------------------------------------------

// TestGetRpcMethod3Response

// optional .SAFplus.Rpc.rpcTest.DataResult dataResult = 1;
inline bool TestGetRpcMethod3Response::has_dataresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestGetRpcMethod3Response::set_has_dataresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestGetRpcMethod3Response::clear_has_dataresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestGetRpcMethod3Response::clear_dataresult() {
  if (dataresult_ != NULL) dataresult_->::SAFplus::Rpc::rpcTest::DataResult::Clear();
  clear_has_dataresult();
}
inline const ::SAFplus::Rpc::rpcTest::DataResult& TestGetRpcMethod3Response::dataresult() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Response.dataResult)
  return dataresult_ != NULL ? *dataresult_ : *default_instance_->dataresult_;
}
inline ::SAFplus::Rpc::rpcTest::DataResult* TestGetRpcMethod3Response::mutable_dataresult() {
  set_has_dataresult();
  if (dataresult_ == NULL) dataresult_ = new ::SAFplus::Rpc::rpcTest::DataResult;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Response.dataResult)
  return dataresult_;
}
inline ::SAFplus::Rpc::rpcTest::DataResult* TestGetRpcMethod3Response::release_dataresult() {
  clear_has_dataresult();
  ::SAFplus::Rpc::rpcTest::DataResult* temp = dataresult_;
  dataresult_ = NULL;
  return temp;
}
inline void TestGetRpcMethod3Response::set_allocated_dataresult(::SAFplus::Rpc::rpcTest::DataResult* dataresult) {
  delete dataresult_;
  dataresult_ = dataresult;
  if (dataresult) {
    set_has_dataresult();
  } else {
    clear_has_dataresult();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.rpcTest.TestGetRpcMethod3Response.dataResult)
}

// -------------------------------------------------------------------

// WorkOperationRequest

// optional uint64 invocation = 1;
inline bool WorkOperationRequest::has_invocation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorkOperationRequest::set_has_invocation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorkOperationRequest::clear_has_invocation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorkOperationRequest::clear_invocation() {
  invocation_ = GOOGLE_ULONGLONG(0);
  clear_has_invocation();
}
inline ::google::protobuf::uint64 WorkOperationRequest::invocation() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcTest.WorkOperationRequest.invocation)
  return invocation_;
}
inline void WorkOperationRequest::set_invocation(::google::protobuf::uint64 value) {
  set_has_invocation();
  invocation_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcTest.WorkOperationRequest.invocation)
}

// optional string componentName = 2;
inline bool WorkOperationRequest::has_componentname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorkOperationRequest::set_has_componentname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorkOperationRequest::clear_has_componentname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorkOperationRequest::clear_componentname() {
  if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_->clear();
  }
  clear_has_componentname();
}
inline const ::std::string& WorkOperationRequest::componentname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcTest.WorkOperationRequest.componentName)
  return *componentname_;
}
inline void WorkOperationRequest::set_componentname(const ::std::string& value) {
  set_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_ = new ::std::string;
  }
  componentname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcTest.WorkOperationRequest.componentName)
}
inline void WorkOperationRequest::set_componentname(const char* value) {
  set_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_ = new ::std::string;
  }
  componentname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.rpcTest.WorkOperationRequest.componentName)
}
inline void WorkOperationRequest::set_componentname(const char* value, size_t size) {
  set_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_ = new ::std::string;
  }
  componentname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.rpcTest.WorkOperationRequest.componentName)
}
inline ::std::string* WorkOperationRequest::mutable_componentname() {
  set_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.rpcTest.WorkOperationRequest.componentName)
  return componentname_;
}
inline ::std::string* WorkOperationRequest::release_componentname() {
  clear_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = componentname_;
    componentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WorkOperationRequest::set_allocated_componentname(::std::string* componentname) {
  if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentname_;
  }
  if (componentname) {
    set_has_componentname();
    componentname_ = componentname;
  } else {
    clear_has_componentname();
    componentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.rpcTest.WorkOperationRequest.componentName)
}

// repeated string componentHandle = 3;
inline int WorkOperationRequest::componenthandle_size() const {
  return componenthandle_.size();
}
inline void WorkOperationRequest::clear_componenthandle() {
  componenthandle_.Clear();
}
inline const ::std::string& WorkOperationRequest::componenthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcTest.WorkOperationRequest.componentHandle)
  return componenthandle_.Get(index);
}
inline ::std::string* WorkOperationRequest::mutable_componenthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.rpcTest.WorkOperationRequest.componentHandle)
  return componenthandle_.Mutable(index);
}
inline void WorkOperationRequest::set_componenthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcTest.WorkOperationRequest.componentHandle)
  componenthandle_.Mutable(index)->assign(value);
}
inline void WorkOperationRequest::set_componenthandle(int index, const char* value) {
  componenthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.rpcTest.WorkOperationRequest.componentHandle)
}
inline void WorkOperationRequest::set_componenthandle(int index, const char* value, size_t size) {
  componenthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.rpcTest.WorkOperationRequest.componentHandle)
}
inline ::std::string* WorkOperationRequest::add_componenthandle() {
  return componenthandle_.Add();
}
inline void WorkOperationRequest::add_componenthandle(const ::std::string& value) {
  componenthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.rpcTest.WorkOperationRequest.componentHandle)
}
inline void WorkOperationRequest::add_componenthandle(const char* value) {
  componenthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.rpcTest.WorkOperationRequest.componentHandle)
}
inline void WorkOperationRequest::add_componenthandle(const char* value, size_t size) {
  componenthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.rpcTest.WorkOperationRequest.componentHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WorkOperationRequest::componenthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.rpcTest.WorkOperationRequest.componentHandle)
  return componenthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WorkOperationRequest::mutable_componenthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.rpcTest.WorkOperationRequest.componentHandle)
  return &componenthandle_;
}

// optional uint32 operation = 4;
inline bool WorkOperationRequest::has_operation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorkOperationRequest::set_has_operation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorkOperationRequest::clear_has_operation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorkOperationRequest::clear_operation() {
  operation_ = 0u;
  clear_has_operation();
}
inline ::google::protobuf::uint32 WorkOperationRequest::operation() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcTest.WorkOperationRequest.operation)
  return operation_;
}
inline void WorkOperationRequest::set_operation(::google::protobuf::uint32 value) {
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcTest.WorkOperationRequest.operation)
}

// optional uint32 target = 5;
inline bool WorkOperationRequest::has_target() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WorkOperationRequest::set_has_target() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WorkOperationRequest::clear_has_target() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WorkOperationRequest::clear_target() {
  target_ = 0u;
  clear_has_target();
}
inline ::google::protobuf::uint32 WorkOperationRequest::target() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcTest.WorkOperationRequest.target)
  return target_;
}
inline void WorkOperationRequest::set_target(::google::protobuf::uint32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcTest.WorkOperationRequest.target)
}

// -------------------------------------------------------------------

// WorkOperationResponseRequest

// optional uint64 invocation = 1;
inline bool WorkOperationResponseRequest::has_invocation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorkOperationResponseRequest::set_has_invocation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorkOperationResponseRequest::clear_has_invocation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorkOperationResponseRequest::clear_invocation() {
  invocation_ = GOOGLE_ULONGLONG(0);
  clear_has_invocation();
}
inline ::google::protobuf::uint64 WorkOperationResponseRequest::invocation() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcTest.WorkOperationResponseRequest.invocation)
  return invocation_;
}
inline void WorkOperationResponseRequest::set_invocation(::google::protobuf::uint64 value) {
  set_has_invocation();
  invocation_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcTest.WorkOperationResponseRequest.invocation)
}

// optional uint32 result = 2;
inline bool WorkOperationResponseRequest::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorkOperationResponseRequest::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorkOperationResponseRequest::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorkOperationResponseRequest::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 WorkOperationResponseRequest::result() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcTest.WorkOperationResponseRequest.result)
  return result_;
}
inline void WorkOperationResponseRequest::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcTest.WorkOperationResponseRequest.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcTest
}  // namespace Rpc
}  // namespace SAFplus

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpcTest_2eproto__INCLUDED
