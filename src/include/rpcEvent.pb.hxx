// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcEvent.proto

#ifndef PROTOBUF_rpcEvent_2eproto__INCLUDED
#define PROTOBUF_rpcEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SAFplus {
namespace Rpc {
namespace rpcEvent {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpcEvent_2eproto();
void protobuf_AssignDesc_rpcEvent_2eproto();
void protobuf_ShutdownFile_rpcEvent_2eproto();

class Handle;
class eventChannelRequest;
class eventPublishRequest;
class eventRequestResponse;
class eventGetActiveServerResponse;
class NO_REQUEST;

// ===================================================================

class Handle : public ::google::protobuf::Message {
 public:
  Handle();
  virtual ~Handle();

  Handle(const Handle& from);

  inline Handle& operator=(const Handle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Handle& default_instance();

  void Swap(Handle* other);

  // implements Message ----------------------------------------------

  Handle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Handle& from);
  void MergeFrom(const Handle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 id0 = 1;
  inline bool has_id0() const;
  inline void clear_id0();
  static const int kId0FieldNumber = 1;
  inline ::google::protobuf::uint64 id0() const;
  inline void set_id0(::google::protobuf::uint64 value);

  // required fixed64 id1 = 2;
  inline bool has_id1() const;
  inline void clear_id1();
  static const int kId1FieldNumber = 2;
  inline ::google::protobuf::uint64 id1() const;
  inline void set_id1(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcEvent.Handle)
 private:
  inline void set_has_id0();
  inline void clear_has_id0();
  inline void set_has_id1();
  inline void clear_has_id1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id0_;
  ::google::protobuf::uint64 id1_;
  friend void  protobuf_AddDesc_rpcEvent_2eproto();
  friend void protobuf_AssignDesc_rpcEvent_2eproto();
  friend void protobuf_ShutdownFile_rpcEvent_2eproto();

  void InitAsDefaultInstance();
  static Handle* default_instance_;
};
// -------------------------------------------------------------------

class eventChannelRequest : public ::google::protobuf::Message {
 public:
  eventChannelRequest();
  virtual ~eventChannelRequest();

  eventChannelRequest(const eventChannelRequest& from);

  inline eventChannelRequest& operator=(const eventChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eventChannelRequest& default_instance();

  void Swap(eventChannelRequest* other);

  // implements Message ----------------------------------------------

  eventChannelRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eventChannelRequest& from);
  void MergeFrom(const eventChannelRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .SAFplus.Rpc.rpcEvent.Handle clientHandle = 1;
  inline bool has_clienthandle() const;
  inline void clear_clienthandle();
  static const int kClientHandleFieldNumber = 1;
  inline const ::SAFplus::Rpc::rpcEvent::Handle& clienthandle() const;
  inline ::SAFplus::Rpc::rpcEvent::Handle* mutable_clienthandle();
  inline ::SAFplus::Rpc::rpcEvent::Handle* release_clienthandle();
  inline void set_allocated_clienthandle(::SAFplus::Rpc::rpcEvent::Handle* clienthandle);

  // required string channelName = 3;
  inline bool has_channelname() const;
  inline void clear_channelname();
  static const int kChannelNameFieldNumber = 3;
  inline const ::std::string& channelname() const;
  inline void set_channelname(const ::std::string& value);
  inline void set_channelname(const char* value);
  inline void set_channelname(const char* value, size_t size);
  inline ::std::string* mutable_channelname();
  inline ::std::string* release_channelname();
  inline void set_allocated_channelname(::std::string* channelname);

  // required int32 scope = 4;
  inline bool has_scope() const;
  inline void clear_scope();
  static const int kScopeFieldNumber = 4;
  inline ::google::protobuf::int32 scope() const;
  inline void set_scope(::google::protobuf::int32 value);

  // required int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(eventChannelRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcEvent.eventChannelRequest)
 private:
  inline void set_has_clienthandle();
  inline void clear_has_clienthandle();
  inline void set_has_channelname();
  inline void clear_has_channelname();
  inline void set_has_scope();
  inline void clear_has_scope();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::rpcEvent::Handle* clienthandle_;
  ::std::string* channelname_;
  ::google::protobuf::int32 scope_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_rpcEvent_2eproto();
  friend void protobuf_AssignDesc_rpcEvent_2eproto();
  friend void protobuf_ShutdownFile_rpcEvent_2eproto();

  void InitAsDefaultInstance();
  static eventChannelRequest* default_instance_;
};
// -------------------------------------------------------------------

class eventPublishRequest : public ::google::protobuf::Message {
 public:
  eventPublishRequest();
  virtual ~eventPublishRequest();

  eventPublishRequest(const eventPublishRequest& from);

  inline eventPublishRequest& operator=(const eventPublishRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eventPublishRequest& default_instance();

  void Swap(eventPublishRequest* other);

  // implements Message ----------------------------------------------

  eventPublishRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eventPublishRequest& from);
  void MergeFrom(const eventPublishRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .SAFplus.Rpc.rpcEvent.Handle clientHandle = 1;
  inline bool has_clienthandle() const;
  inline void clear_clienthandle();
  static const int kClientHandleFieldNumber = 1;
  inline const ::SAFplus::Rpc::rpcEvent::Handle& clienthandle() const;
  inline ::SAFplus::Rpc::rpcEvent::Handle* mutable_clienthandle();
  inline ::SAFplus::Rpc::rpcEvent::Handle* release_clienthandle();
  inline void set_allocated_clienthandle(::SAFplus::Rpc::rpcEvent::Handle* clienthandle);

  // required string channelName = 3;
  inline bool has_channelname() const;
  inline void clear_channelname();
  static const int kChannelNameFieldNumber = 3;
  inline const ::std::string& channelname() const;
  inline void set_channelname(const ::std::string& value);
  inline void set_channelname(const char* value);
  inline void set_channelname(const char* value, size_t size);
  inline ::std::string* mutable_channelname();
  inline ::std::string* release_channelname();
  inline void set_allocated_channelname(::std::string* channelname);

  // required int32 scope = 4;
  inline bool has_scope() const;
  inline void clear_scope();
  static const int kScopeFieldNumber = 4;
  inline ::google::protobuf::int32 scope() const;
  inline void set_scope(::google::protobuf::int32 value);

  // required int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(eventPublishRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcEvent.eventPublishRequest)
 private:
  inline void set_has_clienthandle();
  inline void clear_has_clienthandle();
  inline void set_has_channelname();
  inline void clear_has_channelname();
  inline void set_has_scope();
  inline void clear_has_scope();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::rpcEvent::Handle* clienthandle_;
  ::std::string* channelname_;
  ::google::protobuf::int32 scope_;
  ::google::protobuf::int32 type_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_rpcEvent_2eproto();
  friend void protobuf_AssignDesc_rpcEvent_2eproto();
  friend void protobuf_ShutdownFile_rpcEvent_2eproto();

  void InitAsDefaultInstance();
  static eventPublishRequest* default_instance_;
};
// -------------------------------------------------------------------

class eventRequestResponse : public ::google::protobuf::Message {
 public:
  eventRequestResponse();
  virtual ~eventRequestResponse();

  eventRequestResponse(const eventRequestResponse& from);

  inline eventRequestResponse& operator=(const eventRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eventRequestResponse& default_instance();

  void Swap(eventRequestResponse* other);

  // implements Message ----------------------------------------------

  eventRequestResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eventRequestResponse& from);
  void MergeFrom(const eventRequestResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 saError = 1;
  inline bool has_saerror() const;
  inline void clear_saerror();
  static const int kSaErrorFieldNumber = 1;
  inline ::google::protobuf::int32 saerror() const;
  inline void set_saerror(::google::protobuf::int32 value);

  // optional string errStr = 2;
  inline bool has_errstr() const;
  inline void clear_errstr();
  static const int kErrStrFieldNumber = 2;
  inline const ::std::string& errstr() const;
  inline void set_errstr(const ::std::string& value);
  inline void set_errstr(const char* value);
  inline void set_errstr(const char* value, size_t size);
  inline ::std::string* mutable_errstr();
  inline ::std::string* release_errstr();
  inline void set_allocated_errstr(::std::string* errstr);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(eventRequestResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcEvent.eventRequestResponse)
 private:
  inline void set_has_saerror();
  inline void clear_has_saerror();
  inline void set_has_errstr();
  inline void clear_has_errstr();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* errstr_;
  ::google::protobuf::int32 saerror_;
  friend void  protobuf_AddDesc_rpcEvent_2eproto();
  friend void protobuf_AssignDesc_rpcEvent_2eproto();
  friend void protobuf_ShutdownFile_rpcEvent_2eproto();

  void InitAsDefaultInstance();
  static eventRequestResponse* default_instance_;
};
// -------------------------------------------------------------------

class eventGetActiveServerResponse : public ::google::protobuf::Message {
 public:
  eventGetActiveServerResponse();
  virtual ~eventGetActiveServerResponse();

  eventGetActiveServerResponse(const eventGetActiveServerResponse& from);

  inline eventGetActiveServerResponse& operator=(const eventGetActiveServerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eventGetActiveServerResponse& default_instance();

  void Swap(eventGetActiveServerResponse* other);

  // implements Message ----------------------------------------------

  eventGetActiveServerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eventGetActiveServerResponse& from);
  void MergeFrom(const eventGetActiveServerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .SAFplus.Rpc.rpcEvent.Handle activeServer = 1;
  inline bool has_activeserver() const;
  inline void clear_activeserver();
  static const int kActiveServerFieldNumber = 1;
  inline const ::SAFplus::Rpc::rpcEvent::Handle& activeserver() const;
  inline ::SAFplus::Rpc::rpcEvent::Handle* mutable_activeserver();
  inline ::SAFplus::Rpc::rpcEvent::Handle* release_activeserver();
  inline void set_allocated_activeserver(::SAFplus::Rpc::rpcEvent::Handle* activeserver);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(eventGetActiveServerResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcEvent.eventGetActiveServerResponse)
 private:
  inline void set_has_activeserver();
  inline void clear_has_activeserver();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::rpcEvent::Handle* activeserver_;
  friend void  protobuf_AddDesc_rpcEvent_2eproto();
  friend void protobuf_AssignDesc_rpcEvent_2eproto();
  friend void protobuf_ShutdownFile_rpcEvent_2eproto();

  void InitAsDefaultInstance();
  static eventGetActiveServerResponse* default_instance_;
};
// -------------------------------------------------------------------

class NO_REQUEST : public ::google::protobuf::Message {
 public:
  NO_REQUEST();
  virtual ~NO_REQUEST();

  NO_REQUEST(const NO_REQUEST& from);

  inline NO_REQUEST& operator=(const NO_REQUEST& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NO_REQUEST& default_instance();

  void Swap(NO_REQUEST* other);

  // implements Message ----------------------------------------------

  NO_REQUEST* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NO_REQUEST& from);
  void MergeFrom(const NO_REQUEST& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.rpcEvent.NO_REQUEST)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpcEvent_2eproto();
  friend void protobuf_AssignDesc_rpcEvent_2eproto();
  friend void protobuf_ShutdownFile_rpcEvent_2eproto();

  void InitAsDefaultInstance();
  static NO_REQUEST* default_instance_;
};
// ===================================================================


// ===================================================================

// Handle

// required fixed64 id0 = 1;
inline bool Handle::has_id0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Handle::set_has_id0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Handle::clear_has_id0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Handle::clear_id0() {
  id0_ = GOOGLE_ULONGLONG(0);
  clear_has_id0();
}
inline ::google::protobuf::uint64 Handle::id0() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcEvent.Handle.id0)
  return id0_;
}
inline void Handle::set_id0(::google::protobuf::uint64 value) {
  set_has_id0();
  id0_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcEvent.Handle.id0)
}

// required fixed64 id1 = 2;
inline bool Handle::has_id1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Handle::set_has_id1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Handle::clear_has_id1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Handle::clear_id1() {
  id1_ = GOOGLE_ULONGLONG(0);
  clear_has_id1();
}
inline ::google::protobuf::uint64 Handle::id1() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcEvent.Handle.id1)
  return id1_;
}
inline void Handle::set_id1(::google::protobuf::uint64 value) {
  set_has_id1();
  id1_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcEvent.Handle.id1)
}

// -------------------------------------------------------------------

// eventChannelRequest

// required .SAFplus.Rpc.rpcEvent.Handle clientHandle = 1;
inline bool eventChannelRequest::has_clienthandle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eventChannelRequest::set_has_clienthandle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eventChannelRequest::clear_has_clienthandle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eventChannelRequest::clear_clienthandle() {
  if (clienthandle_ != NULL) clienthandle_->::SAFplus::Rpc::rpcEvent::Handle::Clear();
  clear_has_clienthandle();
}
inline const ::SAFplus::Rpc::rpcEvent::Handle& eventChannelRequest::clienthandle() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcEvent.eventChannelRequest.clientHandle)
  return clienthandle_ != NULL ? *clienthandle_ : *default_instance_->clienthandle_;
}
inline ::SAFplus::Rpc::rpcEvent::Handle* eventChannelRequest::mutable_clienthandle() {
  set_has_clienthandle();
  if (clienthandle_ == NULL) clienthandle_ = new ::SAFplus::Rpc::rpcEvent::Handle;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.rpcEvent.eventChannelRequest.clientHandle)
  return clienthandle_;
}
inline ::SAFplus::Rpc::rpcEvent::Handle* eventChannelRequest::release_clienthandle() {
  clear_has_clienthandle();
  ::SAFplus::Rpc::rpcEvent::Handle* temp = clienthandle_;
  clienthandle_ = NULL;
  return temp;
}
inline void eventChannelRequest::set_allocated_clienthandle(::SAFplus::Rpc::rpcEvent::Handle* clienthandle) {
  delete clienthandle_;
  clienthandle_ = clienthandle;
  if (clienthandle) {
    set_has_clienthandle();
  } else {
    clear_has_clienthandle();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.rpcEvent.eventChannelRequest.clientHandle)
}

// required string channelName = 3;
inline bool eventChannelRequest::has_channelname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eventChannelRequest::set_has_channelname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eventChannelRequest::clear_has_channelname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eventChannelRequest::clear_channelname() {
  if (channelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelname_->clear();
  }
  clear_has_channelname();
}
inline const ::std::string& eventChannelRequest::channelname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcEvent.eventChannelRequest.channelName)
  return *channelname_;
}
inline void eventChannelRequest::set_channelname(const ::std::string& value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcEvent.eventChannelRequest.channelName)
}
inline void eventChannelRequest::set_channelname(const char* value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.rpcEvent.eventChannelRequest.channelName)
}
inline void eventChannelRequest::set_channelname(const char* value, size_t size) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.rpcEvent.eventChannelRequest.channelName)
}
inline ::std::string* eventChannelRequest::mutable_channelname() {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.rpcEvent.eventChannelRequest.channelName)
  return channelname_;
}
inline ::std::string* eventChannelRequest::release_channelname() {
  clear_has_channelname();
  if (channelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channelname_;
    channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void eventChannelRequest::set_allocated_channelname(::std::string* channelname) {
  if (channelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelname_;
  }
  if (channelname) {
    set_has_channelname();
    channelname_ = channelname;
  } else {
    clear_has_channelname();
    channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.rpcEvent.eventChannelRequest.channelName)
}

// required int32 scope = 4;
inline bool eventChannelRequest::has_scope() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eventChannelRequest::set_has_scope() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eventChannelRequest::clear_has_scope() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eventChannelRequest::clear_scope() {
  scope_ = 0;
  clear_has_scope();
}
inline ::google::protobuf::int32 eventChannelRequest::scope() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcEvent.eventChannelRequest.scope)
  return scope_;
}
inline void eventChannelRequest::set_scope(::google::protobuf::int32 value) {
  set_has_scope();
  scope_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcEvent.eventChannelRequest.scope)
}

// required int32 type = 5;
inline bool eventChannelRequest::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void eventChannelRequest::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void eventChannelRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void eventChannelRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 eventChannelRequest::type() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcEvent.eventChannelRequest.type)
  return type_;
}
inline void eventChannelRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcEvent.eventChannelRequest.type)
}

// -------------------------------------------------------------------

// eventPublishRequest

// required .SAFplus.Rpc.rpcEvent.Handle clientHandle = 1;
inline bool eventPublishRequest::has_clienthandle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eventPublishRequest::set_has_clienthandle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eventPublishRequest::clear_has_clienthandle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eventPublishRequest::clear_clienthandle() {
  if (clienthandle_ != NULL) clienthandle_->::SAFplus::Rpc::rpcEvent::Handle::Clear();
  clear_has_clienthandle();
}
inline const ::SAFplus::Rpc::rpcEvent::Handle& eventPublishRequest::clienthandle() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcEvent.eventPublishRequest.clientHandle)
  return clienthandle_ != NULL ? *clienthandle_ : *default_instance_->clienthandle_;
}
inline ::SAFplus::Rpc::rpcEvent::Handle* eventPublishRequest::mutable_clienthandle() {
  set_has_clienthandle();
  if (clienthandle_ == NULL) clienthandle_ = new ::SAFplus::Rpc::rpcEvent::Handle;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.rpcEvent.eventPublishRequest.clientHandle)
  return clienthandle_;
}
inline ::SAFplus::Rpc::rpcEvent::Handle* eventPublishRequest::release_clienthandle() {
  clear_has_clienthandle();
  ::SAFplus::Rpc::rpcEvent::Handle* temp = clienthandle_;
  clienthandle_ = NULL;
  return temp;
}
inline void eventPublishRequest::set_allocated_clienthandle(::SAFplus::Rpc::rpcEvent::Handle* clienthandle) {
  delete clienthandle_;
  clienthandle_ = clienthandle;
  if (clienthandle) {
    set_has_clienthandle();
  } else {
    clear_has_clienthandle();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.rpcEvent.eventPublishRequest.clientHandle)
}

// required string channelName = 3;
inline bool eventPublishRequest::has_channelname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eventPublishRequest::set_has_channelname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eventPublishRequest::clear_has_channelname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eventPublishRequest::clear_channelname() {
  if (channelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelname_->clear();
  }
  clear_has_channelname();
}
inline const ::std::string& eventPublishRequest::channelname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcEvent.eventPublishRequest.channelName)
  return *channelname_;
}
inline void eventPublishRequest::set_channelname(const ::std::string& value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcEvent.eventPublishRequest.channelName)
}
inline void eventPublishRequest::set_channelname(const char* value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.rpcEvent.eventPublishRequest.channelName)
}
inline void eventPublishRequest::set_channelname(const char* value, size_t size) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.rpcEvent.eventPublishRequest.channelName)
}
inline ::std::string* eventPublishRequest::mutable_channelname() {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channelname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.rpcEvent.eventPublishRequest.channelName)
  return channelname_;
}
inline ::std::string* eventPublishRequest::release_channelname() {
  clear_has_channelname();
  if (channelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channelname_;
    channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void eventPublishRequest::set_allocated_channelname(::std::string* channelname) {
  if (channelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channelname_;
  }
  if (channelname) {
    set_has_channelname();
    channelname_ = channelname;
  } else {
    clear_has_channelname();
    channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.rpcEvent.eventPublishRequest.channelName)
}

// required int32 scope = 4;
inline bool eventPublishRequest::has_scope() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eventPublishRequest::set_has_scope() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eventPublishRequest::clear_has_scope() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eventPublishRequest::clear_scope() {
  scope_ = 0;
  clear_has_scope();
}
inline ::google::protobuf::int32 eventPublishRequest::scope() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcEvent.eventPublishRequest.scope)
  return scope_;
}
inline void eventPublishRequest::set_scope(::google::protobuf::int32 value) {
  set_has_scope();
  scope_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcEvent.eventPublishRequest.scope)
}

// required int32 type = 5;
inline bool eventPublishRequest::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void eventPublishRequest::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void eventPublishRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void eventPublishRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 eventPublishRequest::type() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcEvent.eventPublishRequest.type)
  return type_;
}
inline void eventPublishRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcEvent.eventPublishRequest.type)
}

// required string data = 6;
inline bool eventPublishRequest::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void eventPublishRequest::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void eventPublishRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void eventPublishRequest::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& eventPublishRequest::data() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcEvent.eventPublishRequest.data)
  return *data_;
}
inline void eventPublishRequest::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcEvent.eventPublishRequest.data)
}
inline void eventPublishRequest::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.rpcEvent.eventPublishRequest.data)
}
inline void eventPublishRequest::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.rpcEvent.eventPublishRequest.data)
}
inline ::std::string* eventPublishRequest::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.rpcEvent.eventPublishRequest.data)
  return data_;
}
inline ::std::string* eventPublishRequest::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void eventPublishRequest::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.rpcEvent.eventPublishRequest.data)
}

// -------------------------------------------------------------------

// eventRequestResponse

// optional int32 saError = 1;
inline bool eventRequestResponse::has_saerror() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eventRequestResponse::set_has_saerror() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eventRequestResponse::clear_has_saerror() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eventRequestResponse::clear_saerror() {
  saerror_ = 0;
  clear_has_saerror();
}
inline ::google::protobuf::int32 eventRequestResponse::saerror() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcEvent.eventRequestResponse.saError)
  return saerror_;
}
inline void eventRequestResponse::set_saerror(::google::protobuf::int32 value) {
  set_has_saerror();
  saerror_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcEvent.eventRequestResponse.saError)
}

// optional string errStr = 2;
inline bool eventRequestResponse::has_errstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eventRequestResponse::set_has_errstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eventRequestResponse::clear_has_errstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eventRequestResponse::clear_errstr() {
  if (errstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errstr_->clear();
  }
  clear_has_errstr();
}
inline const ::std::string& eventRequestResponse::errstr() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcEvent.eventRequestResponse.errStr)
  return *errstr_;
}
inline void eventRequestResponse::set_errstr(const ::std::string& value) {
  set_has_errstr();
  if (errstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errstr_ = new ::std::string;
  }
  errstr_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.rpcEvent.eventRequestResponse.errStr)
}
inline void eventRequestResponse::set_errstr(const char* value) {
  set_has_errstr();
  if (errstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errstr_ = new ::std::string;
  }
  errstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.rpcEvent.eventRequestResponse.errStr)
}
inline void eventRequestResponse::set_errstr(const char* value, size_t size) {
  set_has_errstr();
  if (errstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errstr_ = new ::std::string;
  }
  errstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.rpcEvent.eventRequestResponse.errStr)
}
inline ::std::string* eventRequestResponse::mutable_errstr() {
  set_has_errstr();
  if (errstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.rpcEvent.eventRequestResponse.errStr)
  return errstr_;
}
inline ::std::string* eventRequestResponse::release_errstr() {
  clear_has_errstr();
  if (errstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errstr_;
    errstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void eventRequestResponse::set_allocated_errstr(::std::string* errstr) {
  if (errstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errstr_;
  }
  if (errstr) {
    set_has_errstr();
    errstr_ = errstr;
  } else {
    clear_has_errstr();
    errstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.rpcEvent.eventRequestResponse.errStr)
}

// -------------------------------------------------------------------

// eventGetActiveServerResponse

// required .SAFplus.Rpc.rpcEvent.Handle activeServer = 1;
inline bool eventGetActiveServerResponse::has_activeserver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eventGetActiveServerResponse::set_has_activeserver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eventGetActiveServerResponse::clear_has_activeserver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eventGetActiveServerResponse::clear_activeserver() {
  if (activeserver_ != NULL) activeserver_->::SAFplus::Rpc::rpcEvent::Handle::Clear();
  clear_has_activeserver();
}
inline const ::SAFplus::Rpc::rpcEvent::Handle& eventGetActiveServerResponse::activeserver() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.rpcEvent.eventGetActiveServerResponse.activeServer)
  return activeserver_ != NULL ? *activeserver_ : *default_instance_->activeserver_;
}
inline ::SAFplus::Rpc::rpcEvent::Handle* eventGetActiveServerResponse::mutable_activeserver() {
  set_has_activeserver();
  if (activeserver_ == NULL) activeserver_ = new ::SAFplus::Rpc::rpcEvent::Handle;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.rpcEvent.eventGetActiveServerResponse.activeServer)
  return activeserver_;
}
inline ::SAFplus::Rpc::rpcEvent::Handle* eventGetActiveServerResponse::release_activeserver() {
  clear_has_activeserver();
  ::SAFplus::Rpc::rpcEvent::Handle* temp = activeserver_;
  activeserver_ = NULL;
  return temp;
}
inline void eventGetActiveServerResponse::set_allocated_activeserver(::SAFplus::Rpc::rpcEvent::Handle* activeserver) {
  delete activeserver_;
  activeserver_ = activeserver;
  if (activeserver) {
    set_has_activeserver();
  } else {
    clear_has_activeserver();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.rpcEvent.eventGetActiveServerResponse.activeServer)
}

// -------------------------------------------------------------------

// NO_REQUEST


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcEvent
}  // namespace Rpc
}  // namespace SAFplus

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpcEvent_2eproto__INCLUDED
