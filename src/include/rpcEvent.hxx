// Generated by the protocol buffer compiler.
#pragma once
#include <string>

#include <google/protobuf/service.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <clRpcService.hxx>
#include <clRpcApi.hxx>
#include "rpcEvent.pb.hxx"

//namespace SAFplus {
//  namespace Rpc {
//    class RpcChannel;
//  }
//}

namespace SAFplus {
namespace Rpc {
namespace rpcEvent {
class rpcEvent_Stub;

class rpcEvent : public SAFplus::Rpc::RpcService {
 protected:
  // This class should be treated as an abstract interface.
  inline rpcEvent() {};
 public:
  virtual ~rpcEvent();

  typedef rpcEvent_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();


  // implements rpcEventImpl ----------------------------------------------
  virtual void eventChannelRpcMethod(const ::SAFplus::Rpc::rpcEvent::eventChannelRequest* request,
                       ::SAFplus::Rpc::rpcEvent::eventRequestResponse* response);
  virtual void eventPublishRpcMethod(const ::SAFplus::Rpc::rpcEvent::eventPublishRequest* request,
                       ::SAFplus::Rpc::rpcEvent::eventRequestResponse* response);
  virtual void eventGetActiveServer(const ::SAFplus::Rpc::rpcEvent::NO_REQUEST* request,
                       ::SAFplus::Rpc::rpcEvent::eventGetActiveServerResponse* response);

  // implements rpcEvent ------------------------------------------
  virtual void eventChannelRpcMethod(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::rpcEvent::eventChannelRequest* request,
                       ::SAFplus::Rpc::rpcEvent::eventRequestResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  virtual void eventPublishRpcMethod(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::rpcEvent::eventPublishRequest* request,
                       ::SAFplus::Rpc::rpcEvent::eventRequestResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  virtual void eventGetActiveServer(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::rpcEvent::NO_REQUEST* request,
                       ::SAFplus::Rpc::rpcEvent::eventGetActiveServerResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));


  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  SAFplus::Handle destination,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(rpcEvent);
};

class rpcEvent_Stub : public rpcEvent {
 public:
  rpcEvent_Stub(SAFplus::Rpc::RpcChannel* channel);
  rpcEvent_Stub(SAFplus::Rpc::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~rpcEvent_Stub();

  inline SAFplus::Rpc::RpcChannel* channel() { return channel_; }


  // implements rpcEvent ------------------------------------------
  void eventChannelRpcMethod(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::rpcEvent::eventChannelRequest* request,
                       ::SAFplus::Rpc::rpcEvent::eventRequestResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  void eventPublishRpcMethod(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::rpcEvent::eventPublishRequest* request,
                       ::SAFplus::Rpc::rpcEvent::eventRequestResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  void eventGetActiveServer(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::rpcEvent::NO_REQUEST* request,
                       ::SAFplus::Rpc::rpcEvent::eventGetActiveServerResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
 private:
  SAFplus::Rpc::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(rpcEvent_Stub);
};

class rpcEventImpl : public rpcEvent {
 public:
  rpcEventImpl();
  ~rpcEventImpl();


  // implements rpcEventImpl ----------------------------------------------
  void eventChannelRpcMethod(const ::SAFplus::Rpc::rpcEvent::eventChannelRequest* request,
                       ::SAFplus::Rpc::rpcEvent::eventRequestResponse* response);
  void eventPublishRpcMethod(const ::SAFplus::Rpc::rpcEvent::eventPublishRequest* request,
                       ::SAFplus::Rpc::rpcEvent::eventRequestResponse* response);
  void eventGetActiveServer(const ::SAFplus::Rpc::rpcEvent::NO_REQUEST* request,
                       ::SAFplus::Rpc::rpcEvent::eventGetActiveServerResponse* response);
};

}  // namespace rpcEvent
}  // namespace Rpc
}  // namespace SAFplus
