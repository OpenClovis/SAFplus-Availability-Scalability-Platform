###################################################################
### mib2c/clSnmp${name}Util.h
###################################################################
@open mib2c/clSnmp${name}Util.h@
#ifndef _CL_SNMP_$name.uc_UTIL_H_
#define _CL_SNMP_$name.uc_UTIL_H_

#ifdef __cplusplus
extern "C" {
#endif
#include <clSnmpLog.h>

#define CL_SNMP_GEN_OP_COTX "GOP"
#define CL_SNMP_GEN_CMP_COTX "GCM"

@foreach $n notifications@
@perleval $vars{'n'}=~ s/[^a-zA-Z0-9]*//g; 0@
    @eval $no_of_vb = 0@
    @foreach $vb varbinds@
        @eval $no_of_vb = $no_of_vb + 1@
    @end@
    @if $no_of_vb != 0@
typedef enum $n.uc_ENUM {
    @foreach $vb varbinds@
    $n.uc_$vb.uc, 
    @end@
} ${n}EnumType;
   @end@
@end@

@foreach $n notifications@
@perleval $vars{'n'}=~ s/[^a-zA-Z0-9]*//g; 0@
ClRcT clSnmp${n}IndexGet(ClUint32T objectType, ClCorMOIdPtrT pMoId, ClAlarmUtilTlvInfoPtrT pTlvList);
@end@

@foreach $n notifications@
@perleval $vars{'n'}=~ s/[^a-zA-Z0-9]*//g; 0@
    @foreach $vb varbinds@
        @if $vb.iscolumn == 1@
            @eval $vb_parent = $vb.parent@
            @eval $t = $vb_parent.parent@
            @eval $t_module = "$t.module"@
            @eval $n_module = "$n.module"@
            @startperl@
                if (!exists ($tables4index_tlv{$vars{'t'}})){
                    $tables4index_tlv{ $vars{'t'} } = 1;
                    if($vars{'t_module'} ne $vars{'n_module'}){
                        ### printf "$vars{'t'}\n";
                        my $t = $SNMP::MIB{ $vars{'t'} };
                        ### printf "$t->{label}\n";
                        setup_data($t);
                    }
                }
                0;
            @endperl@
        @end@
    @end@
@end@

### Declaration of clSnmp${t}IndexTlvGet function.
@foreach $t table@
@perleval $vars{'t'}=~ s/[^a-zA-Z0-9]*//g; 0@
    @eval $istable4index_tlv = 0@
	@perleval if(exists ($tables4index_tlv{$vars{'t'}})) { $vars{'istable4index_tlv'} = 1; } 0;@
    @if $istable4index_tlv == 0@
	    @foreach $c column@
    	    @if $c.rowstatus == 1@
        	    @eval $istable4index_tlv = 1@
	        @end@
   		@end@
    @end@
    @if $istable4index_tlv == 1@
ClRcT clSnmp${t}IndexTlvGet(ClPtrT pIndexInfo, ClAlarmUtilTlvInfoPtrT pTlvList);
    @end@
@end@

### Declaration of clSnmp${t}IndexCorAttrGet function.
@foreach $t table@
@perleval $vars{'t'}=~ s/[^a-zA-Z0-9]*//g; 0@
ClRcT clSnmp${t}IndexCorAttrGet(ClPtrT pInst, ClPtrT pCorAttrValueDescList);
@end@

#ifdef __cplusplus
}
#endif
#endif /*  _CL_SNMP_$name.uc_UTIL_H_ */
@close mib2c/clSnmp${name}Util.h@
###################################################################
### mib2c/clSnmp${name}Util.c
###################################################################
@open mib2c/clSnmp${name}Util.c@

#include <string.h>

#include <clLogApi.h>
#include <clSnmpLog.h>
#include <clDebugApi.h>

#include <clAlarmUtils.h>
#include <clSnmp${name}InstXlation.h>
#include <clAppSubAgentConfig.h>
#include <clSnmpSubAgent${name}Config.h>
@if $tables_exist == 1@
#include <clSnmp${name}Tables.h>
@end@
#include <clSnmp${name}Util.h>

@foreach $n notifications@
@perleval $vars{'n'}=~ s/[^a-zA-Z0-9]*//g; 0@
ClRcT clSnmp${n}IndexGet(ClUint32T objectType, ClCorMOIdPtrT pMoId, ClAlarmUtilTlvInfoPtrT pTlvList )
{
    @eval $any_tbl_vb = 0@
    @foreach $vb varbinds@
        @if $vb.iscolumn == 1@
            @eval $any_tbl_vb = 1@
        @end@
    @end@
    @if $any_tbl_vb == 1@
    ClSNMPRequestInfoT *pInst = NULL;
    ClUint32T instLen = 0;
    ClMedAgentIdT oid = { (ClUint8T *)"0.0", 4 }; /* Dummy OID. */
    @end@
    ClRcT rc = CL_OK;

    if(NULL == pMoId)
    {
        CL_DEBUG_PRINT(CL_DEBUG_ERROR,("moId is passed as NULL"));
        return CL_ERR_NULL_POINTER;
    }
    if(NULL == pTlvList)
    {
        CL_DEBUG_PRINT(CL_DEBUG_ERROR,("pTlvList is passed as NULL"));
        return CL_ERR_NULL_POINTER;
    }

    switch(objectType)
    {
    @foreach $vb varbinds@
        case $n.uc_$vb.uc:
        {
            /* OID = $vb.objectID */
        @if $vb.iscolumn == 1@
            @eval $vb_parent = $vb.parent@
            @eval $t = $vb_parent.parent@
            ### Calling ${t}InstXlator for $vb assuming that function is implemented using same code generator.
            rc = clSnmp${t}InstXlator ( &oid, pMoId, NULL, (void **)&pInst, &instLen, NULL, CL_MED_CREATION_BY_OI, NULL);
            if(rc != CL_OK)
            {
                clLog(CL_LOG_ERROR, CL_SNMP_AREA, CL_SNMP_GEN_OP_COTX, "${t}InstXlator returned : [0x%x]", rc);
            }
            rc = clSnmp${t}IndexTlvGet(&(pInst->index.${t}Info), pTlvList);
            if(rc != CL_OK)
            {
                clLog(CL_LOG_ERROR, CL_SNMP_AREA, CL_SNMP_GEN_OP_COTX, "${t}IndexTlvGet returned : [0x%x]", rc);
                return rc;
            }
        @else@
            /* Scalar objects do not have any index. */
            pTlvList->numTlvs = 0;
        @end@
            break;
        }
    @end@
    }
    return rc;
}
@end@
###################################################################
@foreach $t table@
@perleval $vars{'t'}=~ s/[^a-zA-Z0-9]*//g; 0@
    @eval $istable4index_tlv = 0@
	@perleval if(exists ($tables4index_tlv{$vars{'t'}})) { $vars{'istable4index_tlv'} = 1; } 0;@
    @if $istable4index_tlv == 0@
	    @foreach $c column@
    	    @if $c.rowstatus == 1@
        	    @eval $istable4index_tlv = 1@
	        @end@
   		@end@
    @end@
    @if $istable4index_tlv == 1@

ClRcT clSnmp${t}IndexTlvGet(ClPtrT pIndexInfo, ClAlarmUtilTlvInfoPtrT pTlvList)
{
    ClAlarmUtilTlvT * pTlv = NULL;
    ClSnmp${t}IndexInfoT * p${t}Index;

    p${t}Index = (ClSnmp${t}IndexInfoT *)pIndexInfo;

    if(!pIndexInfo || !pTlvList)
    {
        CL_DEBUG_PRINT(CL_DEBUG_ERROR, ("NULL arguments received!"));
        return CL_ERR_NULL_POINTER;
    }
        @eval $index_count = 0@    
        @foreach $idx index@
            @eval $index_count = $index_count + 1@
        @end@
    pTlvList->pTlv = (ClAlarmUtilTlvT *) clHeapAllocate ($index_count * sizeof (ClAlarmUtilTlvT));
    if (pTlvList->pTlv == NULL)
    {
        clLog(CL_LOG_ERROR, CL_SNMP_AREA, CL_SNMP_GEN_OP_COTX, "${t}IndexTlvGet unable to allocate memory!");
        return (CL_ERR_NO_MEMORY);
    }
    pTlvList->numTlvs = $index_count;

        @eval $index_count = 0@
        @foreach $idx index@
    pTlv = pTlvList->pTlv + $index_count;
            @if $idx.type eq "ASN_OCTET_STR"@
    pTlv->length = strlen(p${t}Index->$idx) + 1;
    pTlv->value = clHeapAllocate (pTlv->length * sizeof (ClCharT));
    if (pTlv->value == NULL)
    {
        clHeapFree(pTlvList->pTlv);
        CL_DEBUG_PRINT(CL_DEBUG_ERROR, ("${t}IndexTlvGet unable to allocate memory!\n"));
        return (CL_ERR_NO_MEMORY);
    }
    strcpy((ClCharT *)pTlv->value, p${t}Index->${idx});
    pTlv->type = CL_COR_INT8;
            @elsif $idx.type eq "ASN_IPADDRESS"@
    pTlv->length = 4; /* IPv4 Address length */
    pTlv->value = clHeapAllocate (pTlv->length * sizeof (ClUint8T));
    if (pTlv->value == NULL)
    {
        clHeapFree(pTlvList->pTlv);
        return (CL_ERR_NO_MEMORY);
    }
    memcpy(pTlv->value, &(p${t}Index->${idx}), pTlv->length);
    pTlv->type = CL_COR_UINT8;
            @elsif $idx.type eq "ASN_OBJECT_ID"@
                    ### TO DO
                    ### pTlv->length = ???
                    ### pTlv->value  = ???
                    ### pTlv->type = CL_COR_UINT32;
            @else@
                @eval $c_type = ''@
                @eval $cor_type = ''@
                @if $idx.type eq "ASN_INTEGER"@
                    @eval $c_type = 'ClInt32T'@
                    @eval $cor_type = 'CL_COR_INT32'@
                @elsif $idx.type eq "ASN_GAUGE" || $idx.type eq "ASN_UNSIGNED" || $idx.type eq "ASN_COUNTER" || $idx.type eq "ASN_TIMETICKS"@
                    @eval $c_type = 'ClUint32T'@
                    @eval $cor_type = 'CL_COR_UINT32'@
                @elsif $idx.type eq "ASN_COUNTER64"@
                     @eval $c_type = 'ClUint64T'@
                     @eval $cor_type = 'CL_COR_UINT64'@
                @end@
    pTlv->value = clHeapAllocate (sizeof ($c_type));
    if (pTlv->value == NULL)
    {
        clHeapFree(pTlvList->pTlv);
        return (CL_ERR_NO_MEMORY);
    }
    memcpy(pTlv->value, &(p${t}Index->$idx), sizeof ($c_type));
    pTlv->length = sizeof ($c_type);
    pTlv->type = $cor_type;
               @end@
               @eval $index_count = $index_count + 1@
        @end@ ### foreach $idx index
    return CL_OK;
}
    @end@
@end@

@foreach $t table@
@perleval $vars{'t'}=~ s/[^a-zA-Z0-9]*//g; 0@
    @eval $istable4index_cor_attrget = 0@
    @foreach $c column@
    	@if $c.rowstatus == 1@
            @eval $istable4index_cor_attrget = 1@
   		@end@
    @end@
    @if $istable4index_cor_attrget == 1@
ClRcT clSnmp${t}IndexCorAttrGet(ClPtrT pInst, ClPtrT pCorAttrValueDescList)
{
    ClRcT rc = CL_OK;
    ClSNMPRequestInfoT *pReqInfo = (ClSNMPRequestInfoT *) pInst;
    ClAlarmUtilTlvInfoT indexTlvList = {0};
    ClCorAttrValueDescriptorListPtrT pAttrDescList = (ClCorAttrValueDescriptorListPtrT) pCorAttrValueDescList;
    ClCorAttrValueDescriptorPtrT pAttrDescriptor = NULL;
    ClAlarmUtilTlvT * pTlv = NULL;
    ClUint32T count = 0;

    if(pInst == NULL || pCorAttrValueDescList == NULL)
    {
        clLog(CL_LOG_ERROR, CL_SNMP_AREA, CL_SNMP_GEN_OP_COTX, "NULL arguments received!");
        return CL_ERR_NULL_POINTER;
    }

    rc = clSnmp${t}IndexTlvGet(&(pReqInfo->index.${t}Info), &indexTlvList);
    if(rc != CL_OK)
    {
        clLog(CL_LOG_ERROR, CL_SNMP_AREA, CL_SNMP_GEN_OP_COTX, "clSnmp${t}IndexTlvGet returned error rc : [0x%x]", (ClUint32T)rc);
        return rc;
    }

    @eval $index_count = count_indexes($t)@
    pAttrDescList->numOfDescriptor = $index_count;
    pAttrDescList->pAttrDescriptor = (ClCorAttrValueDescriptorT *) 
                                             clHeapAllocate($index_count * sizeof(ClCorAttrValueDescriptorT)); 

    pAttrDescriptor = pAttrDescList->pAttrDescriptor;
    if(pAttrDescriptor == NULL)
    {
        rc = CL_ERR_NO_MEMORY;
    }

    if(CL_OK == rc)
    {
        for(count = 0;count < pAttrDescList->numOfDescriptor;count++)
        {
            ClCorAttrValueDescriptorT * pAttrDesc = pAttrDescriptor + count;
            pTlv = (indexTlvList.pTlv) + count;
     
            pAttrDesc->pAttrPath = ${t}IndexCorAttrIdList[count].pAttrPath;
            pAttrDesc->attrId = ${t}IndexCorAttrIdList[count].attrId;
            pAttrDesc->index = -1;
            pAttrDesc->pJobStatus = (ClCorJobStatusT *)clHeapAllocate(sizeof(ClCorJobStatusT));
            if(pAttrDesc->pJobStatus == NULL)
            {
                rc = CL_ERR_NO_MEMORY;
                break;
            }
    
            pAttrDesc->bufferSize = pTlv->length;
            pAttrDesc->bufferPtr = clHeapAllocate(pAttrDesc->bufferSize);
            if(pAttrDesc->bufferPtr == NULL)
            {
                rc = CL_ERR_NO_MEMORY;
                break;
            }
            memcpy(pAttrDesc->bufferPtr, pTlv->value, pAttrDesc->bufferSize);
        }
    }
    /* CLEAN UP */
    {
        if(rc != CL_OK && pAttrDescriptor != NULL)
        {
            for(count = 0;count < pAttrDescList->numOfDescriptor;count++)
            {
                ClCorAttrValueDescriptorT * pAttrDesc = pAttrDescriptor + count;
                clHeapFree(pAttrDesc->pJobStatus);
                clHeapFree(pAttrDesc->bufferPtr);
            }
        }
        for(count = 0;count < indexTlvList.numTlvs; count++)
        {
            pTlv = (indexTlvList.pTlv) + count;
            clHeapFree(pTlv->value);
        }
        clHeapFree(indexTlvList.pTlv);
        indexTlvList.pTlv = NULL;
    }

    return CL_OK;
}

    @end@
@end@

@close mib2c/clSnmp${name}Util.c@
##################################################
## mib2c/clSnmp${name}Enums.h
##################################################
@open mib2c/clSnmp${name}Enums.h@
#ifndef _CL_SNMP_$name.uc_ENUMS_H
#define _CL_SNMP_$name.uc_ENUMS_H

#ifdef __cplusplus
extern "C" {
#endif
@foreach $t table@
@perleval $vars{'t'}=~ s/[^a-zA-Z0-9]*//g; 0@
    @foreach $c column@
       @eval $x = 0@
       @foreach $e $v enum@
           @if $x == 0@

/* enums for column $c */
           @eval $x = 1@
       @end@
#define $c.uc_$e.uc        $v
       @end@
    @end@
@end@

@foreach $s scalar@
@perleval $vars{'s'}=~ s/[^a-zA-Z0-9]*//g; 0@
   @eval $x = 0@
   @foreach $e $v enum@
       @if $x == 0@

/* enums for scalar $s */
       @eval $x = 1@
       @end@
#define $s.uc_$e.uc        $v
       @end@
@end@

#ifdef __cplusplus
}
#endif

#endif /* _CL_SNMP_$name.uc_ENUMS_H */
@close mib2c/clSnmp${name}Enums.h@
### CLEANUP
@perleval %tables4index_tlv = (); 0;@
