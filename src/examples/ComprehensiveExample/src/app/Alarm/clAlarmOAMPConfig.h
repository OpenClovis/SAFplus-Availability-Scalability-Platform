/******************************************************************************
 *
 * clAlarmOAMPConfig.h
 *
 ******************************************************************************
 * This code is auto-generated by OpenClovis IDE Version 3.1
 *
 ***************************** Description ************************************
 *
 * This is a header file for oamp configuration. 
 *
 *****************************************************************************/
 
#ifndef _CL_ALARM_OAMP_CONFIG_H_
#define _CL_ALARM_OAMP_CONFIG_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <clOmApi.h>
#include <clCorApi.h>
#include <clProvOmApi.h>
#include <clProvApi.h>
#include <clAlarmApi.h>
#include <clHalApi.h>
#include <clHalObjectApi.h>

typedef ClRcT (*fp) (CL_OM_PROV_CLASS*, ClHandleT,  ClProvTxnDataT*);


CL_OM_BEGIN_CLASS(CL_OM_ALARM_CLASS,  CL_OM_ALARM_ALARMRESOURCE_CLASS)

CL_OM_END

/**
 ***********************************************************
 *  \brief A function called when the resource is created by the alarm library.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the alarm 
 *  library. An alarm resource specific allocation can be done in this function.
 *  The counter deallocation for this can be done in the alarm destructor function.
 *
 *  \sa
 *  clAlarmALARMRESOURCEAlarmDestructor () 
 */
ClRcT clAlarmALARMRESOURCEAlarmConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief The function to deallocate the resources allocated in the alarm contructor.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  A user can call its own function to delete any resource which was created 
 *  during the call of the clAlarmOwnerCompWORKERAlarmConstructor function.
 *
 *  \sa
 *  clAlarmALARMRESOURCEAlarmConstructor()
 */
ClRcT clAlarmALARMRESOURCEAlarmDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );


#ifdef __cplusplus
}
#endif                                                                                                                                                                           
                                                                                                                                                                                    
#endif /* _CL_ALARM_OAMP_CONFIG_H_ */
