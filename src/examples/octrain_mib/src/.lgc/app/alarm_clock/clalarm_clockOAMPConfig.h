/******************************************************************************
 *
 * clalarm_clockOAMPConfig.h
 *
 ******************************************************************************
 * This code is auto-generated by OpenClovis IDE Version 3.1
 *
 ***************************** Description ************************************
 *
 * This is a header file for oamp configuration. 
 *
 *****************************************************************************/
 
#ifndef _CL_ALARM_CLOCK_OAMP_CONFIG_H_
#define _CL_ALARM_CLOCK_OAMP_CONFIG_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <clOmApi.h>
#include <clCorApi.h>
#include <clProvOmApi.h>
#include <clProvApi.h>
#include <clAlarmApi.h>
#include <clHalApi.h>
#include <clHalObjectApi.h>

typedef ClRcT (*fp) (CL_OM_PROV_CLASS*, ClHandleT,  ClProvTxnDataT*);


CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_CLOCKSTATUS_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_CLOCKTABLE_CLASS)

CL_OM_END

CL_OM_BEGIN_CLASS(CL_OM_PROV_CLASS,  CL_OM_PROV_TIMESETTABLE_CLASS)

CL_OM_END

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clalarm_clockCLOCKSTATUSProvDestructor (), clalarm_clockCLOCKSTATUSProvValidate (),
 *  clalarm_clockCLOCKSTATUSProvUpdate(), clalarm_clockCLOCKSTATUSProvRollback()
 */
ClRcT clalarm_clockCLOCKSTATUSProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clalarm_clockCLOCKSTATUSProvConstructor function.
 *
 *  \sa
 *  clalarm_clockCLOCKSTATUSProvConstructor()
 */
ClRcT clalarm_clockCLOCKSTATUSProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clalarm_clockCLOCKTABLEProvDestructor (), clalarm_clockCLOCKTABLEProvValidate (),
 *  clalarm_clockCLOCKTABLEProvUpdate(), clalarm_clockCLOCKTABLEProvRollback()
 */
ClRcT clalarm_clockCLOCKTABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clalarm_clockCLOCKTABLEProvConstructor function.
 *
 *  \sa
 *  clalarm_clockCLOCKTABLEProvConstructor()
 */
ClRcT clalarm_clockCLOCKTABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Assigns the callback functions to be called at runtime in the
 *         context of object implementer.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *                             
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  When the managed object is created, this function is called by the provisioning
 *  library to assign the callback functions. These callback functions are objcectstart, 
 *  validate, update, rollback, read and objectend. These callbacks present in the object
 *  implementer's context are called when an north bound operation (create, set,
 *  get or delete) occur on the managed resource. These can be called during the
 *  provisioning initialization phase of the component.
 *  The trio of the callback functions that is validate, update and rollback
 *  functions are called when any modification is done on the managed resource.
 *  The read callback function is called when a get operation is done on a runtime
 *  or transient attribute of the managed resource. 
 *
 *  The objectstart callback function is called before calling any of the other 
 *  callback functions. The objectend callback function is called after all the 
 *  transaction requests are completed on the object. Both of these callbacks are optional. 
 *  If the user doesn't want these two callbacks to be called, then he can pass NULL 
 *  as the value. 
 *  
 *  As this function is called on the creation of a managed object, a user can add 
 *  their logic inside this function which will be called on per object basis.
 *
 *  \sa
 *  clalarm_clockTIMESETTABLEProvDestructor (), clalarm_clockTIMESETTABLEProvValidate (),
 *  clalarm_clockTIMESETTABLEProvUpdate(), clalarm_clockTIMESETTABLEProvRollback()
 */
ClRcT clalarm_clockTIMESETTABLEProvConstructor( void *pThis, void *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief This is called before removing the callback function information.
 *
 *  \param pThis        (in) : This is a pointer to the om client handle.
 *  \param pUsrData     (in) : Pointer to the MOID of the object being deleted. 
 *                             It is a void pointer pointing to the ClCorMOIdT 
 *                             structure. So user need to typecast it to
 *                             ClCorMOIdPtrT pointer before accessing it.
 *  \param usrDataLen   (in) : This is the length of the user data. It is 
 *                             size of ClCorMOIdT structure.
 *
 *  \retval CL_OK   : The API executed successfully.
 *
 *  \par Description:
 *  This function is executed when the resource is deleted by the north bound.
 *  The information about the callback functions (objectstart, validate, update, rollback,
 *  read and the objectend function) is removed after this function is called. A user 
 *  can call its own function to delete any resource which was created during the
 *  call of the clalarm_clockTIMESETTABLEProvConstructor function.
 *
 *  \sa
 *  clalarm_clockTIMESETTABLEProvConstructor()
 */
ClRcT clalarm_clockTIMESETTABLEProvDestructor ( void *pThis , void  *pUsrData, ClUint32T usrDataLen );

/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clalarm_clockCLOCKSTATUSProvUpdate() will be
 *  called otherwise clalarm_clockCLOCKSTATUSProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clalarm_clockCLOCKSTATUSProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clalarm_clockCLOCKSTATUSProvUpdate, clalarm_clockCLOCKSTATUSProvRollback
 */
ClRcT clalarm_clockCLOCKSTATUSProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clalarm_clockCLOCKSTATUSProvValidate
 */
ClRcT clalarm_clockCLOCKSTATUSProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clalarm_clockCLOCKSTATUSProvValidate
 */
ClRcT clalarm_clockCLOCKSTATUSProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clalarm_clockCLOCKSTATUSProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clalarm_clockCLOCKSTATUSProvObjectEnd
 *
 */
void clalarm_clockCLOCKSTATUSProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clalarm_clockCLOCKSTATUSProvObjectUpdate() will be
 *  called otherwise clalarm_clockCLOCKSTATUSProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clalarm_clockCLOCKSTATUSProvObjectUpdate, clalarm_clockCLOCKSTATUSProvObjectRollback
 */
ClRcT clalarm_clockCLOCKSTATUSProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clalarm_clockCLOCKSTATUSProvObjectValidate
 */
ClRcT clalarm_clockCLOCKSTATUSProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clalarm_clockCLOCKSTATUSProvObjectValidate
 */
ClRcT clalarm_clockCLOCKSTATUSProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clalarm_clockCLOCKSTATUSProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clalarm_clockCLOCKSTATUSProvObjectStart
 *
 */
void clalarm_clockCLOCKSTATUSProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clalarm_clockCLOCKTABLEProvUpdate() will be
 *  called otherwise clalarm_clockCLOCKTABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clalarm_clockCLOCKTABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clalarm_clockCLOCKTABLEProvUpdate, clalarm_clockCLOCKTABLEProvRollback
 */
ClRcT clalarm_clockCLOCKTABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clalarm_clockCLOCKTABLEProvValidate
 */
ClRcT clalarm_clockCLOCKTABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clalarm_clockCLOCKTABLEProvValidate
 */
ClRcT clalarm_clockCLOCKTABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clalarm_clockCLOCKTABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clalarm_clockCLOCKTABLEProvObjectEnd
 *
 */
void clalarm_clockCLOCKTABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clalarm_clockCLOCKTABLEProvObjectUpdate() will be
 *  called otherwise clalarm_clockCLOCKTABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clalarm_clockCLOCKTABLEProvObjectUpdate, clalarm_clockCLOCKTABLEProvObjectRollback
 */
ClRcT clalarm_clockCLOCKTABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clalarm_clockCLOCKTABLEProvObjectValidate
 */
ClRcT clalarm_clockCLOCKTABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clalarm_clockCLOCKTABLEProvObjectValidate
 */
ClRcT clalarm_clockCLOCKTABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clalarm_clockCLOCKTABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clalarm_clockCLOCKTABLEProvObjectStart
 *
 */
void clalarm_clockCLOCKTABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);


/**
 ***********************************************************
 *  \brief Validate the job sent from north bound
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information about the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK           : The user validation is successful for this request. Any return
 *                             value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate single job at a time, which is sent
 *  by the north bound station. This job can be CREATE, DELETE or SET operation.
 *  The application having this callback is the object implementer of the managed
 *  resource. A job is MOID of the object for which create or delete is done, or
 *  a MOID plus attribute Id for which set is done.
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create or delete operation or it can be a set operation on an attribute
 *  on the managed resource, containing single job or multiple jobs. Using transaciton
 *  semantics the jobs are applied to all the OIs in an all or nothing semantics.
 *
 *  For a request containing single job, this callback is called only once. If
 *  it returns success then the clalarm_clockTIMESETTABLEProvUpdate() will be
 *  called otherwise clalarm_clockTIMESETTABLEProvRollback() is called for
 *  rolling back the job.
 *  In the case of request containing multiple jobs, validate callback is called
 *  multiple times that is once for each job. If this function returns success for
 *  all the jobs, then clalarm_clockTIMESETTABLEProvUpdate() is called for each
 *  one of them. If validation function fails at 'r'th job for a multi request 
 *  job rollback will be called for all the first 'r' jobs.
 *
 *  \sa
 *  clalarm_clockTIMESETTABLEProvUpdate, clalarm_clockTIMESETTABLEProvRollback
 */
ClRcT clalarm_clockTIMESETTABLEProvValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Update the value sent from the north bound station.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the job (that is create, delete or a set job)
 *  only if the validate callback has returned success. For a request containing multiple
 *  jobs, this callback is called only after the validation has returned success
 *  for all the jobs. For a job containing multiple sub-jobs, this callback is called for
 *  all the jobs one after the other.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the job.
 *
 *  \sa
 *  clalarm_clockTIMESETTABLEProvValidate
 */
ClRcT clalarm_clockTIMESETTABLEProvUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Rollback the jobs for which validate is done.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be used
 *                             to identify the jobs which are part of same request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK             : Rollback is done successfully in the application.
 *
 *  \par Description:
 *  This callback function is called for the job that is create, delete or set
 *  job when the validate callback returns failure.
 *
 *  For a request containing only one job, this is called once the validate callback
 *  returns failure. But for a request containing multiple jobs, this callback is
 *  called for all (including) till the job for which validate had returned failure.
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clalarm_clockTIMESETTABLEProvValidate
 */
ClRcT clalarm_clockTIMESETTABLEProvRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief  Read the value of transient attribute for a given attribute.
 *
 *  \param pThis        (in) : This is a pointer to the Prov class.
 *  \param txnHandle    (in) : Unique handle for one request. For a request
 *                             contain multiple jobs, this is unique and can be
 *                             used to identify the jobs which are part of same
 *                             request.
 *  \param pProvTxnData (in) : This is pointer to the structure containing the
 *                             information of the set/create/delete job.
 *                             The different fields of the structure are explained
 *                             as part of the definition of ClProvTxnDataT structure
 *                             in the API reference guide.
 *  \retval CL_OK            : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the value of a transient attribute.
 *  As the transient attributes of a managed resource are not stored at the COR, so
 *  for a get operation on any of these attributes, it routes the request to the
 *  the primary object implementer of the resource where this read callback is 
 *  executed to get the value for the attribute given by (pProvTxnData->attrId). 
 *  The value should be copied in the (*pProvTxnData->pProvData). This memory is
 *  allocated by the provisioning library which is of size (pProvTxnData->size) 
 *  and given to the user in the callback.
 *
 *  The user should be careful while copying value to this pointer. Only the
 *  required size given by (pProvTxnData->size) should be copied. For an array
 *  attribute, the value in the (pProvTxnData->index) contains the index from 
 *  which the value should be copied.
 *  The return value of this function is given to the user who has done the get
 *  operation on the transient otherwise runtime attribute.
 *
 */
ClRcT clalarm_clockTIMESETTABLEProvRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnData);

/**
 ***********************************************************
 *  \brief Object start callback function which will be called before
 *  starting any of the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests are being started. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being started on the object. This will be called before starting
 *  any of the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clalarm_clockTIMESETTABLEProvObjectEnd
 *
 */
void clalarm_clockTIMESETTABLEProvObjectStart(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

/**
 ***********************************************************
 *  \brief Validate all the jobs in an object sent from northbound as a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The user validation is successful for this request. Any return
 *                                 value other than this will make the transaction to rollback.
 *
 *  \par Description:
 *  This function is used to validate all the jobs of an object, which is sent
 *  from the north bound. These jobs can be of CREATE, DELETE or SET types.
 *  The application having this callback is the object implementer of the managed
 *  resource. 
 *  The north bound request lands in COR, from where it is routed to the object
 *  implementer(s). This callback is executed in the context of OI to validate
 *  the request sent by the north bound management station, before it is updated
 *  in the OI.
 *
 *  This is one of the callback function along with update and rollback which are
 *  used to implement the transaction's ACID semantics in the object implementer. These
 *  callbacks are called by the provisioning library.
 *  The object modification request is sent from the north bound. This request can
 *  be a create/delete/set operation, containing either a single job or multiple jobs. 
 *  Using transaciton, the jobs are applied to all the OIs in all or nothing semantics.
 *
 *  This callback is called to validate all the jobs of an object in a single callout. If
 *  it returns success then the clalarm_clockTIMESETTABLEProvObjectUpdate() will be
 *  called otherwise clalarm_clockTIMESETTABLEProvObjectRollback() is called for
 *  rolling the jobs back.
 *
 *  \sa
 *  clalarm_clockTIMESETTABLEProvObjectUpdate, clalarm_clockTIMESETTABLEProvObjectRollback
 */
ClRcT clalarm_clockTIMESETTABLEProvObjectValidate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Update all the jobs of an object sent from north bound as a single request. 
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Updation is successful in the application.
 *
 *  \par Description:
 *  This callback function is called for the jobs only if the validate callback has returned success. 
 *  For a request containing multiple jobs in different objects, this callback is called only after 
 *  the validation has returned success for all the jobs.
 *
 *  Any error happening in the update phase is not reported to the north bound. It will
 *  be taken as success. It is assumed that the update phase never fails as the validate
 *  callback would have already done the sanity check on the jobs.
 *
 *  \sa
 *  clalarm_clockTIMESETTABLEProvObjectValidate
 */
ClRcT clalarm_clockTIMESETTABLEProvObjectUpdate(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Rollback all the jobs of an object whose validation failed.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information of the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : Rollback is done successfully.
 *
 *  \par Description:
 *  This function is called when the job validation is failed in the validate callback, 
 *  and the user is supposed to rollback any operations performed in the validate callback.
 *
 *  Like the update phase, any error happening in the rollback phase is not reported
 *  to the north bound.
 *
 *  \sa
 *  clalarm_clockTIMESETTABLEProvObjectValidate
 */
ClRcT clalarm_clockTIMESETTABLEProvObjectRollback(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief  Read all the transient attributes values in an object in a single request.
 *
 *  \param pThis            (in) : This is a pointer to the Prov class.
 *  \param txnHandle        (in) : Unique handle for the request.
 *  \param pProvTxnDataList (in) : This is pointer to the list of structures containing the
 *                                 information about the set/create/delete jobs.
 *                                 The different fields of the structure are explained
 *                                 as part of the definition of ClProvTxnDataT structure
 *                                 in the API reference guide.
 *  \param txnDataEntries   (in) : No. of jobs in pProvTxnDataList.
 *  \retval CL_OK                : The API executed successfully.
 *
 *  \par Description:
 *  This callback function is called to get the values of the transient attributes in an object.
 *  As the transient attributes of a managed resource are not stored in COR,
 *  for a get operation on these attributes, cor routes the request to the
 *  the primary object implementer of the resource and this object read callback is 
 *  invoked to get the values. If there are more than one transient 
 *  attribute is read from the northbound in a single operation, all these jobs will be 
 *  grouped together and passed in pProvTxnDataList as a single request.
 *
 *  The return value of this callback is propagated back to the user.
 */
ClRcT clalarm_clockTIMESETTABLEProvObjectRead(CL_OM_PROV_CLASS* pThis, ClHandleT txnHandle, ClProvTxnDataT* pProvTxnDataList, ClUint32T txnDataEntries);

/**
 ***********************************************************
 *  \brief Object end callback function which will be called after
 *  completing all the transaction requests on the object.
 *
 *  \param pMoId        (in) : Pointer to the MOID of the object on which the
 *  transaction requests completed. 
 *  \param txnHandle    (in) : Unique handle for the transaction.
 *
 *  \retval 
 *  None.
 *
 *  \par Description:
 *  This callback function is used to let the user know that the transactional 
 *  operations are being ended on the object. This will be called after completing
 *  all the transaction requests on the object. The 'txnHandle' is used to
 *  identify the transaction uniquely.
 *  
 *  \note
 *  None
 *
 *  \sa
 *  clalarm_clockTIMESETTABLEProvObjectStart
 *
 */
void clalarm_clockTIMESETTABLEProvObjectEnd(ClCorMOIdPtrT pMoId, ClHandleT txnHandle);

#ifdef __cplusplus
}
#endif                                                                                                                                                                           
                                                                                                                                                                                    
#endif /* _CL_ALARM_CLOCK_OAMP_CONFIG_H_ */
