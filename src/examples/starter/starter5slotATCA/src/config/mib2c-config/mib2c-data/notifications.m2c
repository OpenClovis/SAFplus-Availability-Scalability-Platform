######################################################################
## mib2c/clSnmp${name}Notifications.h
######################################################################
@open mib2c/clSnmp${name}Notifications.h@
#ifndef _CL_SNMP_$name.uc_H
#define _CL_SNMP_$name.uc_H

#include <clCommon.h>
#include <clSnmpDefs.h>

/* function declarations */
@foreach $n notifications@
@perleval $vars{'n'}=~ s/[^a-zA-Z0-9]*//g; 0@
void clSnmpSend${n}Trap(ClTrapPayLoadListT   *pTrapPayLoadList);
@end@

#endif /* _CL_SNMP_$name.uc_H */
@close mib2c/clSnmp${name}Notifications.h@
######################################################################
## mib2c/clSnmp${name}Notifications.c
######################################################################
@open mib2c/clSnmp${name}Notifications.c@
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include <clDebugApi.h>
#include <clLogApi.h>
#include <clHeapApi.h>
#include "clSnmp${name}Notifications.h"
#include <clSnmp${name}Util.h>

static oid snmpTrapOid[] = {1, 3, 6, 1, 6, 3, 1, 1, 4, 1, 0};

@foreach $n notifications@
@perleval $vars{'n'}=~ s/[^a-zA-Z0-9]*//g; 0@
void clSnmpSend${n}Trap(ClTrapPayLoadListT   *pTrapPayLoadList)
{
    @eval $any_tbl_vb = 0@
    @eval $no_on_vb = 0@

    @foreach $vb varbinds@
        @if $vb.iscolumn == 1@
            @eval $any_tbl_vb = 1@
        @end@
        @eval $no_on_vb = $no_on_vb + 1@
    @end@
    
    @if $no_on_vb != 0@
    ClInt32T count = 0;
    @end@

    @if $any_tbl_vb != 0@
    ClInt32T oidLen = 0;
    @end@

    netsnmp_variable_list  *pVarList = NULL;
    oid ${n}Oid[] = { $n.commaoid };
    @foreach $v varbinds@
        @if $v.isscalar@
    oid ${v}Oid[] = { $v.commaoid, 0 };
        @end@
        @if !$v.isscalar@
    oid *${v}Oid = NULL;
    oid ${v}TempOid[] = { $v.commaoid };
        @end@
    @end@

    clLogDebug("SNM", "NTF", "Inside trap handler");
    @if $no_on_vb != 0 @
    if(pTrapPayLoadList == NULL)
    {
        CL_DEBUG_PRINT(CL_DEBUG_ERROR,
                      ("NULL arguments received!"));
        return;
    }
    if($no_on_vb != pTrapPayLoadList->numTrapPayloadEntry)
    {
        clLogError(CL_SNMP_AREA, CL_SNMP_GEN_OP_COTX, "No of notification payload passed : [%d] but it suppose to be : [%d]", pTrapPayLoadList->numTrapPayloadEntry, $no_on_vb); 
	return; 
    }
    @end@

    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&pVarList,
        snmpTrapOid, OID_LENGTH(snmpTrapOid),
        ASN_OBJECT_ID,
        (ClUint8T *)${n}Oid, sizeof(${n}Oid));
    
    @if count_varbinds($n) > 0@
    /*
     * Add any objects from the trap definition
     */
    @end@
    @foreach $v varbinds@
        @if $v.isscalar@
    snmp_varlist_add_variable(&pVarList,
        ${v}Oid, OID_LENGTH(${v}Oid),
        $v.type,
        (ClUint8T *)pTrapPayLoadList->pPayLoad[count].val,
        pTrapPayLoadList->pPayLoad[count].valLen
    );
        @end@
        @if !$v.isscalar@
    oidLen = sizeof(${v}TempOid) + pTrapPayLoadList->pPayLoad[count].oidLen;
    ${v}Oid = (oid *)clHeapAllocate(oidLen);

    if(${v}Oid == NULL)
    {
        CL_DEBUG_PRINT(CL_DEBUG_ERROR, ("Memory allocation failed for ${v}Oid, size = %d", oidLen));
        return;
    }

    memcpy(${v}Oid, ${v}TempOid, sizeof(${v}TempOid));
    memcpy(${v}Oid + (sizeof(${v}TempOid)/sizeof(oid)), 
           pTrapPayLoadList->pPayLoad[count].objOid, pTrapPayLoadList->pPayLoad[count].oidLen);
    snmp_varlist_add_variable(&pVarList, ${v}Oid,
        oidLen / sizeof(ClUint32T),
        $v.type,
        (ClUint8T *)pTrapPayLoadList->pPayLoad[count].val,
        pTrapPayLoadList->pPayLoad[count].valLen
    );
    clHeapFree(${v}Oid);
        @end@
    count++;
    @end@

    /*
     * Add any extra (optional) objects here
     */

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
     clLogInfo("SNM", "NTF", "Sending trap to trap manager");
    send_v2trap( pVarList );
    snmp_free_varbind( pVarList );

}
@end@
@close mib2c/clSnmp${name}Notifications.c@
