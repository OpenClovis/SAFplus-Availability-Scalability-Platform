##################################################
### mdl_config/clSnmp${name}InstXlation.h
##################################################
@open mdl_config/clSnmp${name}InstXlation.h@
#ifndef _CL_SNMP_$name.uc_INST_XLATION_H_
#define _CL_SNMP_$name.uc_INST_XLATION_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <clMedApi.h>

#define BY_COR 0

ClRcT clSnmp${name}DefaultInstXlator (CL_IN const struct ClMedAgentId *pAgntId,
                     CL_IN ClCorMOIdPtrT         hmoId,
                     CL_IN ClCorAttrPathPtrT containedPath,
                     CL_OUT void**         pRetInstData,
                     CL_OUT ClUint32T     *pInstLen,
                     CL_OUT ClPtrT        pCorAttrValueDescList,
                     CL_IN ClMedInstXlationOpEnumT instXlnOp,
                     CL_IN ClPtrT cookie);
@foreach $t table@
@perleval $vars{'t'}=~ s/[^a-zA-Z0-9]*//g; 0@
ClRcT clSnmp${t}InstXlator (const struct ClMedAgentId *pAgntId,
                     CL_IN ClCorMOIdPtrT         hmoId,
                     CL_IN ClCorAttrPathPtrT containedPath,
                     CL_OUT void**         pRetInstData,
                     CL_OUT ClUint32T     *pInstLen,
                     CL_OUT ClPtrT        pCorAttrValueDescList,
                     CL_IN ClMedInstXlationOpEnumT instXlnOp,
                     CL_IN ClPtrT cookie);
@end@
#ifdef __cplusplus
}
#endif
#endif /* _CL_SNMP_$name.uc_INST_XLATION_H_ */
@close mdl_config/clSnmp${name}InstXlation.h@
##################################################
### mdl_config/clSnmp${name}InstXlation.c
##################################################
@open mdl_config/clSnmp${name}InstXlation.c@

#include <clLogApi.h>
#include <clSnmpLog.h>
#include <clDebugApi.h>
#include <clCorUtilityApi.h>
#include <clSnmpOp.h>
#include <clSnmpSubAgent${name}Config.h>
#include "clSnmp${name}InstXlation.h"
@if $tables_exist == 1@
#include <clSnmp${name}Tables.h>
@end@

#define CL_SNMP_GEN_XLA_COTX "GXL"

#define CL_MED_COR_STR_MOID_PRINT(corMoId)          \
do\
{ \
    ClNameT strMoId;                        \
    clCorMoIdToMoIdNameGet(corMoId, &strMoId );       \
    clLog(CL_LOG_INFO, CL_SNMP_AREA, CL_SNMP_GEN_XLA_COTX, "%s", strMoId.value);\
}while(0)                                   \


@if $scalars_exist == 1@
ClRcT clSnmp${name}DefaultInstXlator (CL_IN const struct ClMedAgentId *pAgntId,
                     CL_IN ClCorMOIdPtrT         hmoId,
                     CL_IN ClCorAttrPathPtrT containedPath,
                     CL_OUT void**         pRetInstData,
                     CL_OUT ClUint32T     *pInstLen,
                     CL_OUT ClPtrT        pCorAttrValueDescList,
                     CL_IN ClMedInstXlationOpEnumT instXlnOp,
                     CL_IN ClPtrT cookie)
{
    ClUint32T   len = 0;
    ClSNMPRequestInfoT *pInst = NULL;

    clLog(CL_LOG_DEBUG, CL_SNMP_AREA, CL_SNMP_GEN_XLA_COTX, "Default Instant Xlation for MOID : ");
    CL_MED_COR_STR_MOID_PRINT(hmoId);

    if(!pAgntId || !pRetInstData || !pInstLen)
    {
        clLog(CL_LOG_ERROR, CL_SNMP_AREA, CL_SNMP_GEN_XLA_COTX, "clSnmp${t}InstXlator received NULL arguments!");
        return CL_ERR_NULL_POINTER;   
    }

    pInst = (ClSNMPRequestInfoT*)*pRetInstData;

    if (pInst == NULL)
    {
        pInst = (ClSNMPRequestInfoT *) clHeapAllocate (sizeof (ClSNMPRequestInfoT));
        if (pInst == NULL)
        {
            clLog(CL_LOG_ERROR, CL_SNMP_AREA, CL_SNMP_GEN_XLA_COTX, "clSnmp${name}DefaultInstXlator Unable to allocate memory for the instance translation!");
            return (CL_ERR_NO_MEMORY);
        }
        *pInstLen = sizeof (ClSNMPRequestInfoT);
        memset(pInst, 0, *pInstLen);
        *pRetInstData = (void**)pInst;
    }
    for(len = 0; len < pAgntId->len; len++)
    {
        pInst->oid[len] = pAgntId->id[len];
    }

    pInst->tableType = CL_$name.uc_SCALARS;
    return CL_OK;
}
@end@

@foreach $t table@
@perleval $vars{'t'}=~ s/[^a-zA-Z0-9]*//g; 0@
/*
 * This function needs to be written for every application MIB table. 
 * This implements the extraction part of the MIB table index. The user 
 * fills the logic for obtaining the index.
 */
  
ClRcT clSnmp${t}InstXlator (CL_IN const struct ClMedAgentId *pAgntId,
                     CL_IN ClCorMOIdPtrT         hmoId,
                     CL_IN ClCorAttrPathPtrT containedPath,
                     CL_OUT void**         pRetInstData,
                     CL_OUT ClUint32T     *pInstLen,
                     CL_OUT ClPtrT        pCorAttrValueDescList,
                     CL_IN ClMedInstXlationOpEnumT instXlnOp,
                     CL_IN ClPtrT cookie)
{
    ClRcT       rc = CL_OK; /* Return code */ 
    ClUint32T   len = 0;
    ClSNMPRequestInfoT *pInst = NULL;

    clLog(CL_LOG_DEBUG, CL_SNMP_AREA, CL_SNMP_GEN_XLA_COTX, "Instant Xlation for MOID : ");
    CL_MED_COR_STR_MOID_PRINT(hmoId);


    if(!pAgntId || !pRetInstData || !pInstLen)
    {
        clLog(CL_LOG_ERROR, CL_SNMP_AREA, CL_SNMP_GEN_XLA_COTX, "clSnmp${t}InstXlator received NULL arguments!");
        return CL_ERR_NULL_POINTER;   
    }

    pInst = (ClSNMPRequestInfoT*)*pRetInstData;

    if (pInst == NULL)
    {
        pInst = (ClSNMPRequestInfoT *) clHeapAllocate (sizeof (ClSNMPRequestInfoT));
        if (pInst == NULL)
        {
            clLog(CL_LOG_CRITICAL, CL_SNMP_AREA, CL_SNMP_GEN_XLA_COTX, "clSnmp${name}DefaultInstXlator Unable to allocate memory for the instance translation!");
            return (CL_ERR_NO_MEMORY);
        }
        *pInstLen = sizeof (ClSNMPRequestInfoT);
        memset(pInst, 0, *pInstLen);
        *pRetInstData = (void**)pInst;
    }
    for(len = 0; len < pAgntId->len; len++)
    {
        pInst->oid[len] = pAgntId->id[len];
    }

    pInst->tableType = CL_$t.uc;
    if (CL_MED_CREATION_BY_OI == instXlnOp)
    {
        ClCorObjectHandleT objHdl;
        ClUint32T attrSize = 0;
        clLog(CL_LOG_INFO, CL_SNMP_AREA, CL_SNMP_GEN_XLA_COTX, "clSnmp${t}InstXlator: Translating hmoId to Index for SNMP table $t");
        /* USER_CODE_MODIFICATION_NEEDS_TO_BE_PERFORMED
         * User should supply the logic to translate hmoId
         * to index value in pInst->index.${t}Info
         */
        rc = clCorMoIdServiceSet(hmoId, CL_COR_SVC_ID_PROVISIONING_MANAGEMENT);
        if (rc != CL_OK)
        {
            clLog(CL_LOG_ERROR, CL_SNMP_AREA, CL_SNMP_GEN_XLA_COTX, "clCorMoIdServiceSet returned error rc : [0x%x]!", rc);
            return rc;
        }

        rc = clCorObjectHandleGet(hmoId, &objHdl);
        if(rc != CL_OK)
        {
            clLog(CL_LOG_ERROR, CL_SNMP_AREA, CL_SNMP_GEN_XLA_COTX, "clSnmpfileTableInstXlator: clCorObjectHandleGet returned error rc : [0x%x]!", rc);
            return rc;
        }

        if(${t}IndexCorAttrIdList[0].attrId <= 0)
        {
            ClUint8T * indexOidList[] = {
                @foreach $idx index@
                    @eval $idx_oid = "$idx.objectID"@
                    @perleval $vars{'idx_oid'} =~ s/^\.//; 0;@
                    (ClUint8T *) "$idx_oid",
                @end@
                    NULL /* End of Index OID List */
            };
            ClRcT rc = CL_OK;
            @eval $index_count = count_indexes($t)@
                rc = clSnmpTableIndexCorAttrIdInit($index_count, indexOidList, ${t}IndexCorAttrIdList);
            if(rc != CL_OK)
            {
                clLog(CL_LOG_ERROR, CL_SNMP_AREA, CL_SNMP_GEN_XLA_COTX, "clSnmpTableIndexCorAttrIdInit returned error rc : [0x%x]", rc);
            }
        }
    @eval $index_count = 0@
    @foreach $idx index@
        attrSize = sizeof(pInst->index.${t}Info.$idx);
        clLog(CL_LOG_DEBUG, CL_SNMP_AREA, CL_SNMP_GEN_XLA_COTX, "Getting attribute value for AttrId : [%d] Attr Len : [%d]", ${t}IndexCorAttrIdList[$index_count].attrId, attrSize);
        @if $idx.type eq "ASN_OCTET_STR"@
        rc = clCorObjectAttributeGet(objHdl, NULL, ${t}IndexCorAttrIdList[$index_count].attrId, -1, pInst->index.${t}Info.$idx, &attrSize);
        @else@
        rc = clCorObjectAttributeGet(objHdl, NULL, ${t}IndexCorAttrIdList[$index_count].attrId, -1, &pInst->index.${t}Info.$idx, &attrSize);
        @eval $index_count = $index_count + 1@
        @end@
        if(rc != CL_OK)
        {
            clLog(CL_LOG_ERROR, CL_SNMP_AREA, CL_SNMP_GEN_XLA_COTX, "Failed to get attribute information : [0x%x]", rc);
            return rc;
        }
    @end@

    }
    @eval $row_create_supported = 0@
    @foreach $c column@
         @if $c.rowstatus == 1 && $row_create_supported == 0@
             @eval $row_create_supported = 1@
         @end@
    @end@
    @if $row_create_supported == 1@
    else if(instXlnOp == CL_MED_CREATION_BY_NORTHBOUND)
    {
        clLog(CL_LOG_INFO, CL_SNMP_AREA, CL_SNMP_GEN_XLA_COTX, "Creating Object from North bound interface");
        /* Row Creation/Deletion from management station. */

        /* USER_CODE_MODIFICATION_NEEDS_TO_BE_PERFORMED
         * User should supply the logic to get hmoId
         * from index value in pInst->index.${t}Info
         */
    }
    @end@
    *pRetInstData = (void**)pInst;
    return (rc);
}
@end@
@close mdl_config/clSnmp${name}InstXlation.c@
