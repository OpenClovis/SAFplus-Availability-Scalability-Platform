cscope 15 $HOME/space1/git/SAFplus-Test/hot_standby/src/app/TestComp               0000381481
	@alarmClockCkpt.c

5 
	~<�dio.h
>

6 
	~<�dlib.h
>

7 
	~<�r�g.h
>

8 
	~<uni�d.h
>

14 
	~<sys/time.h
>

16 
	~<�H�pApi.h
>

17 
	~<�LogApi.h
>

18 
	~"��mClockCk�.h
"

19 
	~"��mClockLog.h
"

20 
	~"��mClockDef.h
"

22 
	#__HOT_STANDBY_IDLE
 (0x1)

	)

23 
	#__HOT_STANDBY_ACTIVE
 (0x2)

	)

25 
ClI�32T
 
	gg_h�_��dby
;

26 
ClCk�SvcHdlT
 
	gck�_svc_hdl
 = 0;

27 
ClV�si�T
 
	gck�_v�si�
 = {'B', 1, 1};

33 
ClRcT


34 
	$��mClockCk�In��lize
 ()

36 
ClRcT
 
�t_code
 = 
CL_OK
;

38 i�(
ck�_svc_hdl
 == 0)

40 
�t_code
 = 
	`�Ck�In��lize
(&
ck�_svc_hdl
, 
NULL
, &
ck�_v�si�
);

41 i�(
�t_code
 !�
CL_OK
)

43 
	`��mClockLogWr�e
(
CL_LOG_SEV_ERROR
,

45 
	`g�pid
(), 
�t_code
);

48  
�t_code
;

49 
	}
}

55 
ClRcT


56 
	$��mClockCk�F��ize
 ()

58 
ClRcT
 
�t_code
 = 
CL_OK
;

60 i�(
ck�_svc_hdl
 != 0)

62 
�t_code
 = 
	`�Ck�F��ize
(
ck�_svc_hdl
);

63 i�(
�t_code
 !�
CL_OK
)

65 
	`��mClockLogWr�e
(
CL_LOG_SEV_ERROR
,

67 
	`g�pid
(), 
�t_code
);

71 
ck�_svc_hdl
 = 0;

74  
�t_code
;

75 
	}
}

97 
ClRcT


98 
	$��mClockCk�C�lback
�
ClCk�HdlT
 
ck�_hdl
,

99 
SaNameT
 *
ck�_�me
,

100 
ClCk�IOVe��E�m�tT
 *
io_ve��
,

101 
ClU�t32T
 
num_��i�s
,

102 
ClP�T
 
cook�
 )

104 
ClRcT
 
�t_code
 = 
CL_OK
;

105 
ClI�32T
 
cou�
;

106 
ClI�32T
 
pid
 = 
	`g�pid
();

107 
ClI�32T
 
d�a_size
 = (
acClockT
);

108 
ClI�32T
 
��i�_id_�n
;

109 
ClCh�T
 
��i�_id_�me
[ 
CL_MAX_NAME_LENGTH
 ];

111 
	`�r�tf
(
��i�_id_�me
, "s00001");

112 
��i�_id_�n
 = 
	`���
(
��i�_id_�me
);

114 
	`��mClockLogWr�e
(
CL_LOG_SEV_TRACE
,

116 
pid
, 
ck�_�me
->
�ngth
, ck�_�me->
v�ue
);

117 
cou�
 = 0; cou� < 
num_��i�s
; count++)

123 i�((
��i�_id_�n
 =�
io_ve��
[
cou�
].
��i�Id
.
idL�
) &&

124 (
	`��cmp
(
��i�_id_�me
, (
ClCh�T
 *)
io_ve��
[
cou�
].
��i�Id
.
id
, 
��i�_id_�n
) == 0))

126 i�(
io_ve��
[
cou�
].
d�aSize
 !�
d�a_size
)

128 
	`��mClockLogWr�e
(
CL_LOG_SEV_ERROR
,

130 
pid
, (
ClI�32T
)
io_ve��
[
cou�
].
�adSize
, (ClI�32T)(
acClockT
));

135 
	`��mClockLogWr�e
(
CL_LOG_SEV_DEBUG
,

137 
pid
, (
ClI�32T
)
io_ve��
[
cou�
].
�adSize
, 
��i�_id_�me
);

139 
	`��mClockC�yH�S�ndby
((
acClockT
*)
io_ve��
[
cou�
].
d�aBuf�r
);

148 if(!(
g_h�_��dby
 & 
__HOT_STANDBY_ACTIVE
))

149 
g_h�_��dby
 |�
__HOT_STANDBY_ACTIVE
;

150  
�t_code
;

151 
	}
}

173 
ClRcT


174 
	$��mClockCk�C��e
 (

175 cڡ 
ClCh�T
 *
ck�_�me
,

176 
ClI�32T
 
num_��i�s
,

177 
ClI�32T
 
��i�_size
,

178 
ClCk�HdlT
 *
ck�_hdl
,

179 
ClBo�T
 *
ck�_h�_��dby
 )

182 
ClRcT
 
�t_code
 = 
CL_OK
;

183 
SaNameT
 
ck�_�me_t
;

184 
ClCk�Checkpo�tC��i�A�ribu�sT
 
ck�_�_��
;

185 
ClCk�O�nF�gsT
 
ck�_ݒ_�ags
;

186 
ClTimeT
 
timeout
;

187 
ClCh�T
 
��i�_id_�me
[ 
CL_MAX_NAME_LENGTH
 ];

191 
�t_code
 = 
	`��mClockCk�In��lize
();

192 i�(
�t_code
 !�
CL_OK
)

194 
	`��mClockLogWr�e
(
CL_LOG_SEV_ERROR
,

196 
	`g�pid
());

197  
�t_code
;

202 
ck�_�me_t
.
�ngth
 = 
	`���
(
ck�_�me
);

203 
	`�r�y
(
ck�_�me_t
.
v�ue
, 
ck�_�me
);

207 
	`�r�tf
(
��i�_id_�me
, "s%05d", 
num_��i�s
);

209 i�(*
ck�_h�_��dby
 =�
CL_TRUE
)

213 
ck�_�_��
.
�ti�F�gs
 = 
CL_CKPT_CHECKPOINT_COLLOCATED
 | 
CL_CKPT_DISTRIBUTED
;

219 
ck�_�_��
.
�ti�F�gs
 = 
CL_CKPT_CHECKPOINT_COLLOCATED
;

224 
ck�_�_��
.
checkpo�tSize
 = 
num_��i�s
 * 
��i�_size
;

228 
ck�_�_��
.
���i�Du�ti�
 = (
ClTimeT
)-1;

229 i��
num_��i�s
 == 1 )

232 
ck�_�_��
.
maxSe�i�s
 = 
num_��i�s
 + 1;

236 
ck�_�_��
.
maxSe�i�s
 = 
num_��i�s
;

239 
ck�_�_��
.
maxSe�i�Size
 = 
��i�_size
;

240 
ck�_�_��
.
maxSe�i�IdSize
 = (
ClSizeT
)(
	`���
(
��i�_id_�me
)+1);

244 
timeout
 = (
ClTimeT
)-1;

248 
ck�_ݒ_�ags
 = (
CL_CKPT_CHECKPOINT_READ
 |

249 
CL_CKPT_CHECKPOINT_WRITE
 |

250 
CL_CKPT_CHECKPOINT_CREATE
);

254 
timeout
 = (
ClTimeT
)-1;

256 
�t_code
 = 
	`�Ck�Checkpo�tO�n
(
ck�_svc_hdl
,

257 &
ck�_�me_t
,

258 &
ck�_�_��
,

259 
ck�_ݒ_�ags
,

260 
timeout
,

261 (
ClCk�HdlT
 *)
ck�_hdl
);

263 i�(
�t_code
 !�
CL_OK
)

265 
	`��mClockLogWr�e
(
CL_LOG_SEV_ERROR
,

267 
	`g�pid
(), 
�t_code
);

268  
�t_code
;

271 i�(*
ck�_h�_��dby
 =�
CL_TRUE
)

285 
g_h�_��dby
 = 
__HOT_STANDBY_IDLE
;

286 
�t_code
 = 
	`�Ck�Immed��C�sum�i�Regi��
(*
ck�_hdl
, 
��mClockCk�C�lback
, 
NULL
);

287 i�(
�t_code
 !�
CL_OK
)

289 
	`��mClockLogWr�e
�
CL_LOG_SEV_ERROR
,

291 
	`g�pid
(), 
�t_code
);

293 
	`��mClockLogWr�e
(
CL_LOG_SEV_WARNING
,

294 "��mClockCk�C��e�id=%d): F�l�g back��w�m s�ndby mode\n", 
	`g�pid
());

296 *
ck�_h�_��dby
 = 
CL_FALSE
;

300 
	`��mClockLogWr�e
(
CL_LOG_SEV_INFO
, "alarmClockCkptCreate: Ckpt [%s] created successfully",

301 
ck�_�me
);

302  
�t_code
;

303 
	}
}

323 
ClRcT


324 
	$��mClockCk�Wr�e
 (

325 
ClCk�HdlT
 
ck�_hdl
,

326 
ClI�32T
 
��i�_num
,

327 * 
d�a
,

328 
ClI�32T
 
d�a_size
 )

330 
ClRcT
 
�t_code
 = 
CL_OK
;

331 
ClI�32T
 
pid
 = 
	`g�pid
();

332 
ClCh�T
 
��i�_id_�me
[ 
CL_MAX_NAME_LENGTH
 ];

333 
ClCk�Se�i�IdT
 
��i�_id
;

335 
	`�r�tf
(
��i�_id_�me
, "s%05d", 
��i�_num
);

336 
��i�_id
.
id
 = (
ClU�t8T
*)
��i�_id_�me
;

337 
��i�_id
.
idL�
 = 
	`���
(
��i�_id_�me
);

339 
�t_code
 = 
	`�Ck�Se�i�Ov�wr�e
(
ck�_hdl
,

340 &
��i�_id
,

341 
d�a
, 
d�a_size
);

342 i�(
�t_code
 !�
CL_OK
)

344 if(
	`CL_GET_ERROR_CODE
(
�t_code
) == 0xa ||

345 
	`CL_GET_ERROR_CODE
(
�t_code
�=�
CL_ERR_NOT_EXIST
)

347 
ClCk�Se�i�C��i�A�ribu�sT
 
��i�_�_��
;

348 
��i�_�_��
.
��i�Id
 = &
��i�_id
;

349 
��i�_�_��
.
exp��i�Time
 = (
ClTimeT
)
CL_TIME_END
;

350 
�t_code
 = 
	`�Ck�Se�i�C��e
(
ck�_hdl
, &
��i�_�_��
,

351 
d�a
, 
d�a_size
);

355 if(
�t_code
 !�
CL_OK
)

357 
	`��mClockLogWr�e
(
CL_LOG_SEV_ERROR
,

359 
pid
, 
�t_code
);

363 
	`��mClockLogWr�e
(
CL_LOG_SEV_DEBUG
,

365 
pid
, 
d�a_size
, 
��i�_id_�me
);

368  
�t_code
;

369 
	}
}

389 
ClRcT


390 
	$��mClockCk�R�d
 (

391 
ClCk�HdlT
 
ck�_hdl
,

392 
ClI�32T
 
��i�_num
,

393 * 
d�a
,

394 
ClI�32T
 
d�a_size
 )

396 
ClRcT
 
�t_code
 = 
CL_OK
;

397 
ClU�t32T
 
�r�_�dex
;

398 
ClCh�T
 
��i�_id_�me
[ 
CL_MAX_NAME_LENGTH
 ];

399 
ClCk�IOVe��E�m�tT
 
io_ve��
;

404 if((
g_h�_��dby
 & 
__HOT_STANDBY_ACTIVE
))

405  
CL_ERR_NO_OP
;

407 
	`�r�tf
(
��i�_id_�me
, "s%05d", 
��i�_num
);

408 
io_ve��
.
��i�Id
.
id
 = (
ClU�t8T
*)
��i�_id_�me
;

409 
io_ve��
.
��i�Id
.
idL�
 = 
	`���
(
��i�_id_�me
);

413 
io_ve��
.
d�aBuf�r
 = 
d�a
;

414 
io_ve��
.
d�aSize
 = 
d�a_size
;

415 
io_ve��
.
d�aOff�t
 = 0;

416 
io_ve��
.
�adSize
 = 0;

418 
�t_code
 = 
	`�Ck�Checkpo�tR�d
(
ck�_hdl
, &
io_ve��
, 1, &
�r�_�dex
 );

419 i�(
�t_code
 !�
CL_OK
)

421 
	`��mClockLogWr�e
(
CL_LOG_SEV_ERROR
,

424 
	`g�pid
(), 
�r�_�dex
,

425 
��i�_id_�me
, 
�t_code
);

426  
�t_code
;

430 i��
io_ve��
.
�adSize
 !�
d�a_size
 )

432 
	`��mClockLogWr�e
(
CL_LOG_SEV_ERROR
,

434 
	`g�pid
(), (
ClI�32T
)
io_ve��
.
�adSize
, 
d�a_size
);

438 
	`��mClockLogWr�e
(
CL_LOG_SEV_DEBUG
,

440 
	`g�pid
(), 
d�a_size
, 
��i�_id_�me
);

444  
�t_code
;

445 
	}
}

447 
ClRcT
 
	$��mClockCk�A�iv�e
(
ClCk�HdlT
 
ck�Hdl
, 
ClU�t32T
 
numSe�i�s
)

449 
ClRcT
 
rc
 = 
CL_OK
;

450 
ClCk�Se�i�IdT
 
id
;

451 
ClCh�T
 
��i�_�me
[
CL_MAX_NAME_LENGTH
];

453 
	`���tf
(
��i�_�me
, (��i�_�me), "s%05d", 
numSe�i�s
);

454 
id
.
idL�
 = 
	`���
(
��i�_�me
);

455 
id
.id = (
ClU�t8T
*)
��i�_�me
;

457 
rc
 = 
	`�Ck�A�iveR�li�S�
(
ck�Hdl
);

458 if(
rc
 !�
CL_OK
)

460 
	`��mClockLogWr�e
(
CL_LOG_SEV_ERROR
, "��mClockR�li�S�:��u�ed [%#x]", 
rc
);

461  
rc
;

464 
rc
 = 
	`�Ck�Se�i�Check
(
ck�Hdl
, &
id
);

465 if(
	`CL_GET_ERROR_CODE
(
rc
�=�
CL_ERR_NOT_EXIST
)

467 
ClCk�Se�i�C��i�A�ribu�sT
 
��
;

468 
��
.
��i�Id
 = &
id
;

469 
��
.
exp��i�Time
 = (
ClTimeT
)
CL_TIME_END
;

470 
rc
 = 
	`�Ck�Se�i�C��e
(
ck�Hdl
, &
��
, 
NULL
, 0);

471 if(
rc
 =�
CL_OK
)

473 
	`��mClockLogWr�e
(
CL_LOG_SEV_INFO
, "alarmClockActivate: Section [%s] created successfully",

474 
��i�_�me
);

478 if(
rc
 !�
CL_OK
)

480 
	`��mClockLogWr�e
(
CL_LOG_SEV_INFO
, "alarmClockActivate: Section operation on [%s] "

481 "�ed w�h [%#x]", 
��i�_�me
, 
rc
);

484  
rc
;

485 
	}
}

	@alarmClockCkpt.h

1 #i�de�
ALARM_CLOCK_CKPT_H


2 
	#ALARM_CLOCK_CKPT_H


	)

5 
	~<�Ck�E��s.h
>

6 
	~<�Ck�Api.h
>

8 
ClCk�HdlT
 
��mClockCk�Hdl
;

9 
ClRcT


10 
��mClockCk�In��lize
 ();

12 
ClRcT


13 
��mClockCk�F��ize
 ();

15 
ClRcT


16 
��mClockCk�C��e
 (

17 cڡ 
ClCh�T
 *
ck�_�me
,

18 
ClI�32T
 
num_��i�s
,

19 
ClI�32T
 
��i�_size
,

20 
ClCk�HdlT
 *
ck�_hdl
,

21 
ClBo�T
 *
h�_��dby
 );

23 
ClRcT


24 
��mClockCk�Wr�e
 (

25 
ClCk�HdlT
 
ck�_hdl
,

26 
ClI�32T
 
��i�_num
,

27 * 
d�a
,

28 
ClI�32T
 
d�a_size
 );

30 
ClRcT


31 
��mClockCk�R�d
 (

32 
ClCk�HdlT
 
ck�_hdl
,

33 
ClI�32T
 
��i�_num
,

34 * 
d�a
,

35 
ClI�32T
 
d�a_size
 );

37 
ClRcT


38 
��mClockCk�A�iv�e
(
ClCk�HdlT
 
ck�Hdl
, 
ClU�t32T
 
numSe�i�s
);

	@alarmClockDef.c

5 
	~<�dio.h
>

6 
	~<�dlib.h
>

7 
	~<�Comm�.h
>

8 
	~<�Tim�Api.h
>

9 
	~<�Tim�E��s.h
>

10 
	~<�LogApi.h
>

11 
	~<�A�rmApi.h
>

13 
	~"��mClockDef.h
"

14 
	~"��mClockLog.h
"

15 
	~"��mClockCk�.h
"

18 
acClockT
 
	g��mClock
;

19 
ClTim�H�d�T
 
	gtim�H�d�
;

34 
ClRcT
 
	$��mClockAdv��
 ( )

36 
ClBo�T
 
�i�A�rm
 = 
CL_FALSE
;

37 
ClI�32T
 
pid
 = 
	`g�pid
();

41 i�(++
��mClock
.
�ockTime
.
�c�d
 >= 60)

43 
��mClock
.
�ockTime
.
�c�d
 = 0;

44 i�(++
��mClock
.
�ockTime
.
m�u�
 >= 60)

46 
��mClock
.
�ockTime
.
m�u�
 = 0;

47 i�(++
��mClock
.
�ockTime
.
hour
 >= 24)

49 
��mClock
.
�ockTime
.
hour
 = 0;

58 i�((
��mClock
.
��mS�
 =�
CL_TRUE
) &&

59 (
��mClock
.
��m
.
time
.
hour
 =�mClock.
�ockTime
.hour) &&

60 (
��mClock
.
��m
.
time
.
m�u�
 =�mClock.
�ockTime
.minute))

62 
��mClock
.
��mS�
 = 
CL_FALSE
;

63 
�i�A�rm
 = 
CL_TRUE
;

70 i�(! (
��mClock
.
�ockTime
.
�c�d
 & 1) )

72 
	`��mClockCk�Wr�e
(
��mClockCk�Hdl
, 1, &
��mClock
, (
acClockT
));

77 
	`��mClockLogWr�e
(
CL_LOG_SEV_INFO
,

79 
pid
,

80 
��mClock
.
�ockTime
.
hour
,

81 
��mClock
.
�ockTime
.
m�u�
,

82 
��mClock
.
�ockTime
.
�c�d
);

84 i�(
�i�A�rm
 =�
CL_TRUE
)

91 
	`��mClockRai�A�rm
();

94  
CL_OK
;

95 
	}
}

111 
	$��mClockC�yH�S�ndby
 ( 
acClockT
 *
backup
 )

113 i�(
��mClock
.
�ockRug
 =�
CL_TRUE
)

115 
	`��mClockLogWr�e
(
CL_LOG_SEV_CRITICAL
,

117 
	`g�pid
());

120 
	`��mClockSt�
();

125 
	`mem�y
�&
��mClock
, 
backup
, (
acClockT
));

129 
��mClock
.
�ockRug
 = 
CL_FALSE
;

130 
	}
}

148 
	$��mClockC�yAndS��
 ( 
acClockT
 *
backup
 )

152 
	`��mClockSt�
();

156 
	`mem�y
�&
��mClock
, 
backup
, (
acClockT
));

160 
��mClock
.
�ockRug
 = 
CL_FALSE
;

164 
	`��mClockS��
();

165 
	}
}

180 
ClRcT
 
	$��mClockIn��lize
 ( )

182 
ClRcT
 
rc
 = 
CL_OK
;

183 
ClTim�TimeOutT
 
timeOut
;

185 
��mClock
.
�ockTime
.
hour
 = 0;

186 
��mClock
.
�ockTime
.
m�u�
 = 0;

187 
��mClock
.
�ockTime
.
�c�d
 = 0;

189 
��mClock
.
��m
.
time
.
hour
 = 0;

190 
��mClock
.
��m
.
time
.
m�u�
 = 0;

191 
��mClock
.
��m
.
time
.
�c�d
 = 0;

192 
��mClock
.
��m
.
�a�i�
 = 
ALARM_REACTION_NONE
;

194 
��mClock
.
�ockId
 = 0;;

196 
��mClock
.
�ockRug
 = 
CL_FALSE
;

197 
��mClock
.
��mS�
 = 
CL_FALSE
;

202 
timeOut
.
tsSec
 = 1;

203 
timeOut
.
tsM�liSec
 = 0;

216 
rc
 = 
	`�Tim�C��e
(
timeOut
, 
CL_TIMER_REPETITIVE
, 
CL_TIMER_SEPARATE_CONTEXT
,

217 (
ClTim�C�lBackT
)&
��mClockAdv��
, 
NULL
, &
tim�H�d�
);

218 i�(
rc
 !�
CL_OK
)

220 
	`��mClockLogWr�e
(
CL_LOG_SEV_CRITICAL
,

222 
	`g�pid
(), 
rc
);

225 
	`��mClockLogWr�e
(
CL_LOG_DEBUG
,

227 
	`g�pid
());

229  
rc
;

230 
	}
}

244 
	$��mClockF��ize
 ( )

246 
ClRcT
 
rc
 = 
CL_OK
;

250 
	`��mClockSt�
();

252 
rc
 = 
	`�Tim�D��e
(
tim�H�d�
);

253 i�(
rc
 !�
CL_OK
)

255 
	`��mClockLogWr�e
(
CL_LOG_SEV_ERROR
,

257 
	`g�pid
(), 
rc
);

260 
rc
 = 
	`�Tim�F��ize
();

261 i�(
rc
 !�
CL_OK
)

263 
	`��mClockLogWr�e
(
CL_LOG_SEV_CRITICAL
,

265 
	`g�pid
(), 
rc
);

269 
	}
}

282 
	$��mClockG�
 ( 
acClockT
 *
�tClock
 )

284 
	`mem�y
(
�tClock
, &
��mClock
, (
acClockT
));

285 
	}
}

304 
	$��mClockS�A�rm
 ( 
ClI�32T
 
�ockId
, 
acA�rmT
 *
��m
 )

310 i�(
��m
->
�tV�ue
 =�
ALARM_SETVALUE_ON
)

312 
��mClock
.
��mS�
 = 
CL_TRUE
;

314 i�(
��m
->
�tV�ue
 =�
ALARM_SETVALUE_OFF
)

316 
��mClock
.
��mS�
 = 
CL_FALSE
;

319 
��mClock
.
��m
.
time
.
hour
 =�larm->time.hour;

320 
��mClock
.
��m
.
time
.
m�u�
 =�larm->time.minute;

322 i�(
��m
->
�a�i�
 !�
ALARM_REACTION_NONE
)

324 
��mClock
.
��m
.
�a�i�
 =�larm->reaction;

327 i��
�ockId
 != 0 )

329 
��mClock
.
�ockId
 = clockId;

331 
	}
}

348 
	$��mClockS�Time
 ( 
acTimeT
 *
�tTime
 )

352 
	`��mClockSt�
();

354 
��mClock
.
�ockTime
.
hour
 = 
�tTime
->hour;

355 
��mClock
.
�ockTime
.
m�u�
 = 
�tTime
->minute;

356 
��mClock
.
�ockTime
.
�c�d
 = 
�tTime
->second;

360 
	`��mClockS��
();

361 
	}
}

377 
	$��mClockRai�A�rm
 ( )

379 i�(
��mClock
.
��m
.
�a�i�
 =�
ALARM_REACTION_KILL
)

381 
	`��mClockLogWr�e
(
CL_LOG_SEV_NOTICE
,

382 "��mClockRai�A�rm�id=%d): k�l�g�h��ock\n", 
	`g�pid
());

387 
	`ex�
(
��mClock
.
�ockId
);

389 i�(
��mClock
.
��m
.
�a�i�
 =�
ALARM_REACTION_TRAP
)

391 
	`��mClockLogWr�e
(
CL_LOG_SEV_NOTICE
,

392 "��mClockRai�A�rm�id=%d):�ais�g����m�� su�܋d y�\n", 
	`g�pid
());

396 
	`��mClockLogWr�e
(
CL_LOG_SEV_NOTICE
,

398 
	`g�pid
());

401 
	}
}

417 
	$��mClockS��
( )

419 
ClRcT
 
rc
 = 
CL_OK
;

421 i�(
��mClock
.
�ockRug
 =�
CL_FALSE
)

423 
rc
 = 
	`�Tim�S��
(
tim�H�d�
);

424 i�(
rc
 !�
CL_OK
)

426 
	`��mClockLogWr�e
(
CL_LOG_SEV_ERROR
,

428 
	`g�pid
(), 
rc
);

432 
��mClock
.
�ockRug
 = 
CL_TRUE
;

434 
	`��mClockLogWr�e
(
CL_LOG_DEBUG
,

436 
	`g�pid
());

441 
	`��mClockLogWr�e
(
CL_LOG_DEBUG
,

443 
	`g�pid
());

445 
	}
}

460 
	$��mClockSt�
( )

462 
ClRcT
 
rc
 = 
CL_OK
;

463 i�(
��mClock
.
�ockRug
 =�
CL_TRUE
)

465 
rc
 = 
	`�Tim�St�
(
tim�H�d�
);

466 i�(
rc
 !�
CL_OK
)

468 
	`��mClockLogWr�e
(
CL_LOG_SEV_ERROR
,

470 
	`g�pid
(), 
rc
);

474 
��mClock
.
�ockRug
 = 
CL_FALSE
;

476 
	`��mClockLogWr�e
(
CL_LOG_DEBUG
,

478 
	`g�pid
());

483 
	`��mClockLogWr�e
(
CL_LOG_DEBUG
,

485 
	`g�pid
());

487 
	}
}

	@alarmClockDef.h

1 #i�de�
ALARM_CLOCK_DEF_H


2 
	#ALARM_CLOCK_DEF_H


	)

4 
	sacTime


6 
ClI�32T
 
	mhour
;

7 
ClI�32T
 
	mm�u�
;

8 
ClI�32T
 
	m�c�d
;

9 } 
	tacTimeT
;

11 
	e��mR��i�T


13 
	mALARM_REACTION_NONE
 = 0,

14 
	mALARM_REACTION_TRAP
,

15 
	mALARM_REACTION_KILL
,

16 
	mALARM_REACTION_MAX
 = 0xFF

17 } 
	t��mR��i�T
;

19 
	e��mS�V�ueT


21 
	mALARM_SETVALUE_NONE
 = 0,

22 
	mALARM_SETVALUE_ON
,

23 
	mALARM_SETVALUE_OFF
,

24 
	mALARM_SETVALUE_MAX
 = 0xFF

25 } 
	t��mS�V�ueT
;

27 
	sacA�rmT


29 
acTimeT
 
	mtime
;

30 
��mR��i�T
 
	m�a�i�
;

31 
��mS�V�ueT
 
	m�tV�ue
;

32 } 
	tacA�rmT
;

34 
	sacClock


36 
acTimeT
 
	m�ockTime
;

37 
acA�rmT
 
	m��m
;

38 
ClI�32T
 
	m�ockId
;

39 
ClBo�T
 
	m�ockRug
;

40 
ClBo�T
 
	m��mS�
;

41 } 
	tacClockT
;

43 
ClRcT
 
��mClockIn��lize
( );

45 
��mClockF��ize
( );

47 
��mClockS�A�rm
�
ClI�32T
 
�ockId
, 
acA�rmT
 *
�tA�rm
 );

49 
��mClockG�
�
acClockT
 *
g�Clock
 );

51 
��mClockC�yH�S�ndby
�
acClockT
 *
backup
 );

53 
��mClockC�yAndS��
�
acClockT
 *
backup
 );

55 
��mClockS�Time
�
acTimeT
 *
�tTime
 );

57 
��mClockRai�A�rm
( );

59 
��mClockS��
( );

61 
��mClockSt�
( );

	@alarmClockLog.h

1 #i�de�
ALARM_CLOCK_LOG_H


2 
	#ALARM_CLOCK_LOG_H


	)

4 
	~<�LogApi.h
>

6 
	#��mClockLogWr�e
(
�v��y
, ...) do { \

7 ()
	`�LogMsgWr�e
(
CL_LOG_HANDLE_APP
, \

8 
�v��y
, \

10 
CL_LOG_AREA_UNSPECIFIED
, \

11 
CL_LOG_CONTEXT_UNSPECIFIED
, \

12 
__FILE__
, 
__LINE__
, \

13 
__VA_ARGS__
) ; \

14 }0)

	)

	@clCompAppMain.c

27 
	~<as��.h
>

32 
	~<�Comm�.h
>

37 
	~<�LogApi.h
>

39 
	~<�CpmApi.h
>

40 
	~<�Amf.h
>

46 
	~"�CompA�Ma�.h
"

47 
	~"��mClockLog.h
"

48 
	~"��mClockDef.h
"

49 
	~"��mClockCk�.h
"

64 #i�
HAS_EO_SERVICES


66 
ClRcT
 
��m_�ock_EOCl��In��l
();

75 
	#���tf
(
�v��y
, ...�
	`�A�Log
(
CL_LOG_HANDLE_APP
, severity, 10, \

76 
CL_LOG_AREA_UNSPECIFIED
, 
CL_LOG_CONTEXT_UNSPECIFIED
,\

77 
__VA_ARGS__
)

	)

91 
pid_t
 
	gmypid
;

92 
SaAmfH�d�T
 
	gamfH�d�
;

94 
ClBo�T
 
	gunblockNow
 = 
CL_FALSE
;

108 
	#SA_AMF_HA_NONE
 0

	)

109 
SaAmfHAS��T
 
	g�evHaS��
 = 
SA_AMF_HA_NONE
;

113 
ClBo�T
 
	g��mClockCk�O��d
 = 
CL_FALSE
;

114 
ClCh�T
 
	g��mClockCk�Name
[
CL_MAX_NAME_LENGTH
];

115 
ClCk�HdlT
 
	g��mClockCk�Hdl
 = 0;

119 
ClBo�T
 
	g��mClockCk�H�
 = 
CL_FALSE
;

135 
	$ma�
(
�gc
, *
�gv
[])

137 
SaNameT
 
�pName
 = {0};

138 
SaAmfC�lbacksT
 
��backs
;

139 
SaV�si�T
 
v�si�
;

140 
ClIocP�tT
 
iocP�t
;

141 
ClRcT
 
rc
 = 
SA_AIS_OK
;

143 
SaS�e�i�Obje�T
 
di��ch_fd
;

144 
fd_�t
 
�ad_fds
;

162 
mypid
 = 
	`g�pid
();

171 
v�si�
.
��a�Code
 = 'B';

172 
v�si�
.
maj�V�si�
 = 01;

173 
v�si�
.
m��V�si�
 = 01;

175 
��backs
.
�AmfH��hcheckC�lback
 = 
NULL
;

176 
��backs
.
�AmfCompڒtT�m��eC�lback
 = 
�CompA�T�m��e
;

177 
��backs
.
�AmfCSIS�C�lback
 = 
�CompA�AMFCSIS�
;

178 
��backs
.
�AmfCSIRemoveC�lback
 = 
�CompA�AMFCSIRemove
;

179 
��backs
.
�AmfPr�e�i�GroupT�ckC�lback
 = 
NULL
;

185 i��(
rc
 = 
	`�AmfIn��lize
(&
amfH�d�
, &
��backs
, &
v�si�
)�!�
SA_AIS_OK
)

186 
�r�ex�
;

188 
	`FD_ZERO
(&
�ad_fds
);

193 i��(
rc
 = 
	`�AmfS�e�i�Obje�G�
(
amfH�d�
, &
di��ch_fd
)�!�
SA_AIS_OK
)

194 
�r�ex�
;

196 
	`FD_SET
(
di��ch_fd
, &
�ad_fds
);

199 #i�
HAS_EO_SERVICES


202 
rc
 = 
	`��m_�ock_EOCl��In��l
();

214 
��mClockCk�Name
[0] = 0;

215 
��mClockCk�O��d
 = 
CL_FALSE
;

217 
rc
 = 
	`��mClockCk�In��lize
();

218 i��
rc
 !�
CL_OK
 )

220 
�r�ex�
;

223 
rc
 = 
	`��mClockIn��lize
();

224 i��
rc
 !�
CL_OK
 )

226 
�r�ex�
;

238 i��(
rc
 = 
	`�AmfCompڒtNameG�
(
amfH�d�
, &
�pName
)�!�
SA_AIS_OK
)

239 
�r�ex�
;

240 i��(
rc
 = 
	`�AmfCompڒtRegi��
(
amfH�d�
, &
�pName
, 
NULL
)�!�
SA_AIS_OK
)

241 
�r�ex�
;

247 
	`�EoMyEoIocP�tG�
(&
iocP�t
);

249 
	`���tf
 (
CL_LOG_SEV_INFO
, "Compڒ�[%.*s] : PID [%d]. In��liz�g\n", 
�pName
.
�ngth
,��Name.
v�ue
, 
mypid
);

250 
	`���tf
 (
CL_LOG_SEV_INFO
, " IOC Add�s� : 0x%x\n", 
	`�IocLo�lAdd�ssG�
());

251 
	`���tf
 (
CL_LOG_SEV_INFO
, " IOC P܈ : 0x%x\n", 
iocP�t
);

268 if�
	`���
(
di��ch_fd
 + 1, &
�ad_fds
, 
NULL
, NULL, NULL) < 0)

270 
	`���tf
 (
CL_LOG_SEV_ERROR
, "Error in select()");

271 
	`���
("");

274 
	`�AmfDi��ch
(
amfH�d�
, 
SA_DISPATCH_ALL
);

275 }!
unblockNow
);

291 if((
rc
 = 
	`�AmfF��ize
(
amfH�d�
)�!�
SA_AIS_OK
)

293 
	`���tf
 (
CL_LOG_SEV_ERROR
, "AMF f��iz�iڃ��[0x%X]", 
rc
);

296 
	`���tf
 (
CL_LOG_SEV_INFO
, "AMF Finalized");

300 
�r�ex�
:

302 
	`���tf
 (
CL_LOG_SEV_ERROR
, "Component [%.*s] : PID [%d]. Initialization�rror [0x%x]\n",

303 
�pName
.
�ngth
,��Name.
v�ue
, 
mypid
, 
rc
);

306 
	}
}

315 
	$�CompA�T�m��e
(
SaInvo�ti�T
 
�vo�ti�
, cڡ 
SaNameT
 *
compName
)

317 
SaAisE��T
 
rc
 = 
SA_AIS_OK
;

319 
	`���tf
 (
CL_LOG_SEV_INFO
, "Component [%.*s] : PID [%d]. Terminating\n",

320 
compName
->
�ngth
, compName->
v�ue
, 
mypid
);

326 
	`��mClockF��ize
();

328 
	`��mClockCk�F��ize
();

339 i��(
rc
 = 
	`�AmfCompڒtU�egi��
(
amfH�d�
, 
compName
, 
NULL
)�!�
SA_AIS_OK
)

340 
�r�ex�
;

342 
	`�AmfRe�ڣ
(
amfH�d�
, 
�vo�ti�
, 
SA_AIS_OK
);

344 
	`���tf
 (
CL_LOG_SEV_INFO
, "Component [%.*s] : PID [%d]. Terminated\n",

345 
compName
->
�ngth
, compName->
v�ue
, 
mypid
);

347 
unblockNow
 = 
CL_TRUE
;

351 
�r�ex�
:

353 
	`���tf
 (
CL_LOG_SEV_ERROR
, "Component [%.*s] : PID [%d]. Termination�rror [0x%x]\n",

354 
compName
->
�ngth
, compName->
v�ue
, 
mypid
, 
rc
);

357 
	}
}

368 
ClRcT
 
	$�CompA�S��Ch�ge
(
ClEoS��T
 
eoS��
)

370 
eoS��
)

372 
CL_EO_STATE_SUSPEND
:

387 
CL_EO_STATE_RESUME
:

408  
CL_OK
;

409 
	}
}

418 
ClRcT
 
	$�CompA�H��hCheck
(
ClEoSchedF�dBackT
* 
schF�dback
)

430 
schF�dback
->
�eq
 = 
CL_EO_DEFAULT_POLL
;

431 
schF�dback
->
��us
 = 
CL_CPM_EO_ALIVE
;

437  
CL_OK
;

438 
	}
}

451 
	$�CompA�AMFCSIS�
(
SaInvo�ti�T
 
�vo�ti�
,

452 cڡ 
SaNameT
 *
compName
,

453 
SaAmfHAS��T
 
haS��
,

454 
SaAmfCSIDes�t�T
 
csiDes�t�
)

470 
	`���tf
 (
CL_LOG_SEV_INFO
, "Component [%.*s] : PID [%d]. CSI Set Received\n",

471 
compName
->
�ngth
, compName->
v�ue
, 
mypid
);

473 
	`�CompA�AMFPr�tCSI
(
csiDes�t�
, 
haS��
);

479 
ClRcT
 
rc
 = 
CL_OK
;

484 i�(
��mClockCk�O��d
 !�
CL_TRUE
)

486 
	`�r�y
(
��mClockCk�Name
, (*)
csiDes�t�
.
csiName
.
v�ue
);

493 
��mClockCk�H�
 = 
CL_TRUE
;

495 
rc
 = 
	`��mClockCk�C��e
(
��mClockCk�Name
, 1, (
acClockT
),

496 &
��mClockCk�Hdl
, &
��mClockCk�H�
);

497 i�(
rc
 !�
CL_OK
)

499 
��mClockCk�Hdl
 = 0;

503 
��mClockCk�O��d
 = 
CL_TRUE
;

515  
haS��
 )

517 
SA_AMF_HA_ACTIVE
:

531 
rc
 = 
	`��mClockCk�A�iv�e
(
��mClockCk�Hdl
, 1);

532 i�(
rc
 !�
CL_OK
)

534 
	`��mClockLogWr�e
(
CL_LOG_SEV_ERROR
,

535 "��mClockCk�: Fa�ed��a�iv��ck�: 0x%x\n", 
rc
);

540 i�(
rc
 !�
CL_OK
)

542 
acClockT
 
��mClock
;

544 
rc
 = 
	`��mClockCk�R�d
 ( 
��mClockCk�Hdl
, 1,

545 &
��mClock
, (
acClockT
));

546 i�(
rc
 =�
CL_OK
)

548 
	`��mClockLogWr�e
(
CL_LOG_SEV_INFO
, "Time�ecovered successfully");

549 
	`��mClockC�yAndS��
�&
��mClock
);

553 
	`��mClockLogWr�e
(
CL_LOG_SEV_INFO
, "Time�ot�ecovered");

554 
	`��mClockS��
();

562 
	`��mClockS��
();

565 
�evHaS��
 = 
haS��
;

571 
	`�AmfRe�ڣ
(
amfH�d�
, 
�vo�ti�
, 
SA_AIS_OK
);

575 
SA_AMF_HA_STANDBY
:

586 
	`��mClockSt�
();

587 
�evHaS��
 = 
haS��
;

593 
	`�AmfRe�ڣ
(
amfH�d�
, 
�vo�ti�
, 
SA_AIS_OK
);

597 
SA_AMF_HA_QUIESCED
:

609 
	`��mClockSt�
();

610 
�evHaS��
 = 
haS��
;

616 
	`�AmfRe�ڣ
(
amfH�d�
, 
�vo�ti�
, 
SA_AIS_OK
);

620 
SA_AMF_HA_QUIESCING
:

639 
	`�AmfCSIQu�sc�gCom��e
(
amfH�d�
, 
�vo�ti�
, 
SA_AIS_OK
);

645 
	`as��
(0);

651 
	}
}

659 
	$�CompA�AMFCSIRemove
(
SaInvo�ti�T
 
�vo�ti�
,

660 cڡ 
SaNameT
 *
compName
,

661 cڡ 
SaNameT
 *
csiName
,

662 
SaAmfCSIF�gsT
 
csiF�gs
)

664 
	`���tf
 (
CL_LOG_SEV_INFO
, "Component [%.*s] : PID [%d]. CSI Remove Received\n",

665 
compName
->
�ngth
, compName->
v�ue
, 
mypid
);

667 
	`���tf
 (
CL_LOG_SEV_INFO
, " CSI : %.*s\n", 
csiName
->
�ngth
, csiName->
v�ue
);

668 
	`���tf
 (
CL_LOG_SEV_INFO
, " CSI F�g� : 0x%d\n", 
csiF�gs
);

684 
	`�AmfRe�ڣ
(
amfH�d�
, 
�vo�ti�
, 
SA_AIS_OK
);

687 
	}
}

699 
	$�CompA�AMFPr�tCSI
(
SaAmfCSIDes�t�T
 
csiDes�t�
,

700 
SaAmfHAS��T
 
haS��
)

702 
	`���tf
 (
CL_LOG_SEV_INFO
,

704 
	`STRING_CSI_FLAGS
(
csiDes�t�
.
csiF�gs
));

706 i�(
SA_AMF_CSI_TARGET_ALL
 !�
csiDes�t�
.
csiF�gs
)

708 
	`���tf
 (
CL_LOG_SEV_INFO
, "CSI Name : [%s]",

709 
csiDes�t�
.
csiName
.
v�ue
);

712 i�(
SA_AMF_CSI_ADD_ONE
 =�
csiDes�t�
.
csiF�gs
)

714 
ClU�t32T
 
i
 = 0;

716 
	`���tf
 (
CL_LOG_SEV_INFO
, "Name value�airs :");

717 
i
 = 0; i < 
csiDes�t�
.
csiA�r
.
numb�
; i++)

719 
	`���tf
 (
CL_LOG_SEV_INFO
, "Name : [%s]",

720 
csiDes�t�
.
csiA�r
.

721 
��
[
i
].
��Name
);

722 
	`���tf
 (
CL_LOG_SEV_INFO
, "Value : [%s]",

723 
csiDes�t�
.
csiA�r
.

724 
��
[
i
].
��V�ue
);

728 
	`���tf
 (
CL_LOG_SEV_INFO
, "HA state : [%s]",

729 
	`STRING_HA_STATE
(
haS��
));

731 i�(
SA_AMF_HA_ACTIVE
 =�
haS��
)

733 
	`���tf
 (
CL_LOG_SEV_INFO
, "Active Descriptor :");

734 
	`���tf
 (
CL_LOG_SEV_INFO
,

736 
csiDes�t�
.
csiS��Des�t�
.

737 
a�iveDes�t�
.
��s�i�Des�t�
);

738 
	`���tf
 (
CL_LOG_SEV_INFO
,

740 
csiDes�t�
.
csiS��Des�t�
.

741 
a�iveDes�t�
.
a�iveCompName
.
v�ue
);

743 i�(
SA_AMF_HA_STANDBY
 =�
haS��
)

745 
	`���tf
 (
CL_LOG_SEV_INFO
, "Standby Descriptor :");

746 
	`���tf
 (
CL_LOG_SEV_INFO
,

748 
csiDes�t�
.
csiS��Des�t�
.

749 
��dbyDes�t�
.
��dbyR�k
);

750 
	`���tf
 (
CL_LOG_SEV_INFO
, "Active Component : [%s]",

751 
csiDes�t�
.
csiS��Des�t�
.

752 
��dbyDes�t�
.
a�iveCompName
.
v�ue
);

754 
	}
}

	@clCompAppMain.h

23 #i�de�
CL_COMP_APP_MAIN


24 
	#CL_COMP_APP_MAIN


	)

26 #ifde�
__�lu�lus


33 
	~"�CompCfg.h
"

45 #i�de�
COMP_NAME


53 
	#STRING_HA_STATE
(
S
) \

54 �((
S
�=�
SA_AMF_HA_ACTIVE
) ? "Active" : \

55 ((
S
�=�
SA_AMF_HA_STANDBY
) ? "Standby" : \

56 ((
S
�=�
SA_AMF_HA_QUIESCED
) ? "Quiesced" : \

57 ((
S
�=�
SA_AMF_HA_QUIESCING
) ? "Quiescing" : \

58 "Unknown" )

	)

60 
	#STRING_CSI_FLAGS
(
S
) \

61 �((
S
�& 
SA_AMF_CSI_ADD_ONE
) ? "Add One" : \

62 ((
S
�& 
SA_AMF_CSI_TARGET_ONE
) ? "Target One" : \

63 ((
S
�& 
SA_AMF_CSI_TARGET_ALL
) ? "Target All" : \

64 "Unknown" )

	)

70 
ClRcT
 
�CompA�In��lize
(
ClU�t32T
 
�gc
, 
ClCh�T
 *
�gv
[]);

72 
ClRcT
 
�CompA�F��ize
();

74 
ClRcT
 
�CompA�S��Ch�ge
(
ClEoS��T
 
eoS��
);

76 
ClRcT
 
�CompA�H��hCheck
(
ClEoSchedF�dBackT
 *
schF�dback
);

78 
�CompA�T�m��e
(
SaInvo�ti�T
 
�vo�ti�
, cڡ 
SaNameT
 *
compName
);

84 
�CompA�AMFCSIS�
(
SaInvo�ti�T
 
�vo�ti�
,

85 cڡ 
SaNameT
 *
compName
,

86 
SaAmfHAS��T
 
haS��
,

87 
SaAmfCSIDes�t�T
 
csiDes�t�
);

89 
�CompA�AMFCSIRemove
(
SaInvo�ti�T
 
�vo�ti�
,

90 cڡ 
SaNameT
 *
compName
,

91 cڡ 
SaNameT
 *
csiName
,

92 
SaAmfCSIF�gsT
 
csiF�gs
);

98 
�CompA�AMFPr�tCSI
(
SaAmfCSIDes�t�T
 
csiDes�t�
,

99 
SaAmfHAS��T
 
haS��
);

111 #ifde�
__�lu�lus


	@clCompCfg.c

17 
	~<�EoApi.h
>

18 
	~<�CompCfg.h
>

25 
ClEoC�figT
 
	g�EoC�fig
 =

27 
COMP_EO_NAME
,

28 
COMP_EO_THREAD_PRIORITY
,

29 
COMP_EO_NUM_THREAD
,

30 
COMP_IOC_PORT
,

31 
COMP_EO_USER_CLIENT_ID
,

32 
COMP_EO_USE_THREAD_MODEL
,

33 
NULL
,

34 
NULL
,

35 
NULL
,

36 
NULL
,

37 
NULL
,

38 
CL_FALSE
,

47 
ClU�t8T
 
	g�EoBasicLibs
[] =

49 
COMP_EO_BASICLIB_OSAL
,

50 
COMP_EO_BASICLIB_TIMER
,

51 
COMP_EO_BASICLIB_BUFFER
,

52 
COMP_EO_BASICLIB_IOC
,

53 
COMP_EO_BASICLIB_RMD
,

54 
COMP_EO_BASICLIB_EO
,

55 
COMP_EO_BASICLIB_OM
,

56 
COMP_EO_BASICLIB_HAL
,

57 
COMP_EO_BASICLIB_DBAL
,

65 
ClU�t8T
 
	g�EoCl��Libs
[] =

67 
COMP_EO_CLIENTLIB_COR
,

68 
COMP_EO_CLIENTLIB_CM
,

69 
COMP_EO_CLIENTLIB_NAME
,

70 
COMP_EO_CLIENTLIB_LOG
,

71 
COMP_EO_CLIENTLIB_TRACE
,

72 
COMP_EO_CLIENTLIB_DIAG
,

73 
COMP_EO_CLIENTLIB_TXN
,

74 
COMP_EO_CLIENTLIB_MSO
,

75 
COMP_EO_CLIENTLIB_PROV
,

76 
COMP_EO_CLIENTLIB_ALARM
,

77 
COMP_EO_CLIENTLIB_DEBUG
,

78 
COMP_EO_CLIENTLIB_GMS
,

79 
COMP_EO_CLIENTLIB_PM


	@clCompCfg.h

10 #i�de�
CL_COMP_CFG


11 
	#CL_COMP_CFG


	)

13 #ifde�
__�lu�lus


17 
	~<�Comm�.h
>

18 
	~<�EoApi.h
>

20 
	#COMP_NAME
 "Te�Comp"

	)

21 
	#COMP_EO_NAME
 "Te�Comp_EO"

	)

23 
	#HAS_EO_SERVICES
 0

	)

25 
	#COMP_EO_THREAD_PRIORITY
 
CL_OSAL_THREAD_PRI_MEDIUM


	)

26 
	#COMP_EO_NUM_THREAD
 2

	)

27 
	#COMP_IOC_PORT
 0

	)

28 
	#COMP_EO_USER_CLIENT_ID
 (
CL_EO_USER_CLIENT_ID_START
 + 0)

	)

29 
	#COMP_EO_USE_THREAD_MODEL
 
CL_EO_USE_THREAD_FOR_RECV


	)

32 
	#COMP_EO_BASICLIB_OSAL
 
CL_TRUE


	)

33 
	#COMP_EO_BASICLIB_TIMER
 
CL_TRUE


	)

34 
	#COMP_EO_BASICLIB_BUFFER
 
CL_TRUE


	)

35 
	#COMP_EO_BASICLIB_IOC
 
CL_TRUE


	)

36 
	#COMP_EO_BASICLIB_RMD
 
CL_TRUE


	)

37 
	#COMP_EO_BASICLIB_EO
 
CL_TRUE


	)

38 
	#COMP_EO_BASICLIB_OM
 
CL_FALSE


	)

39 
	#COMP_EO_BASICLIB_HAL
 
CL_FALSE


	)

40 
	#COMP_EO_BASICLIB_DBAL
 
CL_FALSE


	)

44 
	#COMP_EO_CLIENTLIB_COR
 
CL_TRUE


	)

45 
	#COMP_EO_CLIENTLIB_CM
 
CL_FALSE


	)

46 
	#COMP_EO_CLIENTLIB_NAME
 
CL_TRUE


	)

47 
	#COMP_EO_CLIENTLIB_LOG
 
CL_TRUE


	)

48 
	#COMP_EO_CLIENTLIB_TRACE
 
CL_FALSE


	)

49 
	#COMP_EO_CLIENTLIB_DIAG
 
CL_FALSE


	)

50 
	#COMP_EO_CLIENTLIB_TXN
 
CL_TRUE


	)

51 
	#COMP_EO_CLIENTLIB_MSO
 
CL_FALSE


	)

52 
	#COMP_EO_CLIENTLIB_PROV
 
CL_FALSE


	)

53 
	#COMP_EO_CLIENTLIB_ALARM
 
CL_FALSE


	)

54 
	#COMP_EO_CLIENTLIB_DEBUG
 
CL_TRUE


	)

55 
	#COMP_EO_CLIENTLIB_GMS
 
CL_FALSE


	)

56 
	#COMP_EO_CLIENTLIB_PM
 
CL_FALSE


	)

58 #ifde�
__�lu�lus


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde�
_ASSERT_H


27 #unde�
as��


28 #unde�
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde�
as��_���


36 
	#_ASSERT_H
 1

	)

37 
	~<�u�s.h
>

39 #i�
def�ed
 
__�lu�lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
��ic_��
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as��
(
ex�
�(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as��_���
(
��um
�(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i�de�
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as��_�
 (
__cڡ
 *
__as��i�
, __cڡ *
__f�e
,

72 
__l�e
, 
__cڡ
 *
__fun�i�
)

73 
__THROW
 
	`__��ibu�__
 ((
__nܑu�__
));

76 
	$__as��_���_�
 (
__��um
, 
__cڡ
 *
__f�e
,

77 
__l�e
,

78 
__cڡ
 *
__fun�i�
)

79 
__THROW
 
	`__��ibu�__
 ((
__nܑu�__
));

84 
	$__as��
 (cڡ *
__as��i�
, cڡ *
__f�e
, 
__l�e
)

85 
__THROW
 
	`__��ibu�__
 ((
__nܑu�__
));

88 
__END_DECLS


91 
	#as��
(
ex�
) \

92 ((
ex�
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as��_�
 (
	`__STRING
(
ex�
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as��_���
(
��um
) \

98 (!(
��um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as��_���_�
 ((
��um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i�
def�ed
 
__�lu�lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i�
def�ed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__cڡ
 *�0)

	)

	@/usr/include/stdio.h

24 #i�de�
_STDIO_H


26 #i�!
def�ed
 
__�ed_FILE
 && !def�ed 
__�ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<�u�s.h
>

30 
	g__BEGIN_DECLS


32 
	#__�ed_size_t


	)

33 
	#__�ed_NULL


	)

34 
	~<�ddef.h
>

36 
	~<b�s/ty�s.h
>

37 
	#__�ed_FILE


	)

38 
	#__�ed___FILE


	)

42 #i�!
def�ed
 
__FILE_def�ed
 && def�ed 
__�ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i�
def�ed
 
__USE_LARGEFILE64
 || def�ed 
__USE_SVID
 || def�ed 
__USE_POSIX
 \

52 || 
def�ed
 
	g__USE_BSD
 || def�ed 
	g__USE_ISOC99
 || def�ed 
	g__USE_XOPEN
 \

53 || 
def�ed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_def�ed
 1

	)

59 #unde�
__�ed_FILE


62 #i�!
def�ed
 
____FILE_def�ed
 && def�ed 
__�ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_def�ed
 1

	)

69 #unde�
__�ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i�
def�ed
 
__USE_XOPEN
 || def�ed 
__USE_XOPEN2K8


78 #ifde�
__GNUC__


79 #i�de�
_VA_LIST_DEFINED


80 
_G_va_li�
 
	tva_li�
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<�d�g.h
>

88 #ifde�
__USE_XOPEN2K8


89 #i�de�
__off_t_def�ed


90 #i�de�
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_def�ed


	)

97 #i�
def�ed
 
__USE_LARGEFILE64
 && !def�ed 
__off64_t_def�ed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_def�ed


	)

102 #i�de�
__ssize_t_def�ed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_def�ed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i�de�
__USE_FILE_OFFSET64


111 
_G_�os_t
 
	t�os_t
;

113 
_G_�os64_t
 
	t�os_t
;

115 
__END_NAMESPACE_STD


116 #ifde�
__USE_LARGEFILE64


117 
_G_�os64_t
 
	t�os64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i�de�
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i�de�
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_XOPEN


148 
	#P_tmpd�
 "/tmp"

	)

161 
	~<b�s/�dio_lim.h
>

165 
_IO_FILE
 *
�d�
;

166 
_IO_FILE
 *
�dout
;

167 
_IO_FILE
 *
�d�r
;

169 
	#�d�
 
�d�


	)

170 
	#�dout
 
�dout


	)

171 
	#�d�r
 
�d�r


	)

173 
__BEGIN_NAMESPACE_STD


175 
	$�move
 (
__cڡ
 *
__f��ame
�
__THROW
;

177 
	$��me
 (
__cڡ
 *
__�d
, __cڡ *
__�w
�
__THROW
;

178 
__END_NAMESPACE_STD


180 #ifde�
__USE_ATFILE


182 
	$��m�t
 (
__�dfd
, 
__cڡ
 *
__�d
, 
__�wfd
,

183 
__cڡ
 *
__�w
�
__THROW
;

186 
__BEGIN_NAMESPACE_STD


191 #i�de�
__USE_FILE_OFFSET64


192 
FILE
 *
	$tmpf�e
 (�
__wur
;

194 #ifde�
__REDIRECT


195 
FILE
 *
	`__REDIRECT
 (
tmpf�e
, (), 
tmpf�e64
�
__wur
;

197 
	#tmpf�e
 
tmpf�e64


	)

201 #ifde�
__USE_LARGEFILE64


202 
FILE
 *
	$tmpf�e64
 (�
__wur
;

206 *
	$tm�am
 (*
__s
�
__THROW
 
__wur
;

207 
__END_NAMESPACE_STD


209 #ifde�
__USE_MISC


212 *
	$tm�am_r
 (*
__s
�
__THROW
 
__wur
;

216 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_XOPEN


224 *
	$�m�am
 (
__cڡ
 *
__d�
, __cڡ *
__pfx
)

225 
__THROW
 
__��ibu�_m�loc__
 
__wur
;

229 
__BEGIN_NAMESPACE_STD


234 
	`f�o�
 (
FILE
 *
__��am
);

239 
	`f�ush
 (
FILE
 *
__��am
);

240 
__END_NAMESPACE_STD


242 #ifde�
__USE_MISC


249 
	`f�ush_u�ocked
 (
FILE
 *
__��am
);

252 #ifde�
__USE_GNU


259 
	`f�o��l
 ();

263 
__BEGIN_NAMESPACE_STD


264 #i�de�
__USE_FILE_OFFSET64


269 
FILE
 *
	$fݒ
 (
__cڡ
 *
__��ri�
 
__f��ame
,

270 
__cڡ
 *
__��ri�
 
__modes
�
__wur
;

275 
FILE
 *
	$�eݒ
 (
__cڡ
 *
__��ri�
 
__f��ame
,

276 
__cڡ
 *
__��ri�
 
__modes
,

277 
FILE
 *
__��ri�
 
__��am
�
__wur
;

279 #ifde�
__REDIRECT


280 
FILE
 *
	`__REDIRECT
 (
fݒ
, (
__cڡ
 *
__��ri�
 
__f��ame
,

281 
__cڡ
 *
__��ri�
 
__modes
), 
fݒ64
)

282 
__wur
;

283 
FILE
 *
	`__REDIRECT
 (
�eݒ
, (
__cڡ
 *
__��ri�
 
__f��ame
,

284 
__cڡ
 *
__��ri�
 
__modes
,

285 
FILE
 *
__��ri�
 
__��am
), 
�eݒ64
)

286 
__wur
;

288 
	#fݒ
 
fݒ64


	)

289 
	#�eݒ
 
�eݒ64


	)

292 
__END_NAMESPACE_STD


293 #ifde�
__USE_LARGEFILE64


294 
FILE
 *
	$fݒ64
 (
__cڡ
 *
__��ri�
 
__f��ame
,

295 
__cڡ
 *
__��ri�
 
__modes
�
__wur
;

296 
FILE
 *
	$�eݒ64
 (
__cڡ
 *
__��ri�
 
__f��ame
,

297 
__cڡ
 *
__��ri�
 
__modes
,

298 
FILE
 *
__��ri�
 
__��am
�
__wur
;

301 #ifdef 
__USE_POSIX


303 
FILE
 *
	$fdݒ
 (
__fd
, 
__cڡ
 *
__modes
�
__THROW
 
__wur
;

306 #ifdef 
__USE_GNU


309 
FILE
 *
	$fݒcook�
 (*
__��ri�
 
__magic_cook�
,

310 
__cڡ
 *
__��ri�
 
__modes
,

311 
_IO_cook�_io_fun�i�s_t
 
__io_funcs
�
__THROW
 
__wur
;

314 #ifde�
__USE_XOPEN2K8


316 
FILE
 *
	$fmemݒ
 (*
__s
, 
size_t
 
__�n
, 
__cڡ
 *
__modes
)

317 
__THROW
 
__wur
;

322 
FILE
 *
	$ݒ_mem��am
 (**
__bu�oc
, 
size_t
 *
__siz�oc
�
__THROW
 
__wur
;

326 
__BEGIN_NAMESPACE_STD


329 
	$�tbuf
 (
FILE
 *
__��ri�
 
__��am
, *__��ri� 
__buf
�
__THROW
;

333 
	$�tvbuf
 (
FILE
 *
__��ri�
 
__��am
, *__��ri� 
__buf
,

334 
__modes
, 
size_t
 
__n
�
__THROW
;

335 
__END_NAMESPACE_STD


337 #ifdef 
__USE_BSD


340 
	$�tbuf�r
 (
FILE
 *
__��ri�
 
__��am
, *__��ri� 
__buf
,

341 
size_t
 
__size
�
__THROW
;

344 
	$���ebuf
 (
FILE
 *
__��am
�
__THROW
;

348 
__BEGIN_NAMESPACE_STD


353 
	`�r�tf
 (
FILE
 *
__��ri�
 
__��am
,

354 
__cڡ
 *
__��ri�
 
__f�m�
, ...);

359 
	`��tf
 (
__cڡ
 *
__��ri�
 
__f�m�
, ...);

361 
	$�r�tf
 (*
__��ri�
 
__s
,

362 
__cڡ
 *
__��ri�
 
__f�m�
, ...�
__THROW
;

368 
	`v�r�tf
 (
FILE
 *
__��ri�
 
__s
, 
__cڡ
 *__��ri� 
__f�m�
,

369 
_G_va_li�
 
__�g
);

374 
	`v��tf
 (
__cڡ
 *
__��ri�
 
__f�m�
, 
_G_va_li�
 
__�g
);

376 
	$v�r�tf
 (*
__��ri�
 
__s
, 
__cڡ
 *__��ri� 
__f�m�
,

377 
_G_va_li�
 
__�g
�
__THROW
;

378 
__END_NAMESPACE_STD


380 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_ISOC99
 || def�ed 
__USE_UNIX98


381 
__BEGIN_NAMESPACE_C99


383 
	$���tf
 (*
__��ri�
 
__s
, 
size_t
 
__max�n
,

384 
__cڡ
 *
__��ri�
 
__f�m�
, ...)

385 
__THROW
 
	`__��ibu�__
 ((
	`__f�m�__
 (
__��tf__
, 3, 4)));

387 
	$v���tf
 (*
__��ri�
 
__s
, 
size_t
 
__max�n
,

388 
__cڡ
 *
__��ri�
 
__f�m�
, 
_G_va_li�
 
__�g
)

389 
__THROW
 
	`__��ibu�__
 ((
	`__f�m�__
 (
__��tf__
, 3, 0)));

390 
__END_NAMESPACE_C99


393 #ifde�
__USE_GNU


396 
	$va�r�tf
 (**
__��ri�
 
__�r
, 
__cڡ
 *__��ri� 
__f
,

397 
_G_va_li�
 
__�g
)

398 
__THROW
 
	`__��ibu�__
 ((
	$__f�m�__
 (
__��tf__
, 2, 0))�
__wur
;

399 
	$__a�r�tf
 (**
__��ri�
 
__�r
,

400 
__cڡ
 *
__��ri�
 
__fmt
, ...)

401 
__THROW
 
	`__��ibu�__
 ((
	$__f�m�__
 (
__��tf__
, 2, 3))�
__wur
;

402 
	$a�r�tf
 (**
__��ri�
 
__�r
,

403 
__cڡ
 *
__��ri�
 
__fmt
, ...)

404 
__THROW
 
	`__��ibu�__
 ((
	$__f�m�__
 (
__��tf__
, 2, 3))�
__wur
;

407 #ifde�
__USE_XOPEN2K8


414 
	$vd��tf
 (
__fd
, 
__cڡ
 *
__��ri�
 
__fmt
,

415 
_G_va_li�
 
__�g
)

416 
	`__��ibu�__
 ((
	`__f�m�__
 (
__��tf__
, 2, 0)));

417 
	$d��tf
 (
__fd
, 
__cڡ
 *
__��ri�
 
__fmt
, ...)

418 
	`__��ibu�__
 ((
	`__f�m�__
 (
__��tf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fs�nf
 (
FILE
 *
__��ri�
 
__��am
,

428 
__cڡ
 *
__��ri�
 
__f�m�
, ...�
__wur
;

433 
	$s�nf
 (
__cڡ
 *
__��ri�
 
__f�m�
, ...�
__wur
;

435 
	$ss�nf
 (
__cڡ
 *
__��ri�
 
__s
,

436 
__cڡ
 *
__��ri�
 
__f�m�
, ...�
__THROW
;

438 #i�
def�ed
 
__USE_ISOC99
 && !def�ed 
__USE_GNU
 \

439 && (!
def�ed
 
__LDBL_COMPAT
 || !def�ed 
__REDIRECT
) \

440 && (
def�ed
 
__STRICT_ANSI__
 || def�ed 
__USE_XOPEN2K
)

441 #ifde�
__REDIRECT


445 
	`__REDIRECT
 (
fs�nf
, (
FILE
 *
__��ri�
 
__��am
,

446 
__cڡ
 *
__��ri�
 
__f�m�
, ...),

447 
__isoc99_fs�nf
�
__wur
;

448 
	`__REDIRECT
 (
s�nf
, (
__cڡ
 *
__��ri�
 
__f�m�
, ...),

449 
__isoc99_s�nf
�
__wur
;

450 
	`__REDIRECT_NTH
 (
ss�nf
, (
__cڡ
 *
__��ri�
 
__s
,

451 
__cڡ
 *
__��ri�
 
__f�m�
, ...),

452 
__isoc99_ss�nf
);

454 
	$__isoc99_fs�nf
 (
FILE
 *
__��ri�
 
__��am
,

455 
__cڡ
 *
__��ri�
 
__f�m�
, ...�
__wur
;

456 
	$__isoc99_s�nf
 (
__cڡ
 *
__��ri�
 
__f�m�
, ...�
__wur
;

457 
	$__isoc99_ss�nf
 (
__cڡ
 *
__��ri�
 
__s
,

458 
__cڡ
 *
__��ri�
 
__f�m�
, ...�
__THROW
;

459 
	#fs�nf
 
__isoc99_fs�nf


	)

460 
	#s�nf
 
__isoc99_s�nf


	)

461 
	#ss�nf
 
__isoc99_ss�nf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfs�nf
 (
FILE
 *
__��ri�
 
__s
, 
__cڡ
 *__��ri� 
__f�m�
,

474 
_G_va_li�
 
__�g
)

475 
	`__��ibu�__
 ((
	$__f�m�__
 (
__s�nf__
, 2, 0))�
__wur
;

481 
	$vs�nf
 (
__cڡ
 *
__��ri�
 
__f�m�
, 
_G_va_li�
 
__�g
)

482 
	`__��ibu�__
 ((
	$__f�m�__
 (
__s�nf__
, 1, 0))�
__wur
;

485 
	$vss�nf
 (
__cڡ
 *
__��ri�
 
__s
,

486 
__cڡ
 *
__��ri�
 
__f�m�
, 
_G_va_li�
 
__�g
)

487 
__THROW
 
	`__��ibu�__
 ((
	`__f�m�__
 (
__s�nf__
, 2, 0)));

489 #i�!
def�ed
 
__USE_GNU
 \

490 && (!
def�ed
 
__LDBL_COMPAT
 || !def�ed 
__REDIRECT
) \

491 && (
def�ed
 
__STRICT_ANSI__
 || def�ed 
__USE_XOPEN2K
)

492 #ifde�
__REDIRECT


496 
	`__REDIRECT
 (
vfs�nf
,

497 (
FILE
 *
__��ri�
 
__s
,

498 
__cڡ
 *
__��ri�
 
__f�m�
, 
_G_va_li�
 
__�g
),

499 
__isoc99_vfs�nf
)

500 
	`__��ibu�__
 ((
	$__f�m�__
 (
__s�nf__
, 2, 0))�
__wur
;

501 
	`__REDIRECT
 (
vs�nf
, (
__cڡ
 *
__��ri�
 
__f�m�
,

502 
_G_va_li�
 
__�g
), 
__isoc99_vs�nf
)

503 
	`__��ibu�__
 ((
	$__f�m�__
 (
__s�nf__
, 1, 0))�
__wur
;

504 
	`__REDIRECT_NTH
 (
vss�nf
,

505 (
__cڡ
 *
__��ri�
 
__s
,

506 
__cڡ
 *
__��ri�
 
__f�m�
,

507 
_G_va_li�
 
__�g
), 
__isoc99_vss�nf
)

508 
	`__��ibu�__
 ((
	`__f�m�__
 (
__s�nf__
, 2, 0)));

510 
	$__isoc99_vfs�nf
 (
FILE
 *
__��ri�
 
__s
,

511 
__cڡ
 *
__��ri�
 
__f�m�
,

512 
_G_va_li�
 
__�g
�
__wur
;

513 
	$__isoc99_vs�nf
 (
__cڡ
 *
__��ri�
 
__f�m�
,

514 
_G_va_li�
 
__�g
�
__wur
;

515 
	$__isoc99_vss�nf
 (
__cڡ
 *
__��ri�
 
__s
,

516 
__cڡ
 *
__��ri�
 
__f�m�
,

517 
_G_va_li�
 
__�g
�
__THROW
;

518 
	#vfs�nf
 
__isoc99_vfs�nf


	)

519 
	#vs�nf
 
__isoc99_vs�nf


	)

520 
	#vss�nf
 
__isoc99_vss�nf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fg�c
 (
FILE
 *
__��am
);

534 
	`g�c
 (
FILE
 *
__��am
);

540 
	`g�ch�
 ();

541 
__END_NAMESPACE_STD


545 
	#g�c
(
_�
�
	`_IO_g�c
 (_�)

	)

547 #i�
def�ed
 
__USE_POSIX
 || def�ed 
__USE_MISC


552 
	`g�c_u�ocked
 (
FILE
 *
__��am
);

553 
	`g�ch�_u�ocked
 ();

556 #ifde�
__USE_MISC


563 
	`fg�c_u�ocked
 (
FILE
 *
__��am
);

567 
__BEGIN_NAMESPACE_STD


575 
	`�utc
 (
__c
, 
FILE
 *
__��am
);

576 
	`putc
 (
__c
, 
FILE
 *
__��am
);

582 
	`putch�
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_�
�
	`_IO_putc
 (_ch, _�)

	)

589 #ifde�
__USE_MISC


596 
	`�utc_u�ocked
 (
__c
, 
FILE
 *
__��am
);

599 #i�
def�ed
 
__USE_POSIX
 || def�ed 
__USE_MISC


604 
	`putc_u�ocked
 (
__c
, 
FILE
 *
__��am
);

605 
	`putch�_u�ocked
 (
__c
);

609 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_MISC
 \

610 || (
def�ed
 
__USE_XOPEN
 && !def�ed 
__USE_XOPEN2K
)

612 
	`g�w
 (
FILE
 *
__��am
);

615 
	`putw
 (
__w
, 
FILE
 *
__��am
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fg�s
 (*
__��ri�
 
__s
, 
__n
, 
FILE
 *__��ri� 
__��am
)

625 
__wur
;

632 *
	$g�s
 (*
__s
�
__wur
;

633 
__END_NAMESPACE_STD


635 #ifde�
__USE_GNU


642 *
	$fg�s_u�ocked
 (*
__��ri�
 
__s
, 
__n
,

643 
FILE
 *
__��ri�
 
__��am
�
__wur
;

647 #ifdef 
__USE_XOPEN2K8


658 
_IO_ssize_t
 
	$__g�d�im
 (**
__��ri�
 
__l���
,

659 
size_t
 *
__��ri�
 
__n
, 
__d�im��
,

660 
FILE
 *
__��ri�
 
__��am
�
__wur
;

661 
_IO_ssize_t
 
	$g�d�im
 (**
__��ri�
 
__l���
,

662 
size_t
 *
__��ri�
 
__n
, 
__d�im��
,

663 
FILE
 *
__��ri�
 
__��am
�
__wur
;

671 
_IO_ssize_t
 
	$g�l�e
 (**
__��ri�
 
__l���
,

672 
size_t
 *
__��ri�
 
__n
,

673 
FILE
 *
__��ri�
 
__��am
�
__wur
;

677 
__BEGIN_NAMESPACE_STD


682 
	`�uts
 (
__cڡ
 *
__��ri�
 
__s
, 
FILE
 *__��ri� 
__��am
);

688 
	`puts
 (
__cڡ
 *
__s
);

695 
	`ung�c
 (
__c
, 
FILE
 *
__��am
);

702 
size_t
 
	$�d
 (*
__��ri�
 
__�r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__��ri�
 
__��am
�
__wur
;

708 
size_t
 
	`fwr�e
 (
__cڡ
 *
__��ri�
 
__�r
, size_�
__size
,

709 
size_t
 
__n
, 
FILE
 *
__��ri�
 
__s
);

710 
__END_NAMESPACE_STD


712 #ifde�
__USE_GNU


719 
	`�uts_u�ocked
 (
__cڡ
 *
__��ri�
 
__s
,

720 
FILE
 *
__��ri�
 
__��am
);

723 #ifde�
__USE_MISC


730 
size_t
 
	$�d_u�ocked
 (*
__��ri�
 
__�r
, 
size_t
 
__size
,

731 
size_t
 
__n
, 
FILE
 *
__��ri�
 
__��am
�
__wur
;

732 
size_t
 
	`fwr�e_u�ocked
 (
__cڡ
 *
__��ri�
 
__�r
, size_�
__size
,

733 
size_t
 
__n
, 
FILE
 *
__��ri�
 
__��am
);

737 
__BEGIN_NAMESPACE_STD


742 
	`f�ek
 (
FILE
 *
__��am
, 
__off
, 
__wh��
);

747 
	$�l
 (
FILE
 *
__��am
�
__wur
;

752 
	`�w�d
 (
FILE
 *
__��am
);

753 
__END_NAMESPACE_STD


760 #i�
def�ed
 
__USE_LARGEFILE
 || def�ed 
__USE_XOPEN2K


761 #i�de�
__USE_FILE_OFFSET64


766 
	`f�eko
 (
FILE
 *
__��am
, 
__off_t
 
__off
, 
__wh��
);

771 
__off_t
 
	$�lo
 (
FILE
 *
__��am
�
__wur
;

773 #ifde�
__REDIRECT


774 
	`__REDIRECT
 (
f�eko
,

775 (
FILE
 *
__��am
, 
__off64_t
 
__off
, 
__wh��
),

776 
f�eko64
);

777 
__off64_t
 
	`__REDIRECT
 (
�lo
, (
FILE
 *
__��am
), 
�lo64
);

779 
	#f�eko
 
f�eko64


	)

780 
	#�lo
 
�lo64


	)

785 
__BEGIN_NAMESPACE_STD


786 #i�de�
__USE_FILE_OFFSET64


791 
	`fg�pos
 (
FILE
 *
__��ri�
 
__��am
, 
�os_t
 *__��ri� 
__pos
);

796 
	`f��os
 (
FILE
 *
__��am
, 
__cڡ
 
�os_t
 *
__pos
);

798 #ifde�
__REDIRECT


799 
	`__REDIRECT
 (
fg�pos
, (
FILE
 *
__��ri�
 
__��am
,

800 
�os_t
 *
__��ri�
 
__pos
), 
fg�pos64
);

801 
	`__REDIRECT
 (
f��os
,

802 (
FILE
 *
__��am
, 
__cڡ
 
�os_t
 *
__pos
), 
f��os64
);

804 
	#fg�pos
 
fg�pos64


	)

805 
	#f��os
 
f��os64


	)

808 
__END_NAMESPACE_STD


810 #ifde�
__USE_LARGEFILE64


811 
	`f�eko64
 (
FILE
 *
__��am
, 
__off64_t
 
__off
, 
__wh��
);

812 
__off64_t
 
	$�lo64
 (
FILE
 *
__��am
�
__wur
;

813 
	`fg�pos64
 (
FILE
 *
__��ri�
 
__��am
, 
�os64_t
 *__��ri� 
__pos
);

814 
	`f��os64
 (
FILE
 *
__��am
, 
__cڡ
 
�os64_t
 *
__pos
);

817 
__BEGIN_NAMESPACE_STD


819 
	$����
 (
FILE
 *
__��am
�
__THROW
;

821 
	$�of
 (
FILE
 *
__��am
�
__THROW
 
__wur
;

823 
	$��
 (
FILE
 *
__��am
�
__THROW
 
__wur
;

824 
__END_NAMESPACE_STD


826 #ifde�
__USE_MISC


828 
	$����_u�ocked
 (
FILE
 *
__��am
�
__THROW
;

829 
	$�of_u�ocked
 (
FILE
 *
__��am
�
__THROW
 
__wur
;

830 
	$��_u�ocked
 (
FILE
 *
__��am
�
__THROW
 
__wur
;

834 
__BEGIN_NAMESPACE_STD


839 
	`���
 (
__cڡ
 *
__s
);

840 
__END_NAMESPACE_STD


846 
	~<b�s/sys_��i�.h
>

849 #ifdef 
__USE_POSIX


851 
	$f��o
 (
FILE
 *
__��am
�
__THROW
 
__wur
;

854 #ifde�
__USE_MISC


856 
	$f��o_u�ocked
 (
FILE
 *
__��am
�
__THROW
 
__wur
;

860 #i�(
def�ed
 
__USE_POSIX2
 || def�ed 
__USE_SVID
 || def�ed 
__USE_BSD
 || \

861 
def�ed
 
__USE_MISC
)

866 
FILE
 *
	$pݒ
 (
__cڡ
 *
__comm�d
, __cڡ *
__modes
�
__wur
;

872 
	`p�o�
 (
FILE
 *
__��am
);

876 #ifdef 
__USE_POSIX


878 *
	$�mid
 (*
__s
�
__THROW
;

882 #ifde�
__USE_XOPEN


884 *
	`cu�rid
 (*
__s
);

888 #ifdef 
__USE_GNU


889 
ob�ack
;

892 
	$ob�ack_��tf
 (
ob�ack
 *
__��ri�
 
__ob�ack
,

893 
__cڡ
 *
__��ri�
 
__f�m�
, ...)

894 
__THROW
 
	`__��ibu�__
 ((
	`__f�m�__
 (
__��tf__
, 2, 3)));

895 
	$ob�ack_v��tf
 (
ob�ack
 *
__��ri�
 
__ob�ack
,

896 
__cڡ
 *
__��ri�
 
__f�m�
,

897 
_G_va_li�
 
__�gs
)

898 
__THROW
 
	`__��ibu�__
 ((
	`__f�m�__
 (
__��tf__
, 2, 0)));

902 #i�
def�ed
 
__USE_POSIX
 || def�ed 
__USE_MISC


906 
	$�ockf�e
 (
FILE
 *
__��am
�
__THROW
;

910 
	$�rylockf�e
 (
FILE
 *
__��am
�
__THROW
 
__wur
;

913 
	$fu�ockf�e
 (
FILE
 *
__��am
�
__THROW
;

916 #i�
def�ed
 
__USE_XOPEN
 && !def�ed 
__USE_XOPEN2K
 && !def�ed 
__USE_GNU


920 
	#__�ed_g��t


	)

921 
	~<g��t.h
>

926 #ifde�
__USE_EXTERN_INLINES


927 
	~<b�s/�dio.h
>

929 #i�
__USE_FORTIFY_LEVEL
 > 0 && 
def�ed
 
__ex��_�ways_�l�e


930 
	~<b�s/�dio2.h
>

932 #ifde�
__LDBL_COMPAT


933 
	~<b�s/�dio-ldbl.h
>

936 
__END_DECLS


	@/usr/include/stdlib.h

23 #i�def 
_STDLIB_H


25 
	~<�u�s.h
>

28 
	#__�ed_size_t


	)

29 #i�de�
__�ed_m�loc_�d_��oc


30 
	#__�ed_wch�_t


	)

31 
	#__�ed_NULL


	)

33 
	~<�ddef.h
>

35 
	g__BEGIN_DECLS


37 #i�de�
__�ed_m�loc_�d_��oc


38 
	#_STDLIB_H
 1

	)

40 #i�(
def�ed
 
__USE_XOPEN
 || def�ed 
__USE_XOPEN2K8
�&& !def�ed 
_SYS_WAIT_H


42 
	~<b�s/wa��ags.h
>

43 
	~<b�s/wa���us.h
>

45 #ifde�
__USE_BSD


50 #i�
def�ed
 
__GNUC__
 && !def�ed 
__�lu�lus


51 
	#__WAIT_INT
(
��us
) \

52 (
	`__ex�nsi�__
 (((uni� { 
	`__ty�of
(
��us
�
__�
; 
__i
; }) \

53 { .
__�
 = (
��us
�}).
__i
))

	)

55 
	#__WAIT_INT
(
��us
�(*(*�&(��us))

	)

63 #i�!
def�ed
 
__GNUC__
 || __GNUC__ < 2 || def�ed 
__�lu�lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
wa�
 *
	m__u�r
;

71 *
	m__��
;

72 } 
	t__WAIT_STATUS
 
	t__��ibu�__
 ((
	t__�����t_uni�__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
��us
�(��us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
��us
�
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (��us))

	)

86 
	#WTERMSIG
(
��us
�
	`__WTERMSIG
 (
	`__WAIT_INT
 (��us))

	)

87 
	#WSTOPSIG
(
��us
�
	`__WSTOPSIG
 (
	`__WAIT_INT
 (��us))

	)

88 
	#WIFEXITED
(
��us
�
	`__WIFEXITED
 (
	`__WAIT_INT
 (��us))

	)

89 
	#WIFSIGNALED
(
��us
�
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (��us))

	)

90 
	#WIFSTOPPED
(
��us
�
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (��us))

	)

91 #ifde�
__WIFCONTINUED


92 
	#WIFCONTINUED
(
��us
�
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (��us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mqu�
;

101 
	m�m
;

102 } 
	tdiv_t
;

105 #i�de�
__ldiv_t_def�ed


108 
	mqu�
;

109 
	m�m
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_def�ed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i�
def�ed
 
__USE_ISOC99
 && !def�ed 
__�div_t_def�ed


116 
__BEGIN_NAMESPACE_C99


118 
__ex�nsi�__
 struct

120 
	mqu�
;

121 
	m�m
;

122 } 
	t�div_t
;

123 
	#__�div_t_def�ed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__�y�_g�_mb_cur_max
 ())

	)

140 
size_t
 
	$__�y�_g�_mb_cur_max
 (�
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$�of
 (
__cڡ
 *
__Ō
)

146 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1)�
__wur
;

148 
	$�oi
 (
__cڡ
 *
__Ō
)

149 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1)�
__wur
;

151 
	$��
 (
__cڡ
 *
__Ō
)

152 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1)�
__wur
;

153 
__END_NAMESPACE_STD


155 #i�
def�ed
 
__USE_ISOC99
 || (def�ed 
__GLIBC_HAVE_LONG_LONG
 && def�ed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__ex�nsi�__
 
	$��l
 (
__cڡ
 *
__Ō
)

159 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1)�
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$��od
 (
__cڡ
 *
__��ri�
 
__Ō
,

166 **
__��ri�
 
__�d�r
)

167 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$��of
 (
__cڡ
 *
__��ri�
 
__Ō
,

174 **
__��ri�
 
__�d�r
�
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

176 
	$���d
 (
__cڡ
 *
__��ri�
 
__Ō
,

177 **
__��ri�
 
__�d�r
)

178 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$���
 (
__cڡ
 *
__��ri�
 
__Ō
,

185 **
__��ri�
 
__�d�r
, 
__ba�
)

186 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

188 
	$��oul
 (
__cڡ
 *
__��ri�
 
__Ō
,

189 **
__��ri�
 
__�d�r
, 
__ba�
)

190 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

191 
__END_NAMESPACE_STD


193 #i�
def�ed
 
__GLIBC_HAVE_LONG_LONG
 && def�ed 
__USE_BSD


195 
__ex�nsi�__


196 
	$��oq
 (
__cڡ
 *
__��ri�
 
__Ō
,

197 **
__��ri�
 
__�d�r
, 
__ba�
)

198 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

200 
__ex�nsi�__


201 
	$��ouq
 (
__cڡ
 *
__��ri�
 
__Ō
,

202 **
__��ri�
 
__�d�r
, 
__ba�
)

203 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

206 #i�
def�ed
 
__USE_ISOC99
 || (def�ed 
__GLIBC_HAVE_LONG_LONG
 && def�ed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__ex�nsi�__


210 
	$���l
 (
__cڡ
 *
__��ri�
 
__Ō
,

211 **
__��ri�
 
__�d�r
, 
__ba�
)

212 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

214 
__ex�nsi�__


215 
	$��ou�
 (
__cڡ
 *
__��ri�
 
__Ō
,

216 **
__��ri�
 
__�d�r
, 
__ba�
)

217 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde�
__USE_GNU


236 
	~<xlo��.h
>

240 
	$���_l
 (
__cڡ
 *
__��ri�
 
__Ō
,

241 **
__��ri�
 
__�d�r
, 
__ba�
,

242 
__lo��_t
 
__loc
�
__THROW
 
	`__n�nu�
 ((1, 4)�
__wur
;

244 
	$��oul_l
 (
__cڡ
 *
__��ri�
 
__Ō
,

245 **
__��ri�
 
__�d�r
,

246 
__ba�
, 
__lo��_t
 
__loc
)

247 
__THROW
 
	`__n�nu�
 ((1, 4)�
__wur
;

249 
__ex�nsi�__


250 
	$���l_l
 (
__cڡ
 *
__��ri�
 
__Ō
,

251 **
__��ri�
 
__�d�r
, 
__ba�
,

252 
__lo��_t
 
__loc
)

253 
__THROW
 
	`__n�nu�
 ((1, 4)�
__wur
;

255 
__ex�nsi�__


256 
	$��ou�_l
 (
__cڡ
 *
__��ri�
 
__Ō
,

257 **
__��ri�
 
__�d�r
,

258 
__ba�
, 
__lo��_t
 
__loc
)

259 
__THROW
 
	`__n�nu�
 ((1, 4)�
__wur
;

261 
	$��od_l
 (
__cڡ
 *
__��ri�
 
__Ō
,

262 **
__��ri�
 
__�d�r
, 
__lo��_t
 
__loc
)

263 
__THROW
 
	`__n�nu�
 ((1, 3)�
__wur
;

265 
	$��of_l
 (
__cڡ
 *
__��ri�
 
__Ō
,

266 **
__��ri�
 
__�d�r
, 
__lo��_t
 
__loc
)

267 
__THROW
 
	`__n�nu�
 ((1, 3)�
__wur
;

269 
	$���d_l
 (
__cڡ
 *
__��ri�
 
__Ō
,

270 **
__��ri�
 
__�d�r
,

271 
__lo��_t
 
__loc
)

272 
__THROW
 
	`__n�nu�
 ((1, 3)�
__wur
;

276 #ifde�
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__ex��_�l�e
 

279 
	`__NTH
 (
	$�of
 (
__cڡ
 *
__Ō
))

281  
	`��od
 (
__Ō
, (**�
NULL
);

282 
	}
}

283 
__ex��_�l�e
 

284 
__NTH
 (
	$�oi
 (
__cڡ
 *
__Ō
))

286  (�
	`���
 (
__Ō
, (**�
NULL
, 10);

287 
	}
}

288 
__ex��_�l�e
 

289 
__NTH
 (
	$��
 (
__cڡ
 *
__Ō
))

291  
	`���
 (
__Ō
, (**�
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i�
def�ed
 
__USE_MISC
 || def�ed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__ex�nsi�__
 
__ex��_�l�e
 

298 
__NTH
 (
	$��l
 (
__cڡ
 *
__Ō
))

300  
	`���l
 (
__Ō
, (**�
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
�
__THROW
 
__wur
;

314 
	$a64l
 (
__cڡ
 *
__s
)

315 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1)�
__wur
;

319 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_XOPEN_EXTENDED
 || def�ed 
__USE_BSD


320 
	~<sys/ty�s.h
>

327 
	$�ndom
 (�
__THROW
;

330 
	$��dom
 (
__�ed
�
__THROW
;

336 *
	$����e
 (
__�ed
, *
__��ebuf
,

337 
size_t
 
__����
�
__THROW
 
	`__n�nu�
 ((2));

341 *
	$�t��e
 (*
__��ebuf
�
__THROW
 
	`__n�nu�
 ((1));

344 #ifde�
__USE_MISC


349 
	s�ndom_d�a


351 
�t32_t
 *
�
;

352 
�t32_t
 *
��
;

353 
�t32_t
 *
��e
;

354 
�nd_ty�
;

355 
�nd_deg
;

356 
�nd_�p
;

357 
�t32_t
 *
�d_�r
;

360 
	$�ndom_r
 (
�ndom_d�a
 *
__��ri�
 
__buf
,

361 
�t32_t
 *
__��ri�
 
__�su�
�
__THROW
 
	`__n�nu�
 ((1, 2));

363 
	$��dom_r
 (
__�ed
, 
�ndom_d�a
 *
__buf
)

364 
__THROW
 
	`__n�nu�
 ((2));

366 
	$����e_r
 (
__�ed
, *
__��ri�
 
__��ebuf
,

367 
size_t
 
__����
,

368 
�ndom_d�a
 *
__��ri�
 
__buf
)

369 
__THROW
 
	`__n�nu�
 ((2, 4));

371 
	$�t��e_r
 (*
__��ri�
 
__��ebuf
,

372 
�ndom_d�a
 *
__��ri�
 
__buf
)

373 
__THROW
 
	`__n�nu�
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$�nd
 (�
__THROW
;

382 
	$��d
 (
__�ed
�
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde�
__USE_POSIX


387 
	$�nd_r
 (*
__�ed
�
__THROW
;

391 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_XOPEN


395 
	$d�nd48
 (�
__THROW
;

396 
	$��d48
 (
__xsubi
[3]�
__THROW
 
	`__n�nu�
 ((1));

399 
	$̪d48
 (�
__THROW
;

400 
	$Īd48
 (
__xsubi
[3])

401 
__THROW
 
	`__n�nu�
 ((1));

404 
	$m�nd48
 (�
__THROW
;

405 
	$j�nd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n�nu�
 ((1));

409 
	$��d48
 (
__�edv�
�
__THROW
;

410 *
	$�ed48
 (
__�ed16v
[3])

411 
__THROW
 
	`__n�nu�
 ((1));

412 
	$lc�g48
 (
__��m
[7]�
__THROW
 
	`__n�nu�
 ((1));

414 #ifde�
__USE_MISC


418 
	sd�nd48_d�a


420 
__x
[3];

421 
__�d_x
[3];

422 
__c
;

423 
__��
;

424 
__a
;

428 
	$d�nd48_r
 (
d�nd48_d�a
 *
__��ri�
 
__buf�r
,

429 *
__��ri�
 
__�su�
�
__THROW
 
	`__n�nu�
 ((1, 2));

430 
	$��d48_r
 (
__xsubi
[3],

431 
d�nd48_d�a
 *
__��ri�
 
__buf�r
,

432 *
__��ri�
 
__�su�
�
__THROW
 
	`__n�nu�
 ((1, 2));

435 
	$̪d48_r
 (
d�nd48_d�a
 *
__��ri�
 
__buf�r
,

436 *
__��ri�
 
__�su�
)

437 
__THROW
 
	`__n�nu�
 ((1, 2));

438 
	$Īd48_r
 (
__xsubi
[3],

439 
d�nd48_d�a
 *
__��ri�
 
__buf�r
,

440 *
__��ri�
 
__�su�
)

441 
__THROW
 
	`__n�nu�
 ((1, 2));

444 
	$m�nd48_r
 (
d�nd48_d�a
 *
__��ri�
 
__buf�r
,

445 *
__��ri�
 
__�su�
)

446 
__THROW
 
	`__n�nu�
 ((1, 2));

447 
	$j�nd48_r
 (
__xsubi
[3],

448 
d�nd48_d�a
 *
__��ri�
 
__buf�r
,

449 *
__��ri�
 
__�su�
)

450 
__THROW
 
	`__n�nu�
 ((1, 2));

453 
	$��d48_r
 (
__�edv�
, 
d�nd48_d�a
 *
__buf�r
)

454 
__THROW
 
	`__n�nu�
 ((2));

456 
	$�ed48_r
 (
__�ed16v
[3],

457 
d�nd48_d�a
 *
__buf�r
�
__THROW
 
	`__n�nu�
 ((1, 2));

459 
	$lc�g48_r
 (
__��m
[7],

460 
d�nd48_d�a
 *
__buf�r
)

461 
__THROW
 
	`__n�nu�
 ((1, 2));

467 #i�de�
__m�loc_�d_��oc_def�ed


468 
	#__m�loc_�d_��oc_def�ed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$m�loc
 (
size_t
 
__size
�
__THROW
 
__��ibu�_m�loc__
 
__wur
;

473 *
	$��oc
 (
size_t
 
__nmemb
, size_�
__size
)

474 
__THROW
 
__��ibu�_m�loc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i�de�
__�ed_m�loc_�d_��oc


479 
__BEGIN_NAMESPACE_STD


485 *
	$��loc
 (*
__�r
, 
size_t
 
__size
)

486 
__THROW
 
__��ibu�_w�n_unu�d_�su�__
;

488 
	$�
 (*
__�r
�
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c�
 (*
__�r
�
__THROW
;

496 #i�
def�ed
 
__USE_GNU
 || def�ed 
__USE_BSD
 || def�ed 
__USE_MISC


497 
	~<�lo�.h
>

500 #i�(
def�ed
 
__USE_XOPEN_EXTENDED
 && !def�ed 
__USE_XOPEN2K
) \

501 || 
def�ed
 
__USE_BSD


503 *
	$v�loc
 (
size_t
 
__size
�
__THROW
 
__��ibu�_m�loc__
 
__wur
;

506 #ifde�
__USE_XOPEN2K


508 
	$posix_mem�ign
 (**
__mem�r
, 
size_t
 
__�ignm�t
, size_�
__size
)

509 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab�t
 (�
__THROW
 
	`__��ibu�__
 ((
__nܑu�__
));

518 
	`�ex�
 ((*
__func
�()�
__THROW
 
	`__n�nu�
 ((1));

520 #ifde�
__USE_GNU


524 #ifde�
__�lu�lus


525 "C++" 
	`�_quick_ex�
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("�_quick_ex�"�
	`__n�nu�
 ((1));

528 
	`�_quick_ex�
 ((*
__func
�()�
__THROW
 
	`__n�nu�
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`�_ex�
 ((*
__func
�(
__��us
, *
__�g
), *__arg)

537 
__THROW
 
	`__n�nu�
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$ex�
 (
__��us
�
__THROW
 
	`__��ibu�__
 ((
__nܑu�__
));

546 #ifde�
__USE_GNU


552 
	$quick_ex�
 (
__��us
�
__THROW
 
	`__��ibu�__
 ((
__nܑu�__
));

554 
__END_NAMESPACE_STD


556 #ifde�
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Ex�
 (
__��us
�
__THROW
 
	`__��ibu�__
 ((
__nܑu�__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$g��v
 (
__cڡ
 *
__�me
�
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__�cu�_g��v
 (
__cڡ
 *
__�me
)

573 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

575 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_XOPEN


579 
	$pu�nv
 (*
__�r�g
�
__THROW
 
	`__n�nu�
 ((1));

582 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN2K


585 
	$��nv
 (
__cڡ
 *
__�me
, __cڡ *
__v�ue
, 
__��a�
)

586 
__THROW
 
	`__n�nu�
 ((2));

589 
	$un��nv
 (
__cڡ
 *
__�me
�
__THROW
 
	`__n�nu�
 ((1));

592 #ifdef 
__USE_MISC


596 
	$���nv
 (�
__THROW
;

600 #i�
def�ed
 
__USE_MISC
 \

601 || (
def�ed
 
__USE_XOPEN_EXTENDED
 && !def�ed 
__USE_XOPEN2K
)

606 *
	$mk�mp
 (*
__�m��e
�
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

609 #i�
def�ed
 
__USE_MISC
 || def�ed 
__USE_XOPEN_EXTENDED
 \

610 || 
def�ed
 
__USE_XOPEN2K8


619 #i�de�
__USE_FILE_OFFSET64


620 
	$mk�emp
 (*
__�m��e
�
	`__n�nu�
 ((1)�
__wur
;

622 #ifde�
__REDIRECT


623 
	`__REDIRECT
 (
mk�emp
, (*
__�m��e
), 
mk�emp64
)

624 
	`__n�nu�
 ((1)�
__wur
;

626 
	#mk�emp
 
mk�emp64


	)

629 #ifde�
__USE_LARGEFILE64


630 
	$mk�emp64
 (*
__�m��e
�
	`__n�nu�
 ((1)�
__wur
;

634 #ifde�
__USE_MISC


641 #i�de�
__USE_FILE_OFFSET64


642 
	$mk�emps
 (*
__�m��e
, 
__suffix�n
�
	`__n�nu�
 ((1)�
__wur
;

644 #ifde�
__REDIRECT


645 
	`__REDIRECT
 (
mk�emps
, (*
__�m��e
, 
__suffix�n
),

646 
mk�emps64
�
	`__n�nu�
 ((1)�
__wur
;

648 
	#mk�emps
 
mk�emps64


	)

651 #ifde�
__USE_LARGEFILE64


652 
	$mk�emps64
 (*
__�m��e
, 
__suffix�n
)

653 
	`__n�nu�
 ((1)�
__wur
;

657 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN2K8


663 *
	$mkd�mp
 (*
__�m��e
�
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

666 #ifde�
__USE_GNU


673 #i�de�
__USE_FILE_OFFSET64


674 
	$mko�emp
 (*
__�m��e
, 
__�ags
�
	`__n�nu�
 ((1)�
__wur
;

676 #ifde�
__REDIRECT


677 
	`__REDIRECT
 (
mko�emp
, (*
__�m��e
, 
__�ags
), 
mko�emp64
)

678 
	`__n�nu�
 ((1)�
__wur
;

680 
	#mko�emp
 
mko�emp64


	)

683 #ifde�
__USE_LARGEFILE64


684 
	$mko�emp64
 (*
__�m��e
, 
__�ags
�
	`__n�nu�
 ((1)�
__wur
;

693 #i�de�
__USE_FILE_OFFSET64


694 
	$mko�emps
 (*
__�m��e
, 
__suffix�n
, 
__�ags
)

695 
	`__n�nu�
 ((1)�
__wur
;

697 #ifde�
__REDIRECT


698 
	`__REDIRECT
 (
mko�emps
, (*
__�m��e
, 
__suffix�n
,

699 
__�ags
), 
mko�emps64
)

700 
	`__n�nu�
 ((1)�
__wur
;

702 
	#mko�emps
 
mko�emps64


	)

705 #ifde�
__USE_LARGEFILE64


706 
	$mko�emps64
 (*
__�m��e
, 
__suffix�n
, 
__�ags
)

707 
	`__n�nu�
 ((1)�
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy�em
 (
__cڡ
 *
__comm�d
�
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$�n�i�lize_f�e_�me
 (
__cڡ
 *
__�me
)

725 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

728 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN_EXTENDED


734 *
	$���th
 (
__cڡ
 *
__��ri�
 
__�me
,

735 *
__��ri�
 
__�s�ved
�
__THROW
 
__wur
;

740 #i�de�
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com�r_�_t
�(
	t__cڡ
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com�r_�_t
 
	tcom�ris�_�_t
;

748 #ifde�
__USE_GNU


749 (*
	t__com�r_d_�_t
�(
	t__cڡ
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b��ch
 (
__cڡ
 *
__key
, __cڡ *
__ba�
,

756 
size_t
 
__nmemb
, size_�
__size
, 
__com�r_�_t
 
__com�r
)

757 
	`__n�nu�
 ((1, 2, 5)�
__wur
;

761 
	$qs�t
 (*
__ba�
, 
size_t
 
__nmemb
, size_�
__size
,

762 
__com�r_�_t
 
__com�r
�
	`__n�nu�
 ((1, 4));

763 #ifde�
__USE_GNU


764 
	$qs�t_r
 (*
__ba�
, 
size_t
 
__nmemb
, size_�
__size
,

765 
__com�r_d_�_t
 
__com�r
, *
__�g
)

766 
	`__n�nu�
 ((1, 4));

771 
	$abs
 (
__x
�
__THROW
 
	`__��ibu�__
 ((
__cڡ__
)�
__wur
;

772 
	$�bs
 (
__x
�
__THROW
 
	`__��ibu�__
 ((
__cڡ__
)�
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde�
__USE_ISOC99


776 
__ex�nsi�__
 
	$�abs
 (
__x
)

777 
__THROW
 
	`__��ibu�__
 ((
__cڡ__
)�
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__num�
, 
__d�om
)

786 
__THROW
 
	`__��ibu�__
 ((
__cڡ__
)�
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__num�
, 
__d�om
)

788 
__THROW
 
	`__��ibu�__
 ((
__cڡ__
)�
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde�
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__ex�nsi�__
 
�div_t
 
	$�div
 (
__num�
,

794 
__d�om
)

795 
__THROW
 
	`__��ibu�__
 ((
__cڡ__
)�
__wur
;

796 
__END_NAMESPACE_C99


800 #i�(
def�ed
 
__USE_XOPEN_EXTENDED
 && !def�ed 
__USE_XOPEN2K
) \

801 || 
def�ed
 
__USE_SVID


808 *
	$ecvt
 (
__v�ue
, 
__ndig�
, *
__��ri�
 
__de�t
,

809 *
__��ri�
 
__sign
�
__THROW
 
	`__n�nu�
 ((3, 4)�
__wur
;

814 *
	$fcvt
 (
__v�ue
, 
__ndig�
, *
__��ri�
 
__de�t
,

815 *
__��ri�
 
__sign
�
__THROW
 
	`__n�nu�
 ((3, 4)�
__wur
;

820 *
	$gcvt
 (
__v�ue
, 
__ndig�
, *
__buf
)

821 
__THROW
 
	`__n�nu�
 ((3)�
__wur
;

824 #ifde�
__USE_MISC


826 *
	$qecvt
 (
__v�ue
, 
__ndig�
,

827 *
__��ri�
 
__de�t
, *__��ri� 
__sign
)

828 
__THROW
 
	`__n�nu�
 ((3, 4)�
__wur
;

829 *
	$qfcvt
 (
__v�ue
, 
__ndig�
,

830 *
__��ri�
 
__de�t
, *__��ri� 
__sign
)

831 
__THROW
 
	`__n�nu�
 ((3, 4)�
__wur
;

832 *
	$qgcvt
 (
__v�ue
, 
__ndig�
, *
__buf
)

833 
__THROW
 
	`__n�nu�
 ((3)�
__wur
;

838 
	$ecvt_r
 (
__v�ue
, 
__ndig�
, *
__��ri�
 
__de�t
,

839 *
__��ri�
 
__sign
, *__��ri� 
__buf
,

840 
size_t
 
__�n
�
__THROW
 
	`__n�nu�
 ((3, 4, 5));

841 
	$fcvt_r
 (
__v�ue
, 
__ndig�
, *
__��ri�
 
__de�t
,

842 *
__��ri�
 
__sign
, *__��ri� 
__buf
,

843 
size_t
 
__�n
�
__THROW
 
	`__n�nu�
 ((3, 4, 5));

845 
	$qecvt_r
 (
__v�ue
, 
__ndig�
,

846 *
__��ri�
 
__de�t
, *__��ri� 
__sign
,

847 *
__��ri�
 
__buf
, 
size_t
 
__�n
)

848 
__THROW
 
	`__n�nu�
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__v�ue
, 
__ndig�
,

850 *
__��ri�
 
__de�t
, *__��ri� 
__sign
,

851 *
__��ri�
 
__buf
, 
size_t
 
__�n
)

852 
__THROW
 
	`__n�nu�
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mb�n
 (
__cڡ
 *
__s
, 
size_t
 
__n
�
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch�_t
 *
__��ri�
 
__pwc
,

864 
__cڡ
 *
__��ri�
 
__s
, 
size_t
 
__n
�
__THROW
 
__wur
;

867 
	$w�omb
 (*
__s
, 
wch�_t
 
__wch�
�
__THROW
 
__wur
;

871 
size_t
 
	$mb�owcs
 (
wch�_t
 *
__��ri�
 
__pwcs
,

872 
__cڡ
 *
__��ri�
 
__s
, 
size_t
 
__n
�
__THROW
;

874 
size_t
 
	$wc�ombs
 (*
__��ri�
 
__s
,

875 
__cڡ
 
wch�_t
 *
__��ri�
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde�
__USE_SVID


885 
	$�m�ch
 (
__cڡ
 *
__��ڣ
�
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

889 #i�
def�ed
 
__USE_XOPEN_EXTENDED
 || def�ed 
__USE_XOPEN2K8


896 
	$g�sub�t
 (**
__��ri�
 
__�ti�p
,

897 *
__cڡ
 *
__��ri�
 
__tok�s
,

898 **
__��ri�
 
__v�u�
)

899 
__THROW
 
	`__n�nu�
 ((1, 2, 3)�
__wur
;

903 #ifde�
__USE_XOPEN


905 
	$�tkey
 (
__cڡ
 *
__key
�
__THROW
 
	`__n�nu�
 ((1));

911 #ifde�
__USE_XOPEN2KXSI


913 
	$posix_ݒ�
 (
__o�ag
�
__wur
;

916 #ifde�
__USE_XOPEN


921 
	$g���
 (
__fd
�
__THROW
;

925 
	$u�ock�
 (
__fd
�
__THROW
;

930 *
	$��ame
 (
__fd
�
__THROW
 
__wur
;

933 #ifde�
__USE_GNU


937 
	$��ame_r
 (
__fd
, *
__buf
, 
size_t
 
__bu�
)

938 
__THROW
 
	`__n�nu�
 ((2));

941 
	`g��
 ();

944 #ifde�
__USE_BSD


948 
	$g�l�davg
 (
__l�davg
[], 
__��m
)

949 
__THROW
 
	`__n�nu�
 ((1));

954 #i�
__USE_FORTIFY_LEVEL
 > 0 && 
def�ed
 
__ex��_�ways_�l�e


955 
	~<b�s/�dlib.h
>

957 #ifde�
__LDBL_COMPAT


958 
	~<b�s/�dlib-ldbl.h
>

962 #unde�
__�ed_m�loc_�d_��oc


964 
__END_DECLS


	@/usr/include/string.h

24 #i�def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<�u�s.h
>

29 
	g__BEGIN_DECLS


32 
	#__�ed_size_t


	)

33 
	#__�ed_NULL


	)

34 
	~<�ddef.h
>

37 #i�
def�ed
 
__�lu�lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem�y
 (*
__��ri�
 
__de�
,

45 
__cڡ
 *
__��ri�
 
__�c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n�nu�
 ((1, 2));

49 *
	$memmove
 (*
__de�
, 
__cڡ
 *
__�c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n�nu�
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_BSD
 || def�ed 
__USE_XOPEN


57 *
	$memc�y
 (*
__��ri�
 
__de�
, 
__cڡ
 *__��ri� 
__�c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n�nu�
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem�t
 (*
__s
, 
__c
, 
size_t
 
__n
�
__THROW
 
	`__n�nu�
 ((1));

68 
	$memcmp
 (
__cڡ
 *
__s1
, __cڡ *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

72 #ifde�
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

77 
__cڡ
 *
	`memchr
 (__cڡ *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

80 #ifde�
__OPTIMIZE__


81 
__ex��_�ways_�l�e
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
�
__THROW


84  
	`__bu�t�_memchr
 (
__s
, 
__c
, 
__n
);

87 
__ex��_�ways_�l�e
 
__cڡ
 *

88 
	`memchr
 (
__cڡ
 *
__s
, 
__c
, 
size_t
 
__n
�
__THROW


90  
	`__bu�t�_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__cڡ
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde�
__USE_GNU


103 #ifde�
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$�wmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("�wmemchr"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

106 "C++" 
__cڡ
 *
	$�wmemchr
 (
__cڡ
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("�wmemchr"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

109 *
	$�wmemchr
 (
__cڡ
 *
__s
, 
__c
)

110 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

114 #ifde�
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

117 "C++" 
__cڡ
 *
	$memrchr
 (
__cڡ
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

120 *
	$memrchr
 (
__cڡ
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$�r�y
 (*
__��ri�
 
__de�
, 
__cڡ
 *__��ri� 
__�c
)

129 
__THROW
 
	`__n�nu�
 ((1, 2));

131 *
	$���y
 (*
__��ri�
 
__de�
,

132 
__cڡ
 *
__��ri�
 
__�c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n�nu�
 ((1, 2));

136 *
	$�r�t
 (*
__��ri�
 
__de�
, 
__cڡ
 *__��ri� 
__�c
)

137 
__THROW
 
	`__n�nu�
 ((1, 2));

139 *
	$���t
 (*
__��ri�
 
__de�
, 
__cڡ
 *__��ri� 
__�c
,

140 
size_t
 
__n
�
__THROW
 
	`__n�nu�
 ((1, 2));

143 
	$�rcmp
 (
__cڡ
 *
__s1
, __cڡ *
__s2
)

144 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

146 
	$��cmp
 (
__cڡ
 *
__s1
, __cڡ *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

150 
	$�rc�l
 (
__cڡ
 *
__s1
, __cڡ *
__s2
)

151 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

153 
size_t
 
	$�rx�m
 (*
__��ri�
 
__de�
,

154 
__cڡ
 *
__��ri�
 
__�c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n�nu�
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde�
__USE_XOPEN2K8


162 
	~<xlo��.h
>

165 
	$�rc�l_l
 (
__cڡ
 *
__s1
, __cڡ *
__s2
, 
__lo��_t
 
__l
)

166 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2, 3));

168 
size_t
 
	$�rx�m_l
 (*
__de�
, 
__cڡ
 *
__�c
, 
size_t
 
__n
,

169 
__lo��_t
 
__l
�
__THROW
 
	`__n�nu�
 ((2, 4));

172 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_BSD
 || def�ed 
__USE_XOPEN_EXTENDED
 \

173 || 
def�ed
 
__USE_XOPEN2K8


175 *
	$�rdup
 (
__cڡ
 *
__s
)

176 
__THROW
 
__��ibu�_m�loc__
 
	`__n�nu�
 ((1));

182 #i�
def�ed
 
__USE_XOPEN2K8


183 *
	$��dup
 (
__cڡ
 *
__�r�g
, 
size_t
 
__n
)

184 
__THROW
 
__��ibu�_m�loc__
 
	`__n�nu�
 ((1));

187 #i�
def�ed
 
__USE_GNU
 && def�ed 
__GNUC__


189 
	#�rdu�
(
s
) \

190 (
__ex�nsi�__
 \

192 
__cڡ
 *
__�d
 = (
s
); \

193 
size_t
 
__�n
 = 
	`���
 (
__�d
) + 1; \

194 *
__�w
 = (*�
	`__bu�t�_�lo�
 (
__�n
); \

195 (*�
	`mem�y
 (
__�w
, 
__�d
, 
__�n
); \

196 
	}
}))

	)

199 
	#��du�
(
s
, 
n
) \

200 (
__ex�nsi�__
 \

202 
__cڡ
 *
__�d
 = (
s
); \

203 
size_t
 
__�n
 = 
	`���n
 (
__�d
, (
n
)); \

204 *
__�w
 = (*�
	`__bu�t�_�lo�
 (
__�n
 + 1); \

205 
__�w
[
__�n
] = '\0'; \

206 (*�
	`mem�y
 (
__�w
, 
__�d
, 
__�n
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde�
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
�rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("�rchr"�
__��ibu�_pu�__
 
__n�nu�
 ((1));

217 
__cڡ
 *
�rchr
 (__cڡ *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("�rchr"�
__��ibu�_pu�__
 
__n�nu�
 ((1));

220 #ifde�
__OPTIMIZE__


221 
__ex��_�ways_�l�e
 *

222 
�rchr
 (*
__s
, 
__c
�
	g__THROW


224  
__bu�t�_�rchr
 (
__s
, 
__c
);

227 
__ex��_�ways_�l�e
 
__cڡ
 *

228 
�rchr
 (
__cڡ
 *
__s
, 
__c
�
	g__THROW


230  
__bu�t�_�rchr
 (
__s
, 
__c
);

235 *
	$�rchr
 (
__cڡ
 *
__s
, 
__c
)

236 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

239 #ifde�
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`��chr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("��chr"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

244 
__cڡ
 *
	`��chr
 (__cڡ *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("��chr"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

247 #ifde�
__OPTIMIZE__


248 
__ex��_�ways_�l�e
 *

249 
	`��chr
 (*
__s
, 
__c
�
__THROW


251  
	`__bu�t�_��chr
 (
__s
, 
__c
);

254 
__ex��_�ways_�l�e
 
__cڡ
 *

255 
	`��chr
 (
__cڡ
 *
__s
, 
__c
�
__THROW


257  
	`__bu�t�_��chr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$��chr
 (
__cڡ
 *
__s
, 
__c
)

263 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde�
__USE_GNU


270 #ifde�
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$�rch�ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("�rch�ul"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

273 "C++" 
__cڡ
 *
	$�rch�ul
 (
__cڡ
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("�rch�ul"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

276 *
	$�rch�ul
 (
__cڡ
 *
__s
, 
__c
)

277 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$�rc�n
 (
__cڡ
 *
__s
, __cڡ *
__�je�
)

285 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

288 
size_t
 
	$�r�n
 (
__cڡ
 *
__s
, __cڡ *
__ac�
)

289 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

291 #ifde�
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`��brk
 (*
__s
, 
__cڡ
 *
__ac�
)

295 
__THROW
 
	`__asm
 ("��brk"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

296 
__cڡ
 *
	`��brk
 (__cڡ *
__s
, __cڡ *
__ac�
)

297 
__THROW
 
	`__asm
 ("��brk"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

299 #ifde�
__OPTIMIZE__


300 
__ex��_�ways_�l�e
 *

301 
	`��brk
 (*
__s
, 
__cڡ
 *
__ac�
�
__THROW


303  
	`__bu�t�_��brk
 (
__s
, 
__ac�
);

306 
__ex��_�ways_�l�e
 
__cڡ
 *

307 
	`��brk
 (
__cڡ
 *
__s
, __cڡ *
__ac�
�
__THROW


309  
	`__bu�t�_��brk
 (
__s
, 
__ac�
);

312 
	}
}

314 *
	$��brk
 (
__cڡ
 *
__s
, __cڡ *
__ac�
)

315 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

318 #ifde�
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`�r�r
 (*
__hay�ack
, 
__cڡ
 *
__�ed�
)

322 
__THROW
 
	`__asm
 ("�r�r"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

323 
__cڡ
 *
	`�r�r
 (__cڡ *
__hay�ack
,

324 
__cڡ
 *
__�ed�
)

325 
__THROW
 
	`__asm
 ("�r�r"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

327 #ifde�
__OPTIMIZE__


328 
__ex��_�ways_�l�e
 *

329 
	`�r�r
 (*
__hay�ack
, 
__cڡ
 *
__�ed�
�
__THROW


331  
	`__bu�t�_�r�r
 (
__hay�ack
, 
__�ed�
);

334 
__ex��_�ways_�l�e
 
__cڡ
 *

335 
	`�r�r
 (
__cڡ
 *
__hay�ack
, __cڡ *
__�ed�
�
__THROW


337  
	`__bu�t�_�r�r
 (
__hay�ack
, 
__�ed�
);

340 
	}
}

342 *
	$�r�r
 (
__cڡ
 *
__hay�ack
, __cڡ *
__�ed�
)

343 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

348 *
	$��ok
 (*
__��ri�
 
__s
, 
__cڡ
 *__��ri� 
__d�im
)

349 
__THROW
 
	`__n�nu�
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__��ok_r
 (*
__��ri�
 
__s
,

355 
__cڡ
 *
__��ri�
 
__d�im
,

356 **
__��ri�
 
__�ve_�r
)

357 
__THROW
 
	`__n�nu�
 ((2, 3));

358 #i�
def�ed
 
__USE_POSIX
 || def�ed 
__USE_MISC


359 *
	$��ok_r
 (*
__��ri�
 
__s
, 
__cڡ
 *__��ri� 
__d�im
,

360 **
__��ri�
 
__�ve_�r
)

361 
__THROW
 
	`__n�nu�
 ((2, 3));

364 #ifde�
__USE_GNU


366 #ifde�
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$�r���r
 (*
__hay�ack
, 
__cڡ
 *
__�ed�
)

368 
__THROW
 
	`__asm
 ("�r���r"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

369 "C++" 
__cڡ
 *
	$�r���r
 (
__cڡ
 *
__hay�ack
,

370 
__cڡ
 *
__�ed�
)

371 
__THROW
 
	`__asm
 ("�r���r"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

373 *
	$�r���r
 (
__cڡ
 *
__hay�ack
, __cڡ *
__�ed�
)

374 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

378 #ifde�
__USE_GNU


382 *
	$memmem
 (
__cڡ
 *
__hay�ack
, 
size_t
 
__hay�ack�n
,

383 
__cڡ
 *
__�ed�
, 
size_t
 
__�ed��n
)

384 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 3));

388 *
	$__memp�y
 (*
__��ri�
 
__de�
,

389 
__cڡ
 *
__��ri�
 
__�c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n�nu�
 ((1, 2));

391 *
	$memp�y
 (*
__��ri�
 
__de�
,

392 
__cڡ
 *
__��ri�
 
__�c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n�nu�
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$���
 (
__cڡ
 *
__s
)

400 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$���n
 (
__cڡ
 *
__�r�g
, 
size_t
 
__max�n
)

407 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$����
 (
__��um
�
__THROW
;

414 
__END_NAMESPACE_STD


415 #i�
def�ed
 
__USE_XOPEN2K
 || def�ed 
__USE_MISC


423 #i�
def�ed
 
__USE_XOPEN2K
 && !def�ed 
__USE_GNU


426 #ifde�
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
����_r
,

428 (
__��um
, *
__buf
, 
size_t
 
__bu�
),

429 
__xpg_����_r
�
	`__n�nu�
 ((2));

431 
	$__xpg_����_r
 (
__��um
, *
__buf
, 
size_t
 
__bu�
)

432 
__THROW
 
	`__n�nu�
 ((2));

433 
	#����_r
 
__xpg_����_r


	)

438 *
	$����_r
 (
__��um
, *
__buf
, 
size_t
 
__bu�
)

439 
__THROW
 
	`__n�nu�
 ((2));

443 #ifde�
__USE_XOPEN2K8


445 *
	$����_l
 (
__��um
, 
__lo��_t
 
__l
�
__THROW
;

451 
	$__bz�o
 (*
__s
, 
size_t
 
__n
�
__THROW
 
	`__n�nu�
 ((1));

453 #ifde�
__USE_BSD


455 
	$bc�y
 (
__cڡ
 *
__�c
, *
__de�
, 
size_t
 
__n
)

456 
__THROW
 
	`__n�nu�
 ((1, 2));

459 
	$bz�o
 (*
__s
, 
size_t
 
__n
�
__THROW
 
	`__n�nu�
 ((1));

462 
	$bcmp
 (
__cڡ
 *
__s1
, __cڡ *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

466 #ifde�
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`�dex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("�dex"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

471 
__cڡ
 *
	`�dex
 (__cڡ *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("�dex"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

474 #i�
def�ed
 
__OPTIMIZE__
 && !def�ed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__ex��_�ways_�l�e
 *

476 
	`�dex
 (*
__s
, 
__c
�
__THROW


478  
	`__bu�t�_�dex
 (
__s
, 
__c
);

481 
__ex��_�ways_�l�e
 
__cڡ
 *

482 
	`�dex
 (
__cڡ
 *
__s
, 
__c
�
__THROW


484  
	`__bu�t�_�dex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$�dex
 (
__cڡ
 *
__s
, 
__c
)

490 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

494 #ifde�
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`r�dex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("r�dex"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

499 
__cڡ
 *
	`r�dex
 (__cڡ *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("r�dex"�
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

502 #i�
def�ed
 
__OPTIMIZE__
 && !def�ed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__ex��_�ways_�l�e
 *

504 
	`r�dex
 (*
__s
, 
__c
�
__THROW


506  
	`__bu�t�_r�dex
 (
__s
, 
__c
);

509 
__ex��_�ways_�l�e
 
__cڡ
 *

510 
	`r�dex
 (
__cڡ
 *
__s
, 
__c
�
__THROW


512  
	`__bu�t�_r�dex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$r�dex
 (
__cڡ
 *
__s
, 
__c
)

518 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1));

523 
	$ffs
 (
__i
�
__THROW
 
	`__��ibu�__
 ((
__cڡ__
));

527 #ifdef 
__USE_GNU


528 
	$ff�
 (
__l
�
__THROW
 
	`__��ibu�__
 ((
__cڡ__
));

529 #ifde�
__GNUC__


530 
__ex�nsi�__
 
	$ff�l
 (
__�
)

531 
__THROW
 
	`__��ibu�__
 ((
__cڡ__
));

536 
	$�r��cmp
 (
__cڡ
 *
__s1
, __cڡ *
__s2
)

537 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

540 
	$����cmp
 (
__cڡ
 *
__s1
, __cڡ *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$�r��cmp_l
 (
__cڡ
 *
__s1
, __cڡ *
__s2
,

548 
__lo��_t
 
__loc
)

549 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2, 3));

551 
	$����cmp_l
 (
__cڡ
 *
__s1
, __cڡ *
__s2
,

552 
size_t
 
__n
, 
__lo��_t
 
__loc
)

553 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$�r�p
 (**
__��ri�
 
__�r�gp
,

560 
__cڡ
 *
__��ri�
 
__d�im
)

561 
__THROW
 
	`__n�nu�
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$�rsig�l
 (
__sig
�
__THROW
;

569 *
	$__�p�y
 (*
__��ri�
 
__de�
, 
__cڡ
 *__��ri� 
__�c
)

570 
__THROW
 
	`__n�nu�
 ((1, 2));

571 *
	$�p�y
 (*
__��ri�
 
__de�
, 
__cڡ
 *__��ri� 
__�c
)

572 
__THROW
 
	`__n�nu�
 ((1, 2));

576 *
	$__���y
 (*
__��ri�
 
__de�
,

577 
__cڡ
 *
__��ri�
 
__�c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n�nu�
 ((1, 2));

579 *
	$���y
 (*
__��ri�
 
__de�
,

580 
__cڡ
 *
__��ri�
 
__�c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n�nu�
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$�rv�scmp
 (
__cڡ
 *
__s1
, __cڡ *
__s2
)

587 
__THROW
 
__��ibu�_pu�__
 
	`__n�nu�
 ((1, 2));

590 *
	$�r�y
 (*
__�r�g
�
__THROW
 
	`__n�nu�
 ((1));

593 *
	$mem�ob
 (*
__s
, 
size_t
 
__n
�
__THROW
 
	`__n�nu�
 ((1));

595 #i�de�
ba��me


600 #ifde�
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba��me
 (*
__f��ame
)

602 
__THROW
 
	`__asm
 ("ba��me"�
	`__n�nu�
 ((1));

603 "C++" 
__cڡ
 *
	$ba��me
 (
__cڡ
 *
__f��ame
)

604 
__THROW
 
	`__asm
 ("ba��me"�
	`__n�nu�
 ((1));

606 *
	$ba��me
 (
__cڡ
 *
__f��ame
�
__THROW
 
	`__n�nu�
 ((1));

612 #i�
def�ed
 
__GNUC__
 && __GNUC__ >= 2

613 #i�
def�ed
 
__OPTIMIZE__
 && !def�ed 
__OPTIMIZE_SIZE__
 \

614 && !
def�ed
 
__NO_INLINE__
 && !def�ed 
__�lu�lus


634 
	~<b�s/�r�g.h
>

637 
	~<b�s/�r�g2.h
>

640 #i�
__USE_FORTIFY_LEVEL
 > 0 && 
def�ed
 
__ex��_�ways_�l�e


642 
	~<b�s/�r�g3.h
>

646 
__END_DECLS


	@/usr/include/sys/time.h

20 #i�de�
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<�u�s.h
>

25 
	~<b�s/ty�s.h
>

26 
	#__�ed_time_t


	)

27 
	~<time.h
>

28 
	#__�ed_timev�


	)

29 
	~<b�s/time.h
>

31 
	~<sys/���.h
>

33 #i�de�
__su�c�ds_t_def�ed


34 
__su�c�ds_t
 
	tsu�c�ds_t
;

35 
	#__su�c�ds_t_def�ed


	)

39 
	g__BEGIN_DECLS


41 #ifde�
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_�c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n�c
 = (
tv
)->
tv_u�c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_�c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u�c
 = (
ts
)->
tv_n�c
 / 1000; \

50 }

	)

54 #ifde�
__USE_BSD


57 
	stimez�e


59 
	mtz_m�u�swe�
;

60 
	mtz_d�time
;

63 
timez�e
 *
	t__��ri�
 
	t__timez�e_�r_t
;

65 *
	t__��ri�
 
	t__timez�e_�r_t
;

73 
	$g�timeofday
 (
timev�
 *
__��ri�
 
__tv
,

74 
__timez�e_�r_t
 
__tz
�
__THROW
 
	`__n�nu�
 ((1));

76 #ifde�
__USE_BSD


79 
	$��imeofday
 (
__cڡ
 
timev�
 *
__tv
,

80 
__cڡ
 
timez�e
 *
__tz
)

81 
__THROW
 
	`__n�nu�
 ((1));

87 
	$adjtime
 (
__cڡ
 
timev�
 *
__d��
,

88 
timev�
 *
__�dd��
�
__THROW
;

93 
	e__�im�_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	s�im�v�


112 
timev�
 
�_��rv�
;

114 
timev�
 
�_v�ue
;

117 #i�
def�ed
 
__USE_GNU
 && !def�ed 
__�lu�lus


120 
__�im�_which
 
	t__�im�_which_t
;

122 
	t__�im�_which_t
;

127 
	$g��im�
 (
__�im�_which_t
 
__which
,

128 
�im�v�
 *
__v�ue
�
__THROW
;

133 
	$�t�im�
 (
__�im�_which_t
 
__which
,

134 
__cڡ
 
�im�v�
 *
__��ri�
 
__�w
,

135 
�im�v�
 *
__��ri�
 
__�d
�
__THROW
;

140 
	$utimes
 (
__cڡ
 *
__f�e
, __cڡ 
timev�
 
__tvp
[2])

141 
__THROW
 
	`__n�nu�
 ((1));

143 #ifde�
__USE_BSD


145 
	$lutimes
 (
__cڡ
 *
__f�e
, __cڡ 
timev�
 
__tvp
[2])

146 
__THROW
 
	`__n�nu�
 ((1));

149 
	$futimes
 (
__fd
, 
__cڡ
 
timev�
 
__tvp
[2]�
__THROW
;

152 #ifde�
__USE_GNU


156 
	$futime�t
 (
__fd
, 
__cڡ
 *
__f�e
,

157 
__cڡ
 
timev�
 
__tvp
[2]�
__THROW
;

161 #ifde�
__USE_BSD


164 
	#tim�is�t
(
tvp
�(�vp)->
tv_�c
 || (tvp)->
tv_u�c
)

	)

165 
	#tim���r
(
tvp
�(�vp)->
tv_�c
 = (tvp)->
tv_u�c
 = 0)

	)

166 
	#tim�cmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_�c
 =�(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u�c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_�c
 
	`CMP
 (
b
)->tv_�c))

	)

170 
	#tim�add
(
a
, 
b
, 
�su�
) \

172 (
�su�
)->
tv_�c
 = (
a
)->tv_��+ (
b
)->tv_sec; \

173 (
�su�
)->
tv_u�c
 = (
a
)->tv_u��+ (
b
)->tv_usec; \

174 i�((
�su�
)->
tv_u�c
 >= 1000000) \

176 ++(
�su�
)->
tv_�c
; \

177 (
�su�
)->
tv_u�c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#tim�sub
(
a
, 
b
, 
�su�
) \

182 (
�su�
)->
tv_�c
 = (
a
)->tv_��- (
b
)->tv_sec; \

183 (
�su�
)->
tv_u�c
 = (
a
)->tv_u��- (
b
)->tv_usec; \

184 i�((
�su�
)->
tv_u�c
 < 0) { \

185 --(
�su�
)->
tv_�c
; \

186 (
�su�
)->
tv_u�c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/unistd.h

23 #i�def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<�u�s.h
>

28 
	g__BEGIN_DECLS


33 #ifde�
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #�i�
def�ed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #�i�
def�ed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #�i�
def�ed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde�
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #�i�
def�ed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #�i�
def�ed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde�
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #�i�
def�ed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #�i�
def�ed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<b�s/posix_�t.h
>

206 #i�
def�ed
 
__USE_UNIX98
 || def�ed 
__USE_XOPEN2K


207 
	~<b�s/�v��m�ts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<b�s/ty�s.h
>

220 #i�def 
__ssize_t_def�ed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_def�ed


	)

225 
	#__�ed_size_t


	)

226 
	#__�ed_NULL


	)

227 
	~<�ddef.h
>

229 #i�
def�ed
 
__USE_XOPEN
 || def�ed 
__USE_XOPEN2K


232 #i�de�
__gid_t_def�ed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_def�ed


	)

237 #i�de�
__uid_t_def�ed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_def�ed


	)

242 #i�de�
__off_t_def�ed


243 #i�de�
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_def�ed


	)

250 #i�
def�ed
 
__USE_LARGEFILE64
 && !def�ed 
__off64_t_def�ed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_def�ed


	)

255 #i�de�
__u�c�ds_t_def�ed


256 
__u�c�ds_t
 
	tu�c�ds_t
;

257 
	#__u�c�ds_t_def�ed


	)

260 #i�de�
__pid_t_def�ed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_def�ed


	)

266 #i�
def�ed
 
__USE_MISC
 || def�ed 
__USE_XOPEN_EXTENDED
 || def�ed 
__USE_XOPEN2K


267 #i�de�
__���_t_def�ed


268 
__���_t
 
	t���_t
;

269 
	#__���_t_def�ed


	)

273 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN


274 #i�de�
__sock�n_t_def�ed


275 
__sock�n_t
 
	tsock�n_t
;

276 
	#__sock�n_t_def�ed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac�ss
 (
__cڡ
 *
__�me
, 
__ty�
�
__THROW
 
	`__n�nu�
 ((1));

290 #ifde�
__USE_GNU


293 
	$euidac�ss
 (
__cڡ
 *
__�me
, 
__ty�
)

294 
__THROW
 
	`__n�nu�
 ((1));

297 
	$�c�ss
 (
__cڡ
 *
__�me
, 
__ty�
)

298 
__THROW
 
	`__n�nu�
 ((1));

301 #ifde�
__USE_ATFILE


305 
	$�c�s�t
 (
__fd
, 
__cڡ
 *
__f�e
, 
__ty�
, 
__�ag
)

306 
__THROW
 
	`__n�nu�
 ((2)�
__wur
;

311 #i�def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i�
def�ed
 
__USE_BSD
 && !def�ed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i�de�
__USE_FILE_OFFSET64


331 
__off_t
 
	$l�ek
 (
__fd
, 
__off_t
 
__off�t
, 
__wh��
�
__THROW
;

333 #ifde�
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l�ek
,

335 (
__fd
, 
__off64_t
 
__off�t
, 
__wh��
),

336 
l�ek64
);

338 
	#l�ek
 
l�ek64


	)

341 #ifde�
__USE_LARGEFILE64


342 
__off64_t
 
	$l�ek64
 (
__fd
, 
__off64_t
 
__off�t
, 
__wh��
)

343 
__THROW
;

350 
	`�o�
 (
__fd
);

357 
ssize_t
 
	$�ad
 (
__fd
, *
__buf
, 
size_t
 
__nby�s
�
__wur
;

363 
ssize_t
 
	$wr�e
 (
__fd
, 
__cڡ
 *
__buf
, 
size_t
 
__n
�
__wur
;

365 #i�
def�ed
 
__USE_UNIX98
 || def�ed 
__USE_XOPEN2K8


366 #i�de�
__USE_FILE_OFFSET64


373 
ssize_t
 
	$��d
 (
__fd
, *
__buf
, 
size_t
 
__nby�s
,

374 
__off_t
 
__off�t
�
__wur
;

381 
ssize_t
 
	$pwr�e
 (
__fd
, 
__cڡ
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off�t
�
__wur
;

384 #ifde�
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
��d
, (
__fd
, *
__buf
, 
size_t
 
__nby�s
,

386 
__off64_t
 
__off�t
),

387 
��d64
�
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwr�e
, (
__fd
, 
__cڡ
 *
__buf
,

389 
size_t
 
__nby�s
, 
__off64_t
 
__off�t
),

390 
pwr�e64
�
__wur
;

392 
	#��d
 
��d64


	)

393 
	#pwr�e
 
pwr�e64


	)

397 #ifde�
__USE_LARGEFILE64


401 
ssize_t
 
	$��d64
 (
__fd
, *
__buf
, 
size_t
 
__nby�s
,

402 
__off64_t
 
__off�t
�
__wur
;

405 
ssize_t
 
	$pwr�e64
 (
__fd
, 
__cڡ
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off�t
�
__wur
;

414 
	$p�e
 (
__p�edes
[2]�
__THROW
 
__wur
;

416 #ifde�
__USE_GNU


419 
	$p�e2
 (
__p�edes
[2], 
__�ags
�
__THROW
 
__wur
;

429 
	$��m
 (
__�c�ds
�
__THROW
;

441 
	`��p
 (
__�c�ds
);

443 #i�(
def�ed
 
__USE_XOPEN_EXTENDED
 && !def�ed 
__USE_XOPEN2K8
) \

444 || 
def�ed
 
__USE_BSD


449 
__u�c�ds_t
 
	$u��m
 (
__u�c�ds_t
 
__v�ue
, __u�c�ds_�
__��rv�
)

450 
__THROW
;

457 
	`u��p
 (
__u�c�ds_t
 
__u�c�ds
);

466 
	`�u�
 ();

470 
	$chown
 (
__cڡ
 *
__f�e
, 
__uid_t
 
__ow�r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

473 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN_EXTENDED
 || def�ed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow�r
, 
__gid_t
 
__group
�
__THROW
 
__wur
;

480 
	$lchown
 (
__cڡ
 *
__f�e
, 
__uid_t
 
__ow�r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

485 #ifde�
__USE_ATFILE


488 
	$fchow�t
 (
__fd
, 
__cڡ
 *
__f�e
, 
__uid_t
 
__ow�r
,

489 
__gid_t
 
__group
, 
__�ag
)

490 
__THROW
 
	`__n�nu�
 ((2)�
__wur
;

494 
	$chd�
 (
__cڡ
 *
__�th
�
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

496 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN_EXTENDED
 || def�ed 
__USE_XOPEN2K8


498 
	$fchd�
 (
__fd
�
__THROW
 
__wur
;

508 *
	$g�cwd
 (*
__buf
, 
size_t
 
__size
�
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$g�_cu��t_d�_�me
 (�
__THROW
;

517 #i�(
def�ed
 
__USE_XOPEN_EXTENDED
 && !def�ed 
__USE_XOPEN2K8
) \

518 || 
def�ed
 
__USE_BSD


522 *
	$g�wd
 (*
__buf
)

523 
__THROW
 
	`__n�nu�
 ((1)�
__��ibu�_d����d__
 
__wur
;

528 
	$dup
 (
__fd
�
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
�
__THROW
;

533 #ifde�
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__�ags
�
__THROW
;

540 **
__�v��
;

541 #ifde�
__USE_GNU


542 **
�v��
;

548 
	$execve
 (
__cڡ
 *
__�th
, *__cڡ 
__�gv
[],

549 *
__cڡ
 
__�vp
[]�
__THROW
 
	`__n�nu�
 ((1, 2));

551 #ifde�
__USE_XOPEN2K8


554 
	$�xecve
 (
__fd
, *
__cڡ
 
__�gv
[], *__cڡ 
__�vp
[])

555 
__THROW
 
	`__n�nu�
 ((2));

560 
	$execv
 (
__cڡ
 *
__�th
, *__cڡ 
__�gv
[])

561 
__THROW
 
	`__n�nu�
 ((1, 2));

565 
	$exe�e
 (
__cڡ
 *
__�th
, __cڡ *
__�g
, ...)

566 
__THROW
 
	`__n�nu�
 ((1, 2));

570 
	$exe�
 (
__cڡ
 *
__�th
, __cڡ *
__�g
, ...)

571 
__THROW
 
	`__n�nu�
 ((1, 2));

575 
	$execvp
 (
__cڡ
 *
__f�e
, *__cڡ 
__�gv
[])

576 
__THROW
 
	`__n�nu�
 ((1, 2));

581 
	$exe�p
 (
__cڡ
 *
__f�e
, __cڡ *
__�g
, ...)

582 
__THROW
 
	`__n�nu�
 ((1, 2));

584 #ifde�
__USE_GNU


587 
	$execv�
 (
__cڡ
 *
__f�e
, *__cڡ 
__�gv
[],

588 *
__cڡ
 
__�vp
[])

589 
__THROW
 
	`__n�nu�
 ((1, 2));

593 #i�
def�ed
 
__USE_MISC
 || def�ed 
__USE_XOPEN


595 
	$ni�
 (
__�c
�
__THROW
 
__wur
;

600 
	$_ex�
 (
__��us
�
	`__��ibu�__
 ((
__nܑu�__
));

606 
	~<b�s/c��ame.h
>

609 
	$�thc�f
 (
__cڡ
 *
__�th
, 
__�me
)

610 
__THROW
 
	`__n�nu�
 ((1));

613 
	$�hc�f
 (
__fd
, 
__�me
�
__THROW
;

616 
	$sysc�f
 (
__�me
�
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c�f�r
 (
__�me
, *
__buf
, 
size_t
 
__�n
�
__THROW
;

625 
__pid_t
 
	$g�pid
 (�
__THROW
;

628 
__pid_t
 
	$g��id
 (�
__THROW
;

632 #i�de�
__FAVOR_BSD


633 
__pid_t
 
	$g�pg�
 (�
__THROW
;

635 #ifde�
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
g�pg�
, (__pid_�
__pid
), 
__g�pgid
);

638 
	#g�pg�
 
__g�pgid


	)

643 
__pid_t
 
	$__g�pgid
 (
__pid_t
 
__pid
�
__THROW
;

644 #i�
def�ed
 
__USE_XOPEN_EXTENDED
 || def�ed 
__USE_XOPEN2K8


645 
__pid_t
 
	$g�pgid
 (
__pid_t
 
__pid
�
__THROW
;

652 
	$��gid
 (
__pid_t
 
__pid
, __pid_�
__pgid
�
__THROW
;

654 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_BSD
 || def�ed 
__USE_XOPEN_EXTENDED


665 #i�de�
__FAVOR_BSD


669 
	$��g�
 (�
__THROW
;

674 #ifde�
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
��g�
, (
__pid_t
 
__pid
, __pid_�
__pg�
), 
��gid
);

677 
	#��g�
 
��gid


	)

686 
__pid_t
 
	$�tsid
 (�
__THROW
;

688 #i�
def�ed
 
__USE_XOPEN_EXTENDED
 || def�ed 
__USE_XOPEN2K8


690 
__pid_t
 
	$g�sid
 (
__pid_t
 
__pid
�
__THROW
;

694 
__uid_t
 
	$g�uid
 (�
__THROW
;

697 
__uid_t
 
	$g�euid
 (�
__THROW
;

700 
__gid_t
 
	$g�gid
 (�
__THROW
;

703 
__gid_t
 
	$g�egid
 (�
__THROW
;

708 
	$g�groups
 (
__size
, 
__gid_t
 
__li�
[]�
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_memb�
 (
__gid_t
 
__gid
�
__THROW
;

719 
	$�tuid
 (
__uid_t
 
__uid
�
__THROW
;

721 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN_EXTENDED


724 
	$��euid
 (
__uid_t
 
__ruid
, __uid_�
__euid
�
__THROW
;

727 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN2K


729 
	$��uid
 (
__uid_t
 
__uid
�
__THROW
;

736 
	$�tgid
 (
__gid_t
 
__gid
�
__THROW
;

738 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN_EXTENDED


741 
	$��egid
 (
__gid_t
 
__rgid
, __gid_�
__egid
�
__THROW
;

744 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN2K


746 
	$��gid
 (
__gid_t
 
__gid
�
__THROW
;

749 #ifde�
__USE_GNU


752 
	$g��suid
 (
__uid_t
 *
__ruid
, __uid_�*
__euid
, __uid_�*
__suid
)

753 
__THROW
;

757 
	$g��sgid
 (
__gid_t
 *
__rgid
, __gid_�*
__egid
, __gid_�*
__sgid
)

758 
__THROW
;

762 
	$��esuid
 (
__uid_t
 
__ruid
, __uid_�
__euid
, __uid_�
__suid
)

763 
__THROW
;

767 
	$��esgid
 (
__gid_t
 
__rgid
, __gid_�
__egid
, __gid_�
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f�k
 (�
__THROW
;

777 #i�(
def�ed
 
__USE_XOPEN_EXTENDED
 && !def�ed 
__USE_XOPEN2K8
) \

778 || 
def�ed
 
__USE_BSD


783 
__pid_t
 
	$vf�k
 (�
__THROW
;

789 *
	$�y�me
 (
__fd
�
__THROW
;

793 
	$�y�me_r
 (
__fd
, *
__buf
, 
size_t
 
__bu�
)

794 
__THROW
 
	`__n�nu�
 ((2)�
__wur
;

798 
	$i��y
 (
__fd
�
__THROW
;

800 #i�
def�ed
 
__USE_BSD
 \

801 || (
def�ed
 
__USE_XOPEN_EXTENDED
 && !def�ed 
__USE_UNIX98
)

804 
	$�y��
 (�
__THROW
;

809 
	$l�k
 (
__cڡ
 *
__�om
, __cڡ *
__to
)

810 
__THROW
 
	`__n�nu�
 ((1, 2)�
__wur
;

812 #ifde�
__USE_ATFILE


815 
	$l�k�
 (
__�omfd
, 
__cڡ
 *
__�om
, 
__tofd
,

816 
__cڡ
 *
__to
, 
__�ags
)

817 
__THROW
 
	`__n�nu�
 ((2, 4)�
__wur
;

820 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN_EXTENDED
 || def�ed 
__USE_XOPEN2K


822 
	$syml�k
 (
__cڡ
 *
__�om
, __cڡ *
__to
)

823 
__THROW
 
	`__n�nu�
 ((1, 2)�
__wur
;

828 
ssize_t
 
	$�adl�k
 (
__cڡ
 *
__��ri�
 
__�th
,

829 *
__��ri�
 
__buf
, 
size_t
 
__�n
)

830 
__THROW
 
	`__n�nu�
 ((1, 2)�
__wur
;

833 #ifde�
__USE_ATFILE


835 
	$syml�k�
 (
__cڡ
 *
__�om
, 
__tofd
,

836 
__cڡ
 *
__to
�
__THROW
 
	`__n�nu�
 ((1, 3)�
__wur
;

839 
ssize_t
 
	$�adl�k�
 (
__fd
, 
__cڡ
 *
__��ri�
 
__�th
,

840 *
__��ri�
 
__buf
, 
size_t
 
__�n
)

841 
__THROW
 
	`__n�nu�
 ((2, 3)�
__wur
;

845 
	$uƚk
 (
__cڡ
 *
__�me
�
__THROW
 
	`__n�nu�
 ((1));

847 #ifde�
__USE_ATFILE


849 
	$uƚk�
 (
__fd
, 
__cڡ
 *
__�me
, 
__�ag
)

850 
__THROW
 
	`__n�nu�
 ((2));

854 
	$rmd�
 (
__cڡ
 *
__�th
�
__THROW
 
	`__n�nu�
 ((1));

858 
__pid_t
 
	$tcg�pg�
 (
__fd
�
__THROW
;

861 
	$tc��g�
 (
__fd
, 
__pid_t
 
__pg�_id
�
__THROW
;

868 *
	`g�log�
 ();

869 #i�
def�ed
 
__USE_REENTRANT
 || def�ed 
__USE_POSIX199506


876 
	$g�log�_r
 (*
__�me
, 
size_t
 
__�me_�n
�
	`__n�nu�
 ((1));

879 #ifdef 
__USE_BSD


881 
	$��og�
 (
__cڡ
 *
__�me
�
__THROW
 
	`__n�nu�
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__�ed_g��t


	)

890 
	~<g��t.h
>

894 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_UNIX98
 || def�ed 
__USE_XOPEN2K


898 
	$g�ho��me
 (*
__�me
, 
size_t
 
__�n
�
__THROW
 
	`__n�nu�
 ((1));

902 #i�
def�ed
 
__USE_BSD
 || (def�ed 
__USE_XOPEN
 && !def�ed 
__USE_UNIX98
)

905 
	$�tho��me
 (
__cڡ
 *
__�me
, 
size_t
 
__�n
)

906 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

910 
	$�tho�id
 (
__id
�
__THROW
 
__wur
;

916 
	$g�doma��me
 (*
__�me
, 
size_t
 
__�n
)

917 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

918 
	$�tdoma��me
 (
__cڡ
 *
__�me
, 
size_t
 
__�n
)

919 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

925 
	$vh�gup
 (�
__THROW
;

928 
	$�voke
 (
__cڡ
 *
__f�e
�
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

936 
	$�of�
 (*
__�m�e_buf�r
, 
size_t
 
__size
,

937 
size_t
 
__off�t
, 
__s��
)

938 
__THROW
 
	`__n�nu�
 ((1));

944 
	$ac�
 (
__cڡ
 *
__�me
�
__THROW
;

948 *
	$g�u�rsh�l
 (�
__THROW
;

949 
	$�du�rsh�l
 (�
__THROW
;

950 
	$�tu�rsh�l
 (�
__THROW
;

956 
	$d�m�
 (
__nochd�
, 
__no�o�
�
__THROW
 
__wur
;

960 #i�
def�ed
 
__USE_BSD
 || (def�ed 
__USE_XOPEN
 && !def�ed 
__USE_XOPEN2K
)

963 
	$chro�
 (
__cڡ
 *
__�th
�
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

967 *
	$g��ss
 (
__cڡ
 *
__�om�
�
	`__n�nu�
 ((1));

971 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN
 || def�ed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN_EXTENDED


983 
	`g�ho�id
 ();

986 
	$sync
 (�
__THROW
;

989 #i�
def�ed
 
__USE_BSD
 || !def�ed 
__USE_XOPEN2K


992 
	$g��gesize
 (�
__THROW
 
	`__��ibu�__
 ((
__cڡ__
));

997 
	$g�d�b�size
 (�
__THROW
;

1003 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN_EXTENDED
 || def�ed 
__USE_XOPEN2K8


1006 #i�de�
__USE_FILE_OFFSET64


1007 
	$�un��
 (
__cڡ
 *
__f�e
, 
__off_t
 
__�ngth
)

1008 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

1010 #ifde�
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
�un��
,

1012 (
__cڡ
 *
__f�e
, 
__off64_t
 
__�ngth
),

1013 
�un��64
�
	`__n�nu�
 ((1)�
__wur
;

1015 
	#�un��
 
�un��64


	)

1018 #ifde�
__USE_LARGEFILE64


1019 
	$�un��64
 (
__cڡ
 *
__f�e
, 
__off64_t
 
__�ngth
)

1020 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

1025 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN_EXTENDED
 || def�ed 
__USE_XOPEN2K


1028 #i�de�
__USE_FILE_OFFSET64


1029 
	$�run��
 (
__fd
, 
__off_t
 
__�ngth
�
__THROW
 
__wur
;

1031 #ifde�
__REDIRECT_NTH


1032 
	`__REDIRECT_NTH
 (
�run��
, (
__fd
, 
__off64_t
 
__�ngth
),

1033 
�run��64
�
__wur
;

1035 
	#�run��
 
�run��64


	)

1038 #ifde�
__USE_LARGEFILE64


1039 
	$�run��64
 (
__fd
, 
__off64_t
 
__�ngth
�
__THROW
 
__wur
;

1045 #i�(
def�ed
 
__USE_XOPEN_EXTENDED
 && !def�ed 
__USE_XOPEN2K
) \

1046 || 
def�ed
 
__USE_MISC


1050 
	$brk
 (*
__addr
�
__THROW
 
__wur
;

1056 *
	$sbrk
 (
���_t
 
__d��
�
__THROW
;

1060 #ifde�
__USE_MISC


1071 
	$sys��
 (
__sy�o
, ...�
__THROW
;

1076 #i�(
def�ed
 
__USE_MISC
 || def�ed 
__USE_XOPEN_EXTENDED
�&& !def�ed 
F_LOCK


1088 
	#F_ULOCK
 0

	)

1089 
	#F_LOCK
 1

	)

1090 
	#F_TLOCK
 2

	)

1091 
	#F_TEST
 3

	)

1093 #i�de�
__USE_FILE_OFFSET64


1094 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__�n
�
__wur
;

1096 #ifde�
__REDIRECT


1097 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__�n
),

1098 
lockf64
�
__wur
;

1100 
	#lockf
 
lockf64


	)

1103 #ifde�
__USE_LARGEFILE64


1104 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__�n
�
__wur
;

1109 #ifde�
__USE_GNU


1114 
	#TEMP_FAILURE_RETRY
(
ex�essi�
) \

1115 (
__ex�nsi�__
 \

1116 ({ 
__�su�
; \

1117 d�
__�su�
 = (�(
ex�essi�
); \

1118 
__�su�
 =�-1L && 
��o
 =�
EINTR
); \

1119 
__�su�
; 
	}
}))

	)

1122 #i�
def�ed
 
__USE_POSIX199309
 || def�ed 
__USE_UNIX98


1125 
fd�async
 (
__f�des
);

1131 #ifdef 
__USE_XOPEN


1133 *
	$�y�
 (
__cڡ
 *
__key
, __cڡ *
__��
)

1134 
__THROW
 
	`__n�nu�
 ((1, 2));

1138 
	$��y�
 (*
__libc_block
, 
__ed�ag
�
__THROW
 
	`__n�nu�
 ((1));

1145 
	$swab
 (
__cڡ
 *
__��ri�
 
__�om
, *__��ri� 
__to
,

1146 
ssize_t
 
__n
�
__THROW
 
	`__n�nu�
 ((1, 2));

1152 #i�
def�ed
 
__USE_XOPEN
 || def�ed 
__USE_XOPEN2K8


1154 *
	$�mid
 (*
__s
�
__THROW
;

1159 #i�
__USE_FORTIFY_LEVEL
 > 0 && 
def�ed
 
__ex��_�ways_�l�e


1160 
	~<b�s/uni�d.h
>

1163 
__END_DECLS


	@/usr/include/alloca.h

19 #i�def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<�u�s.h
>

24 
	#__�ed_size_t


	)

25 
	~<�ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde�
�lo�


33 *
	$�lo�
 (
size_t
 
__size
�
__THROW
;

35 #ifdef 
__GNUC__


36 
	#�lo�
(
size
�
	`__bu�t�_�lo�
 (size)

	)

39 
__END_DECLS


	@/usr/include/bits/confname.h

21 #i�de�
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

19 #i�de�
_UNISTD_H


23 
	~<b�s/w�dsize.h
>

43 #i�
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/posix_opt.h

20 #i�def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde�
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i�de�
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
�r�tf
)

26 
	$__LDBL_REDIR_DECL
 (
��tf
)

27 
	$__LDBL_REDIR_DECL
 (
�r�tf
)

28 
	$__LDBL_REDIR_DECL
 (
v�r�tf
)

29 
	$__LDBL_REDIR_DECL
 (
v��tf
)

30 
	$__LDBL_REDIR_DECL
 (
v�r�tf
)

31 #i�
def�ed
 
__USE_ISOC99
 && !def�ed 
__USE_GNU
 \

32 && !
def�ed
 
__REDIRECT
 \

33 && (
def�ed
 
__STRICT_ANSI__
 || def�ed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fs�nf
, 
__�dbl___isoc99_fs�nf
)

35 
	$__LDBL_REDIR1_DECL
 (
s�nf
, 
__�dbl___isoc99_s�nf
)

36 
	$__LDBL_REDIR1_DECL
 (
ss�nf
, 
__�dbl___isoc99_ss�nf
)

38 
	$__LDBL_REDIR_DECL
 (
fs�nf
)

39 
	$__LDBL_REDIR_DECL
 (
s�nf
)

40 
	$__LDBL_REDIR_DECL
 (
ss�nf
)

42 
__END_NAMESPACE_STD


44 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_ISOC99
 || def�ed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
���tf
)

47 
	$__LDBL_REDIR_DECL
 (
v���tf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i�!
def�ed
 
__USE_GNU
 && !def�ed 
__REDIRECT
 \

54 && (
def�ed
 
__STRICT_ANSI__
 || def�ed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfs�nf
, 
__�dbl___isoc99_vfs�nf
)

56 
	$__LDBL_REDIR1_DECL
 (
vs�nf
, 
__�dbl___isoc99_vs�nf
)

57 
	$__LDBL_REDIR1_DECL
 (
vss�nf
, 
__�dbl___isoc99_vss�nf
)

59 
	$__LDBL_REDIR_DECL
 (
vfs�nf
)

60 
	$__LDBL_REDIR_DECL
 (
vss�nf
)

61 
	$__LDBL_REDIR_DECL
 (
vs�nf
)

63 
__END_NAMESPACE_C99


66 #ifde�
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd��tf
)

68 
	$__LDBL_REDIR_DECL
 (
d��tf
)

69 
	$__LDBL_REDIR_DECL
 (
va�r�tf
)

70 
	$__LDBL_REDIR_DECL
 (
__a�r�tf
)

71 
	$__LDBL_REDIR_DECL
 (
a�r�tf
)

72 
	$__LDBL_REDIR_DECL
 (
ob�ack_��tf
)

73 
	$__LDBL_REDIR_DECL
 (
ob�ack_v��tf
)

76 #i�
__USE_FORTIFY_LEVEL
 > 0 && 
def�ed
 
__ex��_�ways_�l�e


77 
	$__LDBL_REDIR_DECL
 (
__�r�tf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v�r�tf_chk
)

79 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_ISOC99
 || def�ed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__���tf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v���tf_chk
)

83 #i�
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__�r�tf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__��tf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__v�r�tf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v��tf_chk
)

88 #ifde�
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a�r�tf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va�r�tf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d��tf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd��tf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob�ack_��tf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob�ack_v��tf_chk
)

	@/usr/include/bits/stdio.h

20 #i�de�
_STDIO_H


24 #i�de�
__ex��_�l�e


25 
	#__STDIO_INLINE
 
�l�e


	)

27 
	#__STDIO_INLINE
 
__ex��_�l�e


	)

31 #ifde�
__USE_EXTERN_INLINES


34 #i�!(
__USE_FORTIFY_LEVEL
 > 0 && 
def�ed
 
__ex��_�ways_�l�e
)

36 
__STDIO_INLINE
 

37 
	$v��tf
 (
__cڡ
 *
__��ri�
 
__fmt
, 
_G_va_li�
 
__�g
)

39  
	`v�r�tf
 (
�dout
, 
__fmt
, 
__�g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$g�ch�
 ()

47  
	`_IO_g�c
 (
�d�
);

48 
	}
}

51 #ifde�
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fg�c_u�ocked
 (
FILE
 *
__�
)

56  
	`_IO_g�c_u�ocked
 (
__�
);

57 
	}
}

61 #i�
def�ed
 
__USE_POSIX
 || def�ed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$g�c_u�ocked
 (
FILE
 *
__�
)

66  
	`_IO_g�c_u�ocked
 (
__�
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$g�ch�_u�ocked
 ()

73  
	`_IO_g�c_u�ocked
 (
�d�
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch�
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
�dout
);

83 
	}
}

86 #ifde�
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$�utc_u�ocked
 (
__c
, 
FILE
 *
__��am
)

91  
	`_IO_putc_u�ocked
 (
__c
, 
__��am
);

92 
	}
}

96 #i�
def�ed
 
__USE_POSIX
 || def�ed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u�ocked
 (
__c
, 
FILE
 *
__��am
)

101  
	`_IO_putc_u�ocked
 (
__c
, 
__��am
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch�_u�ocked
 (
__c
)

108  
	`_IO_putc_u�ocked
 (
__c
, 
�dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$g�l�e
 (**
__l���
, 
size_t
 *
__n
, 
FILE
 *
__��am
)

118  
	`__g�d�im
 (
__l���
, 
__n
, '\n', 
__��am
);

119 
	}
}

123 #ifde�
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$�of_u�ocked
 (
FILE
 *
__��am
))

128  
	`_IO_�of_u�ocked
 (
__��am
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$��_u�ocked
 (
FILE
 *
__��am
))

135  
	`_IO_��_u�ocked
 (
__��am
);

136 
	}
}

142 #i�
def�ed
 
__USE_MISC
 && def�ed 
__GNUC__
 && def�ed 
__OPTIMIZE__
 \

143 && !
def�ed
 
	g__�lu�lus


145 
	#�d_u�ocked
(
�r
, 
size
, 
n
, 
��am
) \

146 (
	`__ex�nsi�__
 ((
	`__bu�t�_cڡ�t_p
 (
size
�&& __bu�t�_cڡ�t_�(
n
) \

147 && (
size_t
�(
size
�* (size_t�(
n
) <= 8 \

148 && (
size_t
�(
size
) != 0) \

149 ? ({ *
__�r
 = (*�(
�r
); \

150 
FILE
 *
__��am
 = (
��am
); \

151 
size_t
 
__�t
; \

152 
__�t
 = (
size_t
�(
size
�* (size_t�(
n
); \

153 
__�t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_g�c_u�ocked
 (
__��am
); \

156 i�(
__c
 =�
EOF
) \

158 *
__�r
++ = 
__c
; \

160 ((
size_t
�(
size
�* (size_t�(
n
�- 
__�t
) \

161 / (
size_t
�(
size
); }) \

162 : (((
	`__bu�t�_cڡ�t_p
 (
size
�&& (
size_t
) (size) == 0) \

163 || (
	`__bu�t�_cڡ�t_p
 (
n
�&& (
size_t
) (n) == 0)) \

165 ? ((�(
�r
), (�(
��am
), (�(
size
), \

166 (�(
n
), (
size_t
) 0) \

167 : 
	`�d_u�ocked
 (
�r
, 
size
, 
n
, 
��am
))))

	)

169 
	#fwr�e_u�ocked
(
�r
, 
size
, 
n
, 
��am
) \

170 (
	`__ex�nsi�__
 ((
	`__bu�t�_cڡ�t_p
 (
size
�&& __bu�t�_cڡ�t_�(
n
) \

171 && (
size_t
�(
size
�* (size_t�(
n
) <= 8 \

172 && (
size_t
�(
size
) != 0) \

173 ? ({ cڡ *
__�r
 = (cڡ *�(
�r
); \

174 
FILE
 *
__��am
 = (
��am
); \

175 
size_t
 
__�t
; \

176 
__�t
 = (
size_t
�(
size
�* (size_t�(
n
); \

177 
__�t
 > 0; --__cnt) \

178 i�(
	`_IO_putc_u�ocked
 (*
__�r
++, 
__��am
�=�
EOF
) \

180 ((
size_t
�(
size
�* (size_t�(
n
�- 
__�t
) \

181 / (
size_t
�(
size
); }) \

182 : (((
	`__bu�t�_cڡ�t_p
 (
size
�&& (
size_t
) (size) == 0) \

183 || (
	`__bu�t�_cڡ�t_p
 (
n
�&& (
size_t
) (n) == 0)) \

185 ? ((�(
�r
), (�(
��am
), (�(
size
), \

186 (�(
n
), (
size_t
) 0) \

187 : 
	`fwr�e_u�ocked
 (
�r
, 
size
, 
n
, 
��am
))))

	)

191 #unde�
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i�de�
_STDIO_H


24 
	$__�r�tf_chk
 (*
__��ri�
 
__s
, 
__�ag
, 
size_t
 
__��
,

25 
__cڡ
 *
__��ri�
 
__f�m�
, ...�
__THROW
;

26 
	$__v�r�tf_chk
 (*
__��ri�
 
__s
, 
__�ag
, 
size_t
 
__��
,

27 
__cڡ
 *
__��ri�
 
__f�m�
,

28 
_G_va_li�
 
__�
�
__THROW
;

30 #ifde�
__va_�g_�ck


31 
__ex��_�ways_�l�e
 

32 
	`__NTH
 (
	$�r�tf
 (*
__��ri�
 
__s
, 
__cڡ
 *__��ri� 
__fmt
, ...))

34  
	`__bu�t�___�r�tf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_�g_�ck
 ());

36 
	}
}

37 #�i�!
def�ed
 
__�lu�lus


38 
	#�r�tf
(
�r
, ...) \

39 
	`__bu�t�___�r�tf_chk
 (
�r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__ex��_�ways_�l�e
 

44 
__NTH
 (
	$v�r�tf
 (*
__��ri�
 
__s
, 
__cڡ
 *__��ri� 
__fmt
,

45 
_G_va_li�
 
__�
))

47  
	`__bu�t�___v�r�tf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__�
);

49 
	}
}

51 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_ISOC99
 || def�ed 
__USE_UNIX98


53 
	$__���tf_chk
 (*
__��ri�
 
__s
, 
size_t
 
__n
, 
__�ag
,

54 
size_t
 
__��
, 
__cڡ
 *
__��ri�
 
__f�m�
,

55 ...�
__THROW
;

56 
	$__v���tf_chk
 (*
__��ri�
 
__s
, 
size_t
 
__n
, 
__�ag
,

57 
size_t
 
__��
, 
__cڡ
 *
__��ri�
 
__f�m�
,

58 
_G_va_li�
 
__�
�
__THROW
;

60 #ifde�
__va_�g_�ck


61 
__ex��_�ways_�l�e
 

62 
	`__NTH
 (
	$���tf
 (*
__��ri�
 
__s
, 
size_t
 
__n
,

63 
__cڡ
 *
__��ri�
 
__fmt
, ...))

65  
	`__bu�t�___���tf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_�g_�ck
 ());

67 
	}
}

68 #�i�!
def�ed
 
__�lu�lus


69 
	#���tf
(
�r
, 
�n
, ...) \

70 
	`__bu�t�___���tf_chk
 (
�r
, 
�n
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__ex��_�ways_�l�e
 

75 
__NTH
 (
	$v���tf
 (*
__��ri�
 
__s
, 
size_t
 
__n
,

76 
__cڡ
 *
__��ri�
 
__fmt
, 
_G_va_li�
 
__�
))

78  
	`__bu�t�___v���tf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__�
);

80 
	}
}

84 #i�
__USE_FORTIFY_LEVEL
 > 1

86 
__�r�tf_chk
 (
FILE
 *
__��ri�
 
__��am
, 
__�ag
,

87 
__cڡ
 *
__��ri�
 
__f�m�
, ...);

88 
__��tf_chk
 (
__�ag
, 
__cڡ
 *
__��ri�
 
__f�m�
, ...);

89 
__v�r�tf_chk
 (
FILE
 *
__��ri�
 
__��am
, 
__�ag
,

90 
__cڡ
 *
__��ri�
 
__f�m�
, 
_G_va_li�
 
__�
);

91 
__v��tf_chk
 (
__�ag
, 
__cڡ
 *
__��ri�
 
__f�m�
,

92 
_G_va_li�
 
__�
);

94 #ifde�
__va_�g_�ck


95 
__ex��_�ways_�l�e
 

96 
	$�r�tf
 (
FILE
 *
__��ri�
 
__��am
, 
__cڡ
 *__��ri� 
__fmt
, ...)

98  
	`__�r�tf_chk
 (
__��am
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_�g_�ck
 ());

100 
	}
}

102 
__ex��_�ways_�l�e
 

103 
	$��tf
 (
__cڡ
 *
__��ri�
 
__fmt
, ...)

105  
	`__��tf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_�g_�ck
 ());

106 
	}
}

107 #�i�!
def�ed
 
__�lu�lus


108 
	#��tf
(...) \

109 
	`__��tf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#�r�tf
(
��am
, ...) \

111 
	`__�r�tf_chk
 (
��am
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__ex��_�ways_�l�e
 

115 
	$v��tf
 (
__cڡ
 *
__��ri�
 
__fmt
, 
_G_va_li�
 
__�
)

117 #ifde�
__USE_EXTERN_INLINES


118  
	`__v�r�tf_chk
 (
�dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__�
);

120  
	`__v��tf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__�
);

122 
	}
}

124 
__ex��_�ways_�l�e
 

125 
	$v�r�tf
 (
FILE
 *
__��ri�
 
__��am
,

126 
__cڡ
 *
__��ri�
 
__fmt
, 
_G_va_li�
 
__�
)

128  
	`__v�r�tf_chk
 (
__��am
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__�
);

129 
	}
}

131 #ifde�
__USE_GNU


133 
	$__a�r�tf_chk
 (**
__��ri�
 
__�r
, 
__�ag
,

134 
__cڡ
 *
__��ri�
 
__fmt
, ...)

135 
__THROW
 
	`__��ibu�__
 ((
	$__f�m�__
 (
__��tf__
, 3, 4))�
__wur
;

136 
	$__va�r�tf_chk
 (**
__��ri�
 
__�r
, 
__�ag
,

137 
__cڡ
 *
__��ri�
 
__fmt
, 
_G_va_li�
 
__�g
)

138 
__THROW
 
	`__��ibu�__
 ((
	$__f�m�__
 (
__��tf__
, 3, 0))�
__wur
;

139 
	$__d��tf_chk
 (
__fd
, 
__�ag
, 
__cڡ
 *
__��ri�
 
__fmt
,

140 ...�
	`__��ibu�__
 ((
	`__f�m�__
 (
__��tf__
, 3, 4)));

141 
	$__vd��tf_chk
 (
__fd
, 
__�ag
,

142 
__cڡ
 *
__��ri�
 
__fmt
, 
_G_va_li�
 
__�g
)

143 
	`__��ibu�__
 ((
	`__f�m�__
 (
__��tf__
, 3, 0)));

144 
	$__ob�ack_��tf_chk
 (
ob�ack
 *
__��ri�
 
__ob�ack
,

145 
__�ag
, 
__cڡ
 *
__��ri�
 
__f�m�
,

147 
__THROW
 
	`__��ibu�__
 ((
	`__f�m�__
 (
__��tf__
, 3, 4)));

148 
	$__ob�ack_v��tf_chk
 (
ob�ack
 *
__��ri�
 
__ob�ack
,

149 
__�ag
,

150 
__cڡ
 *
__��ri�
 
__f�m�
,

151 
_G_va_li�
 
__�gs
)

152 
__THROW
 
	`__��ibu�__
 ((
	`__f�m�__
 (
__��tf__
, 3, 0)));

154 #ifde�
__va_�g_�ck


155 
__ex��_�ways_�l�e
 

156 
	`__NTH
 (
	$a�r�tf
 (**
__��ri�
 
__�r
, 
__cڡ
 *__��ri� 
__fmt
, ...))

158  
	`__a�r�tf_chk
 (
__�r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_�g_�ck
 ());

160 
	}
}

162 
__ex��_�ways_�l�e
 

163 
__NTH
 (
	$__a�r�tf
 (**
__��ri�
 
__�r
, 
__cڡ
 *__��ri� 
__fmt
,

166  
	`__a�r�tf_chk
 (
__�r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_�g_�ck
 ());

168 
	}
}

170 
__ex��_�ways_�l�e
 

171 
	$d��tf
 (
__fd
, 
__cڡ
 *
__��ri�
 
__fmt
, ...)

173  
	`__d��tf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_�g_�ck
 ());

175 
	}
}

177 
__ex��_�ways_�l�e
 

178 
__NTH
 (
	$ob�ack_��tf
 (
ob�ack
 *
__��ri�
 
__ob�ack
,

179 
__cڡ
 *
__��ri�
 
__fmt
, ...))

181  
	`__ob�ack_��tf_chk
 (
__ob�ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_�g_�ck
 ());

183 
	}
}

184 #�i�!
def�ed
 
__�lu�lus


185 
	#a�r�tf
(
�r
, ...) \

186 
	`__a�r�tf_chk
 (
�r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a�r�tf
(
�r
, ...) \

188 
	`__a�r�tf_chk
 (
�r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d��tf
(
fd
, ...) \

190 
	`__d��tf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob�ack_��tf
(
ob�ack
, ...) \

192 
	`__ob�ack_��tf_chk
 (
ob�ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__ex��_�ways_�l�e
 

196 
__NTH
 (
	$va�r�tf
 (**
__��ri�
 
__�r
, 
__cڡ
 *__��ri� 
__fmt
,

197 
_G_va_li�
 
__�
))

199  
	`__va�r�tf_chk
 (
__�r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__�
);

200 
	}
}

202 
__ex��_�ways_�l�e
 

203 
	$vd��tf
 (
__fd
, 
__cڡ
 *
__��ri�
 
__fmt
, 
_G_va_li�
 
__�
)

205  
	`__vd��tf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__�
);

206 
	}
}

208 
__ex��_�ways_�l�e
 

209 
__NTH
 (
	$ob�ack_v��tf
 (
ob�ack
 *
__��ri�
 
__ob�ack
,

210 
__cڡ
 *
__��ri�
 
__fmt
, 
_G_va_li�
 
__�
))

212  
	`__ob�ack_v��tf_chk
 (
__ob�ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__�
);

214 
	}
}

220 *
	$__g�s_chk
 (*
__�r
, 
size_t
�
__wur
;

221 *
	`__REDIRECT
 (
__g�s_w�n
, (*
__�r
), 
g�s
)

222 
__wur
 
	`__w�ǉr
 ("please use fgets or getline instead, gets can't "

225 
__ex��_�ways_�l�e
 
__wur
 *

226 
	$g�s
 (*
__�r
)

228 i�(
	`__bos
 (
__�r
�!�(
size_t
) -1)

229  
	`__g�s_chk
 (
__�r
, 
	`__bos
 (__str));

230  
	`__g�s_w�n
 (
__�r
);

231 
	}
}

233 *
	$__fg�s_chk
 (*
__��ri�
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__��ri�
 
__��am
�
__wur
;

235 *
	`__REDIRECT
 (
__fg�s_��s
,

236 (*
__��ri�
 
__s
, 
__n
,

237 
FILE
 *
__��ri�
 
__��am
), 
fg�s
�
__wur
;

238 *
	`__REDIRECT
 (
__fg�s_chk_w�n
,

239 (*
__��ri�
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__��ri�
 
__��am
), 
__fg�s_chk
)

241 
__wur
 
	`__w�ǉr
 ("fgets called with bigger size�han�ength "

244 
__ex��_�ways_�l�e
 
__wur
 *

245 
	$fg�s
 (*
__��ri�
 
__s
, 
__n
, 
FILE
 *__��ri� 
__��am
)

247 i�(
	`__bos
 (
__s
�!�(
size_t
) -1)

249 i�(!
	`__bu�t�_cڡ�t_p
 (
__n
) || __n <= 0)

250  
	`__fg�s_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__��am
);

252 i�((
size_t
�
__n
 > 
	`__bos
 (
__s
))

253  
	`__fg�s_chk_w�n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__��am
);

255  
	`__fg�s_��s
 (
__s
, 
__n
, 
__��am
);

256 
	}
}

258 
size_t
 
	$__�d_chk
 (*
__��ri�
 
__�r
, 
size_t
 
__���
,

259 
size_t
 
__size
, size_�
__n
,

260 
FILE
 *
__��ri�
 
__��am
�
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__�d_��s
,

262 (*
__��ri�
 
__�r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__��ri�
 
__��am
),

264 
�d
�
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__�d_chk_w�n
,

266 (*
__��ri�
 
__�r
, 
size_t
 
__���
,

267 
size_t
 
__size
, size_�
__n
,

268 
FILE
 *
__��ri�
 
__��am
),

269 
__�d_chk
)

270 
__wur
 
	`__w�ǉr
 ("fread called with bigger size *�memb�han�ength "

273 
__ex��_�ways_�l�e
 
__wur
 
size_t


274 
	$�d
 (*
__��ri�
 
__�r
, 
size_t
 
__size
, size_�
__n
,

275 
FILE
 *
__��ri�
 
__��am
)

277 i�(
	`__bos0
 (
__�r
�!�(
size_t
) -1)

279 i�(!
	`__bu�t�_cڡ�t_p
 (
__size
)

280 || !
	`__bu�t�_cڡ�t_p
 (
__n
)

281 || (
__size
 | 
__n
�>�(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__�d_chk
 (
__�r
, 
	`__bos0
 (__�r), 
__size
, 
__n
, 
__��am
);

284 i�(
__size
 * 
__n
 > 
	`__bos0
 (
__�r
))

285  
	`__�d_chk_w�n
 (
__�r
, 
	`__bos0
 (__�r), 
__size
, 
__n
, 
__��am
);

287  
	`__�d_��s
 (
__�r
, 
__size
, 
__n
, 
__��am
);

288 
	}
}

290 #ifde�
__USE_GNU


291 *
	$__fg�s_u�ocked_chk
 (*
__��ri�
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__��ri�
 
__��am
�
__wur
;

293 *
	`__REDIRECT
 (
__fg�s_u�ocked_��s
,

294 (*
__��ri�
 
__s
, 
__n
,

295 
FILE
 *
__��ri�
 
__��am
), 
fg�s_u�ocked
�
__wur
;

296 *
	`__REDIRECT
 (
__fg�s_u�ocked_chk_w�n
,

297 (*
__��ri�
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__��ri�
 
__��am
), 
__fg�s_u�ocked_chk
)

299 
__wur
 
	`__w�ǉr
 ("fgets_unlocked called with bigger size�han�ength "

302 
__ex��_�ways_�l�e
 
__wur
 *

303 
	$fg�s_u�ocked
 (*
__��ri�
 
__s
, 
__n
, 
FILE
 *__��ri� 
__��am
)

305 i�(
	`__bos
 (
__s
�!�(
size_t
) -1)

307 i�(!
	`__bu�t�_cڡ�t_p
 (
__n
) || __n <= 0)

308  
	`__fg�s_u�ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__��am
);

310 i�((
size_t
�
__n
 > 
	`__bos
 (
__s
))

311  
	`__fg�s_u�ocked_chk_w�n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__��am
);

313  
	`__fg�s_u�ocked_��s
 (
__s
, 
__n
, 
__��am
);

314 
	}
}

317 #ifde�
__USE_MISC


318 #unde�
�d_u�ocked


319 
size_t
 
	$__�d_u�ocked_chk
 (*
__��ri�
 
__�r
, 
size_t
 
__���
,

320 
size_t
 
__size
, size_�
__n
,

321 
FILE
 *
__��ri�
 
__��am
�
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__�d_u�ocked_��s
,

323 (*
__��ri�
 
__�r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__��ri�
 
__��am
),

325 
�d_u�ocked
�
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__�d_u�ocked_chk_w�n
,

327 (*
__��ri�
 
__�r
, 
size_t
 
__���
,

328 
size_t
 
__size
, size_�
__n
,

329 
FILE
 *
__��ri�
 
__��am
),

330 
__�d_u�ocked_chk
)

331 
__wur
 
	`__w�ǉr
 ("fread_unlocked called with bigger size *�memb�han "

334 
__ex��_�ways_�l�e
 
__wur
 
size_t


335 
	$�d_u�ocked
 (*
__��ri�
 
__�r
, 
size_t
 
__size
, size_�
__n
,

336 
FILE
 *
__��ri�
 
__��am
)

338 i�(
	`__bos0
 (
__�r
�!�(
size_t
) -1)

340 i�(!
	`__bu�t�_cڡ�t_p
 (
__size
)

341 || !
	`__bu�t�_cڡ�t_p
 (
__n
)

342 || (
__size
 | 
__n
�>�(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__�d_u�ocked_chk
 (
__�r
, 
	`__bos0
 (__�r), 
__size
, 
__n
,

344 
__��am
);

346 i�(
__size
 * 
__n
 > 
	`__bos0
 (
__�r
))

347  
	`__�d_u�ocked_chk_w�n
 (
__�r
, 
	`__bos0
 (__�r), 
__size
, 
__n
,

348 
__��am
);

351 #ifde�
__USE_EXTERN_INLINES


352 i�(
	`__bu�t�_cڡ�t_p
 (
__size
)

353 && 
	`__bu�t�_cڡ�t_p
 (
__n
)

354 && (
__size
 | 
__n
�< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__�t
 = 
__size
 * 
__n
;

358 *
__�
 = (*�
__�r
;

359 i�(
__�t
 == 0)

362 ; 
__�t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_g�c_u�ocked
 (
__��am
);

365 i�(
__c
 =�
EOF
)

367 *
__�
++ = 
__c
;

369  (
__�
 - (*�
__�r
�/ 
__size
;

372  
	`__�d_u�ocked_��s
 (
__�r
, 
__size
, 
__n
, 
__��am
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i�!
def�ed
 
_STDIO_H
 && !def�ed 
__�ed_FOPEN_MAX
 && !def�ed 
__�ed_IOV_MAX


23 #ifde�
_STDIO_H


24 
	#L_tm�am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde�
__USE_POSIX


29 
	#L_�mid
 9

	)

30 #i�!
def�ed
 
__USE_XOPEN2K
 || def�ed 
__USE_GNU


31 
	#L_cu�rid
 9

	)

36 #i�
def�ed
 
__�ed_FOPEN_MAX
 || def�ed 
_STDIO_H


37 #unde�
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i�
def�ed
 
__�ed_IOV_MAX
 && !def�ed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i�de�
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
���d
, 
��od
)

27 
__END_NAMESPACE_C99


30 #ifde�
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
���d_l
, 
��od_l
)

34 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_XOPEN_EXTENDED


35 #ifde�
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i�de�
_STDLIB_H


24 *
	$__���th_chk
 (
__cڡ
 *
__��ri�
 
__�me
,

25 *
__��ri�
 
__�s�ved
,

26 
size_t
 
__�s�ved�n
�
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__���th_��s
,

28 (
__cڡ
 *
__��ri�
 
__�me
,

29 *
__��ri�
 
__�s�ved
), 
���th
�
__wur
;

30 *
	`__REDIRECT_NTH
 (
__���th_chk_w�n
,

31 (
__cڡ
 *
__��ri�
 
__�me
,

32 *
__��ri�
 
__�s�ved
,

33 
size_t
 
__�s�ved�n
), 
__���th_chk
�
__wur


34 
	`__w�ǉr
 ("second�rgument of�ealpath must be�ither NULL or�t "

37 
__ex��_�ways_�l�e
 
__wur
 *

38 
	`__NTH
 (
	$���th
 (
__cڡ
 *
__��ri�
 
__�me
, *__��ri� 
__�s�ved
))

40 i�(
	`__bos
 (
__�s�ved
�!�(
size_t
) -1)

42 #i�
def�ed
 
_LIBC_LIMITS_H_
 && def�ed 
PATH_MAX


43 i�(
	`__bos
 (
__�s�ved
�< 
PATH_MAX
)

44  
	`__���th_chk_w�n
 (
__�me
, 
__�s�ved
, 
	`__bos
 (__resolved));

46  
	`__���th_chk
 (
__�me
, 
__�s�ved
, 
	`__bos
 (__resolved));

49  
	`__���th_��s
 (
__�me
, 
__�s�ved
);

50 
	}
}

53 
	$__��ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__bu�
,

54 
size_t
 
__ėl
�
__THROW
 
	`__n�nu�
 ((2));

55 
	`__REDIRECT_NTH
 (
__��ame_r_��s
, (
__fd
, *
__buf
,

56 
size_t
 
__bu�
), 
��ame_r
)

57 
	`__n�nu�
 ((2));

58 
	`__REDIRECT_NTH
 (
__��ame_r_chk_w�n
,

59 (
__fd
, *
__buf
, 
size_t
 
__bu�
,

60 
size_t
 
__ėl
), 
__��ame_r_chk
)

61 
	`__n�nu�
 ((2)�
	`__w�ǉr
 ("ptsname_r called with buflen bigger�han "

64 
__ex��_�ways_�l�e
 

65 
	`__NTH
 (
	$��ame_r
 (
__fd
, *
__buf
, 
size_t
 
__bu�
))

67 i�(
	`__bos
 (
__buf
�!�(
size_t
) -1)

69 i�(!
	`__bu�t�_cڡ�t_p
 (
__bu�
))

70  
	`__��ame_r_chk
 (
__fd
, 
__buf
, 
__bu�
, 
	`__bos
 (__buf));

71 i�(
__bu�
 > 
	`__bos
 (
__buf
))

72  
	`__��ame_r_chk_w�n
 (
__fd
, 
__buf
, 
__bu�
, 
	`__bos
 (__buf));

74  
	`__��ame_r_��s
 (
__fd
, 
__buf
, 
__bu�
);

75 
	}
}

78 
	$__w�omb_chk
 (*
__s
, 
wch�_t
 
__wch�
, 
size_t
 
__bu�
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w�omb_��s
, (*
__s
, 
wch�_t
 
__wch�
),

81 
w�omb
�
__wur
;

83 
__ex��_�ways_�l�e
 
__wur
 

84 
	`__NTH
 (
	$w�omb
 (*
__s
, 
wch�_t
 
__wch�
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i�
def�ed
 
MB_LEN_MAX
 && MB_LEN_MAX !�
__STDLIB_MB_LEN_MAX


93 i�(
	`__bos
 (
__s
�!�(
size_t
�-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w�omb_chk
 (
__s
, 
__wch�
, 
	`__bos
 (__s));

95  
	`__w�omb_��s
 (
__s
, 
__wch�
);

96 
	}
}

99 
size_t
 
	$__mb�owcs_chk
 (
wch�_t
 *
__��ri�
 
__d�
,

100 
__cڡ
 *
__��ri�
 
__�c
,

101 
size_t
 
__�n
, size_�
__d��n
�
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb�owcs_��s
,

103 (
wch�_t
 *
__��ri�
 
__d�
,

104 
__cڡ
 *
__��ri�
 
__�c
,

105 
size_t
 
__�n
), 
mb�owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb�owcs_chk_w�n
,

107 (
wch�_t
 *
__��ri�
 
__d�
,

108 
__cڡ
 *
__��ri�
 
__�c
,

109 
size_t
 
__�n
, size_�
__d��n
), 
__mb�owcs_chk
)

110 
	`__w�ǉr
 ("mbstowcs called with dst buffer smaller�han�en "

113 
__ex��_�ways_�l�e
 
size_t


114 
	`__NTH
 (
	$mb�owcs
 (
wch�_t
 *
__��ri�
 
__d�
, 
__cڡ
 *__��ri� 
__�c
,

115 
size_t
 
__�n
))

117 i�(
	`__bos
 (
__d�
�!�(
size_t
) -1)

119 i�(!
	`__bu�t�_cڡ�t_p
 (
__�n
))

120  
	`__mb�owcs_chk
 (
__d�
, 
__�c
, 
__�n
,

121 
	`__bos
 (
__d�
�/  (
wch�_t
));

123 i�(
__�n
 > 
	`__bos
 (
__d�
�/  (
wch�_t
))

124  
	`__mb�owcs_chk_w�n
 (
__d�
, 
__�c
, 
__�n
,

125 
	`__bos
 (
__d�
�/  (
wch�_t
));

127  
	`__mb�owcs_��s
 (
__d�
, 
__�c
, 
__�n
);

128 
	}
}

131 
size_t
 
	$__wc�ombs_chk
 (*
__��ri�
 
__d�
,

132 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
,

133 
size_t
 
__�n
, size_�
__d��n
�
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc�ombs_��s
,

135 (*
__��ri�
 
__d�
,

136 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
,

137 
size_t
 
__�n
), 
wc�ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc�ombs_chk_w�n
,

139 (*
__��ri�
 
__d�
,

140 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
,

141 
size_t
 
__�n
, size_�
__d��n
), 
__wc�ombs_chk
)

142 
	`__w�ǉr
 ("wcstombs called with dst buffer smaller�han�en");

144 
__ex��_�ways_�l�e
 
size_t


145 
	`__NTH
 (
	$wc�ombs
 (*
__��ri�
 
__d�
, 
__cڡ
 
wch�_t
 *__��ri� 
__�c
,

146 
size_t
 
__�n
))

148 i�(
	`__bos
 (
__d�
�!�(
size_t
) -1)

150 i�(!
	`__bu�t�_cڡ�t_p
 (
__�n
))

151  
	`__wc�ombs_chk
 (
__d�
, 
__�c
, 
__�n
, 
	`__bos
 (__dst));

152 i�(
__�n
 > 
	`__bos
 (
__d�
))

153  
	`__wc�ombs_chk_w�n
 (
__d�
, 
__�c
, 
__�n
, 
	`__bos
 (__dst));

155  
	`__wc�ombs_��s
 (
__d�
, 
__�c
, 
__�n
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i�de�
_STRING_H


26 
	#_STRING_ARCH_u�lig�d
 1

	)

	@/usr/include/bits/string2.h

21 #i�de�
_STRING_H


25 #i�!
def�ed
 
__NO_STRING_INLINES
 && !def�ed 
__BOUNDED_POINTERS__


42 #i�de�
__STRING_INLINE


43 #ifde�
__�lu�lus


44 
	#__STRING_INLINE
 
�l�e


	)

46 
	#__STRING_INLINE
 
__ex��_�l�e


	)

50 #i�
_STRING_ARCH_u�lig�d


52 
	~<�d�n.h
>

53 
	~<b�s/ty�s.h
>

55 #i�
__BYTE_ORDER
 =�
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
�c
, 
idx
) \

57 (((
__cڡ
 *�(__cڡ *�(
�c
))[
idx
 + 1] << 8 \

58 | ((
__cڡ
 *�(__cڡ *�(
�c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
�c
, 
idx
) \

60 (((((
__cڡ
 *�(__cڡ *�(
�c
))[
idx
 + 3] << 8 \

61 | ((
__cڡ
 *�(__cڡ *�(
�c
))[
idx
 + 2]) << 8 \

62 | ((
__cڡ
 *�(__cڡ *�(
�c
))[
idx
 + 1]) << 8 \

63 | ((
__cڡ
 *�(__cڡ *�(
�c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
�c
, 
idx
) \

66 (((
__cڡ
 *�(__cڡ *�(
�c
))[
idx
] << 8 \

67 | ((
__cڡ
 *�(__cڡ *�(
�c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
�c
, 
idx
) \

69 (((((
__cڡ
 *�(__cڡ *�(
�c
))[
idx
] << 8 \

70 | ((
__cڡ
 *�(__cڡ *�(
�c
))[
idx
 + 1]) << 8 \

71 | ((
__cڡ
 *�(__cڡ *�(
�c
))[
idx
 + 2]) << 8 \

72 | ((
__cڡ
 *�(__cڡ *�(
�c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 �ru� { 
__�r
[
N
]; } \

79 
	t__��ibu�__
 ((
	t__�cked__
)�
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde�
__STRING2_COPY_TYPE


93 
	#__�r�g2_1b�r_p
(
__x
) \

94 ((
size_t
)(cڡ *)((
__x
�+ 1�- (size_t)(cڡ *)(__x�=�1)

	)

97 #i�!
def�ed
 
_HAVE_STRING_ARCH_mem�t


98 #i�!
__GNUC_PREREQ
 (3, 0)

99 #i�
_STRING_ARCH_u�lig�d


100 
	#mem�t
(
s
, 
c
, 
n
) \

101 (
	`__ex�nsi�__
 (
	`__bu�t�_cڡ�t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem�t_1
 (
s
, 
c
) \

104 : 
	`__mem�t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__bu�t�_cڡ�t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bz�o
 (__s, 
n
); __s; }) \

107 : 
	`mem�t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem�t_1
(
s
, 
c
�({ *
__s
 = (s); \

110 *((
__u�t8_t
 *�
__s
��(__u�t8_t�
c
; __s; })

	)

112 
	#__mem�t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__u�t8_t
 
__c
 = (__u�t8_t�(
c
); \

122 (�(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (�
__c
 * 0x0101; \

135 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (�
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (�
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (�
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem�t
(
s
, 
c
, 
n
) \

183 (
	`__ex�nsi�__
 (
	`__bu�t�_cڡ�t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bz�o
 (__s, 
n
); __s; }) \

185 : 
	`mem�t
 (
s
, 
c
, 
n
)))

	)

194 #i�
__GNUC_PREREQ
 (2, 91)

195 
	#__bz�o
(
s
, 
n
�
	`__bu�t�_mem�t
 (s, '\0',�)

	)

203 #ifde�
__USE_GNU


204 #i�!
def�ed
 
_HAVE_STRING_ARCH_memp�y
 || def�ed 
_FORCE_INLINES


205 #i�de�
_HAVE_STRING_ARCH_memp�y


206 #i�
__GNUC_PREREQ
 (3, 4)

207 
	#__memp�y
(
de�
, 
�c
, 
n
�
	`__bu�t�_memp�y
 (de�, src,�)

	)

208 #�i�
__GNUC_PREREQ
 (3, 0)

209 
	#__memp�y
(
de�
, 
�c
, 
n
) \

210 (
	`__ex�nsi�__
 (
	`__bu�t�_cڡ�t_p
 (
�c
�&& __bu�t�_cڡ�t_�(
n
) \

211 && 
	`__�r�g2_1b�r_p
 (
�c
�&& 
n
 <= 8 \

212 ? 
	`__bu�t�_mem�y
 (
de�
, 
�c
, 
n
) + (n) \

213 : 
	`__memp�y
 (
de�
, 
�c
, 
n
)))

	)

215 
	#__memp�y
(
de�
, 
�c
, 
n
) \

216 (
	`__ex�nsi�__
 (
	`__bu�t�_cڡ�t_p
 (
�c
�&& __bu�t�_cڡ�t_�(
n
) \

217 && 
	`__�r�g2_1b�r_p
 (
�c
�&& 
n
 <= 8 \

218 ? 
	`__memp�y_sm�l
 (
de�
, 
	`__memp�y_�gs
 (
�c
), 
n
) \

219 : 
	`__memp�y
 (
de�
, 
�c
, 
n
)))

	)

223 
	#memp�y
(
de�
, 
�c
, 
n
�
	`__memp�y
 (de�, src,�)

	)

226 #i�!
__GNUC_PREREQ
 (3, 0�|| 
def�ed
 
_FORCE_INLINES


227 #i�
_STRING_ARCH_u�lig�d


228 #i�de�
_FORCE_INLINES


229 
	#__memp�y_�gs
(
�c
) \

230 ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[2], \

231 ((
__cڡ
 *�(
�c
))[4], ((__const *) (src))[6], \

232 
__ex�nsi�__
 
	`__STRING2_SMALL_GET16
 (
�c
, 0), \

233 
__ex�nsi�__
 
	`__STRING2_SMALL_GET16
 (
�c
, 4), \

234 
__ex�nsi�__
 
	`__STRING2_SMALL_GET32
 (
�c
, 0), \

235 
__ex�nsi�__
 
	`__STRING2_SMALL_GET32
 (
�c
, 4)

	)

237 
__STRING_INLINE
 *
__memp�y_sm�l
 (*, , , , ,

238 
__u�t16_t
, __u�t16_t, 
__u�t32_t
,

239 
__u�t32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp�y_sm�l
 (*
__de�1
,

242 
__�c0_1
, 
__�c2_1
, 
__�c4_1
, 
__�c6_1
,

243 
__u�t16_t
 
__�c0_2
, __u�t16_�
__�c4_2
,

244 
__u�t32_t
 
__�c0_4
, __u�t32_�
__�c4_4
,

245 
size_t
 
__���
)

248 
__u�t32_t
 
__ui
;

249 
__u�t16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de�1
;

253 (�
__���
)

256 
__u
->
__c
 = 
__�c0_1
;

257 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__�c0_2
;

261 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__�c0_2
;

265 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__�c2_1
;

267 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__�c0_4
;

271 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__�c0_4
;

275 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__�c4_1
;

277 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__�c0_4
;

281 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__�c4_2
;

283 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__�c0_4
;

287 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__�c4_2
;

289 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__�c6_1
;

291 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__�c0_4
;

295 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__�c4_4
;

297 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4);

300  (*�
__u
;

301 
	}
}

303 #i�de�
_FORCE_INLINES


304 
	#__memp�y_�gs
(
�c
) \

305 ((
__cڡ
 *�(
�c
))[0], \

306 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1] } }), \

308 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

310 ((
__cڡ
 *�(
�c
))[2] } }), \

311 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

313 ((
__cڡ
 *�(
�c
))[2], ((__const *) (src))[3] } }), \

314 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

316 ((
__cڡ
 *�(
�c
))[2], ((__const *) (src))[3], \

317 ((
__cڡ
 *�(
�c
))[4] } }), \

318 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

320 ((
__cڡ
 *�(
�c
))[2], ((__const *) (src))[3], \

321 ((
__cڡ
 *�(
�c
))[4], ((__const *) (src))[5] } }), \

322 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

324 ((
__cڡ
 *�(
�c
))[2], ((__const *) (src))[3], \

325 ((
__cڡ
 *�(
�c
))[4], ((__const *) (src))[5], \

326 ((
__cڡ
 *�(
�c
))[6] } }), \

327 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

329 ((
__cڡ
 *�(
�c
))[2], ((__const *) (src))[3], \

330 ((
__cڡ
 *�(
�c
))[4], ((__const *) (src))[5], \

331 ((
__cڡ
 *�(
�c
))[6], ((__cڡ *�(�c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp�y_sm�l
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp�y_sm�l
 (*
__de�
, 
__�c1
,

342 
__STRING2_COPY_ARR2
 
__�c2
, 
__STRING2_COPY_ARR3
 
__�c3
,

343 
__STRING2_COPY_ARR4
 
__�c4
, 
__STRING2_COPY_ARR5
 
__�c5
,

344 
__STRING2_COPY_ARR6
 
__�c6
, 
__STRING2_COPY_ARR7
 
__�c7
,

345 
__STRING2_COPY_ARR8
 
__�c8
, 
size_t
 
__���
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__s�2
;

350 
__STRING2_COPY_ARR3
 
__s�3
;

351 
__STRING2_COPY_ARR4
 
__s�4
;

352 
__STRING2_COPY_ARR5
 
__s�5
;

353 
__STRING2_COPY_ARR6
 
__s�6
;

354 
__STRING2_COPY_ARR7
 
__s�7
;

355 
__STRING2_COPY_ARR8
 
__s�8
;

356 } *
__u
 = 
__de�
;

357 (�
__���
)

360 
__u
->
__c
 = 
__�c1
;

363 
__ex�nsi�__
 
__u
->
__s�2
 = 
__�c2
;

366 
__ex�nsi�__
 
__u
->
__s�3
 = 
__�c3
;

369 
__ex�nsi�__
 
__u
->
__s�4
 = 
__�c4
;

372 
__ex�nsi�__
 
__u
->
__s�5
 = 
__�c5
;

375 
__ex�nsi�__
 
__u
->
__s�6
 = 
__�c6
;

378 
__ex�nsi�__
 
__u
->
__s�7
 = 
__�c7
;

381 
__ex�nsi�__
 
__u
->
__s�8
 = 
__�c8
;

384  
	`__ex�nsi�__
 ((*�
__u
 + 
__���
);

385 
	}
}

393 #i�de�
_HAVE_STRING_ARCH_�rchr


394 *
__�wmemchr
 (cڡ *
__s
, 
__c
);

395 #i�
__GNUC_PREREQ
 (3, 2)

396 
	#�rchr
(
s
, 
c
) \

397 (
	`__ex�nsi�__
 (
	`__bu�t�_cڡ�t_p
 (
c
�&& !__bu�t�_cڡ�t_�(
s
) \

398 && (
c
) == '\0' \

399 ? (*�
	`__�wmemchr
 (
s
, 
c
) \

400 : 
	`__bu�t�_�rchr
 (
s
, 
c
)))

	)

402 
	#�rchr
(
s
, 
c
) \

403 (
	`__ex�nsi�__
 (
	`__bu�t�_cڡ�t_p
 (
c
) && (c) == '\0' \

404 ? (*�
	`__�wmemchr
 (
s
, 
c
) \

405 : 
	`�rchr
 (
s
, 
c
)))

	)

411 #i�(!
def�ed
 
_HAVE_STRING_ARCH_�r�y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
def�ed
 
	g_FORCE_INLINES


413 #i�!
def�ed
 
_HAVE_STRING_ARCH_�r�y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#�r�y
(
de�
, 
�c
) \

415 (
	`__ex�nsi�__
 (
	`__bu�t�_cڡ�t_p
 (
�c
) \

416 ? (
	`__�r�g2_1b�r_p
 (
�c
�&& 
	`���
 (src) + 1 <= 8 \

417 ? 
	`__�r�y_sm�l
 (
de�
, 
	`__�r�y_�gs
 (
�c
), \

418 
	`���
 (
�c
) + 1) \

419 : (*�
	`mem�y
 (
de�
, 
�c
, 
	`���
 (src) + 1)) \

420 : 
	`�r�y
 (
de�
, 
�c
)))

	)

423 #i�
_STRING_ARCH_u�lig�d


424 #i�de�
_FORCE_INLINES


425 
	#__�r�y_�gs
(
�c
) \

426 
__ex�nsi�__
 
	`__STRING2_SMALL_GET16
 (
�c
, 0), \

427 
__ex�nsi�__
 
	`__STRING2_SMALL_GET16
 (
�c
, 4), \

428 
__ex�nsi�__
 
	`__STRING2_SMALL_GET32
 (
�c
, 0), \

429 
__ex�nsi�__
 
	`__STRING2_SMALL_GET32
 (
�c
, 4)

	)

431 
__STRING_INLINE
 *
__�r�y_sm�l
 (*, 
__u�t16_t
, __uint16_t,

432 
__u�t32_t
, __u�t32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__�r�y_sm�l
 (*
__de�
,

435 
__u�t16_t
 
__�c0_2
, __u�t16_�
__�c4_2
,

436 
__u�t32_t
 
__�c0_4
, __u�t32_�
__�c4_4
,

437 
size_t
 
__���
)

440 
__u�t32_t
 
__ui
;

441 
__u�t16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*�
__de�
;

444 (�
__���
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__�c0_2
;

453 
__u
->
__usi
 = 
__�c0_2
;

454 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__�c0_4
;

461 
__u
->
__ui
 = 
__�c0_4
;

462 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__�c0_4
;

467 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__�c4_2
;

471 
__u
->
__ui
 = 
__�c0_4
;

472 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__�c4_2
;

474 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__�c0_4
;

479 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__�c4_4
;

483  
__de�
;

484 
	}
}

486 #i�de�
_FORCE_INLINES


487 
	#__�r�y_�gs
(
�c
) \

488 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__cڡ
 *�(
�c
))[0], '\0' } }), \

490 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

493 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

495 ((
__cڡ
 *�(
�c
))[2], '\0' } }), \

496 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

498 ((
__cڡ
 *�(
�c
))[2], ((__const *) (src))[3], \

500 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

502 ((
__cڡ
 *�(
�c
))[2], ((__const *) (src))[3], \

503 ((
__cڡ
 *�(
�c
))[4], '\0' } }), \

504 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

506 ((
__cڡ
 *�(
�c
))[2], ((__const *) (src))[3], \

507 ((
__cڡ
 *�(
�c
))[4], ((__const *) (src))[5], \

509 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

511 ((
__cڡ
 *�(
�c
))[2], ((__const *) (src))[3], \

512 ((
__cڡ
 *�(
�c
))[4], ((__const *) (src))[5], \

513 ((
__cڡ
 *�(
�c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__�r�y_sm�l
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__�r�y_sm�l
 (*
__de�
,

524 
__STRING2_COPY_ARR2
 
__�c2
, 
__STRING2_COPY_ARR3
 
__�c3
,

525 
__STRING2_COPY_ARR4
 
__�c4
, 
__STRING2_COPY_ARR5
 
__�c5
,

526 
__STRING2_COPY_ARR6
 
__�c6
, 
__STRING2_COPY_ARR7
 
__�c7
,

527 
__STRING2_COPY_ARR8
 
__�c8
, 
size_t
 
__���
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__s�2
;

532 
__STRING2_COPY_ARR3
 
__s�3
;

533 
__STRING2_COPY_ARR4
 
__s�4
;

534 
__STRING2_COPY_ARR5
 
__s�5
;

535 
__STRING2_COPY_ARR6
 
__s�6
;

536 
__STRING2_COPY_ARR7
 
__s�7
;

537 
__STRING2_COPY_ARR8
 
__s�8
;

538 } *
__u
 = (*�
__de�
;

539 (�
__���
)

542 
__u
->
__c
 = '\0';

545 
__ex�nsi�__
 
__u
->
__s�2
 = 
__�c2
;

548 
__ex�nsi�__
 
__u
->
__s�3
 = 
__�c3
;

551 
__ex�nsi�__
 
__u
->
__s�4
 = 
__�c4
;

554 
__ex�nsi�__
 
__u
->
__s�5
 = 
__�c5
;

557 
__ex�nsi�__
 
__u
->
__s�6
 = 
__�c6
;

560 
__ex�nsi�__
 
__u
->
__s�7
 = 
__�c7
;

563 
__ex�nsi�__
 
__u
->
__s�8
 = 
__�c8
;

566  
__de�
;

567 
	}
}

573 #ifde�
__USE_GNU


574 #i�!
def�ed
 
_HAVE_STRING_ARCH_�p�y
 || def�ed 
_FORCE_INLINES


575 #i�de�
_HAVE_STRING_ARCH_�p�y


576 #i�
__GNUC_PREREQ
 (3, 4)

577 
	#__�p�y
(
de�
, 
�c
�
	`__bu�t�_�p�y
 (de�, src)

	)

578 #�i�
__GNUC_PREREQ
 (3, 0)

579 
	#__�p�y
(
de�
, 
�c
) \

580 (
	`__ex�nsi�__
 (
	`__bu�t�_cڡ�t_p
 (
�c
) \

581 ? (
	`__�r�g2_1b�r_p
 (
�c
�&& 
	`���
 (src) + 1 <= 8 \

582 ? 
	`__bu�t�_�r�y
 (
de�
, 
�c
�+ 
	`���
 (src) \

583 : ((*�(
__memp�y
�(
de�
, 
�c
, 
	`���
 (src) + 1) \

585 : 
	`__�p�y
 (
de�
, 
�c
)))

	)

587 
	#__�p�y
(
de�
, 
�c
) \

588 (
	`__ex�nsi�__
 (
	`__bu�t�_cڡ�t_p
 (
�c
) \

589 ? (
	`__�r�g2_1b�r_p
 (
�c
�&& 
	`���
 (src) + 1 <= 8 \

590 ? 
	`__�p�y_sm�l
 (
de�
, 
	`__�p�y_�gs
 (
�c
), \

591 
	`���
 (
�c
) + 1) \

592 : ((*�(
__memp�y
�(
de�
, 
�c
, 
	`���
 (src) + 1) \

594 : 
	`__�p�y
 (
de�
, 
�c
)))

	)

598 
	#�p�y
(
de�
, 
�c
�
	`__�p�y
 (de�, src)

	)

601 #i�!
__GNUC_PREREQ
 (3, 0�|| 
def�ed
 
_FORCE_INLINES


602 #i�
_STRING_ARCH_u�lig�d


603 #i�de�
_FORCE_INLINES


604 
	#__�p�y_�gs
(
�c
) \

605 
__ex�nsi�__
 
	`__STRING2_SMALL_GET16
 (
�c
, 0), \

606 
__ex�nsi�__
 
	`__STRING2_SMALL_GET16
 (
�c
, 4), \

607 
__ex�nsi�__
 
	`__STRING2_SMALL_GET32
 (
�c
, 0), \

608 
__ex�nsi�__
 
	`__STRING2_SMALL_GET32
 (
�c
, 4)

	)

610 
__STRING_INLINE
 *
__�p�y_sm�l
 (*, 
__u�t16_t
, __uint16_t,

611 
__u�t32_t
, __u�t32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__�p�y_sm�l
 (*
__de�
,

614 
__u�t16_t
 
__�c0_2
, __u�t16_�
__�c4_2
,

615 
__u�t32_t
 
__�c0_4
, __u�t32_�
__�c4_4
,

616 
size_t
 
__���
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*�
__de�
;

624 (�
__���
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__�c0_2
;

631 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__�c0_2
;

635 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__�c0_4
;

640 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__�c0_4
;

644 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__�c0_4
;

649 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__�c4_2
;

651 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__�c0_4
;

655 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__�c4_2
;

657 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__�c0_4
;

662 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__�c4_4
;

664 
__u
 = 
	`__ex�nsi�__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i�de�
_FORCE_INLINES


671 
	#__�p�y_�gs
(
�c
) \

672 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__cڡ
 *�(
�c
))[0], '\0' } }), \

674 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

677 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

679 ((
__cڡ
 *�(
�c
))[2], '\0' } }), \

680 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

682 ((
__cڡ
 *�(
�c
))[2], ((__const *) (src))[3], \

684 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

686 ((
__cڡ
 *�(
�c
))[2], ((__const *) (src))[3], \

687 ((
__cڡ
 *�(
�c
))[4], '\0' } }), \

688 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

690 ((
__cڡ
 *�(
�c
))[2], ((__const *) (src))[3], \

691 ((
__cڡ
 *�(
�c
))[4], ((__const *) (src))[5], \

693 
	`__ex�nsi�__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__cڡ
 *�(
�c
))[0], ((__const *) (src))[1], \

695 ((
__cڡ
 *�(
�c
))[2], ((__const *) (src))[3], \

696 ((
__cڡ
 *�(
�c
))[4], ((__const *) (src))[5], \

697 ((
__cڡ
 *�(
�c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__�p�y_sm�l
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__�p�y_sm�l
 (*
__de�
,

708 
__STRING2_COPY_ARR2
 
__�c2
, 
__STRING2_COPY_ARR3
 
__�c3
,

709 
__STRING2_COPY_ARR4
 
__�c4
, 
__STRING2_COPY_ARR5
 
__�c5
,

710 
__STRING2_COPY_ARR6
 
__�c6
, 
__STRING2_COPY_ARR7
 
__�c7
,

711 
__STRING2_COPY_ARR8
 
__�c8
, 
size_t
 
__���
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__s�2
;

716 
__STRING2_COPY_ARR3
 
__s�3
;

717 
__STRING2_COPY_ARR4
 
__s�4
;

718 
__STRING2_COPY_ARR5
 
__s�5
;

719 
__STRING2_COPY_ARR6
 
__s�6
;

720 
__STRING2_COPY_ARR7
 
__s�7
;

721 
__STRING2_COPY_ARR8
 
__s�8
;

722 } *
__u
 = (*�
__de�
;

723 (�
__���
)

726 
__u
->
__c
 = '\0';

729 
__ex�nsi�__
 
__u
->
__s�2
 = 
__�c2
;

732 
__ex�nsi�__
 
__u
->
__s�3
 = 
__�c3
;

735 
__ex�nsi�__
 
__u
->
__s�4
 = 
__�c4
;

738 
__ex�nsi�__
 
__u
->
__s�5
 = 
__�c5
;

741 
__ex�nsi�__
 
__u
->
__s�6
 = 
__�c6
;

744 
__ex�nsi�__
 
__u
->
__s�7
 = 
__�c7
;

747 
__ex�nsi�__
 
__u
->
__s�8
 = 
__�c8
;

750  
__de�
 + 
__���
 - 1;

751 
	}
}

759 #i�de�
_HAVE_STRING_ARCH_���y


760 #i�
__GNUC_PREREQ
 (3, 2)

761 
	#���y
(
de�
, 
�c
, 
n
�
	`__bu�t�_���y
 (de�, src,�)

	)

763 
	#���y
(
de�
, 
�c
, 
n
) \

764 (
	`__ex�nsi�__
 (
	`__bu�t�_cڡ�t_p
 (
�c
�&& __bu�t�_cڡ�t_�(
n
) \

765 ? (
	`���
 (
�c
�+ 1 >�((
size_t
�(
n
)) \

766 ? (*�
	`mem�y
 (
de�
, 
�c
, 
n
) \

767 : 
	`���y
 (
de�
, 
�c
, 
n
)) \

768 : 
	`���y
 (
de�
, 
�c
, 
n
)))

	)

774 #i�de�
_HAVE_STRING_ARCH_���t


775 #ifde�
_USE_STRING_ARCH_�rchr


776 
	#���t
(
de�
, 
�c
, 
n
) \

777 (
	`__ex�nsi�__
 ({ *
__de�
 = (
de�
); \

778 
	`__bu�t�_cڡ�t_p
 (
�c
�&& __bu�t�_cڡ�t_�(
n
) \

779 ? (
	`���
 (
�c
�< ((
size_t
�(
n
)) \

780 ? 
	`�r�t
 (
__de�
, 
�c
) \

781 : (*((*�
	`__memp�y
 (
	`�rchr
 (
__de�
, '\0'), \

782 
�c
, 
n
)��'\0', 
__de�
)) \

783 : 
	`���t
 (
de�
, 
�c
, 
n
); }))

	)

784 #�i�
__GNUC_PREREQ
 (3, 2)

785 
	#���t
(
de�
, 
�c
, 
n
�
	`__bu�t�_���t
 (de�, src,�)

	)

787 
	#���t
(
de�
, 
�c
, 
n
) \

788 (
	`__ex�nsi�__
 (
	`__bu�t�_cڡ�t_p
 (
�c
�&& __bu�t�_cڡ�t_�(
n
) \

789 ? (
	`���
 (
�c
�< ((
size_t
�(
n
)) \

790 ? 
	`�r�t
 (
de�
, 
�c
) \

791 : 
	`���t
 (
de�
, 
�c
, 
n
)) \

792 : 
	`���t
 (
de�
, 
�c
, 
n
)))

	)

798 #i�de�
_HAVE_STRING_ARCH_�rcmp


799 #i�
__GNUC_PREREQ
 (3, 2)

800 
	#�rcmp
(
s1
, 
s2
) \

801 
__ex�nsi�__
 \

802 ({ 
size_t
 
__s1_�n
, 
__s2_�n
; \

803 (
	`__bu�t�_cڡ�t_p
 (
s1
�&& __bu�t�_cڡ�t_�(
s2
) \

804 && (
__s1_�n
 = 
	`__bu�t�_���
 (
s1
), 
__s2_�n
 = __bu�t�_��� (
s2
), \

805 (!
	`__�r�g2_1b�r_p
 (
s1
�|| 
__s1_�n
 >= 4) \

806 && (!
	`__�r�g2_1b�r_p
 (
s2
�|| 
__s2_�n
 >= 4)) \

807 ? 
	`__bu�t�_�rcmp
 (
s1
, 
s2
) \

808 : (
	`__bu�t�_cڡ�t_p
 (
s1
�&& 
	`__�r�g2_1b�r_p
 (s1) \

809 && (
__s1_�n
 = 
	`__bu�t�_���
 (
s1
), __s1_len < 4) \

810 ? (
	`__bu�t�_cڡ�t_p
 (
s2
�&& 
	`__�r�g2_1b�r_p
 (s2) \

811 ? 
	`__bu�t�_�rcmp
 (
s1
, 
s2
) \

812 : 
	`__�rcmp_cg
 (
s1
, 
s2
, 
__s1_�n
)) \

813 : (
	`__bu�t�_cڡ�t_p
 (
s2
�&& 
	`__�r�g2_1b�r_p
 (s2) \

814 && (
__s2_�n
 = 
	`__bu�t�_���
 (
s2
), __s2_len < 4) \

815 ? (
	`__bu�t�_cڡ�t_p
 (
s1
�&& 
	`__�r�g2_1b�r_p
 (s1) \

816 ? 
	`__bu�t�_�rcmp
 (
s1
, 
s2
) \

817 : 
	`__�rcmp_gc
 (
s1
, 
s2
, 
__s2_�n
)) \

818 : 
	`__bu�t�_�rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#�rcmp
(
s1
, 
s2
) \

821 
__ex�nsi�__
 \

822 ({ 
size_t
 
__s1_�n
, 
__s2_�n
; \

823 (
	`__bu�t�_cڡ�t_p
 (
s1
�&& __bu�t�_cڡ�t_�(
s2
) \

824 && (
__s1_�n
 = 
	`���
 (
s1
), 
__s2_�n
 = s���(
s2
), \

825 (!
	`__�r�g2_1b�r_p
 (
s1
�|| 
__s1_�n
 >= 4) \

826 && (!
	`__�r�g2_1b�r_p
 (
s2
�|| 
__s2_�n
 >= 4)) \

827 ? 
	`memcmp
 ((
__cڡ
 *�(
s1
), (__cڡ *�(
s2
), \

828 (
__s1_�n
 < 
__s2_�n
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__bu�t�_cڡ�t_p
 (
s1
�&& 
	`__�r�g2_1b�r_p
 (s1) \

830 && (
__s1_�n
 = 
	`���
 (
s1
), __s1_len < 4) \

831 ? (
	`__bu�t�_cڡ�t_p
 (
s2
�&& 
	`__�r�g2_1b�r_p
 (s2) \

832 ? 
	`__�rcmp_cc
 (
s1
, 
s2
, 
__s1_�n
) \

833 : 
	`__�rcmp_cg
 (
s1
, 
s2
, 
__s1_�n
)) \

834 : (
	`__bu�t�_cڡ�t_p
 (
s2
�&& 
	`__�r�g2_1b�r_p
 (s2) \

835 && (
__s2_�n
 = 
	`���
 (
s2
), __s2_len < 4) \

836 ? (
	`__bu�t�_cڡ�t_p
 (
s1
�&& 
	`__�r�g2_1b�r_p
 (s1) \

837 ? 
	`__�rcmp_cc
 (
s1
, 
s2
, 
__s2_�n
) \

838 : 
	`__�rcmp_gc
 (
s1
, 
s2
, 
__s2_�n
)) \

839 : 
	`�rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__�rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__ex�nsi�__
 ({ 
__�su�
 = \

844 (((
__cڡ
 *�(__cڡ *�(
s1
))[0] \

845 - ((
__cڡ
 *�(__cڡ *)(
s2
))[0]);\

846 i�(
l
 > 0 && 
__�su�
 == 0) \

848 
__�su�
 = (((
__cڡ
 *) \

849 (
__cڡ
 *�(
s1
))[1] \

850 - ((
__cڡ
 *) \

851 (
__cڡ
 *�(
s2
))[1]); \

852 i�(
l
 > 1 && 
__�su�
 == 0) \

854 
__�su�
 = \

855 (((
__cڡ
 *) \

856 (
__cڡ
 *�(
s1
))[2] \

857 - ((
__cڡ
 *) \

858 (
__cڡ
 *�(
s2
))[2]); \

859 i�(
l
 > 2 && 
__�su�
 == 0) \

860 
__�su�
 = \

861 (((
__cڡ
 *) \

862 (
__cڡ
 *�(
s1
))[3] \

863 - ((
__cڡ
 *) \

864 (
__cڡ
 *�(
s2
))[3]); \

867 
__�su�
; }))

	)

869 
	#__�rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__ex�nsi�__
 ({ 
__cڡ
 *
__s2
 = \

871 (
__cڡ
 *�(__cڡ *�(
s2
); \

872 
__�su�
 = \

873 (((
__cڡ
 *�(__cڡ *�(
s1
))[0] \

874 - 
__s2
[0]); \

875 i�(
l1
 > 0 && 
__�su�
 == 0) \

877 
__�su�
 = (((
__cڡ
 *) \

878 (
__cڡ
 *�(
s1
))[1] - 
__s2
[1]); \

879 i�(
l1
 > 1 && 
__�su�
 == 0) \

881 
__�su�
 = (((
__cڡ
 *) \

882 (
__cڡ
 *�(
s1
))[2] - 
__s2
[2]);\

883 i�(
l1
 > 2 && 
__�su�
 == 0) \

884 
__�su�
 = (((
__cڡ
 *) \

885 (
__cڡ
 *�(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__�su�
; }))

	)

891 
	#__�rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__ex�nsi�__
 ({ 
__cڡ
 *
__s1
 = \

893 (
__cڡ
 *�(__cڡ *�(
s1
); \

894 
__�su�
 = \

895 
__s1
[0] - ((
__cڡ
 *) \

896 (
__cڡ
 *�(
s2
))[0]; \

897 i�(
l2
 > 0 && 
__�su�
 == 0) \

899 
__�su�
 = (
__s1
[1] \

900 - ((
__cڡ
 *) \

901 (
__cڡ
 *�(
s2
))[1]); \

902 i�(
l2
 > 1 && 
__�su�
 == 0) \

904 
__�su�
 = \

905 (
__s1
[2] - ((
__cڡ
 *) \

906 (
__cڡ
 *�(
s2
))[2]); \

907 i�(
l2
 > 2 && 
__�su�
 == 0) \

908 
__�su�
 = \

909 (
__s1
[3] \

910 - ((
__cڡ
 *) \

911 (
__cڡ
 *�(
s2
))[3]); \

914 
__�su�
; }))

	)

919 #i�de�
_HAVE_STRING_ARCH_��cmp


920 
	#��cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__ex�nsi�__
 (
	`__bu�t�_cڡ�t_p
 (
n
) \

922 && ((
	`__bu�t�_cڡ�t_p
 (
s1
) \

923 && 
	`���
 (
s1
�< ((
size_t
�(
n
))) \

924 || (
	`__bu�t�_cڡ�t_p
 (
s2
) \

925 && 
	`���
 (
s2
�< ((
size_t
�(
n
)))) \

926 ? 
	`�rcmp
 (
s1
, 
s2
�: 
	`��cmp
 (s1, s2, 
n
)))

	)

932 #i�!
def�ed
 
_HAVE_STRING_ARCH_�rc�n
 || def�ed 
_FORCE_INLINES


933 #i�de�
_HAVE_STRING_ARCH_�rc�n


934 #i�
__GNUC_PREREQ
 (3, 2)

935 
	#�rc�n
(
s
, 
�je�
) \

936 
__ex�nsi�__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__bu�t�_cڡ�t_p
 (
�je�
�&& 
	`__�r�g2_1b�r_p
 (reject) \

939 ? ((
	`__bu�t�_cڡ�t_p
 (
s
�&& 
	`__�r�g2_1b�r_p
 (s)) \

940 ? 
	`__bu�t�_�rc�n
 (
s
, 
�je�
) \

941 : ((
__r0
 = ((
__cڡ
 *�(
�je�
))[0], __r0 == '\0') \

942 ? 
	`���
 (
s
) \

943 : ((
__r1
 = ((
__cڡ
 *�(
�je�
))[1], __r1 == '\0') \

944 ? 
	`__�rc�n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__cڡ
 *�(
�je�
))[2], __r2 == '\0') \

946 ? 
	`__�rc�n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__cڡ
 *�(
�je�
))[3] == '\0' \

948 ? 
	`__�rc�n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__bu�t�_�rc�n
 (
s
, 
�je�
)))))) \

950 : 
	`__bu�t�_�rc�n
 (
s
, 
�je�
)); })

	)

952 
	#�rc�n
(
s
, 
�je�
) \

953 
__ex�nsi�__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__bu�t�_cڡ�t_p
 (
�je�
�&& 
	`__�r�g2_1b�r_p
 (reject) \

956 ? ((
__r0
 = ((
__cڡ
 *�(
�je�
))[0], __r0 == '\0') \

957 ? 
	`���
 (
s
) \

958 : ((
__r1
 = ((
__cڡ
 *�(
�je�
))[1], __r1 == '\0') \

959 ? 
	`__�rc�n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__cڡ
 *�(
�je�
))[2], __r2 == '\0') \

961 ? 
	`__�rc�n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__cڡ
 *�(
�je�
))[3] == '\0' \

963 ? 
	`__�rc�n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`�rc�n
 (
s
, 
�je�
))))) \

965 : 
	`�rc�n
 (
s
, 
�je�
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__�rc�n_c1
 (
__cڡ
 *
__s
, 
__�je�
);

970 
__STRING_INLINE
 
size_t


971 
	$__�rc�n_c1
 (
__cڡ
 *
__s
, 
__�je�
)

973 
size_t
 
__�su�
 = 0;

974 
__s
[
__�su�
] !�'\0' && __s[__�su�] !�
__�je�
)

975 ++
__�su�
;

976  
__�su�
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__�rc�n_c2
 (
__cڡ
 *
__s
, 
__�je�1
,

980 
__�je�2
);

981 
__STRING_INLINE
 
size_t


982 
	$__�rc�n_c2
 (
__cڡ
 *
__s
, 
__�je�1
, 
__�je�2
)

984 
size_t
 
__�su�
 = 0;

985 
__s
[
__�su�
] !�'\0' && __s[__�su�] !�
__�je�1


986 && 
__s
[
__�su�
] !�
__�je�2
)

987 ++
__�su�
;

988  
__�su�
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__�rc�n_c3
 (
__cڡ
 *
__s
, 
__�je�1
,

992 
__�je�2
, 
__�je�3
);

993 
__STRING_INLINE
 
size_t


994 
	$__�rc�n_c3
 (
__cڡ
 *
__s
, 
__�je�1
, 
__�je�2
,

995 
__�je�3
)

997 
size_t
 
__�su�
 = 0;

998 
__s
[
__�su�
] !�'\0' && __s[__�su�] !�
__�je�1


999 && 
__s
[
__�su�
] !�
__�je�2
 && __s[__�su�] !�
__�je�3
)

1000 ++
__�su�
;

1001  
__�su�
;

1002 
	}
}

1008 #i�!
def�ed
 
_HAVE_STRING_ARCH_�r�n
 || def�ed 
_FORCE_INLINES


1009 #i�de�
_HAVE_STRING_ARCH_�r�n


1010 #i�
__GNUC_PREREQ
 (3, 2)

1011 
	#�r�n
(
s
, 
ac�
) \

1012 
__ex�nsi�__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__bu�t�_cڡ�t_p
 (
ac�
�&& 
	`__�r�g2_1b�r_p
 (accept) \

1015 ? ((
	`__bu�t�_cڡ�t_p
 (
s
�&& 
	`__�r�g2_1b�r_p
 (s)) \

1016 ? 
	`__bu�t�_�r�n
 (
s
, 
ac�
) \

1017 : ((
__a0
 = ((
__cڡ
 *�(
ac�
))[0], __a0 == '\0') \

1018 ? ((�(
s
), 0) \

1019 : ((
__a1
 = ((
__cڡ
 *�(
ac�
))[1], __a1 == '\0') \

1020 ? 
	`__�r�n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__cڡ
 *�(
ac�
))[2], __a2 == '\0') \

1022 ? 
	`__�r�n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__cڡ
 *�(
ac�
))[3] == '\0' \

1024 ? 
	`__�r�n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__bu�t�_�r�n
 (
s
, 
ac�
)))))) \

1026 : 
	`__bu�t�_�r�n
 (
s
, 
ac�
)); })

	)

1028 
	#�r�n
(
s
, 
ac�
) \

1029 
__ex�nsi�__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__bu�t�_cڡ�t_p
 (
ac�
�&& 
	`__�r�g2_1b�r_p
 (accept) \

1032 ? ((
__a0
 = ((
__cڡ
 *�(
ac�
))[0], __a0 == '\0') \

1033 ? ((�(
s
), 0) \

1034 : ((
__a1
 = ((
__cڡ
 *�(
ac�
))[1], __a1 == '\0') \

1035 ? 
	`__�r�n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__cڡ
 *�(
ac�
))[2], __a2 == '\0') \

1037 ? 
	`__�r�n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__cڡ
 *�(
ac�
))[3] == '\0' \

1039 ? 
	`__�r�n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`�r�n
 (
s
, 
ac�
))))) \

1041 : 
	`�r�n
 (
s
, 
ac�
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__�r�n_c1
 (
__cڡ
 *
__s
, 
__ac�
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__�r�n_c1
 (
__cڡ
 *
__s
, 
__ac�
)

1049 
size_t
 
__�su�
 = 0;

1051 
__s
[
__�su�
] =�
__ac�
)

1052 ++
__�su�
;

1053  
__�su�
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__�r�n_c2
 (
__cڡ
 *
__s
, 
__ac�1
,

1057 
__ac�2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__�r�n_c2
 (
__cڡ
 *
__s
, 
__ac�1
, 
__ac�2
)

1061 
size_t
 
__�su�
 = 0;

1063 
__s
[
__�su�
] =�
__ac�1
 || __s[__�su�] =�
__ac�2
)

1064 ++
__�su�
;

1065  
__�su�
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__�r�n_c3
 (
__cڡ
 *
__s
, 
__ac�1
,

1069 
__ac�2
, 
__ac�3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__�r�n_c3
 (
__cڡ
 *
__s
, 
__ac�1
, 
__ac�2
, 
__ac�3
)

1073 
size_t
 
__�su�
 = 0;

1075 
__s
[
__�su�
] =�
__ac�1
 || __s[__�su�] =�
__ac�2


1076 || 
__s
[
__�su�
] =�
__ac�3
)

1077 ++
__�su�
;

1078  
__�su�
;

1079 
	}
}

1084 #i�!
def�ed
 
_HAVE_STRING_ARCH_��brk
 || def�ed 
_FORCE_INLINES


1085 #i�de�
_HAVE_STRING_ARCH_��brk


1086 #i�
__GNUC_PREREQ
 (3, 2)

1087 
	#��brk
(
s
, 
ac�
) \

1088 
__ex�nsi�__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__bu�t�_cڡ�t_p
 (
ac�
�&& 
	`__�r�g2_1b�r_p
 (accept) \

1091 ? ((
	`__bu�t�_cڡ�t_p
 (
s
�&& 
	`__�r�g2_1b�r_p
 (s)) \

1092 ? 
	`__bu�t�_��brk
 (
s
, 
ac�
) \

1093 : ((
__a0
 = ((
__cڡ
 *�(
ac�
))[0], __a0 == '\0') \

1094 ? ((�(
s
), (*�
NULL
) \

1095 : ((
__a1
 = ((
__cڡ
 *�(
ac�
))[1], __a1 == '\0') \

1096 ? 
	`__bu�t�_�rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__cڡ
 *�(
ac�
))[2], __a2 == '\0') \

1098 ? 
	`__��brk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__cڡ
 *�(
ac�
))[3] == '\0' \

1100 ? 
	`__��brk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__bu�t�_��brk
 (
s
, 
ac�
)))))) \

1102 : 
	`__bu�t�_��brk
 (
s
, 
ac�
)); })

	)

1104 
	#��brk
(
s
, 
ac�
) \

1105 
__ex�nsi�__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__bu�t�_cڡ�t_p
 (
ac�
�&& 
	`__�r�g2_1b�r_p
 (accept) \

1108 ? ((
__a0
 = ((
__cڡ
 *�(
ac�
))[0], __a0 == '\0') \

1109 ? ((�(
s
), (*�
NULL
) \

1110 : ((
__a1
 = ((
__cڡ
 *�(
ac�
))[1], __a1 == '\0') \

1111 ? 
	`�rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__cڡ
 *�(
ac�
))[2], __a2 == '\0') \

1113 ? 
	`__��brk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__cڡ
 *�(
ac�
))[3] == '\0' \

1115 ? 
	`__��brk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`��brk
 (
s
, 
ac�
))))) \

1117 : 
	`��brk
 (
s
, 
ac�
)); })

	)

1121 
__STRING_INLINE
 *
__��brk_c2
 (
__cڡ
 *
__s
, 
__ac�1
,

1122 
__ac�2
);

1123 
__STRING_INLINE
 *

1124 
	$__��brk_c2
 (
__cڡ
 *
__s
, 
__ac�1
, 
__ac�2
)

1127 *
__s
 !�'\0' && *__�!�
__ac�1
 && *__�!�
__ac�2
)

1128 ++
__s
;

1129  *
__s
 =�'\0' ? 
NULL
 : (*�(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__��brk_c3
 (
__cڡ
 *
__s
, 
__ac�1
,

1133 
__ac�2
, 
__ac�3
);

1134 
__STRING_INLINE
 *

1135 
	$__��brk_c3
 (
__cڡ
 *
__s
, 
__ac�1
, 
__ac�2
,

1136 
__ac�3
)

1139 *
__s
 !�'\0' && *__�!�
__ac�1
 && *__�!�
__ac�2


1140 && *
__s
 !�
__ac�3
)

1141 ++
__s
;

1142  *
__s
 =�'\0' ? 
NULL
 : (*�(
size_t
) __s;

1143 
	}
}

1149 #i�!
def�ed
 
_HAVE_STRING_ARCH_�r�r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#�r�r
(
hay�ack
, 
�ed�
) \

1151 (
	`__ex�nsi�__
 (
	`__bu�t�_cڡ�t_p
 (
�ed�
�&& 
	`__�r�g2_1b�r_p
 (needle) \

1152 ? (((
__cڡ
 *�(
�ed�
))[0] == '\0' \

1153 ? (*�(
size_t
�(
hay�ack
) \

1154 : (((
__cڡ
 *�(
�ed�
))[1] == '\0' \

1155 ? 
	`�rchr
 (
hay�ack
, \

1156 ((
__cڡ
 *�(
�ed�
))[0]) \

1157 : 
	`�r�r
 (
hay�ack
, 
�ed�
))) \

1158 : 
	`�r�r
 (
hay�ack
, 
�ed�
)))

	)

1162 #i�!
def�ed
 
_HAVE_STRING_ARCH_��ok_r
 || def�ed 
_FORCE_INLINES


1163 #i�de�
_HAVE_STRING_ARCH_��ok_r


1164 
	#__��ok_r
(
s
, 
�p
, 
�x�
) \

1165 (
	`__ex�nsi�__
 (
	`__bu�t�_cڡ�t_p
 (
�p
�&& 
	`__�r�g2_1b�r_p
 (sep) \

1166 && ((
__cڡ
 *�(
�p
))[0] != '\0' \

1167 && ((
__cڡ
 *�(
�p
))[1] == '\0' \

1168 ? 
	`__��ok_r_1c
 (
s
, ((
__cڡ
 *�(
�p
))[0], 
�x�
) \

1169 : 
	`__��ok_r
 (
s
, 
�p
, 
�x�
)))

	)

1172 
__STRING_INLINE
 *
__��ok_r_1c
 (*
__s
, 
__�p
, **
__�x�
);

1173 
__STRING_INLINE
 *

1174 
	$__��ok_r_1c
 (*
__s
, 
__�p
, **
__�x�
)

1176 *
__�su�
;

1177 i�(
__s
 =�
NULL
)

1178 
__s
 = *
__�x�
;

1179 *
__s
 =�
__�p
)

1180 ++
__s
;

1181 
__�su�
 = 
NULL
;

1182 i�(*
__s
 != '\0')

1184 
__�su�
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i�(*
__s
++ =�
__�p
)

1188 
__s
[-1] = '\0';

1192 *
__�x�
 = 
__s
;

1193  
__�su�
;

1194 
	}
}

1195 #i�
def�ed
 
__USE_POSIX
 || def�ed 
__USE_MISC


1196 
	#��ok_r
(
s
, 
�p
, 
�x�
�
	`__��ok_r
 (s, s�,�ex�)

	)

1201 #i�!
def�ed
 
_HAVE_STRING_ARCH_�r�p
 || def�ed 
_FORCE_INLINES


1202 #i�de�
_HAVE_STRING_ARCH_�r�p


1204 *
__�r�p_g
 (**
__�r�gp
, 
__cڡ
 *
__d�im
);

1205 
	#__�r�p
(
s
, 
�je�
) \

1206 
__ex�nsi�__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__bu�t�_cڡ�t_p
 (
�je�
�&& 
	`__�r�g2_1b�r_p
 (reject) \

1209 && (
__r0
 = ((
__cڡ
 *�(
�je�
))[0], \

1210 ((
__cڡ
 *�(
�je�
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__cڡ
 *�(
�je�
))[1], \

1212 ((
__cڡ
 *�(
�je�
))[1] == '\0') \

1213 ? 
	`__�r�p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__cڡ
 *�(
�je�
))[2], __r2 == '\0') \

1215 ? 
	`__�r�p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__cڡ
 *�(
�je�
))[3] == '\0' \

1217 ? 
	`__�r�p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__�r�p_g
 (
s
, 
�je�
)))) \

1219 : 
	`__�r�p_g
 (
s
, 
�je�
)); })

	)

1222 
__STRING_INLINE
 *
__�r�p_1c
 (**
__s
, 
__�je�
);

1223 
__STRING_INLINE
 *

1224 
	$__�r�p_1c
 (**
__s
, 
__�je�
)

1226 *
__�tv�
 = *
__s
;

1227 i�(
__�tv�
 !�
NULL
 && (*
__s
 = 
	`�rchr
 (__�tv�, 
__�je�
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__�tv�
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__�r�p_2c
 (**
__s
, 
__�je�1
, 
__�je�2
);

1233 
__STRING_INLINE
 *

1234 
	$__�r�p_2c
 (**
__s
, 
__�je�1
, 
__�je�2
)

1236 *
__�tv�
 = *
__s
;

1237 i�(
__�tv�
 !�
NULL
)

1239 *
__�
 = 
__�tv�
;

1242 i�(*
__�
 == '\0')

1244 
__�
 = 
NULL
;

1247 i�(*
__�
 =�
__�je�1
 || *__� =�
__�je�2
)

1249 *
__�
++ = '\0';

1252 ++
__�
;

1254 *
__s
 = 
__�
;

1256  
__�tv�
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__�r�p_3c
 (**
__s
, 
__�je�1
, 
__�je�2
,

1260 
__�je�3
);

1261 
__STRING_INLINE
 *

1262 
	$__�r�p_3c
 (**
__s
, 
__�je�1
, 
__�je�2
, 
__�je�3
)

1264 *
__�tv�
 = *
__s
;

1265 i�(
__�tv�
 !�
NULL
)

1267 *
__�
 = 
__�tv�
;

1270 i�(*
__�
 == '\0')

1272 
__�
 = 
NULL
;

1275 i�(*
__�
 =�
__�je�1
 || *__� =�
__�je�2
 || *__� =�
__�je�3
)

1277 *
__�
++ = '\0';

1280 ++
__�
;

1282 *
__s
 = 
__�
;

1284  
__�tv�
;

1285 
	}
}

1286 #ifde�
__USE_BSD


1287 
	#�r�p
(
s
, 
�je�
�
	`__�r�p
 (s,�eje�)

	)

1294 #ifde�
__USE_MISC


1296 #i�!
def�ed
 
_HAVE_STRING_ARCH_�rdup
 || !def�ed 
_HAVE_STRING_ARCH_��dup


1297 
	#__�ed_m�loc_�d_��oc


	)

1298 
	~<�dlib.h
>

1301 #i�de�
_HAVE_STRING_ARCH_�rdup


1303 *
	$__�rdup
 (
__cڡ
 *
__�r�g
�
__THROW
 
__��ibu�_m�loc__
;

1304 
	#__�rdup
(
s
) \

1305 (
	`__ex�nsi�__
 (
	`__bu�t�_cڡ�t_p
 (
s
�&& 
	`__�r�g2_1b�r_p
 (s) \

1306 ? (((
__cڡ
 *�(
s
))[0] == '\0' \

1307 ? (*�
	`��oc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__�n
 = 
	`���
 (
s
) + 1; \

1309 *
__�tv�
 = (*�
	`m�loc
 (
__�n
); \

1310 i�(
__�tv�
 !�
NULL
) \

1311 
__�tv�
 = (*�
	`mem�y
 (__�tv�, 
s
, 
__�n
); \

1312 
__�tv�
; 
	}
})) \

1313 : 
	`__�rdup
 (
s
)))

	)

1315 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_BSD
 || def�ed 
__USE_XOPEN_EXTENDED


1316 
	#�rdup
(
s
�
	`__�rdup
 (s)

	)

1320 #i�de�
_HAVE_STRING_ARCH_��dup


1322 *
	$__��dup
 (
__cڡ
 *
__�r�g
, 
size_t
 
__n
)

1323 
__THROW
 
__��ibu�_m�loc__
;

1324 
	#__��dup
(
s
, 
n
) \

1325 (
	`__ex�nsi�__
 (
	`__bu�t�_cڡ�t_p
 (
s
�&& 
	`__�r�g2_1b�r_p
 (s) \

1326 ? (((
__cڡ
 *�(
s
))[0] == '\0' \

1327 ? (*�
	`��oc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__�n
 = 
	`���
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__�tv�
; \

1331 i�(
__n
 < 
__�n
) \

1332 
__�n
 = 
__n
 + 1; \

1333 
__�tv�
 = (*�
	`m�loc
 (
__�n
); \

1334 i�(
__�tv�
 !�
NULL
) \

1336 
__�tv�
[
__�n
 - 1] = '\0'; \

1337 
__�tv�
 = (*�
	`mem�y
 (__�tv�, 
s
, \

1338 
__�n
 - 1); \

1340 
__�tv�
; 
	}
})) \

1341 : 
	`__��dup
 (
s
, 
n
)))

	)

1343 #ifde�
__USE_GNU


1344 
	#��dup
(
s
, 
n
�
	`__��dup
 (s,�)

	)

1350 #i�de�
_FORCE_INLINES


1351 #unde�
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i�de�
_STRING_H


23 
__w�nde�
 (
__w�n_mem�t_z�o_�n
,

26 #i�de�
__�lu�lus


30 #unde�
mem�y


31 #unde�
memmove


32 #unde�
mem�t


33 #unde�
�r�t


34 #unde�
�r�y


35 #unde�
���t


36 #unde�
���y


37 #ifde�
__USE_GNU


38 #unde�
memp�y


39 #unde�
�p�y


41 #ifde�
__USE_BSD


42 #unde�
bc�y


43 #unde�
bz�o


48 
__ex��_�ways_�l�e
 *

49 
__NTH
 (
	$mem�y
 (*
__��ri�
 
__de�
, 
__cڡ
 *__��ri� 
__�c
,

50 
size_t
 
__�n
))

52  
	`__bu�t�___mem�y_chk
 (
__de�
, 
__�c
, 
__�n
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__ex��_�ways_�l�e
 *

56 
__NTH
 (
	$memmove
 (*
__de�
, 
__cڡ
 *
__�c
, 
size_t
 
__�n
))

58  
	`__bu�t�___memmove_chk
 (
__de�
, 
__�c
, 
__�n
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde�
__USE_GNU


62 
__ex��_�ways_�l�e
 *

63 
__NTH
 (
	$memp�y
 (*
__��ri�
 
__de�
, 
__cڡ
 *__��ri� 
__�c
,

64 
size_t
 
__�n
))

66  
	`__bu�t�___memp�y_chk
 (
__de�
, 
__�c
, 
__�n
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__ex��_�ways_�l�e
 *

77 
__NTH
 (
	$mem�t
 (*
__de�
, 
__ch
, 
size_t
 
__�n
))

79 i�(
	`__bu�t�_cڡ�t_p
 (
__�n
) && __len == 0

80 && (!
	`__bu�t�_cڡ�t_p
 (
__ch
) || __ch != 0))

82 
	`__w�n_mem�t_z�o_�n
 ();

83  
__de�
;

85  
	`__bu�t�___mem�t_chk
 (
__de�
, 
__ch
, 
__�n
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde�
__USE_BSD


89 
__ex��_�ways_�l�e
 

90 
__NTH
 (
	$bc�y
 (
__cڡ
 *
__�c
, *
__de�
, 
size_t
 
__�n
))

92 (�
	`__bu�t�___memmove_chk
 (
__de�
, 
__�c
, 
__�n
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__ex��_�ways_�l�e
 

96 
__NTH
 (
	$bz�o
 (*
__de�
, 
size_t
 
__�n
))

98 (�
	`__bu�t�___mem�t_chk
 (
__de�
, '\0', 
__�n
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__ex��_�ways_�l�e
 *

103 
__NTH
 (
	$�r�y
 (*
__��ri�
 
__de�
, 
__cڡ
 *__��ri� 
__�c
))

105  
	`__bu�t�___�r�y_chk
 (
__de�
, 
__�c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde�
__USE_GNU


109 
__ex��_�ways_�l�e
 *

110 
__NTH
 (
	$�p�y
 (*
__��ri�
 
__de�
, 
__cڡ
 *__��ri� 
__�c
))

112  
	`__bu�t�___�p�y_chk
 (
__de�
, 
__�c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__ex��_�ways_�l�e
 *

118 
__NTH
 (
	$���y
 (*
__��ri�
 
__de�
, 
__cڡ
 *__��ri� 
__�c
,

119 
size_t
 
__�n
))

121  
	`__bu�t�___���y_chk
 (
__de�
, 
__�c
, 
__�n
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__���y_chk
 (*
__de�
, 
__cڡ
 *
__�c
, 
size_t
 
__n
,

126 
size_t
 
__de��n
�
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__���y_��s
, (*
__de�
,

128 
__cڡ
 *
__�c
,

129 
size_t
 
__n
), 
���y
);

131 
__ex��_�ways_�l�e
 *

132 
	`__NTH
 (
	$���y
 (*
__de�
, 
__cڡ
 *
__�c
, 
size_t
 
__n
))

134 i�(
	`__bos
 (
__de�
�!�(
size_t
) -1

135 && (!
	`__bu�t�_cڡ�t_p
 (
__n
�|| __�<�
	`__bos
 (
__de�
)))

136  
	`__���y_chk
 (
__de�
, 
__�c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__���y_��s
 (
__de�
, 
__�c
, 
__n
);

138 
	}
}

141 
__ex��_�ways_�l�e
 *

142 
__NTH
 (
	$�r�t
 (*
__��ri�
 
__de�
, 
__cڡ
 *__��ri� 
__�c
))

144  
	`__bu�t�___�r�t_chk
 (
__de�
, 
__�c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__ex��_�ways_�l�e
 *

149 
__NTH
 (
	$���t
 (*
__��ri�
 
__de�
, 
__cڡ
 *__��ri� 
__�c
,

150 
size_t
 
__�n
))

152  
	`__bu�t�___���t_chk
 (
__de�
, 
__�c
, 
__�n
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i�de�
_STDIO_H


26 #ifde� 
__USE_BSD


27 
sys_ü
;

28 
__cڡ
 *__cڡ 
sys_��i�
[];

30 #ifde� 
__USE_GNU


31 
_sys_ü
;

32 
__cڡ
 *__cڡ 
_sys_��i�
[];

	@/usr/include/bits/time.h

24 #i�de�
__�ed_timev�


25 #i�de�
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i�!
def�ed
 
__STRICT_ANSI__
 && !def�ed 
__USE_XOPEN2K


39 
	~<b�s/ty�s.h
>

40 
__sysc�f
 ();

41 
	#CLK_TCK
 ((
__�ock_t
�
	`__sysc�f
 (2)�

	)

44 #ifde�
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde�
__�ed_timev�


68 #unde�
__�ed_timev�


69 #i�de�
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<b�s/ty�s.h
>

75 
	stimev�


77 
__time_t
 
	mtv_�c
;

78 
__su�c�ds_t
 
	mtv_u�c
;

	@/usr/include/bits/types.h

24 #i�def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<�u�s.h
>

28 
	~<b�s/w�dsize.h
>

31 
	t__u_ch�
;

32 
	t__u_sh�t
;

33 
	t__u_�t
;

34 
	t__u_l�g
;

37 sig�d 
	t__�t8_t
;

38 
	t__u�t8_t
;

39 sig�d 
	t__�t16_t
;

40 
	t__u�t16_t
;

41 sig�d 
	t__�t32_t
;

42 
	t__u�t32_t
;

43 #i�
__WORDSIZE
 == 64

44 sig�d 
	t__�t64_t
;

45 
	t__u�t64_t
;

46 #�i�
def�ed
 
__GLIBC_HAVE_LONG_LONG


47 
__ex�nsi�__
 sig�d 
	t__�t64_t
;

48 
__ex�nsi�__
 
	t__u�t64_t
;

52 #i�
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #�i�
def�ed
 
__GLIBC_HAVE_LONG_LONG


56 
__ex�nsi�__
 
	t__quad_t
;

57 
__ex�nsi�__
 
	t__u_quad_t
;

61 
	m__v�
[2];

62 } 
	t__quad_t
;

65 
__u_l�g
 
	m__v�
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i�
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__ex�nsi�__
 

	)

117 #�i�
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<b�s/ty�sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__�o_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__�o64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__ƚk_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__�ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__�im_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__�im64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u�c�ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su�c�ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__�ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__tim�_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk�t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk�t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk�t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk�t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsf��t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsf��t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__�ddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__���_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sock�n_t
;

195 #unde�
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i�de�
_UNISTD_H


24 
ssize_t
 
	$__�ad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nby�s
,

25 
size_t
 
__bu�
�
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__�ad_��s
, (
__fd
, *
__buf
,

27 
size_t
 
__nby�s
), 
�ad
�
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__�ad_chk_w�n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nby�s
,

30 
size_t
 
__bu�
), 
__�ad_chk
)

31 
__wur
 
	`__w�ǉr
 ("read called with bigger�ength�han size of "

34 
__ex��_�ways_�l�e
 
__wur
 
ssize_t


35 
	$�ad
 (
__fd
, *
__buf
, 
size_t
 
__nby�s
)

37 i�(
	`__bos0
 (
__buf
�!�(
size_t
) -1)

39 i�(!
	`__bu�t�_cڡ�t_p
 (
__nby�s
))

40  
	`__�ad_chk
 (
__fd
, 
__buf
, 
__nby�s
, 
	`__bos0
 (__buf));

42 i�(
__nby�s
 > 
	`__bos0
 (
__buf
))

43  
	`__�ad_chk_w�n
 (
__fd
, 
__buf
, 
__nby�s
, 
	`__bos0
 (__buf));

45  
	`__�ad_��s
 (
__fd
, 
__buf
, 
__nby�s
);

46 
	}
}

48 #ifde�
__USE_UNIX98


49 
ssize_t
 
	$__��d_chk
 (
__fd
, *
__buf
, 
size_t
 
__nby�s
,

50 
__off_t
 
__off�t
, 
size_t
 
__bufsize
�
__wur
;

51 
ssize_t
 
	$__��d64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nby�s
,

52 
__off64_t
 
__off�t
, 
size_t
 
__bufsize
�
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__��d_��s
,

54 (
__fd
, *
__buf
, 
size_t
 
__nby�s
,

55 
__off_t
 
__off�t
), 
��d
�
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__��d64_��s
,

57 (
__fd
, *
__buf
, 
size_t
 
__nby�s
,

58 
__off64_t
 
__off�t
), 
��d64
�
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__��d_chk_w�n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nby�s
,

61 
__off_t
 
__off�t
, 
size_t
 
__bufsize
), 
__��d_chk
)

62 
__wur
 
	`__w�ǉr
 ("pread called with bigger�ength�han size of "

64 
ssize_t
 
	`__REDIRECT
 (
__��d64_chk_w�n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nby�s
,

66 
__off64_t
 
__off�t
, 
size_t
 
__bufsize
),

67 
__��d64_chk
)

68 
__wur
 
	`__w�ǉr
 ("pread64 called with bigger�ength�han size of "

71 #i�de�
__USE_FILE_OFFSET64


72 
__ex��_�ways_�l�e
 
__wur
 
ssize_t


73 
	$��d
 (
__fd
, *
__buf
, 
size_t
 
__nby�s
, 
__off_t
 
__off�t
)

75 i�(
	`__bos0
 (
__buf
�!�(
size_t
) -1)

77 i�(!
	`__bu�t�_cڡ�t_p
 (
__nby�s
))

78  
	`__��d_chk
 (
__fd
, 
__buf
, 
__nby�s
, 
__off�t
, 
	`__bos0
 (__buf));

80 i��
__nby�s
 > 
	`__bos0
 (
__buf
))

81  
	`__��d_chk_w�n
 (
__fd
, 
__buf
, 
__nby�s
, 
__off�t
,

82 
	`__bos0
 (
__buf
));

84  
	`__��d_��s
 (
__fd
, 
__buf
, 
__nby�s
, 
__off�t
);

85 
	}
}

87 
__ex��_�ways_�l�e
 
__wur
 
ssize_t


88 
	$��d
 (
__fd
, *
__buf
, 
size_t
 
__nby�s
, 
__off64_t
 
__off�t
)

90 i�(
	`__bos0
 (
__buf
�!�(
size_t
) -1)

92 i�(!
	`__bu�t�_cڡ�t_p
 (
__nby�s
))

93  
	`__��d64_chk
 (
__fd
, 
__buf
, 
__nby�s
, 
__off�t
, 
	`__bos0
 (__buf));

95 i��
__nby�s
 > 
	`__bos0
 (
__buf
))

96  
	`__��d64_chk_w�n
 (
__fd
, 
__buf
, 
__nby�s
, 
__off�t
,

97 
	`__bos0
 (
__buf
));

100  
	`__��d64_��s
 (
__fd
, 
__buf
, 
__nby�s
, 
__off�t
);

101 
	}
}

104 #ifde�
__USE_LARGEFILE64


105 
__ex��_�ways_�l�e
 
__wur
 
ssize_t


106 
	$��d64
 (
__fd
, *
__buf
, 
size_t
 
__nby�s
, 
__off64_t
 
__off�t
)

108 i�(
	`__bos0
 (
__buf
�!�(
size_t
) -1)

110 i�(!
	`__bu�t�_cڡ�t_p
 (
__nby�s
))

111  
	`__��d64_chk
 (
__fd
, 
__buf
, 
__nby�s
, 
__off�t
, 
	`__bos0
 (__buf));

113 i��
__nby�s
 > 
	`__bos0
 (
__buf
))

114  
	`__��d64_chk_w�n
 (
__fd
, 
__buf
, 
__nby�s
, 
__off�t
,

115 
	`__bos0
 (
__buf
));

118  
	`__��d64_��s
 (
__fd
, 
__buf
, 
__nby�s
, 
__off�t
);

119 
	}
}

123 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN_EXTENDED
 || def�ed 
__USE_XOPEN2K


124 
ssize_t
 
	$__�adl�k_chk
 (
__cڡ
 *
__��ri�
 
__�th
,

125 *
__��ri�
 
__buf
, 
size_t
 
__�n
,

126 
size_t
 
__bu�
)

127 
__THROW
 
	`__n�nu�
 ((1, 2)�
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__�adl�k_��s
,

129 (
__cڡ
 *
__��ri�
 
__�th
,

130 *
__��ri�
 
__buf
, 
size_t
 
__�n
), 
�adl�k
)

131 
	`__n�nu�
 ((1, 2)�
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__�adl�k_chk_w�n
,

133 (
__cڡ
 *
__��ri�
 
__�th
,

134 *
__��ri�
 
__buf
, 
size_t
 
__�n
,

135 
size_t
 
__bu�
), 
__�adl�k_chk
)

136 
	`__n�nu�
 ((1, 2)�
__wur
 
	`__w�ǉr
 ("readlink called with bigger�ength "

139 
__ex��_�ways_�l�e
 
	`__n�nu�
 ((1, 2)�
__wur
 
ssize_t


140 
	`__NTH
 (
	$�adl�k
 (
__cڡ
 *
__��ri�
 
__�th
, *__��ri� 
__buf
,

141 
size_t
 
__�n
))

143 i�(
	`__bos
 (
__buf
�!�(
size_t
) -1)

145 i�(!
	`__bu�t�_cڡ�t_p
 (
__�n
))

146  
	`__�adl�k_chk
 (
__�th
, 
__buf
, 
__�n
, 
	`__bos
 (__buf));

148 i��
__�n
 > 
	`__bos
 (
__buf
))

149  
	`__�adl�k_chk_w�n
 (
__�th
, 
__buf
, 
__�n
, 
	`__bos
 (__buf));

151  
	`__�adl�k_��s
 (
__�th
, 
__buf
, 
__�n
);

152 
	}
}

155 #ifde�
__USE_ATFILE


156 
ssize_t
 
	$__�adl�k�_chk
 (
__fd
, 
__cڡ
 *
__��ri�
 
__�th
,

157 *
__��ri�
 
__buf
, 
size_t
 
__�n
,

158 
size_t
 
__bu�
)

159 
__THROW
 
	`__n�nu�
 ((2, 3)�
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__�adl�k�_��s
,

161 (
__fd
, 
__cڡ
 *
__��ri�
 
__�th
,

162 *
__��ri�
 
__buf
, 
size_t
 
__�n
),

163 
�adl�k�
)

164 
	`__n�nu�
 ((2, 3)�
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__�adl�k�_chk_w�n
,

166 (
__fd
, 
__cڡ
 *
__��ri�
 
__�th
,

167 *
__��ri�
 
__buf
, 
size_t
 
__�n
,

168 
size_t
 
__bu�
), 
__�adl�k�_chk
)

169 
	`__n�nu�
 ((2, 3)�
__wur
 
	`__w�ǉr
 ("readlinkat called with bigger "

173 
__ex��_�ways_�l�e
 
	`__n�nu�
 ((2, 3)�
__wur
 
ssize_t


174 
	`__NTH
 (
	$�adl�k�
 (
__fd
, 
__cڡ
 *
__��ri�
 
__�th
,

175 *
__��ri�
 
__buf
, 
size_t
 
__�n
))

177 i�(
	`__bos
 (
__buf
�!�(
size_t
) -1)

179 i�(!
	`__bu�t�_cڡ�t_p
 (
__�n
))

180  
	`__�adl�k�_chk
 (
__fd
, 
__�th
, 
__buf
, 
__�n
, 
	`__bos
 (__buf));

182 i�(
__�n
 > 
	`__bos
 (
__buf
))

183  
	`__�adl�k�_chk_w�n
 (
__fd
, 
__�th
, 
__buf
, 
__�n
,

184 
	`__bos
 (
__buf
));

186  
	`__�adl�k�_��s
 (
__fd
, 
__�th
, 
__buf
, 
__�n
);

187 
	}
}

190 *
	$__g�cwd_chk
 (*
__buf
, 
size_t
 
__size
, size_�
__bu�
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__g�cwd_��s
,

193 (*
__buf
, 
size_t
 
__size
), 
g�cwd
�
__wur
;

194 *
	`__REDIRECT_NTH
 (
__g�cwd_chk_w�n
,

195 (*
__buf
, 
size_t
 
__size
, size_�
__bu�
),

196 
__g�cwd_chk
)

197 
__wur
 
	`__w�ǉr
 ("getcwd caller with bigger�ength�han size of "

200 
__ex��_�ways_�l�e
 
__wur
 *

201 
	`__NTH
 (
	$g�cwd
 (*
__buf
, 
size_t
 
__size
))

203 i�(
	`__bos
 (
__buf
�!�(
size_t
) -1)

205 i�(!
	`__bu�t�_cڡ�t_p
 (
__size
))

206  
	`__g�cwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i�(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__g�cwd_chk_w�n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__g�cwd_��s
 (
__buf
, 
__size
);

212 
	}
}

214 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_XOPEN_EXTENDED


215 *
	$__g�wd_chk
 (*
__buf
, 
size_t
 
bu�
)

216 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

217 *
	`__REDIRECT_NTH
 (
__g�wd_w�n
, (*
__buf
), 
g�wd
)

218 
	`__n�nu�
 ((1)�
__wur
 
	`__w�ǉr
 ("please use getcwd instead,�s getwd "

221 
__ex��_�ways_�l�e
 
	`__n�nu�
 ((1)�
__��ibu�_d����d__
 
__wur
 *

222 
	`__NTH
 (
	$g�wd
 (*
__buf
))

224 i�(
	`__bos
 (
__buf
�!�(
size_t
) -1)

225  
	`__g�wd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__g�wd_w�n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c�f�r_chk
 (
__�me
, *
__buf
, 
size_t
 
__�n
,

231 
size_t
 
__bu�
�
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c�f�r_��s
, (
__�me
, *
__buf
,

233 
size_t
 
__�n
), 
c�f�r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c�f�r_chk_w�n
,

235 (
__�me
, *
__buf
, 
size_t
 
__�n
,

236 
size_t
 
__bu�
), 
__c�f�r_chk
)

237 
	`__w�ǉr
 ("confstr called with bigger�ength�han size of destination "

240 
__ex��_�ways_�l�e
 
size_t


241 
	`__NTH
 (
	$c�f�r
 (
__�me
, *
__buf
, 
size_t
 
__�n
))

243 i�(
	`__bos
 (
__buf
�!�(
size_t
) -1)

245 i�(!
	`__bu�t�_cڡ�t_p
 (
__�n
))

246  
	`__c�f�r_chk
 (
__�me
, 
__buf
, 
__�n
, 
	`__bos
 (__buf));

248 i�(
	`__bos
 (
__buf
�< 
__�n
)

249  
	`__c�f�r_chk_w�n
 (
__�me
, 
__buf
, 
__�n
, 
	`__bos
 (__buf));

251  
	`__c�f�r_��s
 (
__�me
, 
__buf
, 
__�n
);

252 
	}
}

255 
	$__g�groups_chk
 (
__size
, 
__gid_t
 
__li�
[], 
size_t
 
__li��n
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__g�groups_��s
, (
__size
, 
__gid_t
 
__li�
[]),

258 
g�groups
�
__wur
;

259 
	`__REDIRECT_NTH
 (
__g�groups_chk_w�n
,

260 (
__size
, 
__gid_t
 
__li�
[], 
size_t
 
__li��n
),

261 
__g�groups_chk
)

262 
__wur
 
	`__w�ǉr
 ("getgroups called with bigger group count�han what "

265 
__ex��_�ways_�l�e
 

266 
	`__NTH
 (
	$g�groups
 (
__size
, 
__gid_t
 
__li�
[]))

268 i�(
	`__bos
 (
__li�
�!�(
size_t
) -1)

270 i�(!
	`__bu�t�_cڡ�t_p
 (
__size
) || __size < 0)

271  
	`__g�groups_chk
 (
__size
, 
__li�
, 
	`__bos
 (__list));

273 i�(
__size
 *  (
__gid_t
�> 
	`__bos
 (
__li�
))

274  
	`__g�groups_chk_w�n
 (
__size
, 
__li�
, 
	`__bos
 (__list));

276  
	`__g�groups_��s
 (
__size
, 
__li�
);

277 
	}
}

280 
	$__�y�me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__bu�
,

281 
size_t
 
__ėl
�
__THROW
 
	`__n�nu�
 ((2));

282 
	`__REDIRECT_NTH
 (
__�y�me_r_��s
, (
__fd
, *
__buf
,

283 
size_t
 
__bu�
), 
�y�me_r
)

284 
	`__n�nu�
 ((2));

285 
	`__REDIRECT_NTH
 (
__�y�me_r_chk_w�n
,

286 (
__fd
, *
__buf
, 
size_t
 
__bu�
,

287 
size_t
 
__ėl
), 
__�y�me_r_chk
)

288 
	`__n�nu�
 ((2)�
	`__w�ǉr
 ("ttyname_r called with bigger buflen�han "

291 
__ex��_�ways_�l�e
 

292 
	`__NTH
 (
	$�y�me_r
 (
__fd
, *
__buf
, 
size_t
 
__bu�
))

294 i�(
	`__bos
 (
__buf
�!�(
size_t
) -1)

296 i�(!
	`__bu�t�_cڡ�t_p
 (
__bu�
))

297  
	`__�y�me_r_chk
 (
__fd
, 
__buf
, 
__bu�
, 
	`__bos
 (__buf));

299 i�(
__bu�
 > 
	`__bos
 (
__buf
))

300  
	`__�y�me_r_chk_w�n
 (
__fd
, 
__buf
, 
__bu�
, 
	`__bos
 (__buf));

302  
	`__�y�me_r_��s
 (
__fd
, 
__buf
, 
__bu�
);

303 
	}
}

306 #i�
def�ed
 
__USE_REENTRANT
 || def�ed 
__USE_POSIX199506


307 
	$__g�log�_r_chk
 (*
__buf
, 
size_t
 
__bu�
, size_�
__ėl
)

308 
	`__n�nu�
 ((1));

309 
	`__REDIRECT
 (
__g�log�_r_��s
, (*
__buf
, 
size_t
 
__bu�
),

310 
g�log�_r
�
	`__n�nu�
 ((1));

311 
	`__REDIRECT
 (
__g�log�_r_chk_w�n
,

312 (*
__buf
, 
size_t
 
__bu�
, size_�
__ėl
),

313 
__g�log�_r_chk
)

314 
	`__n�nu�
 ((1)�
	`__w�ǉr
 ("getlogin_r called with bigger buflen�han "

317 
__ex��_�ways_�l�e
 

318 
	$g�log�_r
 (*
__buf
, 
size_t
 
__bu�
)

320 i�(
	`__bos
 (
__buf
�!�(
size_t
) -1)

322 i�(!
	`__bu�t�_cڡ�t_p
 (
__bu�
))

323  
	`__g�log�_r_chk
 (
__buf
, 
__bu�
, 
	`__bos
 (__buf));

325 i�(
__bu�
 > 
	`__bos
 (
__buf
))

326  
	`__g�log�_r_chk_w�n
 (
__buf
, 
__bu�
, 
	`__bos
 (__buf));

328  
	`__g�log�_r_��s
 (
__buf
, 
__bu�
);

329 
	}
}

333 #i�
def�ed
 
__USE_BSD
 || def�ed 
__USE_UNIX98


334 
	$__g�ho��me_chk
 (*
__buf
, 
size_t
 
__bu�
, size_�
__ėl
)

335 
__THROW
 
	`__n�nu�
 ((1));

336 
	`__REDIRECT_NTH
 (
__g�ho��me_��s
, (*
__buf
, 
size_t
 
__bu�
),

337 
g�ho��me
�
	`__n�nu�
 ((1));

338 
	`__REDIRECT_NTH
 (
__g�ho��me_chk_w�n
,

339 (*
__buf
, 
size_t
 
__bu�
, size_�
__ėl
),

340 
__g�ho��me_chk
)

341 
	`__n�nu�
 ((1)�
	`__w�ǉr
 ("gethostname called with bigger buflen�han "

344 
__ex��_�ways_�l�e
 

345 
	`__NTH
 (
	$g�ho��me
 (*
__buf
, 
size_t
 
__bu�
))

347 i�(
	`__bos
 (
__buf
�!�(
size_t
) -1)

349 i�(!
	`__bu�t�_cڡ�t_p
 (
__bu�
))

350  
	`__g�ho��me_chk
 (
__buf
, 
__bu�
, 
	`__bos
 (__buf));

352 i�(
__bu�
 > 
	`__bos
 (
__buf
))

353  
	`__g�ho��me_chk_w�n
 (
__buf
, 
__bu�
, 
	`__bos
 (__buf));

355  
	`__g�ho��me_��s
 (
__buf
, 
__bu�
);

356 
	}
}

360 #i�
def�ed
 
__USE_BSD
 || (def�ed 
__USE_XOPEN
 && !def�ed 
__USE_UNIX98
)

361 
	$__g�doma��me_chk
 (*
__buf
, 
size_t
 
__bu�
, size_�
__ėl
)

362 
__THROW
 
	`__n�nu�
 ((1)�
__wur
;

363 
	`__REDIRECT_NTH
 (
__g�doma��me_��s
, (*
__buf
,

364 
size_t
 
__bu�
),

365 
g�doma��me
�
	`__n�nu�
 ((1)�
__wur
;

366 
	`__REDIRECT_NTH
 (
__g�doma��me_chk_w�n
,

367 (*
__buf
, 
size_t
 
__bu�
, size_�
__ėl
),

368 
__g�doma��me_chk
)

369 
	`__n�nu�
 ((1)�
__wur
 
	`__w�ǉr
 ("getdomainname called with bigger "

373 
__ex��_�ways_�l�e
 

374 
	`__NTH
 (
	$g�doma��me
 (*
__buf
, 
size_t
 
__bu�
))

376 i�(
	`__bos
 (
__buf
�!�(
size_t
) -1)

378 i�(!
	`__bu�t�_cڡ�t_p
 (
__bu�
))

379  
	`__g�doma��me_chk
 (
__buf
, 
__bu�
, 
	`__bos
 (__buf));

381 i�(
__bu�
 > 
	`__bos
 (
__buf
))

382  
	`__g�doma��me_chk_w�n
 (
__buf
, 
__bu�
, 
	`__bos
 (__buf));

384  
	`__g�doma��me_��s
 (
__buf
, 
__bu�
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i�!
def�ed
 
_SYS_WAIT_H
 && !def�ed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i�!
def�ed
 
_SYS_WAIT_H
 && !def�ed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
��us
�(((��us�& 0xff00�>> 8)

	)

32 
	#__WTERMSIG
(
��us
�((��us�& 0x7f)

	)

35 
	#__WSTOPSIG
(
��us
�
	`__WEXITSTATUS
(��us)

	)

38 
	#__WIFEXITED
(
��us
�(
	`__WTERMSIG
(��us�=�0)

	)

41 
	#__WIFSIGNALED
(
��us
) \

42 (((sig�d �(((
��us
�& 0x7f�+ 1�>> 1�> 0)

	)

45 
	#__WIFSTOPPED
(
��us
�(((��us�& 0xff�=�0x7f)

	)

49 #ifde�
WCONTINUED


50 
	#__WIFCONTINUED
(
��us
�((��us�=�
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
��us
�((��us�& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
�t
, 
sig
�(ԑ�<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
�((sig�<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<�d�n.h
>

67 
	uwa�


69 
	mw_��us
;

72 #if 
__BYTE_ORDER
 =�
__LITTLE_ENDIAN


73 
	m__w_�rmsig
:7;

74 
	m__w_c�edump
:1;

75 
	m__w_�tcode
:8;

78 #if 
__BYTE_ORDER
 =�
__BIG_ENDIAN


80 
	m__w_�tcode
:8;

81 
	m__w_c�edump
:1;

82 
	m__w_�rmsig
:7;

84 } 
	m__wa�_�rm��ed
;

87 #if 
__BYTE_ORDER
 =�
__LITTLE_ENDIAN


88 
	m__w_��v�
:8;

89 
	m__w_��sig
:8;

92 #if 
__BYTE_ORDER
 =�
__BIG_ENDIAN


94 
	m__w_��sig
:8;

95 
	m__w_��v�
:8;

97 } 
	m__wa�_�ݳd
;

100 
	#w_�rmsig
 
__wa�_�rm��ed
.
__w_�rmsig


	)

101 
	#w_c�edump
 
__wa�_�rm��ed
.
__w_c�edump


	)

102 
	#w_�tcode
 
__wa�_�rm��ed
.
__w_�tcode


	)

103 
	#w_��sig
 
__wa�_�ݳd
.
__w_��sig


	)

104 
	#w_��v�
 
__wa�_�ݳd
.
__w_��v�


	)

	@/usr/include/features.h

20 #i�def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

97 #unde�
__USE_ISOC99


98 #unde�
__USE_ISOC95


99 #unde�
__USE_POSIX


100 #unde�
__USE_POSIX2


101 #unde�
__USE_POSIX199309


102 #unde�
__USE_POSIX199506


103 #unde�
__USE_XOPEN


104 #unde�
__USE_XOPEN_EXTENDED


105 #unde�
__USE_UNIX98


106 #unde�
__USE_XOPEN2K


107 #unde�
__USE_XOPEN2KXSI


108 #unde�
__USE_XOPEN2K8


109 #unde�
__USE_XOPEN2K8XSI


110 #unde�
__USE_LARGEFILE


111 #unde�
__USE_LARGEFILE64


112 #unde�
__USE_FILE_OFFSET64


113 #unde�
__USE_BSD


114 #unde�
__USE_SVID


115 #unde�
__USE_MISC


116 #unde�
__USE_ATFILE


117 #unde�
__USE_GNU


118 #unde�
__USE_REENTRANT


119 #unde�
__USE_FORTIFY_LEVEL


120 #unde�
__FAVOR_BSD


121 #unde�
__KERNEL_STRICT_NAMES


125 #i�de�
_LOOSE_KERNEL_NAMES


126 
	#__KERNEL_STRICT_NAMES


	)

130 
	#__USE_ANSI
 1

	)

139 #i�
def�ed
 
__GNUC__
 && def�ed 
__GNUC_MINOR__


140 
	#__GNUC_PREREQ
(
maj
, 
m�
) \

141 ((
__GNUC__
 << 16�+ 
__GNUC_MINOR__
 >�((
maj
�<< 16�+ (
m�
))

	)

143 
	#__GNUC_PREREQ
(
maj
, 
m�
�0

	)

148 #i�
def�ed
 
_BSD_SOURCE
 && \

149 !(
def�ed
 
	g_POSIX_SOURCE
 || def�ed 
	g_POSIX_C_SOURCE
 || \

150 
def�ed
 
	g_XOPEN_SOURCE
 || def�ed 
	g_GNU_SOURCE
 || def�ed 
	g_SVID_SOURCE
)

151 
	#__FAVOR_BSD
 1

	)

155 #ifde�
_GNU_SOURCE


156 #unde�
_ISOC95_SOURCE


157 
	#_ISOC95_SOURCE
 1

	)

158 #unde�
_ISOC99_SOURCE


159 
	#_ISOC99_SOURCE
 1

	)

160 #unde�
_POSIX_SOURCE


161 
	#_POSIX_SOURCE
 1

	)

162 #unde�
_POSIX_C_SOURCE


163 
	#_POSIX_C_SOURCE
 200809L

	)

164 #unde�
_XOPEN_SOURCE


165 
	#_XOPEN_SOURCE
 700

	)

166 #unde�
_XOPEN_SOURCE_EXTENDED


167 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

168 #unde�
_LARGEFILE64_SOURCE


169 
	#_LARGEFILE64_SOURCE
 1

	)

170 #unde�
_BSD_SOURCE


171 
	#_BSD_SOURCE
 1

	)

172 #unde�
_SVID_SOURCE


173 
	#_SVID_SOURCE
 1

	)

174 #unde�
_ATFILE_SOURCE


175 
	#_ATFILE_SOURCE
 1

	)

180 #i�(!
def�ed
 
__STRICT_ANSI__
 && !def�ed 
_ISOC99_SOURCE
 && \

181 !
def�ed
 
	g_POSIX_SOURCE
 && !def�ed 
	g_POSIX_C_SOURCE
 && \

182 !
def�ed
 
	g_XOPEN_SOURCE
 && !def�ed 
	g_BSD_SOURCE
 && !def�ed 
	g_SVID_SOURCE
)

183 
	#_BSD_SOURCE
 1

	)

184 
	#_SVID_SOURCE
 1

	)

191 #i�(
def�ed
 
_ISOC99_SOURCE
 || def�ed 
_ISOC9X_SOURCE
 \

192 || (
def�ed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

193 
	#__USE_ISOC99
 1

	)

197 #i�(
def�ed
 
_ISOC99_SOURCE
 || def�ed 
_ISOC9X_SOURCE
 \

198 || (
def�ed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

199 
	#__USE_ISOC95
 1

	)

204 #i�((!
def�ed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

205 !
def�ed
 
_POSIX_SOURCE
 && !def�ed 
_POSIX_C_SOURCE
)

206 
	#_POSIX_SOURCE
 1

	)

207 #i�
def�ed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

208 
	#_POSIX_C_SOURCE
 2

	)

209 #�i�
def�ed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

210 
	#_POSIX_C_SOURCE
 199506L

	)

211 #�i�
def�ed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

212 
	#_POSIX_C_SOURCE
 200112L

	)

214 
	#_POSIX_C_SOURCE
 200809L

	)

216 
	#__USE_POSIX_IMPLICITLY
 1

	)

219 #i�
def�ed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >�1 || def�ed 
_XOPEN_SOURCE


220 
	#__USE_POSIX
 1

	)

223 #i�
def�ed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >�2 || def�ed 
_XOPEN_SOURCE


224 
	#__USE_POSIX2
 1

	)

227 #i�(
_POSIX_C_SOURCE
 - 0) >= 199309L

228 
	#__USE_POSIX199309
 1

	)

231 #i�(
_POSIX_C_SOURCE
 - 0) >= 199506L

232 
	#__USE_POSIX199506
 1

	)

235 #i�(
_POSIX_C_SOURCE
 - 0) >= 200112L

236 
	#__USE_XOPEN2K
 1

	)

237 #unde�
__USE_ISOC95


238 
	#__USE_ISOC95
 1

	)

239 #unde�
__USE_ISOC99


240 
	#__USE_ISOC99
 1

	)

243 #i�(
_POSIX_C_SOURCE
 - 0) >= 200809L

244 
	#__USE_XOPEN2K8
 1

	)

245 #unde�
_ATFILE_SOURCE


246 
	#_ATFILE_SOURCE
 1

	)

249 #ifdef 
_XOPEN_SOURCE


250 
	#__USE_XOPEN
 1

	)

251 #i�(
_XOPEN_SOURCE
 - 0) >= 500

252 
	#__USE_XOPEN_EXTENDED
 1

	)

253 
	#__USE_UNIX98
 1

	)

254 #unde�
_LARGEFILE_SOURCE


255 
	#_LARGEFILE_SOURCE
 1

	)

256 #i�(
_XOPEN_SOURCE
 - 0) >= 600

257 #i�(
_XOPEN_SOURCE
 - 0) >= 700

258 
	#__USE_XOPEN2K8
 1

	)

259 
	#__USE_XOPEN2K8XSI
 1

	)

261 
	#__USE_XOPEN2K
 1

	)

262 
	#__USE_XOPEN2KXSI
 1

	)

263 #unde�
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde�
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #ifde�
_XOPEN_SOURCE_EXTENDED


270 
	#__USE_XOPEN_EXTENDED
 1

	)

275 #ifde�
_LARGEFILE_SOURCE


276 
	#__USE_LARGEFILE
 1

	)

279 #ifde�
_LARGEFILE64_SOURCE


280 
	#__USE_LARGEFILE64
 1

	)

283 #i�
def�ed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

284 
	#__USE_FILE_OFFSET64
 1

	)

287 #i�
def�ed
 
_BSD_SOURCE
 || def�ed 
_SVID_SOURCE


288 
	#__USE_MISC
 1

	)

291 #ifdef 
_BSD_SOURCE


292 
	#__USE_BSD
 1

	)

295 #ifdef 
_SVID_SOURCE


296 
	#__USE_SVID
 1

	)

299 #ifdef 
_ATFILE_SOURCE


300 
	#__USE_ATFILE
 1

	)

303 #ifdef 
_GNU_SOURCE


304 
	#__USE_GNU
 1

	)

307 #i�
def�ed
 
_REENTRANT
 || def�ed 
_THREAD_SAFE


308 
	#__USE_REENTRANT
 1

	)

311 #i�
def�ed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

312 && 
__GNUC_PREREQ
 (4, 1�&& 
def�ed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

313 #i�
_FORTIFY_SOURCE
 > 1

314 
	#__USE_FORTIFY_LEVEL
 2

	)

316 
	#__USE_FORTIFY_LEVEL
 1

	)

319 
	#__USE_FORTIFY_LEVEL
 0

	)

323 
	~<b�s/�edefs.h
>

326 
	#__STDC_ISO_10646__
 200009L

	)

334 #unde�
__GNU_LIBRARY__


335 
	#__GNU_LIBRARY__
 6

	)

339 
	#__GLIBC__
 2

	)

340 
	#__GLIBC_MINOR__
 13

	)

342 
	#__GLIBC_PREREQ
(
maj
, 
m�
) \

343 ((
__GLIBC__
 << 16�+ 
__GLIBC_MINOR__
 >�((
maj
�<< 16�+ (
m�
))

	)

346 #i�
def�ed
 
__GNUC__
 \

347 || (
def�ed
 
	g__PGI
 && def�ed 
	g__i386__
 ) \

348 || (
def�ed
 
	g__INTEL_COMPILER
 && (def�ed 
	g__i386__
 || def�ed 
	g__�64__
)) \

349 || (
def�ed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

350 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

354 #i�de�
__ASSEMBLER__


355 #i�de�
_SYS_CDEFS_H


356 
	~<sys/cdefs.h
>

361 #i�
def�ed
 
__USE_FILE_OFFSET64
 && !def�ed 
__REDIRECT


362 
	#__USE_LARGEFILE
 1

	)

363 
	#__USE_LARGEFILE64
 1

	)

369 #i�
__GNUC_PREREQ
 (2, 7�&& 
def�ed
 
__OPTIMIZE__
 \

370 && !
def�ed
 
	g__OPTIMIZE_SIZE__
 && !def�ed 
	g__NO_INLINE__
 \

371 && 
def�ed
 
	g__ex��_�l�e


372 
	#__USE_EXTERN_INLINES
 1

	)

377 #i�
__GNUC_PREREQ
 (2, 7�&& 
def�ed
 
__OPTIMIZE__
 \

378 && (
def�ed
 
	g_LIBC
 || !def�ed 
	g__OPTIMIZE_SIZE__
�&& !def�ed 
	g__NO_INLINE__
 \

379 && 
def�ed
 
	g__ex��_�l�e


380 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

388 
	~<gnu/�ubs.h
>

	@/usr/include/getopt.h

21 #i�de�
_GETOPT_H


23 #i�de�
__�ed_g��t


24 
	#_GETOPT_H
 1

	)

34 #i�!
def�ed
 
__GNU_LIBRARY__


35 
	~<�y�.h
>

38 #i�de�
__THROW


39 #i�de�
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
m�
�(0)

	)

42 #i�
def�ed
 
__�lu�lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__�lu�lus


59 *
ݏrg
;

73 
�t�d
;

78 
݋�
;

82 
�t�t
;

84 #i�de�
__�ed_g��t


106 
	s�ti�


108 cڡ *
	g�me
;

111 
	ghas_�g
;

112 *
	g�ag
;

113 
	gv�
;

118 
	#no_�gum�t
 0

	)

119 
	#�qu�ed_�gum�t
 1

	)

120 
	#�tiڮ_�gum�t
 2

	)

148 #ifde�
__GNU_LIBRARY__


152 
g��t
 (
___�gc
, *cڡ *
___�gv
, cڡ *
__sh�t�ts
)

153 
__THROW
;

155 #i�
def�ed
 
__�ed_g��t
 && def�ed 
__USE_POSIX2
 \

156 && !
def�ed
 
	g__USE_POSIX_IMPLICITLY
 && !def�ed 
	g__USE_GNU


160 #ifde�
__REDIRECT


161 
__REDIRECT_NTH
 (
g��t
, (
___�gc
, *cڡ *
___�gv
,

162 cڡ *
__sh�t�ts
),

163 
__posix_g��t
);

165 
__posix_g��t
 (
___�gc
, *cڡ *
___�gv
,

166 cڡ *
__sh�t�ts
�
__THROW
;

167 
	#g��t
 
__posix_g��t


	)

171 
g��t
 ();

174 #i�de�
__�ed_g��t


175 
g��t_l�g
 (
___�gc
, *cڡ *
___�gv
,

176 cڡ *
__sh�t�ts
,

177 cڡ 
�ti�
 *
__l�g�ts
, *
__l�g�d
)

178 
__THROW
;

179 
g��t_l�g_�ly
 (
___�gc
, *cڡ *
___�gv
,

180 cڡ *
__sh�t�ts
,

181 cڡ 
�ti�
 *
__l�g�ts
, *
__l�g�d
)

182 
__THROW
;

186 #ifdef 
__�lu�lus


191 #unde�
__�ed_g��t


	@/usr/include/libio.h

29 #i�de�
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c�fig.h
>

34 
	#_IO_pos_t
 
_G_�os_t


	)

35 
	#_IO_�os_t
 
_G_�os_t


	)

36 
	#_IO_�os64_t
 
_G_�os64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic�v_t
 
_G_ic�v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li�
 
_G_va_li�


	)

48 
	#_IO_w�t_t
 
_G_w�t_t


	)

50 #ifde�
_G_NEED_STDARG_H


52 
	#__�ed___va_li�


	)

53 
	~<�d�g.h
>

54 #ifde�
__GNUC_VA_LIST


55 #unde�
_IO_va_li�


56 
	#_IO_va_li�
 
__gnuc_va_li�


	)

60 #i�de�
__P


61 #i�
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde�
__STDC__


65 
	#__P
(
p
�
	)
p

66 
	#__PMT
(
p
�
	)
p

68 
	#__P
(
p
�()

	)

69 
	#__PMT
(
p
�()

	)

75 #i�de�
_PARAMS


76 
	#_PARAMS
(
��os
�
	`__P
�r�os)

	)

79 #i�de�
__STDC__


81 cڡ

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i�de�
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i�de�
EOF


90 
	#EOF
 (-1)

	)

92 #i�de�
NULL


93 #i�
def�ed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =�2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nu�
)

	)

97 #i�!
def�ed
(
__�lu�lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde�
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde�
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde�
_IO_MTSAFE_IO


174 #i�
def�ed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<b�s/�dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m�k�
 {

187 
_IO_m�k�
 *
	m_�xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
�t_��ampos
(
��ampos
 
�
�{ 
	m_�os
 = sp; }

195 
�t_off�t
(
off�t
�{ 
	m_pos
 = off�t; 
	m_�os
 = (
��ampos
)(-2); }

196 
	mpublic
:

197 
��amm�k�
(
��ambuf
 *
sb
);

198 ~
��amm�k�
();

199 
�v�g
(�{  
	m_�os
 == -2; }

200 
d��
(
��amm�k�
&);

201 
d��
();

206 
	e__codecvt_�su�


208 
	m__codecvt_ok
,

209 
	m__codecvt_���l
,

210 
	m__codecvt_�r�
,

211 
	m__codecvt_noc�v


214 #i�
def�ed
 
_LIBC
 || def�ed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de�r
�(
	m_IO_codecvt
 *);

220 
__codecvt_�su�
 (*
__codecvt_do_out
�(
	m_IO_codecvt
 *,

221 
	m__mb��e_t
 *,

222 cڡ 
	mwch�_t
 *,

223 cڡ 
	mwch�_t
 *,

224 cڡ 
	mwch�_t
 **, *,

226 
__codecvt_�su�
 (*
__codecvt_do_unshi�
�(
	m_IO_codecvt
 *,

227 
	m__mb��e_t
 *, *,

229 
__codecvt_�su�
 (*
__codecvt_do_�
�(
	m_IO_codecvt
 *,

230 
	m__mb��e_t
 *,

232 cڡ **, 
	mwch�_t
 *,

233 
	mwch�_t
 *, wchar_t **);

234 (*
	m__codecvt_do_�cod�g
�(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_�ways_noc�v
�(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_�ngth
�(
	m_IO_codecvt
 *, 
	m__mb��e_t
 *,

237 cڡ *, cڡ *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_�ngth
�(
	m_IO_codecvt
 *);

240 
_IO_ic�v_t
 
	m__cd_�
;

241 
_IO_ic�v_t
 
	m__cd_out
;

245 
	s_IO_wide_d�a


247 
wch�_t
 *
	m_IO_�ad_�r
;

248 
wch�_t
 *
	m_IO_�ad_�d
;

249 
wch�_t
 *
	m_IO_�ad_ba�
;

250 
wch�_t
 *
	m_IO_wr�e_ba�
;

251 
wch�_t
 *
	m_IO_wr�e_�r
;

252 
wch�_t
 *
	m_IO_wr�e_�d
;

253 
wch�_t
 *
	m_IO_buf_ba�
;

254 
wch�_t
 *
	m_IO_buf_�d
;

256 
wch�_t
 *
	m_IO_�ve_ba�
;

257 
wch�_t
 *
	m_IO_backup_ba�
;

259 
wch�_t
 *
	m_IO_�ve_�d
;

261 
__mb��e_t
 
	m_IO_��e
;

262 
__mb��e_t
 
	m_IO_ϡ_��e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch�_t
 
	m_sh�tbuf
[1];

267 cڡ 
_IO_jump_t
 *
	m_wide_v�b�
;

271 
	s_IO_FILE
 {

272 
	m_�ags
;

273 
	#_IO_f�e_�ags
 
_�ags


	)

277 * 
	m_IO_�ad_�r
;

278 * 
	m_IO_�ad_�d
;

279 * 
	m_IO_�ad_ba�
;

280 * 
	m_IO_wr�e_ba�
;

281 * 
	m_IO_wr�e_�r
;

282 * 
	m_IO_wr�e_�d
;

283 * 
	m_IO_buf_ba�
;

284 * 
	m_IO_buf_�d
;

286 *
	m_IO_�ve_ba�
;

287 *
	m_IO_backup_ba�
;

288 *
	m_IO_�ve_�d
;

290 
_IO_m�k�
 *
	m_m�k�s
;

292 
_IO_FILE
 *
	m_cha�
;

294 
	m_f��o
;

296 
	m_blksize
;

298 
	m_�ags2
;

300 
_IO_off_t
 
	m_�d_off�t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_c�umn
;

305 sig�d 
	m_v�b�_off�t
;

306 
	m_sh�tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde�
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com��e


316 
_IO_FILE
 
	m_f�e
;

318 #i�
def�ed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off�t
;

320 #i�
def�ed
 
_LIBC
 || def�ed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d�a
 *
	m_wide_d�a
;

324 
_IO_FILE
 *
	m_䓻s_li�
;

325 *
	m_䓻s_buf
;

326 
size_t
 
	m_䓻s_size
;

328 *
	m__�d1
;

329 *
	m__�d2
;

330 *
	m__�d3
;

331 *
	m__�d4
;

332 
size_t
 
	m__�d5
;

334 
	m_mode
;

336 
	m_unu�d2
[15 *  (�- 4 *  (*�-  (
size_t
)];

340 #i�de�
__�lu�lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_�us
;

346 
_IO_FILE_�us
 
_IO_2_1_�d�_
;

347 
_IO_FILE_�us
 
_IO_2_1_�dout_
;

348 
_IO_FILE_�us
 
_IO_2_1_�d�r_
;

349 #i�de�
_LIBC


350 
	#_IO_�d�
 ((
_IO_FILE
*)(&
_IO_2_1_�d�_
))

	)

351 
	#_IO_�dout
 ((
_IO_FILE
*)(&
_IO_2_1_�dout_
))

	)

352 
	#_IO_�d�r
 ((
_IO_FILE
*)(&
_IO_2_1_�d�r_
))

	)

354 
_IO_FILE
 *
_IO_�d�
 
��ibu�_hidd�
;

355 
_IO_FILE
 *
_IO_�dout
 
��ibu�_hidd�
;

356 
_IO_FILE
 *
_IO_�d�r
 
��ibu�_hidd�
;

364 
__ssize_t
 
	t__io_�ad_�
 (*
	t__cook�
, *
	t__buf
, 
	tsize_t
 
	t__nby�s
);

372 
__ssize_t
 
	t__io_wr�e_�
 (*
	t__cook�
, 
	t__cڡ
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_�ek_�
 (*
	t__cook�
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_�o�_�
 (*
	t__cook�
);

387 #ifde�
_GNU_SOURCE


389 
__io_�ad_�
 
	tcook�_�ad_fun�i�_t
;

390 
__io_wr�e_�
 
	tcook�_wr�e_fun�i�_t
;

391 
__io_�ek_�
 
	tcook�_�ek_fun�i�_t
;

392 
__io_�o�_�
 
	tcook�_�o�_fun�i�_t
;

397 
__io_�ad_�
 *
	m�ad
;

398 
__io_wr�e_�
 *
	mwr�e
;

399 
__io_�ek_�
 *
	m�ek
;

400 
__io_�o�_�
 *
	m�o�
;

401 } 
	t_IO_cook�_io_fun�i�s_t
;

402 
_IO_cook�_io_fun�i�s_t
 
	tcook�_io_fun�i�s_t
;

404 
	g_IO_cook�_f�e
;

407 
_IO_cook�_��
 (
_IO_cook�_f�e
 *
__cf�e
, 
__�ad_wr�e
,

408 *
__cook�
, 
_IO_cook�_io_fun�i�s_t
 
__�s
);

412 #ifde�
__�lu�lus


416 
__und��ow
 (
_IO_FILE
 *);

417 
__u�ow
 (
_IO_FILE
 *);

418 
__ov��ow
 (
_IO_FILE
 *, );

419 #i�
def�ed
 
_LIBC
 || def�ed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_w�t_t
 
__wund��ow
 (
_IO_FILE
 *);

421 
_IO_w�t_t
 
__wu�ow
 (
_IO_FILE
 *);

422 
_IO_w�t_t
 
__wov��ow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i� 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex�
, 
�s
�
	`__bu�t�_ex��
 (�x�),�es)

	)

428 
	#_IO_BE
(
ex�
, 
�s
��x�)

	)

431 
	#_IO_g�c_u�ocked
(
_�
) \

432 (
	`_IO_BE
 ((
_�
)->
_IO_�ad_�r
 >�(_�)->
_IO_�ad_�d
, 0) \

433 ? 
	`__u�ow
 (
_�
�: *(*�(_�)->
_IO_�ad_�r
++)

	)

434 
	#_IO_�ekc_u�ocked
(
_�
) \

435 (
	`_IO_BE
 ((
_�
)->
_IO_�ad_�r
 >�(_�)->
_IO_�ad_�d
, 0) \

436 && 
	`__und��ow
 (
_�
�=�
EOF
 ? EOF \

437 : *(*�(
_�
)->
_IO_�ad_�r
)

	)

438 
	#_IO_putc_u�ocked
(
_ch
, 
_�
) \

439 (
	`_IO_BE
 ((
_�
)->
_IO_wr�e_�r
 >�(_�)->
_IO_wr�e_�d
, 0) \

440 ? 
	`__ov��ow
 (
_�
, (�(
_ch
)) \

441 : (�(*(
_�
)->
_IO_wr�e_�r
++ = (
_ch
)))

	)

443 #i�
def�ed
 
_LIBC
 || def�ed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_g�wc_u�ocked
(
_�
) \

445 (
	`_IO_BE
 ((
_�
)->
_wide_d�a
 =�
NULL
 \

446 || ((
_�
)->
_wide_d�a
->
_IO_�ad_�r
 \

447 >�(
_�
)->
_wide_d�a
->
_IO_�ad_�d
), 0) \

448 ? 
	`__wu�ow
 (
_�
�: (
_IO_w�t_t
�*(_�)->
_wide_d�a
->
_IO_�ad_�r
++)

	)

449 
	#_IO_putwc_u�ocked
(
_wch
, 
_�
) \

450 (
	`_IO_BE
 ((
_�
)->
_wide_d�a
 =�
NULL
 \

451 || ((
_�
)->
_wide_d�a
->
_IO_wr�e_�r
 \

452 >�(
_�
)->
_wide_d�a
->
_IO_wr�e_�d
), 0) \

453 ? 
	`__wov��ow
 (
_�
, 
_wch
) \

454 : (
_IO_w�t_t
�(*(
_�
)->
_wide_d�a
->
_IO_wr�e_�r
++ = (
_wch
)))

	)

457 
	#_IO_�of_u�ocked
(
__�
�(((__�)->
_�ags
 & 
_IO_EOF_SEEN
�!�0)

	)

458 
	#_IO_��_u�ocked
(
__�
�(((__�)->
_�ags
 & 
_IO_ERR_SEEN
�!�0)

	)

460 
_IO_g�c
 (
_IO_FILE
 *
__�
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__�
);

462 
_IO_�of
 (
_IO_FILE
 *
__�
�
__THROW
;

463 
_IO_��
 (
_IO_FILE
 *
__�
�
__THROW
;

465 
_IO_�ekc_locked
 (
_IO_FILE
 *
__�
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_�
) \

469 ((
_�
)->
_IO_wr�e_�r
 - (_�)->
_IO_wr�e_ba�
)

	)

471 
_IO_�ockf�e
 (
_IO_FILE
 *�
__THROW
;

472 
_IO_fu�ockf�e
 (
_IO_FILE
 *�
__THROW
;

473 
_IO_�rylockf�e
 (
_IO_FILE
 *�
__THROW
;

475 #ifde�
_IO_MTSAFE_IO


476 
	#_IO_�ekc
(
_�
�
	`_IO_�ekc_locked
 (_�)

	)

477 
	#_IO_�ockf�e
(
_�
) \

478 i�(((
_�
)->
_�ags
 & 
_IO_USER_LOCK
�=�0�
	`_IO_�ockf�e
 (_�)

	)

479 
	#_IO_fu�ockf�e
(
_�
) \

480 i�(((
_�
)->
_�ags
 & 
_IO_USER_LOCK
�=�0�
	`_IO_fu�ockf�e
 (_�)

	)

482 
	#_IO_�ekc
(
_�
�
	`_IO_�ekc_u�ocked
 (_�)

	)

483 
	#_IO_�ockf�e
(
_�
�

	)

484 
	#_IO_fu�ockf�e
(
_�
�

	)

485 
	#_IO_�rylockf�e
(
_�
�

	)

486 
	#_IO_��nup_�gi�_��t
(
_f�
, 
_�
�

	)

487 
	#_IO_��nup_�gi�_�d
(
_Do�
�

	)

490 
_IO_vfs�nf
 (
_IO_FILE
 * 
__��ri�
, const * __restrict,

491 
_IO_va_li�
, *
__��ri�
);

492 
_IO_v�r�tf
 (
_IO_FILE
 *
__��ri�
, const *__restrict,

493 
_IO_va_li�
);

494 
_IO_ssize_t
 
_IO_�dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sg�n
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_�ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_�ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_�_backup_��
 (
_IO_FILE
 *�
__THROW
;

502 #i�
def�ed
 
_LIBC
 || def�ed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_w�t_t
 
_IO_g�wc
 (
_IO_FILE
 *
__�
);

504 
_IO_w�t_t
 
_IO_putwc
 (
wch�_t
 
__wc
, 
_IO_FILE
 *
__�
);

505 
_IO_fwide
 (
_IO_FILE
 *
__�
, 
__mode
�
__THROW
;

506 #i�
__GNUC__
 >= 2

509 #i�
def�ed
 
_LIBC
 && def�ed 
SHARED


510 
	~<shlib-com�t.h
>

511 #i�
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_�com�tib�
 \

513 (
	`__bu�t�_ex��
 (&
_IO_�d�_u�d
 =�
NULL
, 0))

	)

514 cڡ 
_IO_�d�_u�d
;

515 
w�k_ex��
 (
_IO_�d�_u�d
);

518 #i�de�
_IO_fwide_maybe_�com�tib�


519 
	#_IO_fwide_maybe_�com�tib�
 (0)

	)

523 
	#_IO_fwide
(
__�
, 
__mode
) \

524 ({ 
__�su�
 = (
__mode
); \

525 i�(
__�su�
 < 0 && ! 
_IO_fwide_maybe_�com�tib�
) \

527 i�((
__�
)->
_mode
 == 0) \

529 (
__�
)->
_mode
 = -1; \

530 
__�su�
 = (
__�
)->
_mode
; \

532 i�(
	`__bu�t�_cڡ�t_p
 (
__mode
) && (__mode) == 0) \

533 
__�su�
 = 
_IO_fwide_maybe_�com�tib�
 ? -1 : (
__�
)->
_mode
; \

535 
__�su�
 = 
	`_IO_fwide
 (
__�
, __result); \

536 
__�su�
; })

	)

539 
_IO_vfws�nf
 (
_IO_FILE
 * 
__��ri�
, cڡ 
wch�_t
 * __restrict,

540 
_IO_va_li�
, *
__��ri�
);

541 
_IO_vfw��tf
 (
_IO_FILE
 *
__��ri�
, cڡ 
wch�_t
 *__restrict,

542 
_IO_va_li�
);

543 
_IO_ssize_t
 
_IO_w�dn
 (
_IO_FILE
 *, 
w�t_t
, _IO_ssize_t);

544 
_IO_�_wbackup_��
 (
_IO_FILE
 *�
__THROW
;

547 #ifde�
__LDBL_COMPAT


548 
	~<b�s/libio-ldbl.h
>

551 #ifde�
__�lu�lus


	@/usr/include/sys/select.h

22 #i�de�
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<�u�s.h
>

28 
	~<b�s/ty�s.h
>

31 
	~<b�s/���.h
>

34 
	~<b�s/sig�t.h
>

36 #i�de�
__sig�t_t_def�ed


37 
	#__sig�t_t_def�ed


	)

38 
__sig�t_t
 
	tsig�t_t
;

42 
	#__�ed_time_t


	)

43 
	#__�ed_time�ec


	)

44 
	~<time.h
>

45 
	#__�ed_timev�


	)

46 
	~<b�s/time.h
>

48 #i�de�
__su�c�ds_t_def�ed


49 
__su�c�ds_t
 
	tsu�c�ds_t
;

50 
	#__su�c�ds_t_def�ed


	)

55 
	t__fd_mask
;

58 #unde�
__NFDBITS


59 #unde�
__FDELT


60 #unde�
__FDMASK


62 
	#__NFDBITS
 (8 * (� (
__fd_mask
))

	)

63 
	#__FDELT
(
d
�((d�/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
�((
__fd_mask
�1 << ((d�% 
__NFDBITS
))

	)

71 #ifde�
__USE_XOPEN


72 
__fd_mask
 
	mfds_b�s
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
�t
�((�t)->
fds_b�s
)

	)

75 
__fd_mask
 
	m__fds_b�s
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
�t
�((�t)->
__fds_b�s
)

	)

78 } 
	tfd_�t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde�
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd��
�
	`__FD_SET
 (fd, fd��)

	)

94 
	#FD_CLR
(
fd
, 
fd��
�
	`__FD_CLR
 (fd, fd��)

	)

95 
	#FD_ISSET
(
fd
, 
fd��
�
	`__FD_ISSET
 (fd, fd��)

	)

96 
	#FD_ZERO
(
fd��
�
	`__FD_ZERO
 (fd��)

	)

99 
__BEGIN_DECLS


109 
���
 (
__nfds
, 
fd_�t
 *
__��ri�
 
__�adfds
,

110 
fd_�t
 *
__��ri�
 
__wr�efds
,

111 
fd_�t
 *
__��ri�
 
__ex�fds
,

112 
timev�
 *
__��ri�
 
__timeout
);

114 #ifde�
__USE_XOPEN2K


121 
p���
 (
__nfds
, 
fd_�t
 *
__��ri�
 
__�adfds
,

122 
fd_�t
 *
__��ri�
 
__wr�efds
,

123 
fd_�t
 *
__��ri�
 
__ex�fds
,

124 cڡ 
time�ec
 *
__��ri�
 
__timeout
,

125 cڡ 
__sig�t_t
 *
__��ri�
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/types.h

23 #i�def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<�u�s.h
>

28 
	g__BEGIN_DECLS


30 
	~<b�s/ty�s.h
>

32 #ifdef 
__USE_BSD


33 #i�de�
__u_ch�_def�ed


34 
__u_ch�
 
	tu_ch�
;

35 
__u_sh�t
 
	tu_sh�t
;

36 
__u_�t
 
	tu_�t
;

37 
__u_l�g
 
	tu_l�g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch�_def�ed


	)

45 
__loff_t
 
	tloff_t
;

47 #i�de�
__�o_t_def�ed


48 #i�de�
__USE_FILE_OFFSET64


49 
__�o_t
 
	t�o_t
;

51 
__�o64_t
 
	t�o_t
;

53 
	#__�o_t_def�ed


	)

55 #i�
def�ed
 
__USE_LARGEFILE64
 && !def�ed 
__�o64_t_def�ed


56 
__�o64_t
 
	t�o64_t
;

57 
	#__�o64_t_def�ed


	)

60 #i�de�
__dev_t_def�ed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_def�ed


	)

65 #i�de�
__gid_t_def�ed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_def�ed


	)

70 #i�de�
__mode_t_def�ed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_def�ed


	)

75 #i�de�
__ƚk_t_def�ed


76 
__ƚk_t
 
	tƚk_t
;

77 
	#__ƚk_t_def�ed


	)

80 #i�de�
__uid_t_def�ed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_def�ed


	)

85 #i�de�
__off_t_def�ed


86 #i�de�
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_def�ed


	)

93 #i�
def�ed
 
__USE_LARGEFILE64
 && !def�ed 
__off64_t_def�ed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_def�ed


	)

98 #i�de�
__pid_t_def�ed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_def�ed


	)

103 #i�(
def�ed
 
__USE_SVID
 || def�ed 
__USE_XOPEN
 || def�ed 
__USE_XOPEN2K8
) \

104 && !
def�ed
 
__id_t_def�ed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_def�ed


	)

109 #i�de�
__ssize_t_def�ed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_def�ed


	)

114 #ifdef 
__USE_BSD


115 #i�de�
__daddr_t_def�ed


116 
__daddr_t
 
	tdaddr_t
;

117 
__�ddr_t
 
	t�ddr_t
;

118 
	#__daddr_t_def�ed


	)

122 #i�(
def�ed
 
__USE_SVID
 || def�ed 
__USE_XOPEN
�&& !def�ed 
__key_t_def�ed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_def�ed


	)

127 #i�
def�ed
 
__USE_XOPEN
 || def�ed 
__USE_XOPEN2K8


128 
	#__�ed_�ock_t


	)

130 
	#__�ed_time_t


	)

131 
	#__�ed_tim�_t


	)

132 
	#__�ed_�ockid_t


	)

133 
	~<time.h
>

135 #ifde�
__USE_XOPEN


136 #i�de�
__u�c�ds_t_def�ed


137 
__u�c�ds_t
 
	tu�c�ds_t
;

138 
	#__u�c�ds_t_def�ed


	)

140 #i�de�
__su�c�ds_t_def�ed


141 
__su�c�ds_t
 
	tsu�c�ds_t
;

142 
	#__su�c�ds_t_def�ed


	)

146 
	#__�ed_size_t


	)

147 
	~<�ddef.h
>

149 #ifde�
__USE_MISC


151 
	tul�g
;

152 
	tush�t
;

153 
	tu�t
;

158 #i�!
__GNUC_PREREQ
 (2, 7)

161 #i�de�
__�t8_t_def�ed


162 
	#__�t8_t_def�ed


	)

163 
	t�t8_t
;

164 
	t�t16_t
;

165 
	t�t32_t
;

166 #i�
__WORDSIZE
 == 64

167 
	t�t64_t
;

168 #�i�
__GLIBC_HAVE_LONG_LONG


169 
__ex�nsi�__
 
	t�t64_t
;

174 
	tu_�t8_t
;

175 
	tu_�t16_t
;

176 
	tu_�t32_t
;

177 #i�
__WORDSIZE
 == 64

178 
	tu_�t64_t
;

179 #�i�
__GLIBC_HAVE_LONG_LONG


180 
__ex�nsi�__
 
	tu_�t64_t
;

183 
	t�gi��_t
;

188 
	#__�tN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__��ibu�__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_�tN_t
(
	tN
, 
	tMODE
) \

191 
	tu_�t
##
	tN
##
	t_t
 
	t__��ibu�__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i�de�
	t__�t8_t_def�ed


194 
	t__�t8_t_def�ed


	)

195 
	t__�tN_t
 (8, 
	t__QI__
);

196 
__�tN_t
 (16, 
__HI__
);

197 
__�tN_t
 (32, 
__SI__
);

198 
__�tN_t
 (64, 
__DI__
);

201 
__u_�tN_t
 (8, 
__QI__
);

202 
__u_�tN_t
 (16, 
__HI__
);

203 
__u_�tN_t
 (32, 
__SI__
);

204 
__u_�tN_t
 (64, 
__DI__
);

206 
	t�gi��_t
 
	t__��ibu�__
 ((
	t__mode__
 (
	t__w�d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<�d�n.h
>

220 
	~<sys/���.h
>

223 
	~<sys/sysma�os.h
>

227 #i�(
def�ed
 
__USE_UNIX98
 || def�ed 
__USE_XOPEN2K8
) \

228 && !
def�ed
 
__blksize_t_def�ed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_def�ed


	)

234 #i�de�
__USE_FILE_OFFSET64


235 #i�de�
__blk�t_t_def�ed


236 
__blk�t_t
 
	tblk�t_t
;

237 
	#__blk�t_t_def�ed


	)

239 #i�de�
__fsblk�t_t_def�ed


240 
__fsblk�t_t
 
	tfsblk�t_t
;

241 
	#__fsblk�t_t_def�ed


	)

243 #i�de�
__fsf��t_t_def�ed


244 
__fsf��t_t
 
	tfsf��t_t
;

245 
	#__fsf��t_t_def�ed


	)

248 #i�de�
__blk�t_t_def�ed


249 
__blk�t64_t
 
	tblk�t_t
;

250 
	#__blk�t_t_def�ed


	)

252 #i�de�
__fsblk�t_t_def�ed


253 
__fsblk�t64_t
 
	tfsblk�t_t
;

254 
	#__fsblk�t_t_def�ed


	)

256 #i�de�
__fsf��t_t_def�ed


257 
__fsf��t64_t
 
	tfsf��t_t
;

258 
	#__fsf��t_t_def�ed


	)

262 #ifde�
__USE_LARGEFILE64


263 
__blk�t64_t
 
	tblk�t64_t
;

264 
__fsblk�t64_t
 
	tfsblk�t64_t
;

265 
__fsf��t64_t
 
	tfsf��t64_t
;

270 #i�
def�ed
 
__USE_POSIX199506
 || def�ed 
__USE_UNIX98


271 
	~<b�s/�h�adty�s.h
>

274 
	g__END_DECLS


	@/usr/include/time.h

23 #i�def 
_TIME_H


25 #i�(! 
def�ed
 
__�ed_time_t
 && !def�ed 
__�ed_�ock_t
 && \

26 ! 
def�ed
 
	g__�ed_time�ec
)

27 
	#_TIME_H
 1

	)

28 
	~<�u�s.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__�ed_size_t


	)

37 
	#__�ed_NULL


	)

38 
	~<�ddef.h
>

42 
	~<b�s/time.h
>

45 #i�!
def�ed
 
__STRICT_ANSI__
 && !def�ed 
__USE_XOPEN2K


46 #i�de�
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i�!
def�ed
 
__�ock_t_def�ed
 && (def�ed 
_TIME_H
 || def�ed 
__�ed_�ock_t
)

54 
	#__�ock_t_def�ed
 1

	)

56 
	~<b�s/ty�s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__�ock_t
 
	t�ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i�
def�ed
 
__USE_XOPEN
 || def�ed 
__USE_POSIX
 || def�ed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
�ock_t
)

67 #unde�
__�ed_�ock_t


69 #i�!
def�ed
 
__time_t_def�ed
 && (def�ed 
_TIME_H
 || def�ed 
__�ed_time_t
)

70 
	#__time_t_def�ed
 1

	)

72 
	~<b�s/ty�s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i�
def�ed
 
__USE_POSIX
 || def�ed 
__USE_MISC
 || def�ed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde�
__�ed_time_t


85 #i�!
def�ed
 
__�ockid_t_def�ed
 && \

86 ((
def�ed
 
_TIME_H
 && def�ed 
__USE_POSIX199309
�|| def�ed 
__�ed_�ockid_t
)

87 
	#__�ockid_t_def�ed
 1

	)

89 
	~<b�s/ty�s.h
>

92 
__�ockid_t
 
	t�ockid_t
;

95 #unde�
__�ockid_time_t


97 #i�!
def�ed
 
__tim�_t_def�ed
 && \

98 ((
def�ed
 
_TIME_H
 && def�ed 
__USE_POSIX199309
�|| def�ed 
__�ed_tim�_t
)

99 
	#__tim�_t_def�ed
 1

	)

101 
	~<b�s/ty�s.h
>

104 
__tim�_t
 
	ttim�_t
;

107 #unde�
__�ed_tim�_t


110 #i�!
def�ed
 
__time�ec_def�ed
 && \

111 ((
def�ed
 
_TIME_H
 && \

112 (
def�ed
 
__USE_POSIX199309
 || def�ed 
__USE_MISC
)) || \

113 
def�ed
 
__�ed_time�ec
)

114 
	#__time�ec_def�ed
 1

	)

116 
	~<b�s/ty�s.h
>

120 
	stime�ec


122 
__time_t
 
tv_�c
;

123 
tv_n�c
;

127 #unde�
__�ed_time�ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_�c
;

136 
tm_m�
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m�
;

140 
tm_y�r
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd�
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__cڡ
 *
tm_z�e
;

149 
__tm_gmtoff
;

150 
__cڡ
 *
__tm_z�e
;

153 
__END_NAMESPACE_STD


154 #i�
def�ed
 
__USE_XOPEN
 || def�ed 
__USE_POSIX
 || def�ed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde�
__USE_POSIX199309


161 
	s�im��ec


163 
time�ec
 
�_��rv�
;

164 
time�ec
 
�_v�ue
;

168 
sigev�t
;

172 #ifde�
__USE_XOPEN2K


173 #i�de�
__pid_t_def�ed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_def�ed


	)

180 
__BEGIN_NAMESPACE_STD


183 
�ock_t
 
	$�ock
 (�
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__tim�
�
__THROW
;

189 
	$dif�ime
 (
time_t
 
__time1
,�ime_�
__time0
)

190 
__THROW
 
	`__��ibu�__
 ((
__cڡ__
));

193 
time_t
 
	$mktime
 (
tm
 *
__�
�
__THROW
;

199 
size_t
 
	$�r�ime
 (*
__��ri�
 
__s
, 
size_t
 
__maxsize
,

200 
__cڡ
 *
__��ri�
 
__f�m�
,

201 
__cڡ
 
tm
 *
__��ri�
 
__�
�
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde�
__USE_XOPEN


207 *
	$��time
 (
__cڡ
 *
__��ri�
 
__s
,

208 
__cڡ
 *
__��ri�
 
__fmt
, 
tm
 *
__�
)

209 
__THROW
;

212 #ifde�
__USE_XOPEN2K8


215 
	~<xlo��.h
>

217 
size_t
 
	$�r�ime_l
 (*
__��ri�
 
__s
, 
size_t
 
__maxsize
,

218 
__cڡ
 *
__��ri�
 
__f�m�
,

219 
__cڡ
 
tm
 *
__��ri�
 
__�
,

220 
__lo��_t
 
__loc
�
__THROW
;

223 #ifde�
__USE_GNU


224 *
	$��time_l
 (
__cڡ
 *
__��ri�
 
__s
,

225 
__cڡ
 *
__��ri�
 
__fmt
, 
tm
 *
__�
,

226 
__lo��_t
 
__loc
�
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__cڡ
 
time_t
 *
__tim�
�
__THROW
;

237 
tm
 *
	$lo��ime
 (
__cڡ
 
time_t
 *
__tim�
�
__THROW
;

238 
__END_NAMESPACE_STD


240 #i�
def�ed
 
__USE_POSIX
 || def�ed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__cڡ
 
time_t
 *
__��ri�
 
__tim�
,

244 
tm
 *
__��ri�
 
__�
�
__THROW
;

248 
tm
 *
	$lo��ime_r
 (
__cڡ
 
time_t
 *
__��ri�
 
__tim�
,

249 
tm
 *
__��ri�
 
__�
�
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as�ime
 (
__cڡ
 
tm
 *
__�
�
__THROW
;

258 *
	$�ime
 (
__cڡ
 
time_t
 *
__tim�
�
__THROW
;

259 
__END_NAMESPACE_STD


261 #i�
def�ed
 
__USE_POSIX
 || def�ed 
__USE_MISC


266 *
	$as�ime_r
 (
__cڡ
 
tm
 *
__��ri�
 
__�
,

267 *
__��ri�
 
__buf
�
__THROW
;

270 *
	$�ime_r
 (
__cڡ
 
time_t
 *
__��ri�
 
__tim�
,

271 *
__��ri�
 
__buf
�
__THROW
;

276 *
__tz�me
[2];

277 
__daylight
;

278 
__timez�e
;

281 #ifdef 
__USE_POSIX


283 *
tz�me
[2];

287 
	$tz�t
 (�
__THROW
;

290 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_XOPEN


291 
daylight
;

292 
timez�e
;

295 #ifde�
__USE_SVID


298 
	$�ime
 (
__cڡ
 
time_t
 *
__wh�
�
__THROW
;

304 
	#__i��p
(
y�r
) \

305 ((
y�r
�% 4 =�0 && ((y�r�% 100 !�0 || (y�r�% 400 =�0))

	)

308 #ifde�
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__�
�
__THROW
;

316 
time_t
 
	$tim�o�l
 (
tm
 *
__�
�
__THROW
;

319 
	$dysize
 (
__y�r
�
__THROW
 
	`__��ibu�__
 ((
__cڡ__
));

323 #ifde�
__USE_POSIX199309


328 
	`�no��p
 (
__cڡ
 
time�ec
 *
__�que�ed_time
,

329 
time�ec
 *
__�ma��g
);

333 
	$�ock_g��s
 (
�ockid_t
 
__�ock_id
, 
time�ec
 *
__�s
�
__THROW
;

336 
	$�ock_g�time
 (
�ockid_t
 
__�ock_id
, 
time�ec
 *
__�
�
__THROW
;

339 
	$�ock_��ime
 (
�ockid_t
 
__�ock_id
, 
__cڡ
 
time�ec
 *
__�
)

340 
__THROW
;

342 #ifde�
__USE_XOPEN2K


347 
	`�ock_�no��p
 (
�ockid_t
 
__�ock_id
, 
__�ags
,

348 
__cڡ
 
time�ec
 *
__�q
,

349 
time�ec
 *
__�m
);

352 
	$�ock_g��u�ockid
 (
pid_t
 
__pid
, 
�ockid_t
 *
__�ock_id
�
__THROW
;

357 
	$tim�_�
 (
�ockid_t
 
__�ock_id
,

358 
sigev�t
 *
__��ri�
 
__evp
,

359 
tim�_t
 *
__��ri�
 
__tim�id
�
__THROW
;

362 
	$tim�_d��e
 (
tim�_t
 
__tim�id
�
__THROW
;

365 
	$tim�_��ime
 (
tim�_t
 
__tim�id
, 
__�ags
,

366 
__cڡ
 
�im��ec
 *
__��ri�
 
__v�ue
,

367 
�im��ec
 *
__��ri�
 
__ov�ue
�
__THROW
;

370 
	$tim�_g�time
 (
tim�_t
 
__tim�id
, 
�im��ec
 *
__v�ue
)

371 
__THROW
;

374 
	$tim�_g�ov�run
 (
tim�_t
 
__tim�id
�
__THROW
;

378 #ifde�
__USE_XOPEN_EXTENDED


390 
g�d�e_�r
;

399 
tm
 *
	`g�d�e
 (
__cڡ
 *
__�r�g
);

402 #ifde�
__USE_GNU


413 
	`g�d�e_r
 (
__cڡ
 *
__��ri�
 
__�r�g
,

414 
tm
 *
__��ri�
 
__�sbu�
);

417 
__END_DECLS


	@/usr/include/xlocale.h

21 #i�de�
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__lo��_�ru�


31 
__lo��_d�a
 *
	m__lo��s
[13];

34 cڡ *
	m__�y�_b
;

35 cڡ *
	m__�y�_t�ow�
;

36 cڡ *
	m__�y�_tou��
;

39 cڡ *
	m__�mes
[13];

40 } *
	t__lo��_t
;

43 
__lo��_t
 
	tlo��_t
;

	@/usr/include/_G_config.h

4 #i�de�
_G_c�fig_h


5 
	#_G_c�fig_h
 1

	)

9 
	~<b�s/ty�s.h
>

10 
	#__�ed_size_t


	)

11 #i�
def�ed
 
_LIBC
 || def�ed 
_GLIBCPP_USE_WCHAR_T


12 
	#__�ed_wch�_t


	)

14 
	#__�ed_NULL


	)

15 
	~<�ddef.h
>

16 
	#__�ed_mb��e_t


	)

17 #i�
def�ed
 
_LIBC
 || def�ed 
_GLIBCPP_USE_WCHAR_T


18 
	#__�ed_w�t_t


	)

20 
	~<wch�.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb��e_t
 
	m__��e
;

26 } 
	t_G_�os_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb��e_t
 
	m__��e
;

31 } 
	t_G_�os64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch�_t
 
wch�_t


	)

38 
	#_G_w�t_t
 
w�t_t


	)

39 
	#_G_��64
 
��64


	)

40 #i�
def�ed
 
_LIBC
 || def�ed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc�v.h
>

44 
__gc�v_�fo
 
	m__cd
;

47 
__gc�v_�fo
 
	m__cd
;

48 
__gc�v_��_d�a
 
	m__d�a
;

49 } 
	m__comb�ed
;

50 } 
	t_G_ic�v_t
;

53 
	t_G_�t16_t
 
	t__��ibu�__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_�t32_t
 
	t__��ibu�__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_u�t16_t
 
	t__��ibu�__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_u�t32_t
 
	t__��ibu�__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li�
 
__gnuc_va_li�


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__ݒ64


	)

78 
	#_G_LSEEK64
 
__l�ek64


	)

79 
	#_G_MMAP64
 
__mm�64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
�
	`__fx��64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`def�ed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i�
def�ed
 
__�lu�lus
 || def�ed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
�
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
�()

	)

	@/usr/include/bits/libio-ldbl.h

20 #i�de�
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfs�nf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_v�r�tf
)

	@/usr/include/bits/predefs.h

19 #i�de�
_FEATURES_H


23 #i�de�
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i�de�
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<b�s/w�dsize.h
>

25 #i�
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t�h�ad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__�ign
;

57 } 
	t�h�ad_��_t
;

60 #i�
__WORDSIZE
 == 64

61 
	s__�h�ad_����_li�


63 
__�h�ad_����_li�
 *
	m__�ev
;

64 
__�h�ad_����_li�
 *
	m__�xt
;

65 } 
	t__�h�ad_li�_t
;

67 
	s__�h�ad_����_�i�


69 
__�h�ad_����_�i�
 *
	m__�xt
;

70 } 
	t__�h�ad_�i�_t
;

78 
	s__�h�ad_mu�x_s


80 
	m__lock
;

81 
	m__cou�
;

82 
	m__ow�r
;

83 #i�
__WORDSIZE
 == 64

84 
	m__nu�rs
;

88 
	m__k�d
;

89 #i�
__WORDSIZE
 == 64

90 
	m__��s
;

91 
__�h�ad_li�_t
 
	m__li�
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu�rs
;

95 
__ex�nsi�__
 union

97 
	m__��s
;

98 
__�h�ad_�i�_t
 
	m__li�
;

101 } 
	m__d�a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__�ign
;

104 } 
	t�h�ad_mu�x_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__�ign
;

110 } 
	t�h�ad_mu�x��_t
;

119 
	m__lock
;

120 
	m__fu�x
;

121 
__ex�nsi�__
 
	m__tٮ_�q
;

122 
__ex�nsi�__
 
	m__wakeup_�q
;

123 
__ex�nsi�__
 
	m__wok�_�q
;

124 *
	m__mu�x
;

125 
	m__nwa��s
;

126 
	m__br�d��_�q
;

127 } 
	m__d�a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__ex�nsi�__
 
	m__�ign
;

130 } 
	t�h�ad_c�d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__�ign
;

136 } 
	t�h�ad_c�d��_t
;

140 
	t�h�ad_key_t
;

144 
	t�h�ad_��_t
;

147 #i�
def�ed
 
__USE_UNIX98
 || def�ed 
__USE_XOPEN2K


152 #i�
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__�_�ad�s
;

157 
	m__�ad�s_wakeup
;

158 
	m__wr��_wakeup
;

159 
	m__�_�ad�s_queued
;

160 
	m__�_wr��s_queued
;

161 
	m__wr��
;

162 
	m__sh�ed
;

163 
	m__�d1
;

164 
	m__�d2
;

167 
	m__�ags
;

168 } 
	m__d�a
;

172 
	m__lock
;

173 
	m__�_�ad�s
;

174 
	m__�ad�s_wakeup
;

175 
	m__wr��_wakeup
;

176 
	m__�_�ad�s_queued
;

177 
	m__�_wr��s_queued
;

180 
	m__�ags
;

181 
	m__sh�ed
;

182 
	m__�d1
;

183 
	m__�d2
;

184 
	m__wr��
;

185 } 
	m__d�a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__�ign
;

189 } 
	t�h�ad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__�ign
;

195 } 
	t�h�ad_rwlock��_t
;

199 #ifde�
__USE_XOPEN2K


201 vީ��
	t�h�ad_��lock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__�ign
;

210 } 
	t�h�ad_b�r�r_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__�ign
;

216 } 
	t�h�ad_b�r���r_t
;

220 #i�
__WORDSIZE
 == 32

222 
	#__��nup_f�_��ibu�
 
	`__��ibu�__
 ((
	`__�g�rm__
 (1)))

	)

	@/usr/include/bits/select.h

19 #i�de�
_SYS_SELECT_H


23 
	~<b�s/w�dsize.h
>

26 #i�
def�ed
 
__GNUC__
 && __GNUC__ >= 2

28 #i�
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "�osq"

	)

31 
	#__FD_ZERO_STOS
 "�o�"

	)

34 
	#__FD_ZERO
(
fd�
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vީ�e__
 ("�d;��; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_�t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd�
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
�t
) \

51 
__i
; \

52 
fd_�t
 *
__�r
 = (
�t
); \

53 
__i
 = 0; __�<  (
fd_�t
�/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__�r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
�t
) \

60 ((�(
	`__FDS_BITS
 (
�t
)[
	`__FDELT
 (
d
)] |�
	`__FDMASK
 (d)))

	)

61 
	#__FD_CLR
(
d
, 
�t
) \

62 ((�(
	`__FDS_BITS
 (
�t
)[
	`__FDELT
 (
d
)] &�~
	`__FDMASK
 (d)))

	)

63 
	#__FD_ISSET
(
d
, 
�t
) \

64 ((
	`__FDS_BITS
 (
�t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)�!�0)

	)

	@/usr/include/bits/sigset.h

21 #i�def 
_SIGSET_H_ty�s


22 
	#_SIGSET_H_ty�s
 1

	)

24 
	t__sig_�omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__v�
[
_SIGSET_NWORDS
];

32 } 
	t__sig�t_t
;

43 #i�!
def�ed
 
_SIGSET_H_�s
 && def�ed 
_SIGNAL_H


44 
	#_SIGSET_H_�s
 1

	)

46 #i�de�
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__ex��_�l�e


	)

51 
	#__sigmask
(
sig
) \

52 (((�1�<< (((
sig
�- 1�% (8 *  ())))

	)

55 
	#__sigw�d
(
sig
�(((sig�- 1�/ (8 *  ()))

	)

57 #i�
def�ed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem�y�t
(
�t
) \

59 (
	`__ex�nsi�__
 ({ 
__�t
 = 
_SIGSET_NWORDS
; \

60 
sig�t_t
 *
__�t
 = (
�t
); \

61 --
__�t
 >�0�
__�t
->
__v�
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigf�l�t
(
�t
) \

64 (
	`__ex�nsi�__
 ({ 
__�t
 = 
_SIGSET_NWORDS
; \

65 
sig�t_t
 *
__�t
 = (
�t
); \

66 --
__�t
 >�0�
__�t
->
__v�
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde�
__USE_GNU


73 
	#__sigi�m�y�t
(
�t
) \

74 (
	`__ex�nsi�__
 ({ 
__�t
 = 
_SIGSET_NWORDS
; \

75 cڡ 
sig�t_t
 *
__�t
 = (
�t
); \

76 
__�t
 = 
__�t
->
__v�
[--
__�t
]; \

77 !
__�t
 && --
__�t
 >= 0) \

78 
__�t
 = 
__�t
->
__v�
[
__�t
]; \

79 
__�t
 =�0; }))

	)

80 
	#__sig�d�t
(
de�
, 
��
, 
right
) \

81 (
	`__ex�nsi�__
 ({ 
__�t
 = 
_SIGSET_NWORDS
; \

82 
sig�t_t
 *
__de�
 = (
de�
); \

83 cڡ 
sig�t_t
 *
__��
 = (
��
); \

84 cڡ 
sig�t_t
 *
__right
 = (
right
); \

85 --
__�t
 >= 0) \

86 
__de�
->
__v�
[
__�t
] = (
__��
->__val[__cnt] \

87 & 
__right
->
__v�
[
__�t
]); \

88 0; }))

	)

89 
	#__sigܣt
(
de�
, 
��
, 
right
) \

90 (
	`__ex�nsi�__
 ({ 
__�t
 = 
_SIGSET_NWORDS
; \

91 
sig�t_t
 *
__de�
 = (
de�
); \

92 cڡ 
sig�t_t
 *
__��
 = (
��
); \

93 cڡ 
sig�t_t
 *
__right
 = (
right
); \

94 --
__�t
 >= 0) \

95 
__de�
->
__v�
[
__�t
] = (
__��
->__val[__cnt] \

96 | 
__right
->
__v�
[
__�t
]); \

97 0; }))

	)

104 
__sigismemb�
 (
__cڡ
 
__sig�t_t
 *, );

105 
__sigadd�t
 (
__sig�t_t
 *, );

106 
__sigd��t
 (
__sig�t_t
 *, );

108 #ifde�
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig�t_t
 *
__�t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w�d
 = 
	`__sigw�d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismemb�
, (
__�t
->
__v�
[
__w�d
] & 
__mask
�? 1 : 0, 
__cڡ
)

119 
__SIGSETFN
 (
__sigadd�t
, ((
__�t
->
__v�
[
__w�d
] |�
__mask
), 0), )

120 
__SIGSETFN
 (
__sigd��t
, ((
__�t
->
__v�
[
__w�d
] &�~
__mask
), 0), )

122 #unde�
__SIGSETFN


	@/usr/include/bits/stdio-lock.h

20 #i�de�
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<b�s/libc-lock.h
>

24 
	~<low�v�lock.h
>

28 
	#_IO_lock_�ex�nsive
 1

	)

30 �ru� { 
	mlock
; 
	m�t
; *
	mow�r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_���liz�
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_��
(
_�me
) \

35 ((
_�me
��(
_IO_lock_t
�
_IO_lock_���liz�
 , 0)

	)

37 
	#_IO_lock_f�i
(
_�me
) \

38 ((�0)

	)

40 
	#_IO_lock_lock
(
_�me
) \

42 *
__�lf
 = 
THREAD_SELF
; \

43 i�((
_�me
).
ow�r
 !�
__�lf
) \

45 
	`�l_lock
 ((
_�me
).
lock
, 
LLL_PRIVATE
); \

46 (
_�me
).
ow�r
 = 
__�lf
; \

48 ++(
_�me
).
�t
; \

49 } 0)

	)

51 
	#_IO_lock_�ylock
(
_�me
) \

53 
__�su�
 = 0; \

54 *
__�lf
 = 
THREAD_SELF
; \

55 i�((
_�me
).
ow�r
 !�
__�lf
) \

57 i�(
	`�l_�ylock
 ((
_�me
).
lock
) == 0) \

59 (
_�me
).
ow�r
 = 
__�lf
; \

60 (
_�me
).
�t
 = 1; \

63 
__�su�
 = 
EBUSY
; \

66 ++(
_�me
).
�t
; \

67 
__�su�
; \

68 })

	)

70 
	#_IO_lock_u�ock
(
_�me
) \

72 i�(--(
_�me
).
�t
 == 0) \

74 (
_�me
).
ow�r
 = 
NULL
; \

75 
	`�l_u�ock
 ((
_�me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_��nup_�gi�_��t
(
_f�
, 
_�
) \

82 
	`__libc_��nup_�gi�_��t
 (((
_�
)->
_�ags
 & 
_IO_USER_LOCK
�=�0, 
_f�
, _�)

	)

83 
	#_IO_��nup_�gi�_��t_n�rg
(
_f�
) \

84 
	`__libc_��nup_�gi�_��t
 (1, 
_f�
, 
NULL
)

	)

85 
	#_IO_��nup_�gi�_�d
(
_do�
) \

86 
	`__libc_��nup_�gi�_�d
 (
_do�
)

	)

88 #i�
def�ed
 
_LIBC
 && !def�ed 
NOT_IN_libc


90 #ifde�
__EXCEPTIONS


91 
	#_IO_acqu�e_lock
(
_�
) \

93 
_IO_FILE
 *
_IO_acqu�e_lock_f�e
 \

94 
	`__��ibu�__
((
	`��nup
 (
_IO_acqu�e_lock_f�
))) \

95 �(
_�
); \

96 
	`_IO_�ockf�e
 (
_IO_acqu�e_lock_f�e
);

	)

97 
	#_IO_acqu�e_lock_��r_�ags2
(
_�
) \

99 
_IO_FILE
 *
_IO_acqu�e_lock_f�e
 \

100 
	`__��ibu�__
((
	`��nup
 (
_IO_acqu�e_lock_��r_�ags2_f�
))) \

101 �(
_�
); \

102 
	`_IO_�ockf�e
 (
_IO_acqu�e_lock_f�e
);

	)

104 
	#_IO_acqu�e_lock
(
_�
�
_IO_acqu�e_lock_�eds_ex�i�s_�ab�d


	)

105 
	#_IO_acqu�e_lock_��r_�ags2
(
_�
�
	`_IO_acqu�e_lock
 (_�)

	)

107 
	#_IO_��a�_lock
(
_�
�; } 0)

	)

	@/usr/include/bits/typesizes.h

20 #i�de�
_BITS_TYPES_H


24 #i�def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 s�u� { 
__v�
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

3 #i�
def�ed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/ctype.h

24 #i�def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<�u�s.h
>

28 
	~<b�s/ty�s.h
>

30 
	g__BEGIN_DECLS


32 #i�de�
_ISb�


41 
	~<�d�n.h
>

42 #i�
__BYTE_ORDER
 =�
__BIG_ENDIAN


43 
	#_ISb�
(
b�
�(1 << (b�))

	)

45 
	#_ISb�
(
b�
�((b��< 8 ? ((1 << (b�)�<< 8�: ((1 << (b�)�>> 8))

	)

50 
	m_ISu��
 = 
_ISb�
 (0),

51 
	m_ISlow�
 = 
_ISb�
 (1),

52 
	m_IS�pha
 = 
_ISb�
 (2),

53 
	m_ISdig�
 = 
_ISb�
 (3),

54 
	m_ISxdig�
 = 
_ISb�
 (4),

55 
	m_IS�a�
 = 
_ISb�
 (5),

56 
	m_IS��t
 = 
_ISb�
 (6),

57 
	m_ISg�ph
 = 
_ISb�
 (7),

58 
	m_ISb�nk
 = 
_ISb�
 (8),

59 
	m_IS�l
 = 
_ISb�
 (9),

60 
	m_ISpun�
 = 
_ISb�
 (10),

61 
	m_IS�num
 = 
_ISb�
 (11)

81 
__cڡ
 **
	$__�y�_b_loc
 ()

82 
__THROW
 
	`__��ibu�__
 ((
__cڡ
));

83 
__cڡ
 
__�t32_t
 **
	$__�y�_t�ow�_loc
 ()

84 
__THROW
 
	`__��ibu�__
 ((
__cڡ
));

85 
__cڡ
 
__�t32_t
 **
	$__�y�_tou��_loc
 ()

86 
__THROW
 
	`__��ibu�__
 ((
__cڡ
));

88 
	#__is�y�
(
c
, 
ty�
) \

89 ((*
	`__�y�_b_loc
 ())[(�(
c
)] & (�
ty�
)

	)

91 
	#__i�scii
(
c
�(((c�& ~0x7f�=�0�

	)

92 
	#__t�scii
(
c
�((c�& 0x7f�

	)

94 
	#__ex�y�
(
�me
�
	`�me
 (�
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex�y�
 (
i��um
);

103 
	`__ex�y�
 (
i��ha
);

104 
	`__ex�y�
 (
is�l
);

105 
	`__ex�y�
 (
isdig�
);

106 
	`__ex�y�
 (
i�ow�
);

107 
	`__ex�y�
 (
isg�ph
);

108 
	`__ex�y�
 (
i�r�t
);

109 
	`__ex�y�
 (
i�un�
);

110 
	`__ex�y�
 (
is�a�
);

111 
	`__ex�y�
 (
isu��
);

112 
	`__ex�y�
 (
isxdig�
);

116 
	$t�ow�
 (
__c
�
__THROW
;

119 
	$tou��
 (
__c
�
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex�y�
 (
isb�nk
);

130 
__END_NAMESPACE_C99


133 #ifde�
__USE_GNU


135 
	$is�y�
 (
__c
, 
__mask
�
__THROW
;

138 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_MISC
 || def�ed 
__USE_XOPEN


142 
	$i�scii
 (
__c
�
__THROW
;

146 
	$t�scii
 (
__c
�
__THROW
;

150 
	`__ex�y�
 (
_tou��
);

151 
	`__ex�y�
 (
_t�ow�
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
�gs
) \

156 (
__ex�nsi�__
 \

157 ({ 
__�s
; \

158 i�( (
c
) > 1) \

160 i�(
	`__bu�t�_cڡ�t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__�s
 = 
__c
 < -128 || __�> 255 ? __�: (
a
)[__c]; \

166 
__�s
 = 
f
 
�gs
; \

169 
__�s
 = (
a
)[(�(
c
)]; \

170 
__�s
; 
	}
}))

	)

172 #i�!
def�ed
 
__NO_CTYPE
 && !def�ed 
__�lu�lus


173 
	#i��um
(
c
�
	`__is�y�
((c), 
_IS�num
)

	)

174 
	#i��ha
(
c
�
	`__is�y�
((c), 
_IS�pha
)

	)

175 
	#is�l
(
c
�
	`__is�y�
((c), 
_IS�l
)

	)

176 
	#isdig�
(
c
�
	`__is�y�
((c), 
_ISdig�
)

	)

177 
	#i�ow�
(
c
�
	`__is�y�
((c), 
_ISlow�
)

	)

178 
	#isg�ph
(
c
�
	`__is�y�
((c), 
_ISg�ph
)

	)

179 
	#i�r�t
(
c
�
	`__is�y�
((c), 
_IS��t
)

	)

180 
	#i�un�
(
c
�
	`__is�y�
((c), 
_ISpun�
)

	)

181 
	#is�a�
(
c
�
	`__is�y�
((c), 
_IS�a�
)

	)

182 
	#isu��
(
c
�
	`__is�y�
((c), 
_ISu��
)

	)

183 
	#isxdig�
(
c
�
	`__is�y�
((c), 
_ISxdig�
)

	)

185 #ifde�
__USE_ISOC99


186 
	#isb�nk
(
c
�
	`__is�y�
((c), 
_ISb�nk
)

	)

189 #ifde�
__USE_EXTERN_INLINES


190 
__ex��_�l�e
 

191 
__NTH
 (
	$t�ow�
 (
__c
))

193  
__c
 >�-128 && __�< 256 ? (*
	`__�y�_t�ow�_loc
 ())[__c] : __c;

194 
	}
}

196 
__ex��_�l�e
 

197 
__NTH
 (
	$tou��
 (
__c
))

199  
__c
 >�-128 && __�< 256 ? (*
	`__�y�_tou��_loc
 ())[__c] : __c;

200 
	}
}

203 #i�
__GNUC__
 >�2 && 
def�ed
 
__OPTIMIZE__
 && !def�ed 
__�lu�lus


204 
	#t�ow�
(
c
�
	`__tobody
 (c, 
t�ow�
, *
	`__�y�_t�ow�_loc
 (), (c))

	)

205 
	#tou��
(
c
�
	`__tobody
 (c, 
tou��
, *
	`__�y�_tou��_loc
 (), (c))

	)

208 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_MISC
 || def�ed 
__USE_XOPEN


209 
	#i�scii
(
c
�
	`__i�scii
 (c)

	)

210 
	#t�scii
(
c
�
	`__t�scii
 (c)

	)

212 
	#_t�ow�
(
c
�((�(*
	`__�y�_t�ow�_loc
 ())[(�(c)])

	)

213 
	#_tou��
(
c
�((�(*
	`__�y�_tou��_loc
 ())[(�(c)])

	)

219 #ifde�
__USE_XOPEN2K8


233 
	~<xlo��.h
>

237 
	#__is�y�_l
(
c
, 
ty�
, 
lo��
) \

238 ((
lo��
)->
__�y�_b
[(�(
c
)] & (�
ty�
)

	)

240 
	#__ex�y�_l
(
�me
) \

241 
	`�me
 (, 
__lo��_t
�
__THROW


	)

247 
__ex�y�_l
 (
i��um_l
);

248 
__ex�y�_l
 (
i��ha_l
);

249 
__ex�y�_l
 (
is�l_l
);

250 
__ex�y�_l
 (
isdig�_l
);

251 
__ex�y�_l
 (
i�ow�_l
);

252 
__ex�y�_l
 (
isg�ph_l
);

253 
__ex�y�_l
 (
i�r�t_l
);

254 
__ex�y�_l
 (
i�un�_l
);

255 
__ex�y�_l
 (
is�a�_l
);

256 
__ex�y�_l
 (
isu��_l
);

257 
__ex�y�_l
 (
isxdig�_l
);

259 
__ex�y�_l
 (
isb�nk_l
);

263 
	$__t�ow�_l
 (
__c
, 
__lo��_t
 
__l
�
__THROW
;

264 
	$t�ow�_l
 (
__c
, 
__lo��_t
 
__l
�
__THROW
;

267 
	$__tou��_l
 (
__c
, 
__lo��_t
 
__l
�
__THROW
;

268 
	$tou��_l
 (
__c
, 
__lo��_t
 
__l
�
__THROW
;

270 #i�
__GNUC__
 >�2 && 
def�ed
 
__OPTIMIZE__
 && !def�ed 
__�lu�lus


271 
	#__t�ow�_l
(
c
, 
lo��
) \

272 
	`__tobody
 (
c
, 
__t�ow�_l
, (
lo��
)->
__�y�_t�ow�
, (c,�o��))

	)

273 
	#__tou��_l
(
c
, 
lo��
) \

274 
	`__tobody
 (
c
, 
__tou��_l
, (
lo��
)->
__�y�_tou��
, (c,�o��))

	)

275 
	#t�ow�_l
(
c
, 
lo��
�
	`__t�ow�_l
 ((c), (lo��))

	)

276 
	#tou��_l
(
c
, 
lo��
�
	`__tou��_l
 ((c), (lo��))

	)

280 #i�de�
__NO_CTYPE


281 
	#__i��um_l
(
c
,
l
�
	`__is�y�_l
((c), 
_IS�num
, (l))

	)

282 
	#__i��ha_l
(
c
,
l
�
	`__is�y�_l
((c), 
_IS�pha
, (l))

	)

283 
	#__is�l_l
(
c
,
l
�
	`__is�y�_l
((c), 
_IS�l
, (l))

	)

284 
	#__isdig�_l
(
c
,
l
�
	`__is�y�_l
((c), 
_ISdig�
, (l))

	)

285 
	#__i�ow�_l
(
c
,
l
�
	`__is�y�_l
((c), 
_ISlow�
, (l))

	)

286 
	#__isg�ph_l
(
c
,
l
�
	`__is�y�_l
((c), 
_ISg�ph
, (l))

	)

287 
	#__i�r�t_l
(
c
,
l
�
	`__is�y�_l
((c), 
_IS��t
, (l))

	)

288 
	#__i�un�_l
(
c
,
l
�
	`__is�y�_l
((c), 
_ISpun�
, (l))

	)

289 
	#__is�a�_l
(
c
,
l
�
	`__is�y�_l
((c), 
_IS�a�
, (l))

	)

290 
	#__isu��_l
(
c
,
l
�
	`__is�y�_l
((c), 
_ISu��
, (l))

	)

291 
	#__isxdig�_l
(
c
,
l
�
	`__is�y�_l
((c), 
_ISxdig�
, (l))

	)

293 
	#__isb�nk_l
(
c
,
l
�
	`__is�y�_l
((c), 
_ISb�nk
, (l))

	)

295 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_MISC


296 
	#__i�scii_l
(
c
,
l
�(�), 
	`__i�scii
 (c))

	)

297 
	#__t�scii_l
(
c
,
l
�(�), 
	`__t�scii
 (c))

	)

300 
	#i��um_l
(
c
,
l
�
	`__i��um_l
 ((c), (l))

	)

301 
	#i��ha_l
(
c
,
l
�
	`__i��ha_l
 ((c), (l))

	)

302 
	#is�l_l
(
c
,
l
�
	`__is�l_l
 ((c), (l))

	)

303 
	#isdig�_l
(
c
,
l
�
	`__isdig�_l
 ((c), (l))

	)

304 
	#i�ow�_l
(
c
,
l
�
	`__i�ow�_l
 ((c), (l))

	)

305 
	#isg�ph_l
(
c
,
l
�
	`__isg�ph_l
 ((c), (l))

	)

306 
	#i�r�t_l
(
c
,
l
�
	`__i�r�t_l
 ((c), (l))

	)

307 
	#i�un�_l
(
c
,
l
�
	`__i�un�_l
 ((c), (l))

	)

308 
	#is�a�_l
(
c
,
l
�
	`__is�a�_l
 ((c), (l))

	)

309 
	#isu��_l
(
c
,
l
�
	`__isu��_l
 ((c), (l))

	)

310 
	#isxdig�_l
(
c
,
l
�
	`__isxdig�_l
 ((c), (l))

	)

312 
	#isb�nk_l
(
c
,
l
�
	`__isb�nk_l
 ((c), (l))

	)

314 #i�
def�ed
 
__USE_SVID
 || def�ed 
__USE_MISC


315 
	#i�scii_l
(
c
,
l
�
	`__i�scii_l
 ((c), (l))

	)

316 
	#t�scii_l
(
c
,
l
�
	`__t�scii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/endian.h

19 #i�def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<�u�s.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<b�s/�d�n.h
>

41 #i�de�
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i�
__BYTE_ORDER
 =�
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
�LO, 
	)
HI

54 #�i�
__BYTE_ORDER
 =�
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
�HI, 
	)
LO

59 #ifde�
__USE_BSD


61 
	~<b�s/by�sw�.h
>

63 #i�
__BYTE_ORDER
 =�
__LITTLE_ENDIAN


64 
	#htobe16
(
x
�
	`__bsw�_16
 (x)

	)

65 
	#ht�e16
(
x
�(x)

	)

66 
	#be16toh
(
x
�
	`__bsw�_16
 (x)

	)

67 
	#�16toh
(
x
�(x)

	)

69 
	#htobe32
(
x
�
	`__bsw�_32
 (x)

	)

70 
	#ht�e32
(
x
�(x)

	)

71 
	#be32toh
(
x
�
	`__bsw�_32
 (x)

	)

72 
	#�32toh
(
x
�(x)

	)

74 
	#htobe64
(
x
�
	`__bsw�_64
 (x)

	)

75 
	#ht�e64
(
x
�(x)

	)

76 
	#be64toh
(
x
�
	`__bsw�_64
 (x)

	)

77 
	#�64toh
(
x
�(x)

	)

79 
	#htobe16
(
x
�(x)

	)

80 
	#ht�e16
(
x
�
	`__bsw�_16
 (x)

	)

81 
	#be16toh
(
x
�(x)

	)

82 
	#�16toh
(
x
�
	`__bsw�_16
 (x)

	)

84 
	#htobe32
(
x
�(x)

	)

85 
	#ht�e32
(
x
�
	`__bsw�_32
 (x)

	)

86 
	#be32toh
(
x
�(x)

	)

87 
	#�32toh
(
x
�
	`__bsw�_32
 (x)

	)

89 
	#htobe64
(
x
�(x)

	)

90 
	#ht�e64
(
x
�
	`__bsw�_64
 (x)

	)

91 
	#be64toh
(
x
�(x)

	)

92 
	#�64toh
(
x
�
	`__bsw�_64
 (x)

	)

	@/usr/include/gnu/stubs.h

4 
	~<b�s/w�dsize.h
>

6 #i�
__WORDSIZE
 == 32

7 
	~<gnu/�ubs-32.h
>

8 #�i�
__WORDSIZE
 == 64

9 
	~<gnu/�ubs-64.h
>

	@/usr/include/sys/cdefs.h

20 #i�def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i�de�
_FEATURES_H


25 
	~<�u�s.h
>

31 #i�
def�ed
 
__GNUC__
 && !def�ed 
__STDC__


36 #unde�
__P


37 #unde�
__PMT


39 #ifde�
__GNUC__


46 #i�!
def�ed
 
__�lu�lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__��ibu�__
 ((
__n�hrow__
))

	)

48 
	#__NTH
(
f�
�
	`__��ibu�__
 ((
__n�hrow__
)�
	)
fct

50 #i�
def�ed
 
__�lu�lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f�
�f� 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f�
�
	)
fct

61 
	#__�l�e


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f�
�
	)
fct

66 
	#__cڡ
 cڡ

	)

67 
	#__sig�d
 sig�d

	)

68 
	#__vީ�e
 vީ�e

	)

74 
	#__P
(
�gs
�
	)
args

75 
	#__PMT
(
�gs
�
	)
args

80 
	#__CONCAT
(
x
,
y
�x ## 
	)
y

81 
	#__STRING
(
x
�#x

	)

84 
	#__�r_t
 *

	)

85 
	#__l�g_doub�_t
 

	)

89 #ifdef 
__�lu�lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i�
def�ed
 
__�lu�lus
 && def�ed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
�me�a�
 
�d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
�me
�
us�g
 
�d
::�me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
�me�a�
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
�me
�
us�g
 
__c99
::�me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
�me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
�me
)

	)

124 #i�de�
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__�rv�ue


	)

132 
	#__bos
(
�r
�
	`__bu�t�_obje�_size
 (�r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
�r
�
	`__bu�t�_obje�_size
 (�r, 0)

	)

135 #i�
__GNUC_PREREQ
 (4,3)

136 
	#__w�nde�
(
�me
, 
msg
) \

137 
	`�me
 (�
	`__��ibu�__
((
	`__w�n�g__
 (
msg
)))

	)

138 
	#__w�ǉr
(
msg
�
	`__��ibu�__
((
	`__w�n�g__
 (msg)))

	)

139 
	#__�r�de�
(
�me
, 
msg
) \

140 
	`�me
 (�
	`__��ibu�__
((
	`__�r�__
 (
msg
)))

	)

142 
	#__w�nde�
(
�me
, 
msg
�
	`�me
 ()

	)

143 
	#__w�ǉr
(
msg
)

	)

144 
	#__�r�de�
(
�me
, 
msg
�
	`�me
 ()

	)

148 #i�
__GNUC_PREREQ
 (2,97)

150 
	#__�ex�r
 []

	)

152 #ifde�
__GNUC__


153 
	#__�ex�r
 [0]

	)

155 #i�
def�ed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__�ex�r
 []

	)

159 
	#__�ex�r
 [1]

	)

175 #i�
def�ed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
�me
, 
��o
, 
��s
��m����
	`__asm__
 (
	`__ASMNAME
 (#��s))

	)

178 #ifde�
__�lu�lus


179 
	#__REDIRECT_NTH
(
�me
, 
��o
, 
��s
) \

180 
�me
 
��o
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#��s))

	)

182 
	#__REDIRECT_NTH
(
�me
, 
��o
, 
��s
) \

183 
�me
 
��o
 
	`__asm__
 (
	`__ASMNAME
 (#��s)�
__THROW


	)

185 
	#__ASMNAME
(
�ame
�
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c�me)

	)

186 
	#__ASMNAME2
(
�efix
, 
�ame
�
	`__STRING
 (�efix�
	)
cname

199 #i�!
def�ed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__��ibu�__
(
xyz
�

	)

206 #i�
__GNUC_PREREQ
 (2,96)

207 
	#__��ibu�_m�loc__
 
	`__��ibu�__
 ((
__m�loc__
))

	)

209 
	#__��ibu�_m�loc__


	)

215 #i�
__GNUC_PREREQ
 (2,96)

216 
	#__��ibu�_pu�__
 
	`__��ibu�__
 ((
__pu�__
))

	)

218 
	#__��ibu�_pu�__


	)

224 #i�
__GNUC_PREREQ
 (3,1)

225 
	#__��ibu�_u�d__
 
	`__��ibu�__
 ((
__u�d__
))

	)

226 
	#__��ibu�_no�l�e__
 
	`__��ibu�__
 ((
__no�l�e__
))

	)

228 
	#__��ibu�_u�d__
 
	`__��ibu�__
 ((
__unu�d__
))

	)

229 
	#__��ibu�_no�l�e__


	)

233 #i�
__GNUC_PREREQ
 (3,2)

234 
	#__��ibu�_d����d__
 
	`__��ibu�__
 ((
__d����d__
))

	)

236 
	#__��ibu�_d����d__


	)

245 #i�
__GNUC_PREREQ
 (2,8)

246 
	#__��ibu�_f�m�_�g__
(
x
�
	`__��ibu�__
 ((
	`__f�m�_�g__
 (x)))

	)

248 
	#__��ibu�_f�m�_�g__
(
x
�

	)

255 #i�
__GNUC_PREREQ
 (2,97)

256 
	#__��ibu�_f�m�_�rfm�__
(
a
,
b
) \

257 
	`__��ibu�__
 ((
	`__f�m�__
 (
__�rfm�__
, 
a
, 
b
)))

	)

259 
	#__��ibu�_f�m�_�rfm�__
(
a
,
b
�

	)

264 #i�
__GNUC_PREREQ
 (3,3)

265 
	#__n�nu�
(
��ms
�
	`__��ibu�__
 ((
__n�nu�__
��ams))

	)

267 
	#__n�nu�
(
��ms
)

	)

272 #i�
__GNUC_PREREQ
 (3,4)

273 
	#__��ibu�_w�n_unu�d_�su�__
 \

274 
	`__��ibu�__
 ((
__w�n_unu�d_�su�__
))

	)

275 #i�
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__��ibu�_w�n_unu�d_�su�__


	)

279 
	#__��ibu�_w�n_unu�d_�su�__


	)

281 #i�de�
__wur


282 
	#__wur


	)

286 #i�
__GNUC_PREREQ
 (3,2)

287 
	#__�ways_�l�e
 
__�l�e
 
	`__��ibu�__
 ((
__�ways_�l�e__
))

	)

289 
	#__�ways_�l�e
 
__�l�e


	)

294 #i�!
def�ed
 
__�lu�lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i�
def�ed
 
__GNUC_STDC_INLINE__
 || def�ed 
__�lu�lus


296 
	#__ex��_�l�e
 
__�l�e
 
	`__��ibu�__
 ((
__gnu_�l�e__
))

	)

297 #i�
__GNUC_PREREQ
 (4,3)

298 
	#__ex��_�ways_�l�e
 \

299 
__�ways_�l�e
 
	`__��ibu�__
 ((
__gnu_�l�e__
, 
__�tific�l__
))

	)

301 
	#__ex��_�ways_�l�e
 \

302 
__�ways_�l�e
 
	`__��ibu�__
 ((
__gnu_�l�e__
))

	)

305 
	#__ex��_�l�e
 
__�l�e


	)

306 #i�
__GNUC_PREREQ
 (4,3)

307 
	#__ex��_�ways_�l�e
 \

308 
__�ways_�l�e
 
	`__��ibu�__
 ((
__�tific�l__
))

	)

310 
	#__ex��_�ways_�l�e
 
__�ways_�l�e


	)

317 #i�
__GNUC_PREREQ
 (4,3)

318 
	#__va_�g_�ck
(�
	`__bu�t�_va_�g_�ck
 ()

	)

319 
	#__va_�g_�ck_�n
(�
	`__bu�t�_va_�g_�ck_�n
 ()

	)

326 #i�!
__GNUC_PREREQ
 (2,8)

327 
	#__ex�nsi�__


	)

331 #i�!
__GNUC_PREREQ
 (2,92)

332 
	#__��ri�


	)

338 #i�
__GNUC_PREREQ
 (3,1�&& !
def�ed
 
__GNUG__


339 
	#__��ri�_�r
 
__��ri�


	)

341 #ifde�
__GNUC__


342 
	#__��ri�_�r


	)

344 #i�
def�ed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__��ri�_�r
 
��ri�


	)

348 
	#__��ri�_�r


	)

353 
	~<b�s/w�dsize.h
>

355 #i�
def�ed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && def�ed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde�
__REDIRECT


358 
	#__LDBL_REDIR1
(
�me
, 
��o
, 
��s
�
	`__REDIRECT
 (�me,�r�o,�l�s)

	)

359 
	#__LDBL_REDIR
(
�me
, 
��o
) \

360 
	`__LDBL_REDIR1
 (
�me
, 
��o
, 
__�dbl_
##�me)

	)

361 
	#__LDBL_REDIR1_NTH
(
�me
, 
��o
, 
��s
�
	`__REDIRECT_NTH
 (�me,�r�o,�l�s)

	)

362 
	#__LDBL_REDIR_NTH
(
�me
, 
��o
) \

363 
	`__LDBL_REDIR1_NTH
 (
�me
, 
��o
, 
__�dbl_
##�me)

	)

364 
	#__LDBL_REDIR1_DECL
(
�me
, 
��s
) \

365 
	`__ty�of
 (
�me
��m�
	`__asm
 (
	`__ASMNAME
 (#��s));

	)

366 
	#__LDBL_REDIR_DECL
(
�me
) \

367 
	`__ty�of
 (
�me
��m�
	`__asm
 (
	`__ASMNAME
 ("__�dbl_" #�me));

	)

368 
	#__REDIRECT_LDBL
(
�me
, 
��o
, 
��s
) \

369 
	`__LDBL_REDIR1
 (
�me
, 
��o
, 
__�dbl_
##
��s
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
�me
, 
��o
, 
��s
) \

371 
	`__LDBL_REDIR1_NTH
 (
�me
, 
��o
, 
__�dbl_
##
��s
)

	)

374 #i�!
def�ed
 
__LDBL_COMPAT
 || !def�ed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
�me
, 
��o
, 
��s
��m�
	)
proto

376 
	#__LDBL_REDIR
(
�me
, 
��o
��m�
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
�me
, 
��o
, 
��s
��m����
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
�me
, 
��o
��m����
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
�me
)

	)

380 #ifde�
__REDIRECT


381 
	#__REDIRECT_LDBL
(
�me
, 
��o
, 
��s
�
	`__REDIRECT
 (�me,�r�o,�l�s)

	)

382 
	#__REDIRECT_NTH_LDBL
(
�me
, 
��o
, 
��s
) \

383 
	`__REDIRECT_NTH
 (
�me
, 
��o
, 
��s
)

	)

	@/usr/include/sys/sysmacros.h

21 #i�de�
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<�u�s.h
>

29 #ifde�
__GLIBC_HAVE_LONG_LONG


30 
__ex�nsi�__


31 
	$gnu_dev_maj�
 (
__dev
)

32 
__THROW
;

33 
__ex�nsi�__


34 
	$gnu_dev_m��
 (
__dev
)

35 
__THROW
;

36 
__ex�nsi�__


37 
	$gnu_dev_makedev
 (
__maj�
,

38 
__m��
)

39 
__THROW
;

41 #i�
def�ed
 
__GNUC__
 && __GNUC__ >�2 && def�ed 
__USE_EXTERN_INLINES


42 
__ex�nsi�__
 
__ex��_�l�e
 

43 
	`__NTH
 (
	$gnu_dev_maj�
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__ex�nsi�__
 
__ex��_�l�e
 

49 
__NTH
 (
	$gnu_dev_m��
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__ex�nsi�__
 
__ex��_�l�e
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj�
, 
__m��
))

57  ((
__m��
 & 0xff�| ((
__maj�
 & 0xfff) << 8)

58 | (((�(
__m��
 & ~0xff)) << 12)

59 | (((�(
__maj�
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj�
(
dev
�
	`gnu_dev_maj�
 (dev)

	)

66 
	#m��
(
dev
�
	`gnu_dev_m��
 (dev)

	)

67 
	#makedev
(
maj
, 
m�
�
	`gnu_dev_makedev
 (maj, m�)

	)

	@/usr/include/bits/byteswap.h

21 #i�!
def�ed
 
_BYTESWAP_H
 && !def�ed 
_NETINET_IN_H
 && !def�ed 
_ENDIAN_H


25 #i�de�
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<b�s/w�dsize.h
>

31 
	#__bsw�_cڡ�t_16
(
x
) \

32 ((�((((
x
�>> 8�& 0xff�| (((x�& 0xff�<< 8)))

	)

34 #i�
def�ed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw�_16
(
x
) \

36 (
__ex�nsi�__
 \

37 ({ 
__v
, 
__x
 = (�(
x
); \

38 i�(
	`__bu�t�_cڡ�t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw�_cڡ�t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "�" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw�_16
(
x
) \

49 (
__ex�nsi�__
 \

50 ({ 
__x
 = (�(
x
); \

51 
	`__bsw�_cڡ�t_16
 (
__x
); }))

	)

56 
	#__bsw�_cڡ�t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
�& 0x0000ff00�<< 8�| (((x�& 0x000000ff�<< 24))

	)

60 #i�
def�ed
 
__GNUC__
 && __GNUC__ >= 2

61 #i�
__WORDSIZE
 =�64 || (
def�ed
 
__i486__
 || def�ed 
__��ium__
 \

62 || 
def�ed
 
	g__��ium�o__
 || def�ed 
	g__��ium4__
 \

63 || 
def�ed
 
	g__k8__
 || def�ed 
	g__�hl�__
 \

64 || 
def�ed
 
	g__k6__
 || def�ed 
	g__noc�a__
 \

65 || 
def�ed
 
	g__c�e2__
 || def�ed 
	g__geode__
 \

66 || 
def�ed
 
	g__amd�m10__
)

69 
	#__bsw�_32
(
x
) \

70 (
__ex�nsi�__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i�(
	`__bu�t�_cڡ�t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw�_cڡ�t_32
 (
__x
); \

75 
	`__asm__
 ("bsw� %0" : "�" (
__v
�: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw�_32
(
x
) \

79 (
__ex�nsi�__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i�(
	`__bu�t�_cڡ�t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw�_cڡ�t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "�" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw�_32
(
x
) \

94 (
__ex�nsi�__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw�_cڡ�t_32
 (__x); }))

	)

99 #i�
def�ed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw�_cڡ�t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
�& 0x00000000000000ffu��<< 56))

	)

111 #i�
__WORDSIZE
 == 64

112 
	#__bsw�_64
(
x
) \

113 (
__ex�nsi�__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i�(
	`__bu�t�_cڡ�t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw�_cڡ�t_64
 (
__x
); \

118 
	`__asm__
 ("bsw� %q0" : "�" (
__v
�: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw�_64
(
x
) \

122 (
__ex�nsi�__
 \

123 ({ uni� { 
__ex�nsi�__
 
__�
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i�(
	`__bu�t�_cڡ�t_p
 (
x
)) \

126 
__r
.
__�
 = 
	`__bsw�_cڡ�t_64
 (
x
); \

129 
__w
.
__�
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw�_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw�_32
 (
__w
.__l[0]); \

133 
__r
.
__�
; }))

	)

	@/usr/include/bits/endian.h

3 #i�de�
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libc-lock.h

20 #i�de�
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<�h�ad.h
>

24 
	#__�ed_NULL


	)

25 
	~<�ddef.h
>

34 #ifde�
_LIBC


35 
	~<low�v�lock.h
>

36 
	~<�s.h
>

37 
	~<�h�ad-fun�i�s.h
>

38 
	~<��o.h
>

39 
	~<gnu/�ti�-groups.h
>

43 #i�
def�ed
 
_LIBC
 || def�ed 
_IO_MTSAFE_IO


44 #i�(
def�ed
 
NOT_IN_libc
 && !def�ed 
IS_IN_lib�h�ad
�|| !def�ed 
_LIBC


45 
�h�ad_mu�x_t
 
	t__libc_lock_t
;

46 �ru� { 
�h�ad_mu�x_t
 
	mmu�x
; } 
	t__libc_lock_�cursive_t
;

48 
	t__libc_lock_t
;

49 �ru� { 
	mlock
; 
	m�t
; *
	mow�r
; } 
	t__libc_lock_�cursive_t
;

51 �ru� { 
�h�ad_mu�x_t
 
	mmu�x
; } 
	t__�ld_lock_�cursive_t
;

52 #ifde�
__USE_UNIX98


53 
�h�ad_rwlock_t
 
	t__libc_rwlock_t
;

55 
__libc_rwlock_�aque__
 
	t__libc_rwlock_t
;

58 
__libc_lock_�aque__
 
	t__libc_lock_t
;

59 
__libc_lock_�cursive_�aque__
 
	t__libc_lock_�cursive_t
;

60 
__libc_rwlock_�aque__
 
	t__libc_rwlock_t
;

64 
�h�ad_key_t
 
	t__libc_key_t
;

73 
	#__libc_lock_def�e
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_lock_t
 
NAME
;

	)

75 
	#__libc_rwlock_def�e
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

77 
	#__libc_lock_def�e_�cursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__libc_lock_�cursive_t
 
NAME
;

	)

79 
	#__�ld_lock_def�e_�cursive
(
CLASS
,
NAME
) \

80 
CLASS
 
__�ld_lock_�cursive_t
 
NAME
;

	)

91 #i�
def�ed
 
_LIBC
 && (!def�ed 
NOT_IN_libc
 || def�ed 
IS_IN_lib�h�ad
)

92 #i�
LLL_LOCK_INITIALIZER
 == 0

93 
	#__libc_lock_def�e_���lized
(
CLASS
,
NAME
) \

94 
CLASS
 
__libc_lock_t
 
NAME
;

	)

96 
	#__libc_lock_def�e_���lized
(
CLASS
,
NAME
) \

97 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

100 #i�
__LT_SPINLOCK_INIT
 == 0

101 
	#__libc_lock_def�e_���lized
(
CLASS
,
NAME
) \

102 
CLASS
 
__libc_lock_t
 
NAME
;

	)

104 
	#__libc_lock_def�e_���lized
(
CLASS
,
NAME
) \

105 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

109 
	#__libc_rwlock_def�e_���lized
(
CLASS
,
NAME
) \

110 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

114 #i�
def�ed
 
_LIBC
 && (!def�ed 
NOT_IN_libc
 || def�ed 
IS_IN_lib�h�ad
)

115 #i�
LLL_LOCK_INITIALIZER
 == 0

116 
	#__libc_lock_def�e_���lized_�cursive
(
CLASS
,
NAME
) \

117 
CLASS
 
__libc_lock_�cursive_t
 
NAME
;

	)

119 
	#__libc_lock_def�e_���lized_�cursive
(
CLASS
,
NAME
) \

120 
CLASS
 
__libc_lock_�cursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

122 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

123 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

125 
	#__libc_lock_def�e_���lized_�cursive
(
CLASS
,
NAME
) \

126 
CLASS
 
__libc_lock_�cursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

127 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

128 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

131 
	#__�ld_lock_def�e_���lized_�cursive
(
CLASS
,
NAME
) \

132 
CLASS
 
__�ld_lock_�cursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

133 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

134 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

136 
	#__�ld_lock_���lize
(
NAME
) \

137 (�((
NAME
��(
__�ld_lock_�cursive_t
�
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

144 #ifde�
__PIC__


145 
	#__libc_maybe_��
(
FUNC
, 
ARGS
, 
ELSE
) \

146 (
	`__ex�nsi�__
 ({ 
	`__ty�of
 (
FUNC
�*
_�
 = (FUNC); \

147 
_�
 !�
NULL
 ? (*_��
ARGS
 : 
ELSE
; }))

	)

149 
	#__libc_maybe_��
(
FUNC
, 
ARGS
, 
ELSE
) \

150 (
FUNC
 !�
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

154 #i�
def�ed
 
SHARED
 && !def�ed 
NOT_IN_libc


155 
	#PTFAVAIL
(
NAME
�
__libc_�h�ad_fun�i�s_��


	)

156 
	#__libc_�f_��
(
FUNC
, 
ARGS
, 
ELSE
) \

157 (
__libc_�h�ad_fun�i�s_��
 ? 
	`PTHFCT_CALL
 (
�r_
##
FUNC
, 
ARGS
�: 
ELSE
)

	)

158 
	#__libc_�f_��_�ways
(
FUNC
, 
ARGS
) \

159 
	`PTHFCT_CALL
 (
�r_
##
FUNC
, 
ARGS
)

	)

161 
	#PTFAVAIL
(
NAME
�(NAME !�
NULL
)

	)

162 
	#__libc_�f_��
(
FUNC
, 
ARGS
, 
ELSE
) \

163 
	`__libc_maybe_��
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

164 
	#__libc_�f_��_�ways
(
FUNC
, 
ARGS
) \

165 
FUNC
 
ARGS


	)

171 #i�
def�ed
 
_LIBC
 && (!def�ed 
NOT_IN_libc
 || def�ed 
IS_IN_lib�h�ad
)

172 
	#__libc_lock_��
(
NAME
�((NAME��
LLL_LOCK_INITIALIZER
, 0)

	)

174 
	#__libc_lock_��
(
NAME
) \

175 
	`__libc_maybe_��
 (
__�h�ad_mu�x_��
, (&(
NAME
), 
NULL
), 0)

	)

177 #i�
def�ed
 
SHARED
 && !def�ed 
NOT_IN_libc


180 
	#__libc_rwlock_��
(
NAME
) \

181 (
	`__bu�t�_mem�t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

183 
	#__libc_rwlock_��
(
NAME
) \

184 
	`__libc_maybe_��
 (
__�h�ad_rwlock_��
, (&(
NAME
), 
NULL
), 0)

	)

188 #i�
def�ed
 
_LIBC
 && (!def�ed 
NOT_IN_libc
 || def�ed 
IS_IN_lib�h�ad
)

189 
	#__libc_lock_��_�cursive
(
NAME
) \

190 ((
NAME
��(
__libc_lock_�cursive_t
�
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

192 
	#__libc_lock_��_�cursive
(
NAME
) \

194 i�(
__�h�ad_mu�x_��
 !�
NULL
) \

196 
�h�ad_mu�x��_t
 
__��
; \

197 
	`__�h�ad_mu�x��_��
 (&
__��
); \

198 
	`__�h�ad_mu�x��_��y�
 (&
__��
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__�h�ad_mu�x_��
 (&(
NAME
).
mu�x
, &
__��
); \

200 
	`__�h�ad_mu�x��_de�roy
 (&
__��
); \

202 } 0)

	)

205 
	#__�ld_lock_��_�cursive
(
NAME
) \

207 i�(
__�h�ad_mu�x_��
 !�
NULL
) \

209 
�h�ad_mu�x��_t
 
__��
; \

210 
	`__�h�ad_mu�x��_��
 (&
__��
); \

211 
	`__�h�ad_mu�x��_��y�
 (&
__��
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

212 
	`__�h�ad_mu�x_��
 (&(
NAME
).
mu�x
, &
__��
); \

213 
	`__�h�ad_mu�x��_de�roy
 (&
__��
); \

215 } 0)

	)

220 #i�
def�ed
 
_LIBC
 && (!def�ed 
NOT_IN_libc
 || def�ed 
IS_IN_lib�h�ad
)

221 
	#__libc_lock_f�i
(
NAME
�((�0)

	)

223 
	#__libc_lock_f�i
(
NAME
) \

224 
	`__libc_maybe_��
 (
__�h�ad_mu�x_de�roy
, (&(
NAME
)), 0)

	)

226 #i�
def�ed
 
SHARED
 && !def�ed 
NOT_IN_libc


227 
	#__libc_rwlock_f�i
(
NAME
�((�0)

	)

229 
	#__libc_rwlock_f�i
(
NAME
) \

230 
	`__libc_maybe_��
 (
__�h�ad_rwlock_de�roy
, (&(
NAME
)), 0)

	)

234 #i�
def�ed
 
_LIBC
 && (!def�ed 
NOT_IN_libc
 || def�ed 
IS_IN_lib�h�ad
)

235 
	#__libc_lock_f�i_�cursive
(
NAME
�((�0)

	)

237 
	#__libc_lock_f�i_�cursive
(
NAME
) \

238 
	`__libc_maybe_��
 (
__�h�ad_mu�x_de�roy
, (&(
NAME
)), 0)

	)

242 #i�
def�ed
 
_LIBC
 && (!def�ed 
NOT_IN_libc
 || def�ed 
IS_IN_lib�h�ad
)

243 #i�
__OPTION_EGLIBC_BIG_MACROS
 != 1

247 
__libc_lock_lock_�
 (
__libc_lock_t
 *);

248 
libc_hidd�_��o
 (
__libc_lock_lock_�
);

250 #i�
__OPTION_EGLIBC_BIG_MACROS


251 
	#__libc_lock_lock
(
NAME
) \

252 ({ 
	`�l_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

254 
	#__libc_lock_lock
(
NAME
) \

255 
	`__libc_lock_lock_�
 (&(
NAME
))

	)

258 
	#__libc_lock_lock
(
NAME
) \

259 
	`__libc_maybe_��
 (
__�h�ad_mu�x_lock
, (&(
NAME
)), 0)

	)

261 
	#__libc_rwlock_rdlock
(
NAME
) \

262 
	`__libc_�f_��
 (
__�h�ad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

263 
	#__libc_rwlock_w�ock
(
NAME
) \

264 
	`__libc_�f_��
 (
__�h�ad_rwlock_w�ock
, (&(
NAME
)), 0)

	)

267 #i�
def�ed
 
_LIBC
 && (!def�ed 
NOT_IN_libc
 || def�ed 
IS_IN_lib�h�ad
)

268 #i�
__OPTION_EGLIBC_BIG_MACROS
 != 1

272 
__libc_lock_lock_�cursive_�
 (
__libc_lock_�cursive_t
 *);

273 
libc_hidd�_��o
 (
__libc_lock_lock_�cursive_�
);

275 #i�
__OPTION_EGLIBC_BIG_MACROS


276 
	#__libc_lock_lock_�cursive
(
NAME
) \

278 *
�lf
 = 
THREAD_SELF
; \

279 i�((
NAME
).
ow�r
 !�
�lf
) \

281 
	`�l_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

282 (
NAME
).
ow�r
 = 
�lf
; \

284 ++(
NAME
).
�t
; \

285 } 0)

	)

287 
	#__libc_lock_lock_�cursive
(
NAME
) \

288 
	`__libc_lock_lock_�cursive_�
 (&(
NAME
))

	)

291 
	#__libc_lock_lock_�cursive
(
NAME
) \

292 
	`__libc_maybe_��
 (
__�h�ad_mu�x_lock
, (&(
NAME
).
mu�x
), 0)

	)

296 #i�
def�ed
 
_LIBC
 && (!def�ed 
NOT_IN_libc
 || def�ed 
IS_IN_lib�h�ad
)

297 #i�
__OPTION_EGLIBC_BIG_MACROS
 != 1

301 
__libc_lock_�ylock_�
 (
__libc_lock_t
 *);

302 
libc_hidd�_��o
 (
__libc_lock_�ylock_�
);

304 #i�
__OPTION_EGLIBC_BIG_MACROS


305 
	#__libc_lock_�ylock
(
NAME
) \

306 
	`�l_�ylock
 (
NAME
)

	)

308 
	#__libc_lock_�ylock
(
NAME
) \

309 
	`__libc_lock_�ylock_�
 (&(
NAME
))

	)

312 
	#__libc_lock_�ylock
(
NAME
) \

313 
	`__libc_maybe_��
 (
__�h�ad_mu�x_�ylock
, (&(
NAME
)), 0)

	)

315 
	#__libc_rwlock_�yrdlock
(
NAME
) \

316 
	`__libc_maybe_��
 (
__�h�ad_rwlock_�yrdlock
, (&(
NAME
)), 0)

	)

317 
	#__libc_rwlock_�yw�ock
(
NAME
) \

318 
	`__libc_maybe_��
 (
__�h�ad_rwlock_�yw�ock
, (&(
NAME
)), 0)

	)

321 #i�
def�ed
 
_LIBC
 && (!def�ed 
NOT_IN_libc
 || def�ed 
IS_IN_lib�h�ad
)

322 #i�
__OPTION_EGLIBC_BIG_MACROS
 != 1

326 
__libc_lock_�ylock_�cursive_�
 (
__libc_lock_�cursive_t
 *);

327 
libc_hidd�_��o
 (
__libc_lock_�ylock_�cursive_�
);

329 #i�
__OPTION_EGLIBC_BIG_MACROS


330 
	#__libc_lock_�ylock_�cursive
(
NAME
) \

332 
�su�
 = 0; \

333 *
�lf
 = 
THREAD_SELF
; \

334 i�((
NAME
).
ow�r
 !�
�lf
) \

336 i�(
	`�l_�ylock
 ((
NAME
).
lock
) == 0) \

338 (
NAME
).
ow�r
 = 
�lf
; \

339 (
NAME
).
�t
 = 1; \

342 
�su�
 = 
EBUSY
; \

345 ++(
NAME
).
�t
; \

346 
�su�
; \

347 })

	)

349 
	#__libc_lock_�ylock_�cursive
(
NAME
) \

350 
	`__libc_lock_�ylock_�cursive_�
 (&(
NAME
))

	)

353 
	#__libc_lock_�ylock_�cursive
(
NAME
) \

354 
	`__libc_maybe_��
 (
__�h�ad_mu�x_�ylock
, (&(
NAME
)), 0)

	)

357 
	#__�ld_lock_�ylock_�cursive
(
NAME
) \

358 
	`__libc_maybe_��
 (
__�h�ad_mu�x_�ylock
, (&(
NAME
).
mu�x
), 0)

	)

361 #i�
def�ed
 
_LIBC
 && (!def�ed 
NOT_IN_libc
 || def�ed 
IS_IN_lib�h�ad
)

362 #i�
__OPTION_EGLIBC_BIG_MACROS
 != 1

366 
__libc_lock_u�ock_�
 (
__libc_lock_t
 *);

367 
libc_hidd�_��o
 (
__libc_lock_u�ock_�
);

369 #i�
__OPTION_EGLIBC_BIG_MACROS


370 
	#__libc_lock_u�ock
(
NAME
) \

371 
	`�l_u�ock
 (
NAME
, 
LLL_PRIVATE
)

	)

373 
	#__libc_lock_u�ock
(
NAME
) \

374 
	`__libc_lock_u�ock_�
 (&(
NAME
))

	)

377 
	#__libc_lock_u�ock
(
NAME
) \

378 
	`__libc_maybe_��
 (
__�h�ad_mu�x_u�ock
, (&(
NAME
)), 0)

	)

380 
	#__libc_rwlock_u�ock
(
NAME
) \

381 
	`__libc_�f_��
 (
__�h�ad_rwlock_u�ock
, (&(
NAME
)), 0)

	)

384 #i�
def�ed
 
_LIBC
 && (!def�ed 
NOT_IN_libc
 || def�ed 
IS_IN_lib�h�ad
)

385 #i�
__OPTION_EGLIBC_BIG_MACROS
 != 1

389 
__libc_lock_u�ock_�cursive_�
 (
__libc_lock_�cursive_t
 *);

390 
libc_hidd�_��o
 (
__libc_lock_u�ock_�cursive_�
);

392 #i�
__OPTION_EGLIBC_BIG_MACROS


394 
	#__libc_lock_u�ock_�cursive
(
NAME
) \

396 i�(--(
NAME
).
�t
 == 0) \

398 (
NAME
).
ow�r
 = 
NULL
; \

399 
	`�l_u�ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

401 } 0)

	)

403 
	#__libc_lock_u�ock_�cursive
(
NAME
) \

404 
	`__libc_lock_u�ock_�cursive_�
 (&(
NAME
))

	)

407 
	#__libc_lock_u�ock_�cursive
(
NAME
) \

408 
	`__libc_maybe_��
 (
__�h�ad_mu�x_u�ock
, (&(
NAME
)), 0)

	)

411 #i�
def�ed
 
_LIBC
 && def�ed 
SHARED


412 
	#__�ld_lock_de�u�_lock_�cursive
(
lock
) \

413 ++((
�h�ad_mu�x_t
 *)(
lock
))->
__d�a
.
__cou�
;

	)

415 
	#__�ld_lock_de�u�_u�ock_�cursive
(
lock
) \

416 --((
�h�ad_mu�x_t
 *)(
lock
))->
__d�a
.
__cou�
;

	)

418 
	#__�ld_lock_lock_�cursive
(
NAME
) \

419 
	`GL
(
dl_�ld_lock_�cursive
�(&(
NAME
).
mu�x
)

	)

421 
	#__�ld_lock_u�ock_�cursive
(
NAME
) \

422 
	`GL
(
dl_�ld_u�ock_�cursive
�(&(
NAME
).
mu�x
)

	)

424 
	#__�ld_lock_lock_�cursive
(
NAME
) \

425 
	`__libc_maybe_��
 (
__�h�ad_mu�x_lock
, (&(
NAME
).
mu�x
), 0)

	)

427 
	#__�ld_lock_u�ock_�cursive
(
NAME
) \

428 
	`__libc_maybe_��
 (
__�h�ad_mu�x_u�ock
, (&(
NAME
).
mu�x
), 0)

	)

432 #i�
PTHREAD_ONCE_INIT
 == 0

435 
	#__libc_��_def�e
(
CLASS
, 
NAME
) \

436 
CLASS
 
�h�ad_��_t
 
NAME


	)

438 
	#__libc_��_def�e
(
CLASS
, 
NAME
) \

439 
CLASS
 
�h�ad_��_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

443 
	#__libc_��
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

445 i�(
	`PTFAVAIL
 (
__�h�ad_��
)) \

446 
	`__libc_�f_��_�ways
 (
__�h�ad_��
, (&(
ONCE_CONTROL
), \

447 
INIT_FUNCTION
)); \

448 i�((
ONCE_CONTROL
�=�
PTHREAD_ONCE_INIT
) { \

449 
	`INIT_FUNCTION
 (); \

450 (
ONCE_CONTROL
) |= 2; \

452 } 0)

	)

459 
_�h�ad_��nup_push
 (
_�h�ad_��nup_buf�r
 *
buf�r
,

460 (*
rout�e
�(*), *
�g
);

461 
	`_�h�ad_��nup_p�
 (
_�h�ad_��nup_buf�r
 *
buf�r
,

462 
execu�
);

463 
	`_�h�ad_��nup_push_de�r
 (
_�h�ad_��nup_buf�r
 *
buf�r
,

464 (*
rout�e
�(*), *
�g
);

465 
	`_�h�ad_��nup_p�_���e
 (
_�h�ad_��nup_buf�r
 *
buf�r
,

466 
execu�
);

469 
	#__libc_��nup_�gi�_��t
(
DOIT
, 
FCT
, 
ARG
) \

470 { 
_�h�ad_��nup_buf�r
 
_buf�r
; \

471 
_ava�
; \

472 i�(
DOIT
) { \

473 
_ava�
 = 
	`PTFAVAIL
 (
_�h�ad_��nup_push_de�r
); \

474 i�(
_ava�
) { \

475 
	`__libc_�f_��_�ways
 (
_�h�ad_��nup_push_de�r
, (&
_buf�r
, 
FCT
, \

476 
ARG
)); \

478 
_buf�r
.
__rout�e
 = (
FCT
); \

479 
_buf�r
.
__�g
 = (
ARG
); \

482 
_ava�
 = 0; \

483 }

	)

486 
	#__libc_��nup_�gi�_�d
(
DOIT
) \

487 i�(
_ava�
) { \

488 
	`__libc_�f_��_�ways
 (
_�h�ad_��nup_p�_���e
, (&
_buf�r
, 
DOIT
));\

489 } i�(
DOIT
) \

490 
_buf�r
.
	`__rout�e
 (_buf�r.
__�g
); \

491 
	}

	)
}

494 
	#__libc_��nup_�d
(
DOIT
) \

495 i�(
_ava�
) { \

496 
	`__libc_�f_��_�ways
 (
_�h�ad_��nup_p�_���e
, (&
_buf�r
, 
DOIT
));\

497 } i�(
DOIT
) \

498 
_buf�r
.
	`__rout�e
 (_buf�r.
__�g
)

	)

502 
__ex��_�l�e
 

503 
	$__libc_��nup_rout�e
 (
__�h�ad_��nup_�ame
 *
f
)

505 i�(
f
->
__do_�
)

506 
f
->
	`__�n�l_rout�e
 (f->
__�n�l_�g
);

507 
	}
}

509 
	#__libc_��nup_push
(
f�
, 
�g
) \

511 
__�h�ad_��nup_�ame
 
__��ame
 \

512 
	`__��ibu�__
 ((
	`__��nup__
 (
__libc_��nup_rout�e
))) \

513 �{ .
__�n�l_rout�e
 = (
f�
), .
__�n�l_�g
 = (
�g
), \

514 .
__do_�
 = 1 };

	)

516 
	#__libc_��nup_p�
(
execu�
) \

517 
__��ame
.
__do_�
 = (
execu�
); \

518 } 0)

	)

522 
	#__libc_key_�
(
KEY
, 
DESTRUCTOR
) \

523 
	`__libc_�f_��
 (
__�h�ad_key_�
, (
KEY
, 
DESTRUCTOR
), 1)

	)

526 
	#__libc_g��ecific
(
KEY
) \

527 
	`__libc_�f_��
 (
__�h�ad_g��ecific
, (
KEY
), 
NULL
)

	)

530 
	#__libc_�t�ecific
(
KEY
, 
VALUE
) \

531 
	`__libc_�f_��
 (
__�h�ad_�t�ecific
, (
KEY
, 
VALUE
), 0)

	)

537 
	#__libc_�f�k
(
PREPARE
, 
PARENT
, 
CHILD
) \

538 
	`__�gi��_�f�k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

539 
__�gi��_�f�k
 ((*
__���e
) (),

540 (*
__���
) (),

541 (*
__ch�d
) (),

542 *
__dso_h�d�
);

547 
	`__�h�ad_mu�x_��
 (
�h�ad_mu�x_t
 *
__mu�x
,

548 
__cڡ
 
�h�ad_mu�x��_t
 *
__mu�x_��
);

550 
	`__�h�ad_mu�x_de�roy
 (
�h�ad_mu�x_t
 *
__mu�x
);

552 
	`__�h�ad_mu�x_�ylock
 (
�h�ad_mu�x_t
 *
__mu�x
);

554 
	`__�h�ad_mu�x_lock
 (
�h�ad_mu�x_t
 *
__mu�x
);

556 
	`__�h�ad_mu�x_u�ock
 (
�h�ad_mu�x_t
 *
__mu�x
);

558 
	`__�h�ad_mu�x��_��
 (
�h�ad_mu�x��_t
 *
__��
);

560 
	`__�h�ad_mu�x��_de�roy
 (
�h�ad_mu�x��_t
 *
__��
);

562 
	`__�h�ad_mu�x��_��y�
 (
�h�ad_mu�x��_t
 *
__��
,

563 
__k�d
);

565 #ifde�
__USE_UNIX98


566 
	`__�h�ad_rwlock_��
 (
�h�ad_rwlock_t
 *
__rwlock
,

567 
__cڡ
 
�h�ad_rwlock��_t
 *
__��
);

569 
	`__�h�ad_rwlock_de�roy
 (
�h�ad_rwlock_t
 *
__rwlock
);

571 
	`__�h�ad_rwlock_rdlock
 (
�h�ad_rwlock_t
 *
__rwlock
);

573 
	`__�h�ad_rwlock_�yrdlock
 (
�h�ad_rwlock_t
 *
__rwlock
);

575 
	`__�h�ad_rwlock_w�ock
 (
�h�ad_rwlock_t
 *
__rwlock
);

577 
	`__�h�ad_rwlock_�yw�ock
 (
�h�ad_rwlock_t
 *
__rwlock
);

579 
	`__�h�ad_rwlock_u�ock
 (
�h�ad_rwlock_t
 *
__rwlock
);

582 
	`__�h�ad_key_�
 (
�h�ad_key_t
 *
__key
,

583 (*
__de�r_fun�i�
) (*));

585 
	`__�h�ad_�t�ecific
 (
�h�ad_key_t
 
__key
,

586 
__cڡ
 *
__po��r
);

588 *
	`__�h�ad_g��ecific
 (
�h�ad_key_t
 
__key
);

590 
	`__�h�ad_��
 (
�h�ad_��_t
 *
__��_cڌ�
,

591 (*
__��_rout�e
) ());

593 
	`__�h�ad_�f�k
 ((*
__���e
) (),

594 (*
__���
) (),

595 (*
__ch�d
) ());

601 #i�de�
__NO_WEAK_PTHREAD_ALIASES


602 #ifde�
w�k_ex��


603 #i�
_LIBC


604 
	~<bp-sym.h
>

606 
	#BP_SYM
(
sym
�
	)
sym

608 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_mu�x_��
))

609 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_mu�x_de�roy
))

610 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_mu�x_lock
))

611 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_mu�x_�ylock
))

612 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_mu�x_u�ock
))

613 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_mu�x��_��
))

614 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_mu�x��_de�roy
))

615 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_mu�x��_��y�
))

616 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_rwlock_��
))

617 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_rwlock_de�roy
))

618 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_rwlock_rdlock
))

619 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_rwlock_�yrdlock
))

620 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_rwlock_w�ock
))

621 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_rwlock_�yw�ock
))

622 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_rwlock_u�ock
))

623 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_key_�
))

624 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_�t�ecific
))

625 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_g��ecific
))

626 
	`w�k_ex��
 (
	$BP_SYM
 (
__�h�ad_��
))

627 
	$w�k_ex��
 (
__�h�ad_���lize
)

628 
	$w�k_ex��
 (
__�h�ad_�f�k
)

629 
	`w�k_ex��
 (
	$BP_SYM
 (
_�h�ad_��nup_push_de�r
))

630 
	`w�k_ex��
 (
	$BP_SYM
 (
_�h�ad_��nup_p�_���e
))

631 
	`w�k_ex��
 (
	$BP_SYM
 (
�h�ad_�t�n�l��e
))

633 #�agm�
w�k
 
__�h�ad_mu�x_��


634 #�agm�
w�k
 
__�h�ad_mu�x_de�roy


635 #�agm�
w�k
 
__�h�ad_mu�x_lock


636 #�agm�
w�k
 
__�h�ad_mu�x_�ylock


637 #�agm�
w�k
 
__�h�ad_mu�x_u�ock


638 #�agm�
w�k
 
__�h�ad_mu�x��_��


639 #�agm�
w�k
 
__�h�ad_mu�x��_de�roy


640 #�agm�
w�k
 
__�h�ad_mu�x��_��y�


641 #�agm�
w�k
 
__�h�ad_rwlock_de�roy


642 #�agm�
w�k
 
__�h�ad_rwlock_rdlock


643 #�agm�
w�k
 
__�h�ad_rwlock_�yrdlock


644 #�agm�
w�k
 
__�h�ad_rwlock_w�ock


645 #�agm�
w�k
 
__�h�ad_rwlock_�yw�ock


646 #�agm�
w�k
 
__�h�ad_rwlock_u�ock


647 #�agm�
w�k
 
__�h�ad_key_�


648 #�agm�
w�k
 
__�h�ad_�t�ecific


649 #�agm�
w�k
 
__�h�ad_g��ecific


650 #�agm�
w�k
 
__�h�ad_��


651 #�agm�
w�k
 
__�h�ad_���lize


652 #�agm�
w�k
 
__�h�ad_�f�k


653 #�agm�
w�k
 
_�h�ad_��nup_push_de�r


654 #�agm�
w�k
 
_�h�ad_��nup_p�_���e


655 #�agm�
w�k
 
�h�ad_�t�n�l��e


	@/usr/include/gconv.h

23 #i�de�
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<�u�s.h
>

27 
	#__�ed_mb��e_t


	)

28 
	#__�ed_w�t_t


	)

29 
	~<wch�.h
>

30 
	#__�ed_size_t


	)

31 
	#__�ed_wch�_t


	)

32 
	~<�ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch�_t
�0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc�v_��
;

65 
	g__gc�v_��_d�a
;

66 
	g__gc�v_l�ded_obje�
;

67 
	g__gc�v_��s_d�a
;

71 (*
	t__gc�v_f�
�(
	t__gc�v_��
 *, 
	t__gc�v_��_d�a
 *,

72 
	t__cڡ
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$w�t_t
 (*
	t__gc�v_btowc_f�
�(
	t__gc�v_��
 *, );

79 (*
	t__gc�v_��_f�
�(
	t__gc�v_��
 *);

80 (*
	t__gc�v_�d_f�
�(
	t__gc�v_��
 *);

84 (*
	t__gc�v_��s_f�
�(
	t__gc�v_��
 *,

85 
	t__gc�v_��_d�a
 *, *,

86 
	t__cڡ
 *,

87 
	t__cڡ
 **,

88 
	t__cڡ
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc�v_��s_cڋxt_f�
�(*, 
	t__cڡ
 *,

93 
	t__cڡ
 *,

97 (*
	t__gc�v_��s_qu�y_f�
�(
	t__cڡ
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc�v_��s_��_f�
) (**, const *);

102 (*
	t__gc�v_��s_�d_f�
) (*);

104 
	s__gc�v_��s_d�a


107 
__gc�v_��s_f�
 
__��s_f�
;

108 
__gc�v_��s_cڋxt_f�
 
__��s_cڋxt_f�
;

109 
__gc�v_��s_�d_f�
 
__��s_�d_f�
;

110 *
__d�a
;

111 
__gc�v_��s_d�a
 *
__�xt
;

116 
	s__gc�v_��


118 
__gc�v_l�ded_obje�
 *
__shlib_h�d�
;

119 
__cڡ
 *
__mod�me
;

121 
__cou��
;

123 *
__�om_�me
;

124 *
__to_�me
;

126 
__gc�v_f�
 
__f�
;

127 
__gc�v_btowc_f�
 
__btowc_f�
;

128 
__gc�v_��_f�
 
__��_f�
;

129 
__gc�v_�d_f�
 
__�d_f�
;

133 
__m�_�eded_�om
;

134 
__max_�eded_�om
;

135 
__m�_�eded_to
;

136 
__max_�eded_to
;

139 
__��eful
;

141 *
__d�a
;

146 
	s__gc�v_��_d�a


148 *
__outbuf
;

149 *
__outbu�nd
;

153 
__�ags
;

157 
__�vo�ti�_cou��
;

161 
__����_u�
;

163 
__mb��e_t
 *
__���
;

164 
__mb��e_t
 
__��e
;

168 
__gc�v_��s_d�a
 *
__��s
;

173 
	s__gc�v_�fo


175 
size_t
 
__n��s
;

176 
__gc�v_��
 *
__��s
;

177 
__ex�nsi�__
 
__gc�v_��_d�a
 
__d�a
 
__�ex�r
;

178 } *
	t__gc�v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde�
_LIBC


7 #�r� 
A�li�ti�s
 
may
 
n�
 
def�e
 
the
 
ma�o
 
_LIBC


10 
	#__�ub___k��l_co�


	)

11 
	#__�ub___k��l_s�l


	)

12 
	#__�ub___k��l_��


	)

13 
	#__�ub_ch�ags


	)

14 
	#__�ub_�ach


	)

15 
	#__�ub_fch�ags


	)

16 
	#__�ub_fd�ach


	)

17 
	#__�ub_g�y


	)

18 
	#__�ub_lchmod


	)

19 
	#__�ub_�voke


	)

20 
	#__�ub_��og�


	)

21 
	#__�ub_sig�tu�


	)

22 
	#__�ub_s�k


	)

23 
	#__�ub_�ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde�
_LIBC


7 #�r� 
A�li�ti�s
 
may
 
n�
 
def�e
 
the
 
ma�o
 
_LIBC


10 
	#__�ub_bd�ush


	)

11 
	#__�ub_ch�ags


	)

12 
	#__�ub_�ach


	)

13 
	#__�ub_fch�ags


	)

14 
	#__�ub_fd�ach


	)

15 
	#__�ub_g�msg


	)

16 
	#__�ub_g�y


	)

17 
	#__�ub_lchmod


	)

18 
	#__�ub_putmsg


	)

19 
	#__�ub_�voke


	)

20 
	#__�ub_��og�


	)

21 
	#__�ub_sig�tu�


	)

22 
	#__�ub_s�k


	)

23 
	#__�ub_�ty


	)

	@/usr/include/wchar.h

24 #i�de�
_WCHAR_H


26 #i�!
def�ed
 
__�ed_mb��e_t
 && !def�ed 
__�ed_w�t_t


27 
	#_WCHAR_H
 1

	)

28 
	~<�u�s.h
>

31 #ifde�
_WCHAR_H


33 
	#__�ed___FILE


	)

34 #i�
def�ed
 
__USE_UNIX98
 || def�ed 
__USE_XOPEN2K


35 
	#__�ed_FILE


	)

37 
	~<�dio.h
>

39 
	#__�ed___va_li�


	)

40 
	~<�d�g.h
>

42 
	~<b�s/wch�.h
>

45 
	#__�ed_size_t


	)

46 
	#__�ed_wch�_t


	)

47 
	#__�ed_NULL


	)

49 #i�
def�ed
 
_WCHAR_H
 || def�ed 
__�ed_w�t_t
 || !def�ed 
__WINT_TYPE__


50 #unde�
__�ed_w�t_t


51 
	#__�ed_w�t_t


	)

52 
	~<�ddef.h
>

56 #i�de�
_WINT_T


61 
	#_WINT_T


	)

62 
	tw�t_t
;

66 #i�
def�ed
 
__�lu�lus
 && def�ed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
def�ed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	tw�t_t
;

70 
	g__END_NAMESPACE_STD


75 #i�
def�ed
 
__�lu�lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i�(
def�ed
 
_WCHAR_H
 || def�ed 
__�ed_mb��e_t
�&& !def�ed 
__mb��e_t_def�ed


81 
	#__mb��e_t_def�ed
 1

	)

85 
	m__cou�
;

88 #ifde�
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
w�t_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__v�ue
;

95 } 
	t__mb��e_t
;

97 #unde�
__�ed_mb��e_t


102 #ifde�
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb��e_t
 
	tmb��e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde�
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb��e_t
)

112 #i�de�
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i�de�
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i�
def�ed
 
__USE_XOPEN
 && !def�ed 
__USE_UNIX98


125 
	~<w�y�.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch�_t
 *
	$wcs�y
 (
wch�_t
 *
__��ri�
 
__de�
,

145 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
�
__THROW
;

147 
wch�_t
 *
	$wc��y
 (
wch�_t
 *
__��ri�
 
__de�
,

148 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch�_t
 *
	$wcs�t
 (
wch�_t
 *
__��ri�
 
__de�
,

153 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
�
__THROW
;

155 
wch�_t
 *
	$wc��t
 (
wch�_t
 *
__��ri�
 
__de�
,

156 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__cڡ
 
wch�_t
 *
__s1
, __cڡ wch�_�*
__s2
)

161 
__THROW
 
__��ibu�_pu�__
;

163 
	$wc�cmp
 (
__cڡ
 
wch�_t
 *
__s1
, __cڡ wch�_�*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__��ibu�_pu�__
;

165 
__END_NAMESPACE_STD


167 #ifde�
__USE_XOPEN2K8


169 
	$wcs��cmp
 (
__cڡ
 
wch�_t
 *
__s1
, __cڡ wch�_�*
__s2
�
__THROW
;

172 
	$wc���cmp
 (
__cڡ
 
wch�_t
 *
__s1
, __cڡ wch�_�*
__s2
,

173 
size_t
 
__n
�
__THROW
;

177 
	~<xlo��.h
>

179 
	$wcs��cmp_l
 (
__cڡ
 
wch�_t
 *
__s1
, __cڡ wch�_�*
__s2
,

180 
__lo��_t
 
__loc
�
__THROW
;

182 
	$wc���cmp_l
 (
__cڡ
 
wch�_t
 *
__s1
, __cڡ wch�_�*
__s2
,

183 
size_t
 
__n
, 
__lo��_t
 
__loc
�
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcsc�l
 (
__cڡ
 
wch�_t
 *
__s1
, __cڡ wch�_�*
__s2
�
__THROW
;

193 
size_t
 
	$wcsx�m
 (
wch�_t
 *
__��ri�
 
__s1
,

194 
__cڡ
 
wch�_t
 *
__��ri�
 
__s2
, 
size_t
 
__n
�
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde�
__USE_XOPEN2K8


203 
	$wcsc�l_l
 (
__cڡ
 
wch�_t
 *
__s1
, __cڡ wch�_�*
__s2
,

204 
__lo��_t
 
__loc
�
__THROW
;

209 
size_t
 
	$wcsx�m_l
 (
wch�_t
 *
__s1
, 
__cڡ
 wch�_�*
__s2
,

210 
size_t
 
__n
, 
__lo��_t
 
__loc
�
__THROW
;

213 
wch�_t
 *
	$wcsdup
 (
__cڡ
 
wch�_t
 *
__s
�
__THROW
 
__��ibu�_m�loc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde�
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch�_t
 *
	$wcschr
 (
wch�_t
 *
__wcs
, wch�_�
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"�
__��ibu�_pu�__
;

221 "C++" 
__cڡ
 
wch�_t
 *
	$wcschr
 (
__cڡ
 
wch�_t
 *
__wcs
, wch�_�
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"�
__��ibu�_pu�__
;

224 
wch�_t
 *
	$wcschr
 (
__cڡ
 
wch�_t
 *
__wcs
, wch�_�
__wc
)

225 
__THROW
 
__��ibu�_pu�__
;

228 #ifde�
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch�_t
 *
	$wc�chr
 (
wch�_t
 *
__wcs
, wch�_�
__wc
)

230 
__THROW
 
	`__asm
 ("wc�chr"�
__��ibu�_pu�__
;

231 "C++" 
__cڡ
 
wch�_t
 *
	$wc�chr
 (
__cڡ
 
wch�_t
 *
__wcs
, wch�_�
__wc
)

232 
__THROW
 
	`__asm
 ("wc�chr"�
__��ibu�_pu�__
;

234 
wch�_t
 *
	$wc�chr
 (
__cڡ
 
wch�_t
 *
__wcs
, wch�_�
__wc
)

235 
__THROW
 
__��ibu�_pu�__
;

237 
__END_NAMESPACE_STD


239 #ifde�
__USE_GNU


242 
wch�_t
 *
	$wcsch�ul
 (
__cڡ
 
wch�_t
 *
__s
, wch�_�
__wc
)

243 
__THROW
 
__��ibu�_pu�__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc�n
 (
__cڡ
 
wch�_t
 *
__wcs
, __cڡ wch�_�*
__�je�
)

250 
__THROW
 
__��ibu�_pu�__
;

253 
size_t
 
	$wcs�n
 (
__cڡ
 
wch�_t
 *
__wcs
, __cڡ wch�_�*
__ac�
)

254 
__THROW
 
__��ibu�_pu�__
;

256 #ifde�
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch�_t
 *
	$wc�brk
 (
wch�_t
 *
__wcs
, 
__cڡ
 wch�_�*
__ac�
)

258 
__THROW
 
	`__asm
 ("wc�brk"�
__��ibu�_pu�__
;

259 "C++" 
__cڡ
 
wch�_t
 *
	$wc�brk
 (
__cڡ
 
wch�_t
 *
__wcs
,

260 
__cڡ
 
wch�_t
 *
__ac�
)

261 
__THROW
 
	`__asm
 ("wc�brk"�
__��ibu�_pu�__
;

263 
wch�_t
 *
	$wc�brk
 (
__cڡ
 
wch�_t
 *
__wcs
, __cڡ wch�_�*
__ac�
)

264 
__THROW
 
__��ibu�_pu�__
;

267 #ifde�
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch�_t
 *
	$wcs�r
 (
wch�_t
 *
__hay�ack
, 
__cڡ
 wch�_�*
__�ed�
)

269 
__THROW
 
	`__asm
 ("wcs�r"�
__��ibu�_pu�__
;

270 "C++" 
__cڡ
 
wch�_t
 *
	$wcs�r
 (
__cڡ
 
wch�_t
 *
__hay�ack
,

271 
__cڡ
 
wch�_t
 *
__�ed�
)

272 
__THROW
 
	`__asm
 ("wcs�r"�
__��ibu�_pu�__
;

274 
wch�_t
 *
	$wcs�r
 (
__cڡ
 
wch�_t
 *
__hay�ack
, __cڡ wch�_�*
__�ed�
)

275 
__THROW
 
__��ibu�_pu�__
;

279 
wch�_t
 *
	$wc�ok
 (
wch�_t
 *
__��ri�
 
__s
,

280 
__cڡ
 
wch�_t
 *
__��ri�
 
__d�im
,

281 
wch�_t
 **
__��ri�
 
__�r
�
__THROW
;

284 
size_t
 
	$wc��
 (
__cڡ
 
wch�_t
 *
__s
�
__THROW
 
__��ibu�_pu�__
;

285 
__END_NAMESPACE_STD


287 #ifde�
__USE_XOPEN


289 #ifde�
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch�_t
 *
	$wcswcs
 (
wch�_t
 *
__hay�ack
, 
__cڡ
 wch�_�*
__�ed�
)

291 
__THROW
 
	`__asm
 ("wcswcs"�
__��ibu�_pu�__
;

292 "C++" 
__cڡ
 
wch�_t
 *
	$wcswcs
 (
__cڡ
 
wch�_t
 *
__hay�ack
,

293 
__cڡ
 
wch�_t
 *
__�ed�
)

294 
__THROW
 
	`__asm
 ("wcswcs"�
__��ibu�_pu�__
;

296 
wch�_t
 *
	$wcswcs
 (
__cڡ
 
wch�_t
 *
__hay�ack
, __cڡ wch�_�*
__�ed�
)

297 
__THROW
 
__��ibu�_pu�__
;

301 #ifde�
__USE_XOPEN2K8


303 
size_t
 
	$wc��n
 (
__cڡ
 
wch�_t
 *
__s
, 
size_t
 
__max�n
)

304 
__THROW
 
__��ibu�_pu�__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde�
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch�_t
 *
	$wmemchr
 (
wch�_t
 *
__s
, wch�_�
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"�
__��ibu�_pu�__
;

313 "C++" 
__cڡ
 
wch�_t
 *
	$wmemchr
 (
__cڡ
 
wch�_t
 *
__s
, wch�_�
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"�
__��ibu�_pu�__
;

317 
wch�_t
 *
	$wmemchr
 (
__cڡ
 
wch�_t
 *
__s
, wch�_�
__c
, 
size_t
 
__n
)

318 
__THROW
 
__��ibu�_pu�__
;

322 
	$wmemcmp
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__s1
,

323 
__cڡ
 
wch�_t
 *
__��ri�
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__��ibu�_pu�__
;

327 
wch�_t
 *
	$wmem�y
 (
wch�_t
 *
__��ri�
 
__s1
,

328 
__cڡ
 
wch�_t
 *
__��ri�
 
__s2
, 
size_t
 
__n
�
__THROW
;

332 
wch�_t
 *
	$wmemmove
 (
wch�_t
 *
__s1
, 
__cڡ
 wch�_�*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch�_t
 *
	$wmem�t
 (
wch�_t
 *
__s
, wch�_�
__c
, 
size_t
 
__n
�
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde�
__USE_GNU


342 
wch�_t
 *
	$wmemp�y
 (
wch�_t
 *
__��ri�
 
__s1
,

343 
__cڡ
 
wch�_t
 *
__��ri�
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
w�t_t
 
	$btowc
 (
__c
�
__THROW
;

355 
	$w�ob
 (
w�t_t
 
__c
�
__THROW
;

359 
	$mbs��
 (
__cڡ
 
mb��e_t
 *
__ps
�
__THROW
 
__��ibu�_pu�__
;

363 
size_t
 
	$mb�owc
 (
wch�_t
 *
__��ri�
 
__pwc
,

364 
__cڡ
 *
__��ri�
 
__s
, 
size_t
 
__n
,

365 
mb��e_t
 *
__p
�
__THROW
;

368 
size_t
 
	$w�tomb
 (*
__��ri�
 
__s
, 
wch�_t
 
__wc
,

369 
mb��e_t
 *
__��ri�
 
__ps
�
__THROW
;

372 
size_t
 
	$__mb��
 (
__cڡ
 *
__��ri�
 
__s
, 
size_t
 
__n
,

373 
mb��e_t
 *
__��ri�
 
__ps
�
__THROW
;

374 
size_t
 
	$mb��
 (
__cڡ
 *
__��ri�
 
__s
, 
size_t
 
__n
,

375 
mb��e_t
 *
__��ri�
 
__ps
�
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde�
__USE_EXTERN_INLINES


384 
w�t_t
 
	$__btowc_��s
 (
__c
�
	`__asm
 ("btowc");

385 
__ex��_�l�e
 
w�t_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__bu�t�_cڡ�t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
w�t_t
�
__c
 : 
	`__btowc_��s
 (__c)); 
	}
}

390 
	$__w�ob_��s
 (
w�t_t
 
__c
�
	`__asm
 ("wctob");

391 
__ex��_�l�e
 

392 
	`__NTH
 (
	$w�ob
 (
w�t_t
 
__wc
))

393 {  (
	`__bu�t�_cڡ�t_p
 (
__wc
�&& __w�>�
L
'\0' && __wc <= L'\x7f'

394 ? (�
__wc
 : 
	`__w�ob_��s
 (__wc)); 
	}
}

396 
__ex��_�l�e
 
size_t


397 
__NTH
 (
	$mb��
 (
__cڡ
 *
__��ri�
 
__s
, 
size_t
 
__n
,

398 
mb��e_t
 *
__��ri�
 
__ps
))

399 {  (
__ps
 !�
NULL


400 ? 
	`mb�owc
 (
NULL
, 
__s
, 
__n
, 
__ps
�: 
	`__mb��
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb�towcs
 (
wch�_t
 *
__��ri�
 
__d�
,

407 
__cڡ
 **
__��ri�
 
__�c
, 
size_t
 
__�n
,

408 
mb��e_t
 *
__��ri�
 
__ps
�
__THROW
;

412 
size_t
 
	$wc�tombs
 (*
__��ri�
 
__d�
,

413 
__cڡ
 
wch�_t
 **
__��ri�
 
__�c
, 
size_t
 
__�n
,

414 
mb��e_t
 *
__��ri�
 
__ps
�
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb��owcs
 (
wch�_t
 *
__��ri�
 
__d�
,

422 
__cڡ
 **
__��ri�
 
__�c
, 
size_t
 
__nmc
,

423 
size_t
 
__�n
, 
mb��e_t
 *
__��ri�
 
__ps
�
__THROW
;

427 
size_t
 
	$wc��ombs
 (*
__��ri�
 
__d�
,

428 
__cڡ
 
wch�_t
 **
__��ri�
 
__�c
,

429 
size_t
 
__nwc
, size_�
__�n
,

430 
mb��e_t
 *
__��ri�
 
__ps
�
__THROW
;

435 #ifde�
__USE_XOPEN


437 
	$wcwidth
 (
wch�_t
 
__c
�
__THROW
;

441 
	$wcswidth
 (
__cڡ
 
wch�_t
 *
__s
, 
size_t
 
__n
�
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc�od
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__Ō
,

449 
wch�_t
 **
__��ri�
 
__�d�r
�
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde�
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc�of
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__Ō
,

456 
wch�_t
 **
__��ri�
 
__�d�r
�
__THROW
;

457 
	$wc��d
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__Ō
,

458 
wch�_t
 **
__��ri�
 
__�d�r
�
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc��
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__Ō
,

467 
wch�_t
 **
__��ri�
 
__�d�r
, 
__ba�
�
__THROW
;

471 
	$wc�oul
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__Ō
,

472 
wch�_t
 **
__��ri�
 
__�d�r
, 
__ba�
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i�
def�ed
 
__USE_ISOC99
 || (def�ed 
__GNUC__
 && def�ed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__ex�nsi�__


481 
	$wc��l
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__Ō
,

482 
wch�_t
 **
__��ri�
 
__�d�r
, 
__ba�
)

483 
__THROW
;

487 
__ex�nsi�__


488 
	$wc�ou�
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__Ō
,

489 
wch�_t
 **
__��ri�
 
__�d�r
,

490 
__ba�
�
__THROW
;

491 
__END_NAMESPACE_C99


494 #i�
def�ed
 
__GNUC__
 && def�ed 
__USE_GNU


497 
__ex�nsi�__


498 
	$wc�oq
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__Ō
,

499 
wch�_t
 **
__��ri�
 
__�d�r
, 
__ba�
)

500 
__THROW
;

504 
__ex�nsi�__


505 
	$wc�ouq
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__Ō
,

506 
wch�_t
 **
__��ri�
 
__�d�r
,

507 
__ba�
�
__THROW
;

510 #ifde�
__USE_GNU


524 
	~<xlo��.h
>

528 
	$wc��_l
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__Ō
,

529 
wch�_t
 **
__��ri�
 
__�d�r
, 
__ba�
,

530 
__lo��_t
 
__loc
�
__THROW
;

532 
	$wc�oul_l
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__Ō
,

533 
wch�_t
 **
__��ri�
 
__�d�r
,

534 
__ba�
, 
__lo��_t
 
__loc
�
__THROW
;

536 
__ex�nsi�__


537 
	$wc��l_l
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__Ō
,

538 
wch�_t
 **
__��ri�
 
__�d�r
,

539 
__ba�
, 
__lo��_t
 
__loc
�
__THROW
;

541 
__ex�nsi�__


542 
	$wc�ou�_l
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__Ō
,

543 
wch�_t
 **
__��ri�
 
__�d�r
,

544 
__ba�
, 
__lo��_t
 
__loc
)

545 
__THROW
;

547 
	$wc�od_l
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__Ō
,

548 
wch�_t
 **
__��ri�
 
__�d�r
, 
__lo��_t
 
__loc
)

549 
__THROW
;

551 
	$wc�of_l
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__Ō
,

552 
wch�_t
 **
__��ri�
 
__�d�r
, 
__lo��_t
 
__loc
)

553 
__THROW
;

555 
	$wc��d_l
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__Ō
,

556 
wch�_t
 **
__��ri�
 
__�d�r
,

557 
__lo��_t
 
__loc
�
__THROW
;

562 
wch�_t
 *
	$w��y
 (
wch�_t
 *
__��ri�
 
__de�
,

563 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
�
__THROW
;

567 
wch�_t
 *
	$w�n�y
 (
wch�_t
 *
__��ri�
 
__de�
,

568 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$ݒ_wmem��am
 (
wch�_t
 **
__bu�oc
, 
size_t
 *
__siz�oc
�
__THROW
;

581 #i�
def�ed
 
__USE_ISOC95
 || def�ed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__�
, 
__mode
�
__THROW
;

592 
	`fw��tf
 (
__FILE
 *
__��ri�
 
__��am
,

593 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
, ...)

599 
	`w��tf
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
, ...)

602 
	$sw��tf
 (
wch�_t
 *
__��ri�
 
__s
, 
size_t
 
__n
,

603 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
, ...)

604 
__THROW
 ;

610 
	`vfw��tf
 (
__FILE
 *
__��ri�
 
__s
,

611 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

612 
__gnuc_va_li�
 
__�g
)

618 
	`vw��tf
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

619 
__gnuc_va_li�
 
__�g
)

623 
	$vsw��tf
 (
wch�_t
 *
__��ri�
 
__s
, 
size_t
 
__n
,

624 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

625 
__gnuc_va_li�
 
__�g
)

626 
__THROW
 ;

633 
	`fws�nf
 (
__FILE
 *
__��ri�
 
__��am
,

634 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
, ...)

640 
	`ws�nf
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
, ...)

643 
	$sws�nf
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__s
,

644 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
, ...)

645 
__THROW
 ;

647 #i�
def�ed
 
__USE_ISOC99
 && !def�ed 
__USE_GNU
 \

648 && (!
def�ed
 
__LDBL_COMPAT
 || !def�ed 
__REDIRECT
) \

649 && (
def�ed
 
__STRICT_ANSI__
 || def�ed 
__USE_XOPEN2K
)

650 #ifde�
__REDIRECT


654 
	`__REDIRECT
 (
fws�nf
, (
__FILE
 *
__��ri�
 
__��am
,

655 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
, ...),

656 
__isoc99_fws�nf
)

658 
	`__REDIRECT
 (
ws�nf
, (
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
, ...),

659 
__isoc99_ws�nf
)

661 
	`__REDIRECT_NTH
 (
sws�nf
, (
__cڡ
 
wch�_t
 *
__��ri�
 
__s
,

662 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

663 ...), 
__isoc99_sws�nf
)

666 
	`__isoc99_fws�nf
 (
__FILE
 *
__��ri�
 
__��am
,

667 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
, ...);

668 
	`__isoc99_ws�nf
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
, ...);

669 
	$__isoc99_sws�nf
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__s
,

670 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
, ...)

671 
__THROW
;

672 
	#fws�nf
 
__isoc99_fws�nf


	)

673 
	#ws�nf
 
__isoc99_ws�nf


	)

674 
	#sws�nf
 
__isoc99_sws�nf


	)

678 
__END_NAMESPACE_STD


681 #ifde�
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfws�nf
 (
__FILE
 *
__��ri�
 
__s
,

688 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

689 
__gnuc_va_li�
 
__�g
)

695 
	`vws�nf
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

696 
__gnuc_va_li�
 
__�g
)

699 
	$vsws�nf
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__s
,

700 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

701 
__gnuc_va_li�
 
__�g
)

702 
__THROW
 ;

704 #i�!
def�ed
 
__USE_GNU
 \

705 && (!
def�ed
 
__LDBL_COMPAT
 || !def�ed 
__REDIRECT
) \

706 && (
def�ed
 
__STRICT_ANSI__
 || def�ed 
__USE_XOPEN2K
)

707 #ifde�
__REDIRECT


708 
	`__REDIRECT
 (
vfws�nf
, (
__FILE
 *
__��ri�
 
__s
,

709 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

710 
__gnuc_va_li�
 
__�g
), 
__isoc99_vfws�nf
)

712 
	`__REDIRECT
 (
vws�nf
, (
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

713 
__gnuc_va_li�
 
__�g
), 
__isoc99_vws�nf
)

715 
	`__REDIRECT_NTH
 (
vsws�nf
, (
__cڡ
 
wch�_t
 *
__��ri�
 
__s
,

716 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

717 
__gnuc_va_li�
 
__�g
), 
__isoc99_vsws�nf
)

720 
	`__isoc99_vfws�nf
 (
__FILE
 *
__��ri�
 
__s
,

721 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

722 
__gnuc_va_li�
 
__�g
);

723 
	`__isoc99_vws�nf
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

724 
__gnuc_va_li�
 
__�g
);

725 
	$__isoc99_vsws�nf
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__s
,

726 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

727 
__gnuc_va_li�
 
__�g
�
__THROW
;

728 
	#vfws�nf
 
__isoc99_vfws�nf


	)

729 
	#vws�nf
 
__isoc99_vws�nf


	)

730 
	#vsws�nf
 
__isoc99_vsws�nf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
w�t_t
 
	`fg�wc
 (
__FILE
 *
__��am
);

744 
w�t_t
 
	`g�wc
 (
__FILE
 *
__��am
);

750 
w�t_t
 
	`g�wch�
 ();

757 
w�t_t
 
	`�utwc
 (
wch�_t
 
__wc
, 
__FILE
 *
__��am
);

758 
w�t_t
 
	`putwc
 (
wch�_t
 
__wc
, 
__FILE
 *
__��am
);

764 
w�t_t
 
	`putwch�
 (
wch�_t
 
__wc
);

772 
wch�_t
 *
	`fg�ws
 (wch�_�*
__��ri�
 
__ws
, 
__n
,

773 
__FILE
 *
__��ri�
 
__��am
);

779 
	`�utws
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__ws
,

780 
__FILE
 *
__��ri�
 
__��am
);

787 
w�t_t
 
	`ung�wc
 (w�t_�
__wc
, 
__FILE
 *
__��am
);

788 
__END_NAMESPACE_STD


791 #ifde�
__USE_GNU


799 
w�t_t
 
	`g�wc_u�ocked
 (
__FILE
 *
__��am
);

800 
w�t_t
 
	`g�wch�_u�ocked
 ();

808 
w�t_t
 
	`fg�wc_u�ocked
 (
__FILE
 *
__��am
);

816 
w�t_t
 
	`�utwc_u�ocked
 (
wch�_t
 
__wc
, 
__FILE
 *
__��am
);

825 
w�t_t
 
	`putwc_u�ocked
 (
wch�_t
 
__wc
, 
__FILE
 *
__��am
);

826 
w�t_t
 
	`putwch�_u�ocked
 (
wch�_t
 
__wc
);

835 
wch�_t
 *
	`fg�ws_u�ocked
 (wch�_�*
__��ri�
 
__ws
, 
__n
,

836 
__FILE
 *
__��ri�
 
__��am
);

844 
	`�utws_u�ocked
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__ws
,

845 
__FILE
 *
__��ri�
 
__��am
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs�ime
 (
wch�_t
 *
__��ri�
 
__s
, 
size_t
 
__maxsize
,

854 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

855 
__cڡ
 
tm
 *
__��ri�
 
__�
�
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde�
__USE_GNU


859 
	~<xlo��.h
>

863 
size_t
 
	$wcs�ime_l
 (
wch�_t
 *
__��ri�
 
__s
, 
size_t
 
__maxsize
,

864 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

865 
__cڡ
 
tm
 *
__��ri�
 
__�
,

866 
__lo��_t
 
__loc
�
__THROW
;

875 #i�
def�ed
 
__USE_UNIX98
 && !def�ed 
__USE_GNU


876 
	#__�ed_iswxxx


	)

877 
	~<w�y�.h
>

881 #i�
__USE_FORTIFY_LEVEL
 > 0 && 
def�ed
 
__ex��_�ways_�l�e


882 
	~<b�s/wch�2.h
>

885 #ifde�
__LDBL_COMPAT


886 
	~<b�s/wch�-ldbl.h
>

889 
__END_DECLS


897 #unde�
__�ed_mb��e_t


898 #unde�
__�ed_w�t_t


	@/usr/include/bits/wchar-ldbl.h

20 #i�de�
_WCHAR_H


24 #i�
def�ed
 
__USE_ISOC95
 || def�ed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw��tf
);

27 
__LDBL_REDIR_DECL
 (
w��tf
);

28 
__LDBL_REDIR_DECL
 (
sw��tf
);

29 
__LDBL_REDIR_DECL
 (
vfw��tf
);

30 
__LDBL_REDIR_DECL
 (
vw��tf
);

31 
__LDBL_REDIR_DECL
 (
vsw��tf
);

32 #i�
def�ed
 
__USE_ISOC99
 && !def�ed 
__USE_GNU
 \

33 && !
def�ed
 
	g__REDIRECT
 \

34 && (
def�ed
 
	g__STRICT_ANSI__
 || def�ed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fws�nf
, 
__�dbl___isoc99_fws�nf
)

36 
	$__LDBL_REDIR1_DECL
 (
ws�nf
, 
__�dbl___isoc99_ws�nf
)

37 
	$__LDBL_REDIR1_DECL
 (
sws�nf
, 
__�dbl___isoc99_sws�nf
)

39 
	`__LDBL_REDIR_DECL
 (
fws�nf
);

40 
	`__LDBL_REDIR_DECL
 (
ws�nf
);

41 
	`__LDBL_REDIR_DECL
 (
sws�nf
);

43 
__END_NAMESPACE_C99


46 #ifde�
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc��d
, 
wc�od
);

49 #i�!
def�ed
 
__USE_GNU
 && !def�ed 
__REDIRECT
 \

50 && (
def�ed
 
__STRICT_ANSI__
 || def�ed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfws�nf
, 
__�dbl___isoc99_vfws�nf
)

52 
	$__LDBL_REDIR1_DECL
 (
vws�nf
, 
__�dbl___isoc99_vws�nf
)

53 
	$__LDBL_REDIR1_DECL
 (
vsws�nf
, 
__�dbl___isoc99_vsws�nf
)

55 
	`__LDBL_REDIR_DECL
 (
vfws�nf
);

56 
	`__LDBL_REDIR_DECL
 (
vws�nf
);

57 
	`__LDBL_REDIR_DECL
 (
vsws�nf
);

59 
__END_NAMESPACE_C99


62 #ifde�
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc��d_l
, 
wc�od_l
);

66 #i�
__USE_FORTIFY_LEVEL
 > 0 && 
def�ed
 
__ex��_�ways_�l�e


67 
	$__LDBL_REDIR_DECL
 (
__sw��tf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw��tf_chk
)

69 #i�
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw��tf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w��tf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw��tf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw��tf_chk
)

	@/usr/include/bits/wchar.h

20 #i�de�
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde�
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde�
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #�i�
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wchar2.h

20 #i�de�
_WCHAR_H


25 
wch�_t
 *
	$__wmem�y_chk
 (
wch�_t
 *
__��ri�
 
__s1
,

26 
__cڡ
 
wch�_t
 *
__��ri�
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
�
__THROW
;

28 
wch�_t
 *
	`__REDIRECT_NTH
 (
__wmem�y_��s
,

29 (
wch�_t
 *
__��ri�
 
__s1
,

30 
__cڡ
 
wch�_t
 *
__��ri�
 
__s2
, 
size_t
 
__n
),

31 
wmem�y
);

32 
wch�_t
 *
	`__REDIRECT_NTH
 (
__wmem�y_chk_w�n
,

33 (
wch�_t
 *
__��ri�
 
__s1
,

34 
__cڡ
 
wch�_t
 *
__��ri�
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem�y_chk
)

36 
	`__w�ǉr
 ("wmemcpy called with�ength bigger�han size of destination "

39 
__ex��_�ways_�l�e
 
wch�_t
 *

40 
	`__NTH
 (
	$wmem�y
 (
wch�_t
 *
__��ri�
 
__s1
, 
__cڡ
 wch�_�*__��ri� 
__s2
,

41 
size_t
 
__n
))

43 i�(
	`__bos0
 (
__s1
�!�(
size_t
) -1)

45 i�(!
	`__bu�t�_cڡ�t_p
 (
__n
))

46  
	`__wmem�y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
�/  (
wch�_t
));

49 i�(
__n
 > 
	`__bos0
 (
__s1
�/  (
wch�_t
))

50  
	`__wmem�y_chk_w�n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
�/  (
wch�_t
));

53  
	`__wmem�y_��s
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch�_t
 *
	$__wmemmove_chk
 (
wch�_t
 *
__s1
, 
__cڡ
 wch�_�*
__s2
,

58 
size_t
 
__n
, size_�
__ns1
�
__THROW
;

59 
wch�_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_��s
, (wch�_�*
__s1
,

60 
__cڡ
 
wch�_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch�_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w�n
,

63 (
wch�_t
 *
__s1
, 
__cڡ
 wch�_�*
__s2
,

64 
size_t
 
__n
, size_�
__ns1
), 
__wmemmove_chk
)

65 
	`__w�ǉr
 ("wmemmove called with�ength bigger�han size of destination "

68 
__ex��_�ways_�l�e
 
wch�_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch�_t
 *
__s1
, 
__cڡ
 wch�_�*
__s2
, 
size_t
 
__n
))

71 i�(
	`__bos0
 (
__s1
�!�(
size_t
) -1)

73 i�(!
	`__bu�t�_cڡ�t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
�/  (
wch�_t
));

77 i�(
__n
 > 
	`__bos0
 (
__s1
�/  (
wch�_t
))

78  
	`__wmemmove_chk_w�n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
�/  (
wch�_t
));

81  
	`__wmemmove_��s
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde�
__USE_GNU


86 
wch�_t
 *
	$__wmemp�y_chk
 (
wch�_t
 *
__��ri�
 
__s1
,

87 
__cڡ
 
wch�_t
 *
__��ri�
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
�
__THROW
;

89 
wch�_t
 *
	`__REDIRECT_NTH
 (
__wmemp�y_��s
,

90 (
wch�_t
 *
__��ri�
 
__s1
,

91 
__cڡ
 
wch�_t
 *
__��ri�
 
__s2
,

92 
size_t
 
__n
), 
wmemp�y
);

93 
wch�_t
 *
	`__REDIRECT_NTH
 (
__wmemp�y_chk_w�n
,

94 (
wch�_t
 *
__��ri�
 
__s1
,

95 
__cڡ
 
wch�_t
 *
__��ri�
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp�y_chk
)

97 
	`__w�ǉr
 ("wmempcpy called with�ength bigger�han size of destination "

100 
__ex��_�ways_�l�e
 
wch�_t
 *

101 
	`__NTH
 (
	$wmemp�y
 (
wch�_t
 *
__��ri�
 
__s1
, 
__cڡ
 wch�_�*__��ri� 
__s2
,

102 
size_t
 
__n
))

104 i�(
	`__bos0
 (
__s1
�!�(
size_t
) -1)

106 i�(!
	`__bu�t�_cڡ�t_p
 (
__n
))

107  
	`__wmemp�y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
�/  (
wch�_t
));

110 i�(
__n
 > 
	`__bos0
 (
__s1
�/  (
wch�_t
))

111  
	`__wmemp�y_chk_w�n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
�/  (
wch�_t
));

114  
	`__wmemp�y_��s
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch�_t
 *
	$__wmem�t_chk
 (
wch�_t
 *
__s
, wch�_�
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
�
__THROW
;

121 
wch�_t
 *
	`__REDIRECT_NTH
 (
__wmem�t_��s
, (wch�_�*
__s
, wch�_�
__c
,

122 
size_t
 
__n
), 
wmem�t
);

123 
wch�_t
 *
	`__REDIRECT_NTH
 (
__wmem�t_chk_w�n
,

124 (
wch�_t
 *
__s
, wch�_�
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem�t_chk
)

126 
	`__w�ǉr
 ("wmemset called with�ength bigger�han size of destination "

129 
__ex��_�ways_�l�e
 
wch�_t
 *

130 
	`__NTH
 (
	$wmem�t
 (
wch�_t
 *
__s
, wch�_�
__c
, 
size_t
 
__n
))

132 i�(
	`__bos0
 (
__s
�!�(
size_t
) -1)

134 i�(!
	`__bu�t�_cڡ�t_p
 (
__n
))

135  
	`__wmem�t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__s�/  (
wch�_t
));

137 i�(
__n
 > 
	`__bos0
 (
__s
�/  (
wch�_t
))

138  
	`__wmem�t_chk_w�n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
�/  (
wch�_t
));

141  
	`__wmem�t_��s
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch�_t
 *
	$__wcs�y_chk
 (
wch�_t
 *
__��ri�
 
__de�
,

146 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
,

147 
size_t
 
__n
�
__THROW
;

148 
wch�_t
 *
	`__REDIRECT_NTH
 (
__wcs�y_��s
,

149 (
wch�_t
 *
__��ri�
 
__de�
,

150 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
), 
wcs�y
);

152 
__ex��_�ways_�l�e
 
wch�_t
 *

153 
	`__NTH
 (
	$wcs�y
 (
wch�_t
 *
__��ri�
 
__de�
, 
__cڡ
 wch�_�*__��ri� 
__�c
))

155 i�(
	`__bos
 (
__de�
�!�(
size_t
) -1)

156  
	`__wcs�y_chk
 (
__de�
, 
__�c
, 
	`__bos
 (__de��/  (
wch�_t
));

157  
	`__wcs�y_��s
 (
__de�
, 
__�c
);

158 
	}
}

161 
wch�_t
 *
	$__w��y_chk
 (
wch�_t
 *
__��ri�
 
__de�
,

162 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
,

163 
size_t
 
__de��n
�
__THROW
;

164 
wch�_t
 *
	`__REDIRECT_NTH
 (
__w��y_��s
,

165 (
wch�_t
 *
__��ri�
 
__de�
,

166 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
), 
w��y
);

168 
__ex��_�ways_�l�e
 
wch�_t
 *

169 
	`__NTH
 (
	$w��y
 (
wch�_t
 *
__��ri�
 
__de�
, 
__cڡ
 wch�_�*__��ri� 
__�c
))

171 i�(
	`__bos
 (
__de�
�!�(
size_t
) -1)

172  
	`__w��y_chk
 (
__de�
, 
__�c
, 
	`__bos
 (__de��/  (
wch�_t
));

173  
	`__w��y_��s
 (
__de�
, 
__�c
);

174 
	}
}

177 
wch�_t
 *
	$__wc��y_chk
 (
wch�_t
 *
__��ri�
 
__de�
,

178 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
, 
size_t
 
__n
,

179 
size_t
 
__de��n
�
__THROW
;

180 
wch�_t
 *
	`__REDIRECT_NTH
 (
__wc��y_��s
,

181 (
wch�_t
 *
__��ri�
 
__de�
,

182 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
,

183 
size_t
 
__n
), 
wc��y
);

184 
wch�_t
 *
	`__REDIRECT_NTH
 (
__wc��y_chk_w�n
,

185 (
wch�_t
 *
__��ri�
 
__de�
,

186 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
,

187 
size_t
 
__n
, size_�
__de��n
), 
__wc��y_chk
)

188 
	`__w�ǉr
 ("wcsncpy called with�ength bigger�han size of destination "

191 
__ex��_�ways_�l�e
 
wch�_t
 *

192 
	`__NTH
 (
	$wc��y
 (
wch�_t
 *
__��ri�
 
__de�
, 
__cڡ
 wch�_�*__��ri� 
__�c
,

193 
size_t
 
__n
))

195 i�(
	`__bos
 (
__de�
�!�(
size_t
) -1)

197 i�(!
	`__bu�t�_cڡ�t_p
 (
__n
))

198  
	`__wc��y_chk
 (
__de�
, 
__�c
, 
__n
,

199 
	`__bos
 (
__de�
�/  (
wch�_t
));

200 i�(
__n
 > 
	`__bos
 (
__de�
�/  (
wch�_t
))

201  
	`__wc��y_chk_w�n
 (
__de�
, 
__�c
, 
__n
,

202 
	`__bos
 (
__de�
�/  (
wch�_t
));

204  
	`__wc��y_��s
 (
__de�
, 
__�c
, 
__n
);

205 
	}
}

208 
wch�_t
 *
	$__w�n�y_chk
 (
wch�_t
 *
__��ri�
 
__de�
,

209 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
, 
size_t
 
__n
,

210 
size_t
 
__de��n
�
__THROW
;

211 
wch�_t
 *
	`__REDIRECT_NTH
 (
__w�n�y_��s
,

212 (
wch�_t
 *
__��ri�
 
__de�
,

213 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
,

214 
size_t
 
__n
), 
w�n�y
);

215 
wch�_t
 *
	`__REDIRECT_NTH
 (
__w�n�y_chk_w�n
,

216 (
wch�_t
 *
__��ri�
 
__de�
,

217 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
,

218 
size_t
 
__n
, size_�
__de��n
), 
__w�n�y_chk
)

219 
	`__w�ǉr
 ("wcpncpy called with�ength bigger�han size of destination "

222 
__ex��_�ways_�l�e
 
wch�_t
 *

223 
	`__NTH
 (
	$w�n�y
 (
wch�_t
 *
__��ri�
 
__de�
, 
__cڡ
 wch�_�*__��ri� 
__�c
,

224 
size_t
 
__n
))

226 i�(
	`__bos
 (
__de�
�!�(
size_t
) -1)

228 i�(!
	`__bu�t�_cڡ�t_p
 (
__n
))

229  
	`__w�n�y_chk
 (
__de�
, 
__�c
, 
__n
,

230 
	`__bos
 (
__de�
�/  (
wch�_t
));

231 i�(
__n
 > 
	`__bos
 (
__de�
�/  (
wch�_t
))

232  
	`__w�n�y_chk_w�n
 (
__de�
, 
__�c
, 
__n
,

233 
	`__bos
 (
__de�
�/  (
wch�_t
));

235  
	`__w�n�y_��s
 (
__de�
, 
__�c
, 
__n
);

236 
	}
}

239 
wch�_t
 *
	$__wcs�t_chk
 (
wch�_t
 *
__��ri�
 
__de�
,

240 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
,

241 
size_t
 
__de��n
�
__THROW
;

242 
wch�_t
 *
	`__REDIRECT_NTH
 (
__wcs�t_��s
,

243 (
wch�_t
 *
__��ri�
 
__de�
,

244 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
), 
wcs�t
);

246 
__ex��_�ways_�l�e
 
wch�_t
 *

247 
	`__NTH
 (
	$wcs�t
 (
wch�_t
 *
__��ri�
 
__de�
, 
__cڡ
 wch�_�*__��ri� 
__�c
))

249 i�(
	`__bos
 (
__de�
�!�(
size_t
) -1)

250  
	`__wcs�t_chk
 (
__de�
, 
__�c
, 
	`__bos
 (__de��/  (
wch�_t
));

251  
	`__wcs�t_��s
 (
__de�
, 
__�c
);

252 
	}
}

255 
wch�_t
 *
	$__wc��t_chk
 (
wch�_t
 *
__��ri�
 
__de�
,

256 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
,

257 
size_t
 
__n
, size_�
__de��n
�
__THROW
;

258 
wch�_t
 *
	`__REDIRECT_NTH
 (
__wc��t_��s
,

259 (
wch�_t
 *
__��ri�
 
__de�
,

260 
__cڡ
 
wch�_t
 *
__��ri�
 
__�c
,

261 
size_t
 
__n
), 
wc��t
);

263 
__ex��_�ways_�l�e
 
wch�_t
 *

264 
	`__NTH
 (
	$wc��t
 (
wch�_t
 *
__��ri�
 
__de�
, 
__cڡ
 wch�_�*__��ri� 
__�c
,

265 
size_t
 
__n
))

267 i�(
	`__bos
 (
__de�
�!�(
size_t
) -1)

268  
	`__wc��t_chk
 (
__de�
, 
__�c
, 
__n
,

269 
	`__bos
 (
__de�
�/  (
wch�_t
));

270  
	`__wc��t_��s
 (
__de�
, 
__�c
, 
__n
);

271 
	}
}

274 
	$__sw��tf_chk
 (
wch�_t
 *
__��ri�
 
__s
, 
size_t
 
__n
,

275 
__�ag
, 
size_t
 
__s_�n
,

276 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw��tf_��s
,

280 (
wch�_t
 *
__��ri�
 
__s
, 
size_t
 
__n
,

281 
__cڡ
 
wch�_t
 *
__��ri�
 
__fmt
, ...),

282 
sw��tf
);

284 #ifde�
__va_�g_�ck


285 
__ex��_�ways_�l�e
 

286 
	`__NTH
 (
	$sw��tf
 (
wch�_t
 *
__��ri�
 
__s
, 
size_t
 
__n
,

287 
__cڡ
 
wch�_t
 *
__��ri�
 
__fmt
, ...))

289 i�(
	`__bos
 (
__s
�!�(
size_t
�-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw��tf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
�/  (
wch�_t
),

292 
__fmt
, 
	`__va_�g_�ck
 ());

293  
	`__sw��tf_��s
 (
__s
, 
__n
, 
__fmt
, 
	`__va_�g_�ck
 ());

294 
	}
}

295 #�i�!
def�ed
 
__�lu�lus


297 
	#sw��tf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
�!�(
size_t
�-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw��tf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
�/  (
wch�_t
), 
__VA_ARGS__
) \

301 : 
	`sw��tf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw��tf_chk
 (
wch�_t
 *
__��ri�
 
__s
, 
size_t
 
__n
,

305 
__�ag
, 
size_t
 
__s_�n
,

306 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

307 
__gnuc_va_li�
 
__�g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw��tf_��s
,

311 (
wch�_t
 *
__��ri�
 
__s
, 
size_t
 
__n
,

312 
__cڡ
 
wch�_t
 *
__��ri�
 
__fmt
,

313 
__gnuc_va_li�
 
__�
), 
vsw��tf
);

315 
__ex��_�ways_�l�e
 

316 
	`__NTH
 (
	$vsw��tf
 (
wch�_t
 *
__��ri�
 
__s
, 
size_t
 
__n
,

317 
__cڡ
 
wch�_t
 *
__��ri�
 
__fmt
, 
__gnuc_va_li�
 
__�
))

319 i�(
	`__bos
 (
__s
�!�(
size_t
�-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw��tf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
�/  (
wch�_t
), 
__fmt
, 
__�
);

322  
	`__vsw��tf_��s
 (
__s
, 
__n
, 
__fmt
, 
__�
);

323 
	}
}

326 #i�
__USE_FORTIFY_LEVEL
 > 1

328 
__fw��tf_chk
 (
__FILE
 *
__��ri�
 
__��am
, 
__�ag
,

329 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
, ...);

330 
__w��tf_chk
 (
__�ag
, 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

332 
__vfw��tf_chk
 (
__FILE
 *
__��ri�
 
__��am
, 
__�ag
,

333 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

334 
__gnuc_va_li�
 
__�
);

335 
__vw��tf_chk
 (
__�ag
, 
__cڡ
 
wch�_t
 *
__��ri�
 
__f�m�
,

336 
__gnuc_va_li�
 
__�
);

338 #ifde�
__va_�g_�ck


339 
__ex��_�ways_�l�e
 

340 
	$w��tf
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__fmt
, ...)

342  
	`__w��tf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_�g_�ck
 ());

343 
	}
}

345 
__ex��_�ways_�l�e
 

346 
	$fw��tf
 (
__FILE
 *
__��ri�
 
__��am
, 
__cڡ
 
wch�_t
 *__��ri� 
__fmt
, ...)

348  
	`__fw��tf_chk
 (
__��am
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_�g_�ck
 ());

350 
	}
}

351 #�i�!
def�ed
 
__�lu�lus


352 
	#w��tf
(...) \

353 
	`__w��tf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw��tf
(
��am
, ...) \

355 
	`__fw��tf_chk
 (
��am
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__ex��_�ways_�l�e
 

359 
	$vw��tf
 (
__cڡ
 
wch�_t
 *
__��ri�
 
__fmt
, 
__gnuc_va_li�
 
__�
)

361  
	`__vw��tf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__�
);

362 
	}
}

364 
__ex��_�ways_�l�e
 

365 
	$vfw��tf
 (
__FILE
 *
__��ri�
 
__��am
,

366 
__cڡ
 
wch�_t
 *
__��ri�
 
__fmt
, 
__gnuc_va_li�
 
__�
)

368  
	`__vfw��tf_chk
 (
__��am
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__�
);

369 
	}
}

373 
wch�_t
 *
	$__fg�ws_chk
 (
wch�_t
 *
__��ri�
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__��ri�
 
__��am
�
__wur
;

375 
wch�_t
 *
	`__REDIRECT
 (
__fg�ws_��s
,

376 (
wch�_t
 *
__��ri�
 
__s
, 
__n
,

377 
__FILE
 *
__��ri�
 
__��am
), 
fg�ws
�
__wur
;

378 
wch�_t
 *
	`__REDIRECT
 (
__fg�ws_chk_w�n
,

379 (
wch�_t
 *
__��ri�
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__��ri�
 
__��am
), 
__fg�ws_chk
)

381 
__wur
 
	`__w�ǉr
 ("fgetws called with bigger size�han�ength "

384 
__ex��_�ways_�l�e
 
__wur
 
wch�_t
 *

385 
	$fg�ws
 (
wch�_t
 *
__��ri�
 
__s
, 
__n
, 
__FILE
 *__��ri� 
__��am
)

387 i�(
	`__bos
 (
__s
�!�(
size_t
) -1)

389 i�(!
	`__bu�t�_cڡ�t_p
 (
__n
) || __n <= 0)

390  
	`__fg�ws_chk
 (
__s
, 
	`__bos
 (__s�/  (
wch�_t
),

391 
__n
, 
__��am
);

393 i�((
size_t
�
__n
 > 
	`__bos
 (
__s
�/  (
wch�_t
))

394  
	`__fg�ws_chk_w�n
 (
__s
, 
	`__bos
 (__s�/  (
wch�_t
),

395 
__n
, 
__��am
);

397  
	`__fg�ws_��s
 (
__s
, 
__n
, 
__��am
);

398 
	}
}

400 #ifde�
__USE_GNU


401 
wch�_t
 *
	$__fg�ws_u�ocked_chk
 (
wch�_t
 *
__��ri�
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__��ri�
 
__��am
)

403 
__wur
;

404 
wch�_t
 *
	`__REDIRECT
 (
__fg�ws_u�ocked_��s
,

405 (
wch�_t
 *
__��ri�
 
__s
, 
__n
,

406 
__FILE
 *
__��ri�
 
__��am
), 
fg�ws_u�ocked
)

407 
__wur
;

408 
wch�_t
 *
	`__REDIRECT
 (
__fg�ws_u�ocked_chk_w�n
,

409 (
wch�_t
 *
__��ri�
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__��ri�
 
__��am
),

411 
__fg�ws_u�ocked_chk
)

412 
__wur
 
	`__w�ǉr
 ("fgetws_unlocked called with bigger size�han�ength "

415 
__ex��_�ways_�l�e
 
__wur
 
wch�_t
 *

416 
	$fg�ws_u�ocked
 (
wch�_t
 *
__��ri�
 
__s
, 
__n
, 
__FILE
 *__��ri� 
__��am
)

418 i�(
	`__bos
 (
__s
�!�(
size_t
) -1)

420 i�(!
	`__bu�t�_cڡ�t_p
 (
__n
) || __n <= 0)

421  
	`__fg�ws_u�ocked_chk
 (
__s
, 
	`__bos
 (__s�/  (
wch�_t
),

422 
__n
, 
__��am
);

424 i�((
size_t
�
__n
 > 
	`__bos
 (
__s
�/  (
wch�_t
))

425  
	`__fg�ws_u�ocked_chk_w�n
 (
__s
, 
	`__bos
 (__s�/  (
wch�_t
),

426 
__n
, 
__��am
);

428  
	`__fg�ws_u�ocked_��s
 (
__s
, 
__n
, 
__��am
);

429 
	}
}

433 
size_t
 
	$__w�tomb_chk
 (*
__��ri�
 
__s
, 
wch�_t
 
__wch�
,

434 
mb��e_t
 *
__��ri�
 
__p
,

435 
size_t
 
__bu�
�
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w�tomb_��s
,

437 (*
__��ri�
 
__s
, 
wch�_t
 
__wch�
,

438 
mb��e_t
 *
__��ri�
 
__ps
), 
w�tomb
�
__wur
;

440 
__ex��_�ways_�l�e
 
__wur
 
size_t


441 
	`__NTH
 (
	$w�tomb
 (*
__��ri�
 
__s
, 
wch�_t
 
__wch�
,

442 
mb��e_t
 *
__��ri�
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i�
def�ed
 
MB_LEN_MAX
 && MB_LEN_MAX !�
__WCHAR_MB_LEN_MAX


451 i�(
	`__bos
 (
__s
�!�(
size_t
�-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w�tomb_chk
 (
__s
, 
__wch�
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w�tomb_��s
 (
__s
, 
__wch�
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb�towcs_chk
 (
wch�_t
 *
__��ri�
 
__d�
,

458 
__cڡ
 **
__��ri�
 
__�c
,

459 
size_t
 
__�n
, 
mb��e_t
 *
__��ri�
 
__ps
,

460 
size_t
 
__d��n
�
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb�towcs_��s
,

462 (
wch�_t
 *
__��ri�
 
__d�
,

463 
__cڡ
 **
__��ri�
 
__�c
,

464 
size_t
 
__�n
, 
mb��e_t
 *
__��ri�
 
__ps
),

465 
mb�towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb�towcs_chk_w�n
,

467 (
wch�_t
 *
__��ri�
 
__d�
,

468 
__cڡ
 **
__��ri�
 
__�c
,

469 
size_t
 
__�n
, 
mb��e_t
 *
__��ri�
 
__ps
,

470 
size_t
 
__d��n
), 
__mb�towcs_chk
)

471 
	`__w�ǉr
 ("mbsrtowcs called with dst buffer smaller�han�en "

474 
__ex��_�ways_�l�e
 
size_t


475 
	`__NTH
 (
	$mb�towcs
 (
wch�_t
 *
__��ri�
 
__d�
, 
__cڡ
 **__��ri� 
__�c
,

476 
size_t
 
__�n
, 
mb��e_t
 *
__��ri�
 
__ps
))

478 i�(
	`__bos
 (
__d�
�!�(
size_t
) -1)

480 i�(!
	`__bu�t�_cڡ�t_p
 (
__�n
))

481  
	`__mb�towcs_chk
 (
__d�
, 
__�c
, 
__�n
, 
__ps
,

482 
	`__bos
 (
__d�
�/  (
wch�_t
));

484 i�(
__�n
 > 
	`__bos
 (
__d�
�/  (
wch�_t
))

485  
	`__mb�towcs_chk_w�n
 (
__d�
, 
__�c
, 
__�n
, 
__ps
,

486 
	`__bos
 (
__d�
�/  (
wch�_t
));

488  
	`__mb�towcs_��s
 (
__d�
, 
__�c
, 
__�n
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc�tombs_chk
 (*
__��ri�
 
__d�
,

493 
__cڡ
 
wch�_t
 **
__��ri�
 
__�c
,

494 
size_t
 
__�n
, 
mb��e_t
 *
__��ri�
 
__ps
,

495 
size_t
 
__d��n
�
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc�tombs_��s
,

497 (*
__��ri�
 
__d�
,

498 
__cڡ
 
wch�_t
 **
__��ri�
 
__�c
,

499 
size_t
 
__�n
, 
mb��e_t
 *
__��ri�
 
__ps
),

500 
wc�tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc�tombs_chk_w�n
,

502 (*
__��ri�
 
__d�
,

503 
__cڡ
 
wch�_t
 **
__��ri�
 
__�c
,

504 
size_t
 
__�n
, 
mb��e_t
 *
__��ri�
 
__ps
,

505 
size_t
 
__d��n
), 
__wc�tombs_chk
)

506 
	`__w�ǉr
 ("wcsrtombs called with dst buffer smaller�han�en");

508 
__ex��_�ways_�l�e
 
size_t


509 
	`__NTH
 (
	$wc�tombs
 (*
__��ri�
 
__d�
, 
__cڡ
 
wch�_t
 **__��ri� 
__�c
,

510 
size_t
 
__�n
, 
mb��e_t
 *
__��ri�
 
__ps
))

512 i�(
	`__bos
 (
__d�
�!�(
size_t
) -1)

514 i�(!
	`__bu�t�_cڡ�t_p
 (
__�n
))

515  
	`__wc�tombs_chk
 (
__d�
, 
__�c
, 
__�n
, 
__ps
, 
	`__bos
 (__dst));

517 i�(
__�n
 > 
	`__bos
 (
__d�
))

518  
	`__wc�tombs_chk_w�n
 (
__d�
, 
__�c
, 
__�n
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc�tombs_��s
 (
__d�
, 
__�c
, 
__�n
, 
__ps
);

521 
	}
}

524 #ifde�
__USE_GNU


525 
size_t
 
	$__mb��owcs_chk
 (
wch�_t
 *
__��ri�
 
__d�
,

526 
__cڡ
 **
__��ri�
 
__�c
, 
size_t
 
__nmc
,

527 
size_t
 
__�n
, 
mb��e_t
 *
__��ri�
 
__ps
,

528 
size_t
 
__d��n
�
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb��owcs_��s
,

530 (
wch�_t
 *
__��ri�
 
__d�
,

531 
__cڡ
 **
__��ri�
 
__�c
, 
size_t
 
__nmc
,

532 
size_t
 
__�n
, 
mb��e_t
 *
__��ri�
 
__ps
),

533 
mb��owcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb��owcs_chk_w�n
,

535 (
wch�_t
 *
__��ri�
 
__d�
,

536 
__cڡ
 **
__��ri�
 
__�c
, 
size_t
 
__nmc
,

537 
size_t
 
__�n
, 
mb��e_t
 *
__��ri�
 
__ps
,

538 
size_t
 
__d��n
), 
__mb��owcs_chk
)

539 
	`__w�ǉr
 ("mbsnrtowcs called with dst buffer smaller�han�en "

542 
__ex��_�ways_�l�e
 
size_t


543 
	`__NTH
 (
	$mb��owcs
 (
wch�_t
 *
__��ri�
 
__d�
, 
__cڡ
 **__��ri� 
__�c
,

544 
size_t
 
__nmc
, size_�
__�n
, 
mb��e_t
 *
__��ri�
 
__ps
))

546 i�(
	`__bos
 (
__d�
�!�(
size_t
) -1)

548 i�(!
	`__bu�t�_cڡ�t_p
 (
__�n
))

549  
	`__mb��owcs_chk
 (
__d�
, 
__�c
, 
__nmc
, 
__�n
, 
__ps
,

550 
	`__bos
 (
__d�
�/  (
wch�_t
));

552 i�(
__�n
 > 
	`__bos
 (
__d�
�/  (
wch�_t
))

553  
	`__mb��owcs_chk_w�n
 (
__d�
, 
__�c
, 
__nmc
, 
__�n
, 
__ps
,

554 
	`__bos
 (
__d�
�/  (
wch�_t
));

556  
	`__mb��owcs_��s
 (
__d�
, 
__�c
, 
__nmc
, 
__�n
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc��ombs_chk
 (*
__��ri�
 
__d�
,

561 
__cڡ
 
wch�_t
 **
__��ri�
 
__�c
,

562 
size_t
 
__nwc
, size_�
__�n
,

563 
mb��e_t
 *
__��ri�
 
__ps
, 
size_t
 
__d��n
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc��ombs_��s
,

566 (*
__��ri�
 
__d�
,

567 
__cڡ
 
wch�_t
 **
__��ri�
 
__�c
,

568 
size_t
 
__nwc
, size_�
__�n
,

569 
mb��e_t
 *
__��ri�
 
__ps
), 
wc��ombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc��ombs_chk_w�n
,

571 (*
__��ri�
 
__d�
,

572 
__cڡ
 
wch�_t
 **
__��ri�
 
__�c
,

573 
size_t
 
__nwc
, size_�
__�n
,

574 
mb��e_t
 *
__��ri�
 
__ps
,

575 
size_t
 
__d��n
), 
__wc��ombs_chk
)

576 
	`__w�ǉr
 ("wcsnrtombs called with dst buffer smaller�han�en");

578 
__ex��_�ways_�l�e
 
size_t


579 
	`__NTH
 (
	$wc��ombs
 (*
__��ri�
 
__d�
, 
__cڡ
 
wch�_t
 **__��ri� 
__�c
,

580 
size_t
 
__nwc
, size_�
__�n
, 
mb��e_t
 *
__��ri�
 
__ps
))

582 i�(
	`__bos
 (
__d�
�!�(
size_t
) -1)

584 i�(!
	`__bu�t�_cڡ�t_p
 (
__�n
))

585  
	`__wc��ombs_chk
 (
__d�
, 
__�c
, 
__nwc
, 
__�n
, 
__ps
,

586 
	`__bos
 (
__d�
));

588 i�(
__�n
 > 
	`__bos
 (
__d�
))

589  
	`__wc��ombs_chk_w�n
 (
__d�
, 
__�c
, 
__nwc
, 
__�n
, 
__ps
,

590 
	`__bos
 (
__d�
));

592  
	`__wc��ombs_��s
 (
__d�
, 
__�c
, 
__nwc
, 
__�n
, 
__ps
);

593 
	}
}

	@/usr/include/errno.h

23 #i�def 
_ERRNO_H


27 #i�def 
__�ed_Em�h


28 
	#_ERRNO_H
 1

	)

29 
	~<�u�s.h
>

32 
	g__BEGIN_DECLS


36 
	~<b�s/��o.h
>

37 #unde�
__�ed_Em�h


39 #ifdef 
_ERRNO_H


46 #i�def 
��o


47 
��o
;

50 #ifde�
__USE_GNU


55 *
�og�m_�vo�ti�_�me
, *
�og�m_�vo�ti�_sh�t_�me
;

59 
	g__END_DECLS


67 #i�
def�ed
 
__USE_GNU
 || def�ed 
__�ed_�r�_t


68 #i�de�
__�r�_t_def�ed


69 
	t�r�_t
;

70 
	#__�r�_t_def�ed
 1

	)

72 #unde�
__�ed_�r�_t


	@/usr/include/gnu/option-groups.h

10 #i�de�
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LIBM_BIG
 1

	)

34 
	#__OPTION_EGLIBC_LOCALES
 1

	)

35 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

36 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

37 
	#__OPTION_EGLIBC_NIS
 1

	)

38 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

39 
	#__OPTION_EGLIBC_RCMD
 1

	)

40 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

41 
	#__OPTION_EGLIBC_SPAWN
 1

	)

42 
	#__OPTION_EGLIBC_STREAMS
 1

	)

43 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

44 
	#__OPTION_EGLIBC_UTMP
 1

	)

45 
	#__OPTION_EGLIBC_UTMPX
 1

	)

46 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

47 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

48 
	#__OPTION_POSIX_REGEXP
 1

	)

49 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

50 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/pthread.h

20 #i�de�
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<�u�s.h
>

24 
	~<�d�n.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<b�s/�h�adty�s.h
>

29 
	~<b�s/�tjmp.h
>

30 
	~<b�s/w�dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i�
def�ed
 
__USE_UNIX98
 || def�ed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde�
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde�
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde�
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i�
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde�
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde�
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i�
def�ed
 
__USE_UNIX98
 || def�ed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde�
__USE_GNU


127 #i�
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i�
__BYTE_ORDER
 =�
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*�0, 0, 0 } }

	)

182 
	s_�h�ad_��nup_buf�r


184 (*
	m__rout�e
) (*);

185 *
	m__�g
;

186 
	m__�n��y�
;

187 
_�h�ad_��nup_buf�r
 *
	m__�ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*�-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde�
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
�h�ad_�
 (
�h�ad_t
 *
__��ri�
 
__�wth�ad
,

226 
__cڡ
 
�h�ad_��_t
 *
__��ri�
 
__��
,

227 *(*
__��t_rout�e
) (*),

228 *
__��ri�
 
__�g
�
__THROW
 
__n�nu�
 ((1, 3));

234 
	$�h�ad_ex�
 (*
__�tv�
�
	`__��ibu�__
 ((
__nܑu�__
));

242 
	`�h�ad_jo�
 (
�h�ad_t
 
__th
, **
__th�ad_�tu�
);

244 #ifde�
__USE_GNU


247 
	$�h�ad_�yjo�_�
 (
�h�ad_t
 
__th
, **
__th�ad_�tu�
�
__THROW
;

255 
	`�h�ad_timedjo�_�
 (
�h�ad_t
 
__th
, **
__th�ad_�tu�
,

256 
__cڡ
 
time�ec
 *
__ab�ime
);

263 
	$�h�ad_d�ach
 (
�h�ad_t
 
__th
�
__THROW
;

267 
�h�ad_t
 
	$�h�ad_�lf
 (�
__THROW
 
	`__��ibu�__
 ((
__cڡ__
));

270 
	$�h�ad_equ�
 (
�h�ad_t
 
__th�ad1
,�th�ad_�
__th�ad2
�
__THROW
;

278 
	$�h�ad_��_��
 (
�h�ad_��_t
 *
__��
�
__THROW
 
	`__n�nu�
 ((1));

281 
	$�h�ad_��_de�roy
 (
�h�ad_��_t
 *
__��
)

282 
__THROW
 
	`__n�nu�
 ((1));

285 
	$�h�ad_��_g�d�ach��e
 (
__cڡ
 
�h�ad_��_t
 *
__��
,

286 *
__d�ach��e
)

287 
__THROW
 
	`__n�nu�
 ((1, 2));

290 
	$�h�ad_��_�td�ach��e
 (
�h�ad_��_t
 *
__��
,

291 
__d�ach��e
)

292 
__THROW
 
	`__n�nu�
 ((1));

296 
	$�h�ad_��_g�gu�dsize
 (
__cڡ
 
�h�ad_��_t
 *
__��
,

297 
size_t
 *
__gu�dsize
)

298 
__THROW
 
	`__n�nu�
 ((1, 2));

301 
	$�h�ad_��_�tgu�dsize
 (
�h�ad_��_t
 *
__��
,

302 
size_t
 
__gu�dsize
)

303 
__THROW
 
	`__n�nu�
 ((1));

307 
	$�h�ad_��_g�sched��m
 (
__cڡ
 
�h�ad_��_t
 *
__��ri�


308 
__��
,

309 
sched_��m
 *
__��ri�
 
__��m
)

310 
__THROW
 
	`__n�nu�
 ((1, 2));

313 
	$�h�ad_��_�tsched��m
 (
�h�ad_��_t
 *
__��ri�
 
__��
,

314 
__cڡ
 
sched_��m
 *
__��ri�


315 
__��m
�
__THROW
 
	`__n�nu�
 ((1, 2));

318 
	$�h�ad_��_g�schedp�icy
 (
__cڡ
 
�h�ad_��_t
 *
__��ri�


319 
__��
, *
__��ri�
 
__p�icy
)

320 
__THROW
 
	`__n�nu�
 ((1, 2));

323 
	$�h�ad_��_�tschedp�icy
 (
�h�ad_��_t
 *
__��
, 
__p�icy
)

324 
__THROW
 
	`__n�nu�
 ((1));

327 
	$�h�ad_��_g��h��sched
 (
__cڡ
 
�h�ad_��_t
 *
__��ri�


328 
__��
, *
__��ri�
 
__�h��
)

329 
__THROW
 
	`__n�nu�
 ((1, 2));

332 
	$�h�ad_��_�t�h��sched
 (
�h�ad_��_t
 *
__��
,

333 
__�h��
)

334 
__THROW
 
	`__n�nu�
 ((1));

338 
	$�h�ad_��_g�sc�e
 (
__cڡ
 
�h�ad_��_t
 *
__��ri�
 
__��
,

339 *
__��ri�
 
__sc�e
)

340 
__THROW
 
	`__n�nu�
 ((1, 2));

343 
	$�h�ad_��_�tsc�e
 (
�h�ad_��_t
 *
__��
, 
__sc�e
)

344 
__THROW
 
	`__n�nu�
 ((1));

347 
	$�h�ad_��_g��ackaddr
 (
__cڡ
 
�h�ad_��_t
 *
__��ri�


348 
__��
, **
__��ri�
 
__�ackaddr
)

349 
__THROW
 
	`__n�nu�
 ((1, 2)�
__��ibu�_d����d__
;

355 
	$�h�ad_��_�t�ackaddr
 (
�h�ad_��_t
 *
__��
,

356 *
__�ackaddr
)

357 
__THROW
 
	`__n�nu�
 ((1)�
__��ibu�_d����d__
;

360 
	$�h�ad_��_g��acksize
 (
__cڡ
 
�h�ad_��_t
 *
__��ri�


361 
__��
, 
size_t
 *
__��ri�
 
__�acksize
)

362 
__THROW
 
	`__n�nu�
 ((1, 2));

367 
	$�h�ad_��_�t�acksize
 (
�h�ad_��_t
 *
__��
,

368 
size_t
 
__�acksize
)

369 
__THROW
 
	`__n�nu�
 ((1));

371 #ifde�
__USE_XOPEN2K


373 
	$�h�ad_��_g��ack
 (
__cڡ
 
�h�ad_��_t
 *
__��ri�
 
__��
,

374 **
__��ri�
 
__�ackaddr
,

375 
size_t
 *
__��ri�
 
__�acksize
)

376 
__THROW
 
	`__n�nu�
 ((1, 2, 3));

381 
	$�h�ad_��_�t�ack
 (
�h�ad_��_t
 *
__��
, *
__�ackaddr
,

382 
size_t
 
__�acksize
�
__THROW
 
	`__n�nu�
 ((1));

385 #ifde�
__USE_GNU


388 
	$�h�ad_��_��ff��y_�
 (
�h�ad_��_t
 *
__��
,

389 
size_t
 
__�u�tsize
,

390 
__cڡ
 
�u_�t_t
 *
__�u�t
)

391 
__THROW
 
	`__n�nu�
 ((1, 3));

395 
	$�h�ad_��_g�aff��y_�
 (
__cڡ
 
�h�ad_��_t
 *
__��
,

396 
size_t
 
__�u�tsize
,

397 
�u_�t_t
 *
__�u�t
)

398 
__THROW
 
	`__n�nu�
 ((1, 3));

404 
	$�h�ad_g���_�
 (
�h�ad_t
 
__th
, 
�h�ad_��_t
 *
__��
)

405 
__THROW
 
	`__n�nu�
 ((2));

413 
	$�h�ad_�tsched��m
 (
�h�ad_t
 
__�rg�_th�ad
, 
__p�icy
,

414 
__cڡ
 
sched_��m
 *
__��m
)

415 
__THROW
 
	`__n�nu�
 ((3));

418 
	$�h�ad_g�sched��m
 (
�h�ad_t
 
__�rg�_th�ad
,

419 *
__��ri�
 
__p�icy
,

420 
sched_��m
 *
__��ri�
 
__��m
)

421 
__THROW
 
	`__n�nu�
 ((2, 3));

424 
	$�h�ad_�tsched�io
 (
�h�ad_t
 
__�rg�_th�ad
, 
__�io
)

425 
__THROW
;

428 #ifde�
__USE_GNU


430 
	$�h�ad_g��me_�
 (
�h�ad_t
 
__�rg�_th�ad
, *
__buf
,

431 
size_t
 
__bu�
)

432 
__THROW
 
	`__n�nu�
 ((2));

435 
	$�h�ad_��ame_�
 (
�h�ad_t
 
__�rg�_th�ad
, 
__cڡ
 *
__�me
)

436 
__THROW
 
	`__n�nu�
 ((2));

440 #ifde�
__USE_UNIX98


442 
	$�h�ad_g�c�cu��cy
 (�
__THROW
;

445 
	$�h�ad_�tc�cu��cy
 (
__�v�
�
__THROW
;

448 #ifde�
__USE_GNU


453 
	$�h�ad_y�ld
 (�
__THROW
;

458 
	$�h�ad_��ff��y_�
 (
�h�ad_t
 
__th
, 
size_t
 
__�u�tsize
,

459 
__cڡ
 
�u_�t_t
 *
__�u�t
)

460 
__THROW
 
	`__n�nu�
 ((3));

463 
	$�h�ad_g�aff��y_�
 (
�h�ad_t
 
__th
, 
size_t
 
__�u�tsize
,

464 
�u_�t_t
 *
__�u�t
)

465 
__THROW
 
	`__n�nu�
 ((3));

478 
	`�h�ad_��
 (
�h�ad_��_t
 *
__��_cڌ�
,

479 (*
__��_rout�e
�()�
	`__n�nu�
 ((1, 2));

490 
	`�h�ad_�t�n�l��e
 (
__��e
, *
__�d��e
);

494 
	`�h�ad_�t�n��y�
 (
__ty�
, *
__�dty�
);

497 
	`�h�ad_�n�l
 (
�h�ad_t
 
__th
);

502 
	`�h�ad_���n�l
 ();

511 
__jmp_buf
 
__�n�l_jmp_buf
;

512 
__mask_was_�ved
;

513 } 
__�n�l_jmp_buf
[1];

514 *
__�d
[4];

515 } 
	t__�h�ad_unw�d_buf_t
 
	t__��ibu�__
 ((
	t__�ig�d__
));

518 #i�de�
__��nup_f�_��ibu�


519 
	#__��nup_f�_��ibu�


	)

524 
	s__�h�ad_��nup_�ame


526 (*
__�n�l_rout�e
) (*);

527 *
__�n�l_�g
;

528 
__do_�
;

529 
__�n�l_ty�
;

532 #i�
def�ed
 
__GNUC__
 && def�ed 
__EXCEPTIONS


533 #ifde�
__�lu�lus


535 �as�
	c__�h�ad_��nup_�ass


537 (*
__�n�l_rout�e
) (*);

538 *
__�n�l_�g
;

539 
__do_�
;

540 
__�n�l_ty�
;

542 
public
:

543 
	`__�h�ad_��nup_�ass
 ((*
__f�
�(*), *
__�g
)

544 : 
	`__�n�l_rout�e
 (
__f�
), 
	`__�n�l_�g
 (
__�g
), 
	$__do_�
 (1) { }

545 ~
	$__�h�ad_��nup_�ass
 (�{ i�(
__do_�
�
	`__�n�l_rout�e
 (
__�n�l_�g
); 
	}
}

546 
	$__�tdo�
 (
__�wv�
�{ 
__do_�
 = __�wv�; 
	}
}

547 
	$__de�r
 (�{ 
	`�h�ad_�t�n��y�
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__�n�l_ty�
); 
	}
}

549 
	$__���e
 (�cڡ { 
	`�h�ad_�t�n��y�
 (
__�n�l_ty�
, 0); 
	}
}

559 
	#�h�ad_��nup_push
(
rout�e
, 
�g
) \

561 
__�h�ad_��nup_�ass
 
	`__��ame
 (
rout�e
, 
�g
)

	)

565 
	#�h�ad_��nup_p�
(
execu�
) \

566 
__��ame
.
	`__�tdo�
 (
execu�
); \

567 } 0)

	)

569 #ifde�
__USE_GNU


573 
	#�h�ad_��nup_push_de�r_�
(
rout�e
, 
�g
) \

575 
__�h�ad_��nup_�ass
 
	`__��ame
 (
rout�e
, 
�g
); \

576 
__��ame
.
	`__de�r
 ()

	)

581 
	#�h�ad_��nup_p�_���e_�
(
execu�
) \

582 
__��ame
.
	`__���e
 (); \

583 
__��ame
.
	`__�tdo�
 (
execu�
); \

584 } 0)

	)

591 
__ex��_�l�e
 

592 
	$__�h�ad_��nup_rout�e
 (
__�h�ad_��nup_�ame
 *
__�ame
)

594 i�(
__�ame
->
__do_�
)

595 
__�ame
->
	`__�n�l_rout�e
 (__�ame->
__�n�l_�g
);

596 
	}
}

605 
	#�h�ad_��nup_push
(
rout�e
, 
�g
) \

607 
__�h�ad_��nup_�ame
 
__��ame
 \

608 
	`__��ibu�__
 ((
	`__��nup__
 (
__�h�ad_��nup_rout�e
))) \

609 �{ .
__�n�l_rout�e
 = (
rout�e
), .
__�n�l_�g
 = (
�g
), \

610 .
__do_�
 = 1 };

	)

614 
	#�h�ad_��nup_p�
(
execu�
) \

615 
__��ame
.
__do_�
 = (
execu�
); \

616 } 0)

	)

618 #ifde�
__USE_GNU


622 
	#�h�ad_��nup_push_de�r_�
(
rout�e
, 
�g
) \

624 
__�h�ad_��nup_�ame
 
__��ame
 \

625 
	`__��ibu�__
 ((
	`__��nup__
 (
__�h�ad_��nup_rout�e
))) \

626 �{ .
__�n�l_rout�e
 = (
rout�e
), .
__�n�l_�g
 = (
�g
), \

627 .
__do_�
 = 1 }; \

628 (�
	`�h�ad_�t�n��y�
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__��ame
.
__�n�l_ty�
)

	)

634 
	#�h�ad_��nup_p�_���e_�
(
execu�
) \

635 (�
	`�h�ad_�t�n��y�
 (
__��ame
.
__�n�l_ty�
, 
NULL
); \

636 
__��ame
.
__do_�
 = (
execu�
); \

637 } 0)

	)

648 
	#�h�ad_��nup_push
(
rout�e
, 
�g
) \

650 
__�h�ad_unw�d_buf_t
 
__�n�l_buf
; \

651 (*
__�n�l_rout�e
�(*��(
rout�e
); \

652 *
__�n�l_�g
 = (
�g
); \

653 
__n�_f��_��
 = 
	`__sig�tjmp
 ((
__jmp_buf_�g
 *) (*) \

654 
__�n�l_buf
.
__�n�l_jmp_buf
, 0); \

655 i�(
	`__bu�t�_ex��
 (
__n�_f��_��
, 0)) \

657 
	`__�n�l_rout�e
 (
__�n�l_�g
); \

658 
	`__�h�ad_unw�d_�xt
 (&
__�n�l_buf
); \

662 
	`__�h�ad_�gi��_�n�l
 (&
__�n�l_buf
); \

663 d�{

	)

664 
__�h�ad_�gi��_�n�l
 (
__�h�ad_unw�d_buf_t
 *
__buf
)

665 
__��nup_f�_��ibu�
;

669 
	#�h�ad_��nup_p�
(
execu�
) \

672 
	`__�h�ad_u�egi��_�n�l
 (&
__�n�l_buf
); \

673 i�(
execu�
) \

674 
	`__�n�l_rout�e
 (
__�n�l_�g
); \

675 } 0)

	)

676 
	$__�h�ad_u�egi��_�n�l
 (
__�h�ad_unw�d_buf_t
 *
__buf
)

677 
__��nup_f�_��ibu�
;

679 #ifde�
__USE_GNU


683 
	#�h�ad_��nup_push_de�r_�
(
rout�e
, 
�g
) \

685 
__�h�ad_unw�d_buf_t
 
__�n�l_buf
; \

686 (*
__�n�l_rout�e
�(*��(
rout�e
); \

687 *
__�n�l_�g
 = (
�g
); \

688 
__n�_f��_��
 = 
	`__sig�tjmp
 ((
__jmp_buf_�g
 *) (*) \

689 
__�n�l_buf
.
__�n�l_jmp_buf
, 0); \

690 i�(
	`__bu�t�_ex��
 (
__n�_f��_��
, 0)) \

692 
	`__�n�l_rout�e
 (
__�n�l_�g
); \

693 
	`__�h�ad_unw�d_�xt
 (&
__�n�l_buf
); \

697 
	`__�h�ad_�gi��_�n�l_de�r
 (&
__�n�l_buf
); \

698 d�{

	)

699 
	`__�h�ad_�gi��_�n�l_de�r
 (
__�h�ad_unw�d_buf_t
 *
__buf
)

700 
__��nup_f�_��ibu�
;

705 
	#�h�ad_��nup_p�_���e_�
(
execu�
) \

708 
	`__�h�ad_u�egi��_�n�l_���e
 (&
__�n�l_buf
); \

709 i�(
execu�
) \

710 
	`__�n�l_rout�e
 (
__�n�l_�g
); \

711 
	}
} 0)

	)

712 
	$__�h�ad_u�egi��_�n�l_���e
 (
__�h�ad_unw�d_buf_t
 *
__buf
)

713 
__��nup_f�_��ibu�
;

717 
	$__�h�ad_unw�d_�xt
 (
__�h�ad_unw�d_buf_t
 *
__buf
)

718 
__��nup_f�_��ibu�
 
	`__��ibu�__
 ((
__nܑu�__
))

719 #i�de�
SHARED


720 
	`__��ibu�__
 ((
__w�k__
))

726 
__jmp_buf_�g
;

727 
	$__sig�tjmp
 (
__jmp_buf_�g
 *
__�v
, 
__�vemask
�
__THROW
;

733 
	$�h�ad_mu�x_��
 (
�h�ad_mu�x_t
 *
__mu�x
,

734 
__cڡ
 
�h�ad_mu�x��_t
 *
__mu�x��
)

735 
__THROW
 
	`__n�nu�
 ((1));

738 
	$�h�ad_mu�x_de�roy
 (
�h�ad_mu�x_t
 *
__mu�x
)

739 
__THROW
 
	`__n�nu�
 ((1));

742 
	$�h�ad_mu�x_�ylock
 (
�h�ad_mu�x_t
 *
__mu�x
)

743 
__THROW
 
	`__n�nu�
 ((1));

746 
	$�h�ad_mu�x_lock
 (
�h�ad_mu�x_t
 *
__mu�x
)

747 
__THROW
 
	`__n�nu�
 ((1));

749 #ifde�
__USE_XOPEN2K


751 
	$�h�ad_mu�x_timedlock
 (
�h�ad_mu�x_t
 *
__��ri�
 
__mu�x
,

752 
__cڡ
 
time�ec
 *
__��ri�


753 
__ab�ime
�
__THROW
 
	`__n�nu�
 ((1, 2));

757 
	$�h�ad_mu�x_u�ock
 (
�h�ad_mu�x_t
 *
__mu�x
)

758 
__THROW
 
	`__n�nu�
 ((1));

762 
	$�h�ad_mu�x_g��io�g
 (
__cڡ
 
�h�ad_mu�x_t
 *

763 
__��ri�
 
__mu�x
,

764 *
__��ri�
 
__�io�g
)

765 
__THROW
 
	`__n�nu�
 ((1, 2));

769 
	$�h�ad_mu�x_��rio�g
 (
�h�ad_mu�x_t
 *
__��ri�
 
__mu�x
,

770 
__�io�g
,

771 *
__��ri�
 
__�d_�g
)

772 
__THROW
 
	`__n�nu�
 ((1, 3));

775 #ifde�
__USE_XOPEN2K8


777 
	$�h�ad_mu�x_c�si��t
 (
�h�ad_mu�x_t
 *
__mu�x
)

778 
__THROW
 
	`__n�nu�
 ((1));

779 #ifde�
__USE_GNU


780 
	$�h�ad_mu�x_c�si��t_�
 (
�h�ad_mu�x_t
 *
__mu�x
)

781 
__THROW
 
	`__n�nu�
 ((1));

790 
	$�h�ad_mu�x��_��
 (
�h�ad_mu�x��_t
 *
__��
)

791 
__THROW
 
	`__n�nu�
 ((1));

794 
	$�h�ad_mu�x��_de�roy
 (
�h�ad_mu�x��_t
 *
__��
)

795 
__THROW
 
	`__n�nu�
 ((1));

798 
	$�h�ad_mu�x��_g�psh�ed
 (
__cڡ
 
�h�ad_mu�x��_t
 *

799 
__��ri�
 
__��
,

800 *
__��ri�
 
__psh�ed
)

801 
__THROW
 
	`__n�nu�
 ((1, 2));

804 
	$�h�ad_mu�x��_��sh�ed
 (
�h�ad_mu�x��_t
 *
__��
,

805 
__psh�ed
)

806 
__THROW
 
	`__n�nu�
 ((1));

808 #i�
def�ed
 
__USE_UNIX98
 || def�ed 
__USE_XOPEN2K8


810 
	$�h�ad_mu�x��_g�ty�
 (
__cڡ
 
�h�ad_mu�x��_t
 *
__��ri�


811 
__��
, *
__��ri�
 
__k�d
)

812 
__THROW
 
	`__n�nu�
 ((1, 2));

817 
	$�h�ad_mu�x��_��y�
 (
�h�ad_mu�x��_t
 *
__��
, 
__k�d
)

818 
__THROW
 
	`__n�nu�
 ((1));

822 
	$�h�ad_mu�x��_g���oc�
 (
__cڡ
 
�h�ad_mu�x��_t
 *

823 
__��ri�
 
__��
,

824 *
__��ri�
 
__��oc�
)

825 
__THROW
 
	`__n�nu�
 ((1, 2));

829 
	$�h�ad_mu�x��_��r�oc�
 (
�h�ad_mu�x��_t
 *
__��
,

830 
__��oc�
)

831 
__THROW
 
	`__n�nu�
 ((1));

834 
	$�h�ad_mu�x��_g��io�g
 (
__cڡ
 
�h�ad_mu�x��_t
 *

835 
__��ri�
 
__��
,

836 *
__��ri�
 
__�io�g
)

837 
__THROW
 
	`__n�nu�
 ((1, 2));

840 
	$�h�ad_mu�x��_��rio�g
 (
�h�ad_mu�x��_t
 *
__��
,

841 
__�io�g
)

842 
__THROW
 
	`__n�nu�
 ((1));

844 #ifde�
__USE_XOPEN2K


846 
	$�h�ad_mu�x��_g�robu�
 (
__cڡ
 
�h�ad_mu�x��_t
 *
__��
,

847 *
__robu��ss
)

848 
__THROW
 
	`__n�nu�
 ((1, 2));

849 #ifde�
__USE_GNU


850 
	$�h�ad_mu�x��_g�robu�_�
 (
__cڡ
 
�h�ad_mu�x��_t
 *
__��
,

851 *
__robu��ss
)

852 
__THROW
 
	`__n�nu�
 ((1, 2));

856 
	$�h�ad_mu�x��_��obu�
 (
�h�ad_mu�x��_t
 *
__��
,

857 
__robu��ss
)

858 
__THROW
 
	`__n�nu�
 ((1));

859 #ifde�
__USE_GNU


860 
	$�h�ad_mu�x��_��obu�_�
 (
�h�ad_mu�x��_t
 *
__��
,

861 
__robu��ss
)

862 
__THROW
 
	`__n�nu�
 ((1));

867 #i�
def�ed
 
__USE_UNIX98
 || def�ed 
__USE_XOPEN2K


872 
	$�h�ad_rwlock_��
 (
�h�ad_rwlock_t
 *
__��ri�
 
__rwlock
,

873 
__cڡ
 
�h�ad_rwlock��_t
 *
__��ri�


874 
__��
�
__THROW
 
	`__n�nu�
 ((1));

877 
	$�h�ad_rwlock_de�roy
 (
�h�ad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n�nu�
 ((1));

881 
	$�h�ad_rwlock_rdlock
 (
�h�ad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n�nu�
 ((1));

885 
	$�h�ad_rwlock_�yrdlock
 (
�h�ad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n�nu�
 ((1));

888 #ifde�
__USE_XOPEN2K


890 
	$�h�ad_rwlock_timedrdlock
 (
�h�ad_rwlock_t
 *
__��ri�
 
__rwlock
,

891 
__cڡ
 
time�ec
 *
__��ri�


892 
__ab�ime
�
__THROW
 
	`__n�nu�
 ((1, 2));

896 
	$�h�ad_rwlock_w�ock
 (
�h�ad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n�nu�
 ((1));

900 
	$�h�ad_rwlock_�yw�ock
 (
�h�ad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n�nu�
 ((1));

903 #ifde�
__USE_XOPEN2K


905 
	$�h�ad_rwlock_timedw�ock
 (
�h�ad_rwlock_t
 *
__��ri�
 
__rwlock
,

906 
__cڡ
 
time�ec
 *
__��ri�


907 
__ab�ime
�
__THROW
 
	`__n�nu�
 ((1, 2));

911 
	$�h�ad_rwlock_u�ock
 (
�h�ad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n�nu�
 ((1));

918 
	$�h�ad_rwlock��_��
 (
�h�ad_rwlock��_t
 *
__��
)

919 
__THROW
 
	`__n�nu�
 ((1));

922 
	$�h�ad_rwlock��_de�roy
 (
�h�ad_rwlock��_t
 *
__��
)

923 
__THROW
 
	`__n�nu�
 ((1));

926 
	$�h�ad_rwlock��_g�psh�ed
 (
__cڡ
 
�h�ad_rwlock��_t
 *

927 
__��ri�
 
__��
,

928 *
__��ri�
 
__psh�ed
)

929 
__THROW
 
	`__n�nu�
 ((1, 2));

932 
	$�h�ad_rwlock��_��sh�ed
 (
�h�ad_rwlock��_t
 *
__��
,

933 
__psh�ed
)

934 
__THROW
 
	`__n�nu�
 ((1));

937 
	$�h�ad_rwlock��_g�k�d_�
 (
__cڡ
 
�h�ad_rwlock��_t
 *

938 
__��ri�
 
__��
,

939 *
__��ri�
 
__�ef
)

940 
__THROW
 
	`__n�nu�
 ((1, 2));

943 
	$�h�ad_rwlock��_�tk�d_�
 (
�h�ad_rwlock��_t
 *
__��
,

944 
__�ef
�
__THROW
 
	`__n�nu�
 ((1));

952 
	$�h�ad_c�d_��
 (
�h�ad_c�d_t
 *
__��ri�
 
__c�d
,

953 
__cڡ
 
�h�ad_c�d��_t
 *
__��ri�


954 
__c�d_��
�
__THROW
 
	`__n�nu�
 ((1));

957 
	$�h�ad_c�d_de�roy
 (
�h�ad_c�d_t
 *
__c�d
)

958 
__THROW
 
	`__n�nu�
 ((1));

961 
	$�h�ad_c�d_sig�l
 (
�h�ad_c�d_t
 *
__c�d
)

962 
__THROW
 
	`__n�nu�
 ((1));

965 
	$�h�ad_c�d_br�d��
 (
�h�ad_c�d_t
 *
__c�d
)

966 
__THROW
 
	`__n�nu�
 ((1));

973 
	$�h�ad_c�d_wa�
 (
�h�ad_c�d_t
 *
__��ri�
 
__c�d
,

974 
�h�ad_mu�x_t
 *
__��ri�
 
__mu�x
)

975 
	`__n�nu�
 ((1, 2));

984 
	$�h�ad_c�d_timedwa�
 (
�h�ad_c�d_t
 *
__��ri�
 
__c�d
,

985 
�h�ad_mu�x_t
 *
__��ri�
 
__mu�x
,

986 
__cڡ
 
time�ec
 *
__��ri�


987 
__ab�ime
�
	`__n�nu�
 ((1, 2, 3));

992 
	$�h�ad_c�d��_��
 (
�h�ad_c�d��_t
 *
__��
)

993 
__THROW
 
	`__n�nu�
 ((1));

996 
	$�h�ad_c�d��_de�roy
 (
�h�ad_c�d��_t
 *
__��
)

997 
__THROW
 
	`__n�nu�
 ((1));

1000 
	$�h�ad_c�d��_g�psh�ed
 (
__cڡ
 
�h�ad_c�d��_t
 *

1001 
__��ri�
 
__��
,

1002 *
__��ri�
 
__psh�ed
)

1003 
__THROW
 
	`__n�nu�
 ((1, 2));

1006 
	$�h�ad_c�d��_��sh�ed
 (
�h�ad_c�d��_t
 *
__��
,

1007 
__psh�ed
�
__THROW
 
	`__n�nu�
 ((1));

1009 #ifde�
__USE_XOPEN2K


1011 
	$�h�ad_c�d��_g��ock
 (
__cڡ
 
�h�ad_c�d��_t
 *

1012 
__��ri�
 
__��
,

1013 
__�ockid_t
 *
__��ri�
 
__�ock_id
)

1014 
__THROW
 
	`__n�nu�
 ((1, 2));

1017 
	$�h�ad_c�d��_�t�ock
 (
�h�ad_c�d��_t
 *
__��
,

1018 
__�ockid_t
 
__�ock_id
)

1019 
__THROW
 
	`__n�nu�
 ((1));

1023 #ifde�
__USE_XOPEN2K


1028 
	$�h�ad_��_��
 (
�h�ad_��lock_t
 *
__lock
, 
__psh�ed
)

1029 
__THROW
 
	`__n�nu�
 ((1));

1032 
	$�h�ad_��_de�roy
 (
�h�ad_��lock_t
 *
__lock
)

1033 
__THROW
 
	`__n�nu�
 ((1));

1036 
	$�h�ad_��_lock
 (
�h�ad_��lock_t
 *
__lock
)

1037 
__THROW
 
	`__n�nu�
 ((1));

1040 
	$�h�ad_��_�ylock
 (
�h�ad_��lock_t
 *
__lock
)

1041 
__THROW
 
	`__n�nu�
 ((1));

1044 
	$�h�ad_��_u�ock
 (
�h�ad_��lock_t
 *
__lock
)

1045 
__THROW
 
	`__n�nu�
 ((1));

1052 
	$�h�ad_b�r�r_��
 (
�h�ad_b�r�r_t
 *
__��ri�
 
__b�r�r
,

1053 
__cڡ
 
�h�ad_b�r���r_t
 *
__��ri�


1054 
__��
, 
__cou�
)

1055 
__THROW
 
	`__n�nu�
 ((1));

1058 
	$�h�ad_b�r�r_de�roy
 (
�h�ad_b�r�r_t
 *
__b�r�r
)

1059 
__THROW
 
	`__n�nu�
 ((1));

1062 
	$�h�ad_b�r�r_wa�
 (
�h�ad_b�r�r_t
 *
__b�r�r
)

1063 
__THROW
 
	`__n�nu�
 ((1));

1067 
	$�h�ad_b�r���r_��
 (
�h�ad_b�r���r_t
 *
__��
)

1068 
__THROW
 
	`__n�nu�
 ((1));

1071 
	$�h�ad_b�r���r_de�roy
 (
�h�ad_b�r���r_t
 *
__��
)

1072 
__THROW
 
	`__n�nu�
 ((1));

1075 
	$�h�ad_b�r���r_g�psh�ed
 (
__cڡ
 
�h�ad_b�r���r_t
 *

1076 
__��ri�
 
__��
,

1077 *
__��ri�
 
__psh�ed
)

1078 
__THROW
 
	`__n�nu�
 ((1, 2));

1081 
	$�h�ad_b�r���r_��sh�ed
 (
�h�ad_b�r���r_t
 *
__��
,

1082 
__psh�ed
)

1083 
__THROW
 
	`__n�nu�
 ((1));

1095 
	`�h�ad_key_�
 (
�h�ad_key_t
 *
__key
,

1096 (*
__de�r_fun�i�
) (*))

1097 
__THROW
 
	`__n�nu�
 ((1));

1100 
	$�h�ad_key_d��e
 (
�h�ad_key_t
 
__key
�
__THROW
;

1103 *
	$�h�ad_g��ecific
 (
�h�ad_key_t
 
__key
�
__THROW
;

1106 
	$�h�ad_�t�ecific
 (
�h�ad_key_t
 
__key
,

1107 
__cڡ
 *
__po��r
�
__THROW
 ;

1110 #ifde�
__USE_XOPEN2K


1112 
	$�h�ad_g��u�ockid
 (
�h�ad_t
 
__th�ad_id
,

1113 
__�ockid_t
 *
__�ock_id
)

1114 
__THROW
 
	`__n�nu�
 ((2));

1129 
	`�h�ad_�f�k
 ((*
__���e
) (),

1130 (*
__���
) (),

1131 (*
__ch�d
�()�
__THROW
;

1134 #ifde�
__USE_EXTERN_INLINES


1136 
__ex��_�l�e
 

1137 
	`__NTH
 (
	$�h�ad_equ�
 (
�h�ad_t
 
__th�ad1
,�th�ad_�
__th�ad2
))

1139  
__th�ad1
 =�
__th�ad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/wctype.h

24 #i�de�
_WCTYPE_H


26 
	~<�u�s.h
>

27 
	~<b�s/ty�s.h
>

29 #i�de�
__�ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__�ed_w�t_t


	)

34 
	~<wch�.h
>

38 #i�de�
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde�
__�ed_iswxxx


47 #i�de�
__iswxxx_def�ed


48 
	#__iswxxx_def�ed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw�y�_t
;

54 
	g__END_NAMESPACE_C99


56 #i�de�
_ISwb�


61 
	~<�d�n.h
>

62 #i�
__BYTE_ORDER
 =�
__BIG_ENDIAN


63 
	#_ISwb�
(
b�
�(1 << (b�))

	)

65 
	#_ISwb�
(
b�
) \

66 ((
b�
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
b�
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
b�
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (�((1UL << (
b�
)�>> 24))))

	)

74 
	m__ISwu��
 = 0,

75 
	m__ISwlow�
 = 1,

76 
	m__ISw�pha
 = 2,

77 
	m__ISwdig�
 = 3,

78 
	m__ISwxdig�
 = 4,

79 
	m__ISw�a�
 = 5,

80 
	m__ISw��t
 = 6,

81 
	m__ISwg�ph
 = 7,

82 
	m__ISwb�nk
 = 8,

83 
	m__ISw�l
 = 9,

84 
	m__ISwpun�
 = 10,

85 
	m__ISw�num
 = 11,

87 
	m_ISwu��
 = 
_ISwb�
 (
__ISwu��
),

88 
	m_ISwlow�
 = 
_ISwb�
 (
__ISwlow�
),

89 
	m_ISw�pha
 = 
_ISwb�
 (
__ISw�pha
),

90 
	m_ISwdig�
 = 
_ISwb�
 (
__ISwdig�
),

91 
	m_ISwxdig�
 = 
_ISwb�
 (
__ISwxdig�
),

92 
	m_ISw�a�
 = 
_ISwb�
 (
__ISw�a�
),

93 
	m_ISw��t
 = 
_ISwb�
 (
__ISw��t
),

94 
	m_ISwg�ph
 = 
_ISwb�
 (
__ISwg�ph
),

95 
	m_ISwb�nk
 = 
_ISwb�
 (
__ISwb�nk
),

96 
	m_ISw�l
 = 
_ISwb�
 (
__ISw�l
),

97 
	m_ISwpun�
 = 
_ISwb�
 (
__ISwpun�
),

98 
	m_ISw�num
 = 
_ISwb�
 (
__ISw�num
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$isw�num
 (
w�t_t
 
__wc
�
__THROW
;

118 
	$isw�pha
 (
w�t_t
 
__wc
�
__THROW
;

121 
	$isw�l
 (
w�t_t
 
__wc
�
__THROW
;

125 
	$iswdig�
 (
w�t_t
 
__wc
�
__THROW
;

129 
	$iswg�ph
 (
w�t_t
 
__wc
�
__THROW
;

134 
	$iswlow�
 (
w�t_t
 
__wc
�
__THROW
;

137 
	$isw��t
 (
w�t_t
 
__wc
�
__THROW
;

142 
	$iswpun�
 (
w�t_t
 
__wc
�
__THROW
;

147 
	$isw�a�
 (
w�t_t
 
__wc
�
__THROW
;

152 
	$iswu��
 (
w�t_t
 
__wc
�
__THROW
;

157 
	$iswxdig�
 (
w�t_t
 
__wc
�
__THROW
;

162 #ifde�
__USE_ISOC99


163 
	$iswb�nk
 (
w�t_t
 
__wc
�
__THROW
;

172 
w�y�_t
 
	$w�y�
 (
__cڡ
 *
__�ݔty
�
__THROW
;

176 
	$isw�y�
 (
w�t_t
 
__wc
, 
w�y�_t
 
__desc
�
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__cڡ
 
	t__�t32_t
 *
	tw�ns_t
;

188 
__END_NAMESPACE_C99


189 #ifde�
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w�ns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
w�t_t
 
	$towlow�
 (
w�t_t
 
__wc
�
__THROW
;

198 
w�t_t
 
	$towu��
 (
w�t_t
 
__wc
�
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde�
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w�ns_t
 
	$w�ns
 (
__cڡ
 *
__�ݔty
�
__THROW
;

222 
w�t_t
 
	$tow�ns
 (
w�t_t
 
__wc
, 
w�ns_t
 
__desc
�
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde�
__USE_XOPEN2K8


227 
	~<xlo��.h
>

231 
	$isw�num_l
 (
w�t_t
 
__wc
, 
__lo��_t
 
__lo��
�
__THROW
;

237 
	$isw�pha_l
 (
w�t_t
 
__wc
, 
__lo��_t
 
__lo��
�
__THROW
;

240 
	$isw�l_l
 (
w�t_t
 
__wc
, 
__lo��_t
 
__lo��
�
__THROW
;

244 
	$iswdig�_l
 (
w�t_t
 
__wc
, 
__lo��_t
 
__lo��
�
__THROW
;

248 
	$iswg�ph_l
 (
w�t_t
 
__wc
, 
__lo��_t
 
__lo��
�
__THROW
;

253 
	$iswlow�_l
 (
w�t_t
 
__wc
, 
__lo��_t
 
__lo��
�
__THROW
;

256 
	$isw��t_l
 (
w�t_t
 
__wc
, 
__lo��_t
 
__lo��
�
__THROW
;

261 
	$iswpun�_l
 (
w�t_t
 
__wc
, 
__lo��_t
 
__lo��
�
__THROW
;

266 
	$isw�a�_l
 (
w�t_t
 
__wc
, 
__lo��_t
 
__lo��
�
__THROW
;

271 
	$iswu��_l
 (
w�t_t
 
__wc
, 
__lo��_t
 
__lo��
�
__THROW
;

276 
	$iswxdig�_l
 (
w�t_t
 
__wc
, 
__lo��_t
 
__lo��
�
__THROW
;

281 
	$iswb�nk_l
 (
w�t_t
 
__wc
, 
__lo��_t
 
__lo��
�
__THROW
;

285 
w�y�_t
 
	$w�y�_l
 (
__cڡ
 *
__�ݔty
, 
__lo��_t
 
__lo��
)

286 
__THROW
;

290 
	$isw�y�_l
 (
w�t_t
 
__wc
, 
w�y�_t
 
__desc
, 
__lo��_t
 
__lo��
)

291 
__THROW
;

299 
w�t_t
 
	$towlow�_l
 (
w�t_t
 
__wc
, 
__lo��_t
 
__lo��
�
__THROW
;

302 
w�t_t
 
	$towu��_l
 (
w�t_t
 
__wc
, 
__lo��_t
 
__lo��
�
__THROW
;

306 
w�ns_t
 
	$w�ns_l
 (
__cڡ
 *
__�ݔty
, 
__lo��_t
 
__lo��
)

307 
__THROW
;

310 
w�t_t
 
	$tow�ns_l
 (
w�t_t
 
__wc
, 
w�ns_t
 
__desc
,

311 
__lo��_t
 
__lo��
�
__THROW
;

315 
__END_DECLS


	@/usr/include/bits/errno.h

20 #ifde�
_ERRNO_H


22 #unde�
EDOM


23 #unde�
EILSEQ


24 #unde�
ERANGE


25 
	~<l�ux/��o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i�de�
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i�de�
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i�de�
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i�de�
__ASSEMBLER__


47 *
	$__��o_lo�ti�
 (�
__THROW
 
	`__��ibu�__
 ((
__cڡ__
));

49 #i�!
def�ed
 
_LIBC
 || def�ed 
_LIBC_REENTRANT


51 
	#��o
 (*
	`__��o_lo�ti�
 ())

	)

56 #i�!
def�ed
 
_ERRNO_H
 && def�ed 
__�ed_Em�h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/setjmp.h

20 #i�de�
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i�!
def�ed
 
_SETJMP_H
 && !def�ed 
_PTHREAD_H


27 
	~<b�s/w�dsize.h
>

29 #i�de�
_ASM


31 #i�
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/sched.h

21 #i�def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<�u�s.h
>

27 
	~<b�s/ty�s.h
>

29 
	#__�ed_size_t


	)

30 
	~<�ddef.h
>

32 
	#__�ed_time_t


	)

33 
	#__�ed_time�ec


	)

34 
	~<time.h
>

36 #i�de�
__pid_t_def�ed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_def�ed


	)

43 
	~<b�s/sched.h
>

45 
	#sched_�iܙy
 
__sched_�iܙy


	)

48 
__BEGIN_DECLS


51 
	$sched_���am
 (
__pid_t
 
__pid
, 
__cڡ
 
sched_��m
 *
__��m
)

52 
__THROW
;

55 
	$sched_g���m
 (
__pid_t
 
__pid
, 
sched_��m
 *
__��m
�
__THROW
;

58 
	$sched_�tschedu�r
 (
__pid_t
 
__pid
, 
__p�icy
,

59 
__cڡ
 
sched_��m
 *
__��m
�
__THROW
;

62 
	$sched_g�schedu�r
 (
__pid_t
 
__pid
�
__THROW
;

65 
	$sched_y�ld
 (�
__THROW
;

68 
	$sched_g�_�iܙy_max
 (
__�gܙhm
�
__THROW
;

71 
	$sched_g�_�iܙy_m�
 (
__�gܙhm
�
__THROW
;

74 
	$sched_�_g�_��rv�
 (
__pid_t
 
__pid
, 
time�ec
 *
__t
�
__THROW
;

77 #ifde�
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
�u
, 
�u��
�
	`__CPU_SET_S
 (�u,  (
�u_�t_t
), cpu��)

	)

81 
	#CPU_CLR
(
�u
, 
�u��
�
	`__CPU_CLR_S
 (�u,  (
�u_�t_t
), cpu��)

	)

82 
	#CPU_ISSET
(
�u
, 
�u��
�
	`__CPU_ISSET_S
 (�u,  (
�u_�t_t
), \

83 
�u��
)

	)

84 
	#CPU_ZERO
(
�u��
�
	`__CPU_ZERO_S
 ( (
�u_�t_t
), cpu��)

	)

85 
	#CPU_COUNT
(
�u��
�
	`__CPU_COUNT_S
 ( (
�u_�t_t
), cpu��)

	)

87 
	#CPU_SET_S
(
�u
, 
�tsize
, 
�u��
�
	`__CPU_SET_S
 (�u, s�size, cpu��)

	)

88 
	#CPU_CLR_S
(
�u
, 
�tsize
, 
�u��
�
	`__CPU_CLR_S
 (�u, s�size, cpu��)

	)

89 
	#CPU_ISSET_S
(
�u
, 
�tsize
, 
�u��
�
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
�u��
)

	)

91 
	#CPU_ZERO_S
(
�tsize
, 
�u��
�
	`__CPU_ZERO_S
 (�tsize, cpu��)

	)

92 
	#CPU_COUNT_S
(
�tsize
, 
�u��
�
	`__CPU_COUNT_S
 (�tsize, cpu��)

	)

94 
	#CPU_EQUAL
(
�u��1
, 
�u��2
) \

95 
	`__CPU_EQUAL_S
 ( (
�u_�t_t
), 
�u��1
, 
�u��2
)

	)

96 
	#CPU_EQUAL_S
(
�tsize
, 
�u��1
, 
�u��2
) \

97 
	`__CPU_EQUAL_S
 (
�tsize
, 
�u��1
, 
�u��2
)

	)

99 
	#CPU_AND
(
de��t
, 
�c�t1
, 
�c�t2
) \

100 
	`__CPU_OP_S
 ( (
�u_�t_t
), 
de��t
, 
�c�t1
, 
�c�t2
, &)

	)

101 
	#CPU_OR
(
de��t
, 
�c�t1
, 
�c�t2
) \

102 
	`__CPU_OP_S
 ( (
�u_�t_t
), 
de��t
, 
�c�t1
, 
�c�t2
, |)

	)

103 
	#CPU_XOR
(
de��t
, 
�c�t1
, 
�c�t2
) \

104 
	`__CPU_OP_S
 ( (
�u_�t_t
), 
de��t
, 
�c�t1
, 
�c�t2
, ^)

	)

105 
	#CPU_AND_S
(
�tsize
, 
de��t
, 
�c�t1
, 
�c�t2
) \

106 
	`__CPU_OP_S
 (
�tsize
, 
de��t
, 
�c�t1
, 
�c�t2
, &)

	)

107 
	#CPU_OR_S
(
�tsize
, 
de��t
, 
�c�t1
, 
�c�t2
) \

108 
	`__CPU_OP_S
 (
�tsize
, 
de��t
, 
�c�t1
, 
�c�t2
, |)

	)

109 
	#CPU_XOR_S
(
�tsize
, 
de��t
, 
�c�t1
, 
�c�t2
) \

110 
	`__CPU_OP_S
 (
�tsize
, 
de��t
, 
�c�t1
, 
�c�t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou�
�
	`__CPU_ALLOC_SIZE
 (cou�)

	)

113 
	#CPU_ALLOC
(
cou�
�
	`__CPU_ALLOC
 (cou�)

	)

114 
	#CPU_FREE
(
�u�t
�
	`__CPU_FREE
 (�u�t)

	)

118 
	$sched_��ff��y
 (
__pid_t
 
__pid
, 
size_t
 
__�u�tsize
,

119 
__cڡ
 
�u_�t_t
 *
__�u�t
�
__THROW
;

122 
	$sched_g�aff��y
 (
__pid_t
 
__pid
, 
size_t
 
__�u�tsize
,

123 
�u_�t_t
 *
__�u�t
�
__THROW
;

126 
__END_DECLS


	@/usr/include/bits/sched.h

22 #i�de�
__�ed_sched��m


24 #i�de�
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde�
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde�
__USE_MISC


42 
	#CSIGNAL
 0x000000f�

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_��m


76 
	m__sched_�iܙy
;

79 
	g__BEGIN_DECLS


81 #ifde�
__USE_MISC


83 
��e
 ((*
__�
�(*
__�g
), *
__ch�d_�ack
,

84 
__�ags
, *
__�g
, ...�
__THROW
;

87 
	$unsh�e
 (
__�ags
�
__THROW
;

90 
	$sched_g��u
 (�
__THROW
;

93 
__END_DECLS


97 #i�!
def�ed
 
__def�ed_sched��m
 \

98 && (
def�ed
 
__�ed_sched��m
 || def�ed 
_SCHED_H
)

99 
	#__def�ed_sched��m
 1

	)

101 
	s__sched_��m


103 
__sched_�iܙy
;

105 #unde�
__�ed_sched��m


109 #i�
def�ed
 
_SCHED_H
 && !def�ed 
__�u_�t_t_def�ed


110 
	#__�u_�t_t_def�ed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__�u_mask
))

	)

116 
	t__�u_mask
;

119 
	#__CPUELT
(
�u
�((�u�/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
�u
�((
__�u_mask
�1 << ((�u�% 
__NCPUBITS
))

	)

125 
__�u_mask
 
__b�s
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t�u_�t_t
;

129 #i�
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
�tsize
, 
�u��
) \

131 d�
	`__bu�t�_mem�t
 (
�u��
, '\0', 
�tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
�tsize
, 
�u��
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
�tsize
�/  (
__�u_mask
); \

137 
__�u_mask
 *
__b�s
 = (
�u��
)->__bits; \

138 
__i
 = 0; __�< 
__imax
; ++__i) \

139 
__b�s
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
�u
, 
�tsize
, 
�u��
) \

143 (
__ex�nsi�__
 \

144 ({ 
size_t
 
__�u
 = (
�u
); \

145 
__�u
 < 8 * (
�tsize
) \

146 ? (((
__�u_mask
 *�((
�u��
)->
__b�s
))[
	`__CPUELT
 (
__�u
)] \

147 |�
	`__CPUMASK
 (
__�u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
�u
, 
�tsize
, 
�u��
) \

150 (
__ex�nsi�__
 \

151 ({ 
size_t
 
__�u
 = (
�u
); \

152 
__�u
 < 8 * (
�tsize
) \

153 ? (((
__�u_mask
 *�((
�u��
)->
__b�s
))[
	`__CPUELT
 (
__�u
)] \

154 &�~
	`__CPUMASK
 (
__�u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
�u
, 
�tsize
, 
�u��
) \

157 (
__ex�nsi�__
 \

158 ({ 
size_t
 
__�u
 = (
�u
); \

159 
__�u
 < 8 * (
�tsize
) \

160 ? ((((
__cڡ
 
__�u_mask
 *�((
�u��
)->
__b�s
))[
	`__CPUELT
 (
__�u
)] \

161 & 
	`__CPUMASK
 (
__�u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
�tsize
, 
�u��
) \

165 
	`__sched_�ucou�
 (
�tsize
, 
�u��
)

	)

167 #i�
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
�tsize
, 
�u��1
, 
�u��2
) \

169 (
	`__bu�t�_memcmp
 (
�u��1
, 
�u��2
, 
�tsize
�=�0)

	)

171 
	#__CPU_EQUAL_S
(
�tsize
, 
�u��1
, 
�u��2
) \

172 (
__ex�nsi�__
 \

173 ({ 
__cڡ
 
__�u_mask
 *
__�r1
 = (
�u��1
)->
__b�s
; \

174 
__cڡ
 
__�u_mask
 *
__�r2
 = (
�u��2
)->
__b�s
; \

175 
size_t
 
__imax
 = (
�tsize
�/  (
__�u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __�< 
__imax
; ++__i) \

178 i�(
__b�s
[
__i
] != __bits[__i]) \

180 
__i
 =�
__imax
; }))

	)

183 
	#__CPU_OP_S
(
�tsize
, 
de��t
, 
�c�t1
, 
�c�t2
, 
�
) \

184 (
__ex�nsi�__
 \

185 ({ 
�u_�t_t
 *
__de�
 = (
de��t
); \

186 
__cڡ
 
__�u_mask
 *
__�r1
 = (
�c�t1
)->
__b�s
; \

187 
__cڡ
 
__�u_mask
 *
__�r2
 = (
�c�t2
)->
__b�s
; \

188 
size_t
 
__imax
 = (
�tsize
�/  (
__�u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __�< 
__imax
; ++__i) \

191 ((
__�u_mask
 *�
__de�
->
__b�s
)[
__i
] = 
__�r1
[__i] 
�
 
__�r2
[__i]; \

192 
__de�
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou�
) \

195 ((((
cou�
�+ 
__NCPUBITS
 - 1�/ __NCPUBITS�*  (
__�u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou�
�
	`__sched_�u�loc
 (cou�)

	)

197 
	#__CPU_FREE
(
�u�t
�
	`__sched_�u�
 (�u�t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_�ucou�
 (
size_t
 
__�tsize
, cڡ 
�u_�t_t
 *
__��
)

202 
__THROW
;

203 
�u_�t_t
 *
	$__sched_�u�loc
 (
size_t
 
__cou�
�
__THROW
 
__wur
;

204 
	$__sched_�u�
 (
�u_�t_t
 *
__�t
�
__THROW
;

206 
__END_DECLS


	@/usr/include/linux/errno.h

1 #i�de�
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/��o.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-g��ic/��o.h
>

	@/usr/include/asm-generic/errno.h

1 #i�de�
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-g��ic/��o-ba�.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/errno-base.h

1 #i�de�
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
77
1946
alarmClockCkpt.c
alarmClockCkpt.h
alarmClockDef.c
alarmClockDef.h
alarmClockLog.h
clCompAppMain.c
clCompAppMain.h
clCompCfg.c
clCompCfg.h
/usr/include/assert.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/posix_opt.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/sys/select.h
/usr/include/sys/types.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/predefs.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/select.h
/usr/include/bits/sigset.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/sys/cdefs.h
/usr/include/sys/sysmacros.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/errno.h
/usr/include/gnu/option-groups.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/bits/errno.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/bits/sched.h
/usr/include/linux/errno.h
/usr/include/asm/errno.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/errno-base.h
