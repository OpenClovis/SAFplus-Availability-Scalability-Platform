// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: amfAppRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "amfAppRpc.pb.hxx"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SAFplus {
namespace Rpc {
namespace amfAppRpc {

namespace {

const ::google::protobuf::Descriptor* HeartbeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartbeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TerminateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TerminateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TerminateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TerminateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValuePairs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValuePairs_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkOperationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkOperationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkOperationResponseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkOperationResponseRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_amfAppRpc_2eproto() {
  protobuf_AddDesc_amfAppRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "amfAppRpc.proto");
  GOOGLE_CHECK(file != NULL);
  HeartbeatRequest_descriptor_ = file->message_type(0);
  static const int HeartbeatRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, count_),
  };
  HeartbeatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatRequest_descriptor_,
      HeartbeatRequest::default_instance_,
      HeartbeatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatRequest));
  HeartbeatResponse_descriptor_ = file->message_type(1);
  static const int HeartbeatResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, nextinterval_),
  };
  HeartbeatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatResponse_descriptor_,
      HeartbeatResponse::default_instance_,
      HeartbeatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatResponse));
  TerminateRequest_descriptor_ = file->message_type(2);
  static const int TerminateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminateRequest, invocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminateRequest, componentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminateRequest, componenthandle_),
  };
  TerminateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TerminateRequest_descriptor_,
      TerminateRequest::default_instance_,
      TerminateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminateRequest, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminateRequest, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TerminateRequest));
  TerminateResponse_descriptor_ = file->message_type(3);
  static const int TerminateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminateResponse, invocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminateResponse, result_),
  };
  TerminateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TerminateResponse_descriptor_,
      TerminateResponse::default_instance_,
      TerminateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminateResponse, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminateResponse, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TerminateResponse));
  KeyValuePairs_descriptor_ = file->message_type(4);
  static const int KeyValuePairs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePairs, thekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePairs, thevalue_),
  };
  KeyValuePairs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValuePairs_descriptor_,
      KeyValuePairs::default_instance_,
      KeyValuePairs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePairs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePairs, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePairs, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValuePairs));
  WorkOperationRequest_descriptor_ = file->message_type(5);
  static const int WorkOperationRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, invocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, componentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, componenthandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, keyvaluepairs_),
  };
  WorkOperationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkOperationRequest_descriptor_,
      WorkOperationRequest::default_instance_,
      WorkOperationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationRequest, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkOperationRequest));
  WorkOperationResponseRequest_descriptor_ = file->message_type(6);
  static const int WorkOperationResponseRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationResponseRequest, invocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationResponseRequest, result_),
  };
  WorkOperationResponseRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkOperationResponseRequest_descriptor_,
      WorkOperationResponseRequest::default_instance_,
      WorkOperationResponseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationResponseRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationResponseRequest, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOperationResponseRequest, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkOperationResponseRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_amfAppRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatRequest_descriptor_, &HeartbeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatResponse_descriptor_, &HeartbeatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TerminateRequest_descriptor_, &TerminateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TerminateResponse_descriptor_, &TerminateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValuePairs_descriptor_, &KeyValuePairs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkOperationRequest_descriptor_, &WorkOperationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkOperationResponseRequest_descriptor_, &WorkOperationResponseRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_amfAppRpc_2eproto() {
  delete HeartbeatRequest::default_instance_;
  delete HeartbeatRequest_reflection_;
  delete HeartbeatResponse::default_instance_;
  delete HeartbeatResponse_reflection_;
  delete TerminateRequest::default_instance_;
  delete TerminateRequest_reflection_;
  delete TerminateResponse::default_instance_;
  delete TerminateResponse_reflection_;
  delete KeyValuePairs::default_instance_;
  delete KeyValuePairs_reflection_;
  delete WorkOperationRequest::default_instance_;
  delete WorkOperationRequest_reflection_;
  delete WorkOperationResponseRequest::default_instance_;
  delete WorkOperationResponseRequest_reflection_;
}

void protobuf_AddDesc_amfAppRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SAFplus::Rpc::protobuf_AddDesc_SAFplusPBExt_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017amfAppRpc.proto\022\025SAFplus.Rpc.amfAppRpc"
    "\032\022SAFplusPBExt.proto\",\n\020HeartbeatRequest"
    "\022\r\n\005count\030\001 \001(\004*\t\010\350\007\020\200\200\200\200\002\"4\n\021HeartbeatR"
    "esponse\022\024\n\014nextInterval\030\001 \001(\007*\t\010\350\007\020\200\200\200\200\002"
    "\"a\n\020TerminateRequest\022\022\n\ninvocation\030\001 \001(\004"
    "\022\025\n\rcomponentName\030\002 \001(\t\022\027\n\017componentHand"
    "le\030\003 \001(\014*\t\010\350\007\020\200\200\200\200\002\"B\n\021TerminateResponse"
    "\022\022\n\ninvocation\030\001 \001(\004\022\016\n\006result\030\002 \001(\007*\t\010\350"
    "\007\020\200\200\200\200\002\"<\n\rKeyValuePairs\022\016\n\006theKey\030\001 \001(\t"
    "\022\020\n\010theValue\030\002 \001(\t*\t\010\350\007\020\200\200\200\200\002\"\305\001\n\024WorkOp"
    "erationRequest\022\022\n\ninvocation\030\001 \001(\004\022\025\n\rco"
    "mponentName\030\002 \001(\t\022\027\n\017componentHandle\030\003 \003"
    "(\014\022\021\n\toperation\030\004 \001(\007\022\016\n\006target\030\005 \001(\007\022;\n"
    "\rkeyValuePairs\030\006 \003(\0132$.SAFplus.Rpc.amfAp"
    "pRpc.KeyValuePairs*\t\010\350\007\020\200\200\200\200\002\"M\n\034WorkOpe"
    "rationResponseRequest\022\022\n\ninvocation\030\001 \001("
    "\004\022\016\n\006result\030\002 \001(\007*\t\010\350\007\020\200\200\200\200\0022\213\003\n\tamfAppR"
    "pc\022^\n\theartbeat\022\'.SAFplus.Rpc.amfAppRpc."
    "HeartbeatRequest\032(.SAFplus.Rpc.amfAppRpc"
    ".HeartbeatResponse\022^\n\tterminate\022\'.SAFplu"
    "s.Rpc.amfAppRpc.TerminateRequest\032(.SAFpl"
    "us.Rpc.amfAppRpc.TerminateResponse\022V\n\rwo"
    "rkOperation\022+.SAFplus.Rpc.amfAppRpc.Work"
    "OperationRequest\032\030.SAFplus.Rpc.NO_RESPON"
    "SE\022f\n\025workOperationResponse\0223.SAFplus.Rp"
    "c.amfAppRpc.WorkOperationResponseRequest"
    "\032\030.SAFplus.Rpc.NO_RESPONSEB\t\200\001\000\210\001\000\220\001\001", 1077);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "amfAppRpc.proto", &protobuf_RegisterTypes);
  HeartbeatRequest::default_instance_ = new HeartbeatRequest();
  HeartbeatResponse::default_instance_ = new HeartbeatResponse();
  TerminateRequest::default_instance_ = new TerminateRequest();
  TerminateResponse::default_instance_ = new TerminateResponse();
  KeyValuePairs::default_instance_ = new KeyValuePairs();
  WorkOperationRequest::default_instance_ = new WorkOperationRequest();
  WorkOperationResponseRequest::default_instance_ = new WorkOperationResponseRequest();
  HeartbeatRequest::default_instance_->InitAsDefaultInstance();
  HeartbeatResponse::default_instance_->InitAsDefaultInstance();
  TerminateRequest::default_instance_->InitAsDefaultInstance();
  TerminateResponse::default_instance_->InitAsDefaultInstance();
  KeyValuePairs::default_instance_->InitAsDefaultInstance();
  WorkOperationRequest::default_instance_->InitAsDefaultInstance();
  WorkOperationResponseRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_amfAppRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_amfAppRpc_2eproto {
  StaticDescriptorInitializer_amfAppRpc_2eproto() {
    protobuf_AddDesc_amfAppRpc_2eproto();
  }
} static_descriptor_initializer_amfAppRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HeartbeatRequest::kCountFieldNumber;
#endif  // !_MSC_VER

HeartbeatRequest::HeartbeatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.amfAppRpc.HeartbeatRequest)
}

void HeartbeatRequest::InitAsDefaultInstance() {
}

HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.amfAppRpc.HeartbeatRequest)
}

void HeartbeatRequest::SharedCtor() {
  _cached_size_ = 0;
  count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatRequest::~HeartbeatRequest() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.amfAppRpc.HeartbeatRequest)
  SharedDtor();
}

void HeartbeatRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatRequest_descriptor_;
}

const HeartbeatRequest& HeartbeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_amfAppRpc_2eproto();
  return *default_instance_;
}

HeartbeatRequest* HeartbeatRequest::default_instance_ = NULL;

HeartbeatRequest* HeartbeatRequest::New() const {
  return new HeartbeatRequest;
}

void HeartbeatRequest::Clear() {
  _extensions_.Clear();
  count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.amfAppRpc.HeartbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.amfAppRpc.HeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.amfAppRpc.HeartbeatRequest)
  return false;
#undef DO_
}

void HeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.amfAppRpc.HeartbeatRequest)
  // optional uint64 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->count(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.amfAppRpc.HeartbeatRequest)
}

::google::protobuf::uint8* HeartbeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.amfAppRpc.HeartbeatRequest)
  // optional uint64 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->count(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.amfAppRpc.HeartbeatRequest)
  return target;
}

int HeartbeatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatRequest::MergeFrom(const HeartbeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void HeartbeatRequest::Swap(HeartbeatRequest* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata HeartbeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatRequest_descriptor_;
  metadata.reflection = HeartbeatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartbeatResponse::kNextIntervalFieldNumber;
#endif  // !_MSC_VER

HeartbeatResponse::HeartbeatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.amfAppRpc.HeartbeatResponse)
}

void HeartbeatResponse::InitAsDefaultInstance() {
}

HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.amfAppRpc.HeartbeatResponse)
}

void HeartbeatResponse::SharedCtor() {
  _cached_size_ = 0;
  nextinterval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatResponse::~HeartbeatResponse() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.amfAppRpc.HeartbeatResponse)
  SharedDtor();
}

void HeartbeatResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatResponse_descriptor_;
}

const HeartbeatResponse& HeartbeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_amfAppRpc_2eproto();
  return *default_instance_;
}

HeartbeatResponse* HeartbeatResponse::default_instance_ = NULL;

HeartbeatResponse* HeartbeatResponse::New() const {
  return new HeartbeatResponse;
}

void HeartbeatResponse::Clear() {
  _extensions_.Clear();
  nextinterval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.amfAppRpc.HeartbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 nextInterval = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &nextinterval_)));
          set_has_nextinterval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.amfAppRpc.HeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.amfAppRpc.HeartbeatResponse)
  return false;
#undef DO_
}

void HeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.amfAppRpc.HeartbeatResponse)
  // optional fixed32 nextInterval = 1;
  if (has_nextinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->nextinterval(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.amfAppRpc.HeartbeatResponse)
}

::google::protobuf::uint8* HeartbeatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.amfAppRpc.HeartbeatResponse)
  // optional fixed32 nextInterval = 1;
  if (has_nextinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->nextinterval(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.amfAppRpc.HeartbeatResponse)
  return target;
}

int HeartbeatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 nextInterval = 1;
    if (has_nextinterval()) {
      total_size += 1 + 4;
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatResponse::MergeFrom(const HeartbeatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nextinterval()) {
      set_nextinterval(from.nextinterval());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void HeartbeatResponse::Swap(HeartbeatResponse* other) {
  if (other != this) {
    std::swap(nextinterval_, other->nextinterval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata HeartbeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatResponse_descriptor_;
  metadata.reflection = HeartbeatResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TerminateRequest::kInvocationFieldNumber;
const int TerminateRequest::kComponentNameFieldNumber;
const int TerminateRequest::kComponentHandleFieldNumber;
#endif  // !_MSC_VER

TerminateRequest::TerminateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.amfAppRpc.TerminateRequest)
}

void TerminateRequest::InitAsDefaultInstance() {
}

TerminateRequest::TerminateRequest(const TerminateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.amfAppRpc.TerminateRequest)
}

void TerminateRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invocation_ = GOOGLE_ULONGLONG(0);
  componentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  componenthandle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TerminateRequest::~TerminateRequest() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.amfAppRpc.TerminateRequest)
  SharedDtor();
}

void TerminateRequest::SharedDtor() {
  if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentname_;
  }
  if (componenthandle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componenthandle_;
  }
  if (this != default_instance_) {
  }
}

void TerminateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TerminateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TerminateRequest_descriptor_;
}

const TerminateRequest& TerminateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_amfAppRpc_2eproto();
  return *default_instance_;
}

TerminateRequest* TerminateRequest::default_instance_ = NULL;

TerminateRequest* TerminateRequest::New() const {
  return new TerminateRequest;
}

void TerminateRequest::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 7) {
    invocation_ = GOOGLE_ULONGLONG(0);
    if (has_componentname()) {
      if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        componentname_->clear();
      }
    }
    if (has_componenthandle()) {
      if (componenthandle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        componenthandle_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TerminateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.amfAppRpc.TerminateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invocation = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invocation_)));
          set_has_invocation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_componentName;
        break;
      }

      // optional string componentName = 2;
      case 2: {
        if (tag == 18) {
         parse_componentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->componentname().data(), this->componentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "componentname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_componentHandle;
        break;
      }

      // optional bytes componentHandle = 3;
      case 3: {
        if (tag == 26) {
         parse_componentHandle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_componenthandle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.amfAppRpc.TerminateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.amfAppRpc.TerminateRequest)
  return false;
#undef DO_
}

void TerminateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.amfAppRpc.TerminateRequest)
  // optional uint64 invocation = 1;
  if (has_invocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invocation(), output);
  }

  // optional string componentName = 2;
  if (has_componentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->componentname().data(), this->componentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "componentname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->componentname(), output);
  }

  // optional bytes componentHandle = 3;
  if (has_componenthandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->componenthandle(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.amfAppRpc.TerminateRequest)
}

::google::protobuf::uint8* TerminateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.amfAppRpc.TerminateRequest)
  // optional uint64 invocation = 1;
  if (has_invocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invocation(), target);
  }

  // optional string componentName = 2;
  if (has_componentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->componentname().data(), this->componentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "componentname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->componentname(), target);
  }

  // optional bytes componentHandle = 3;
  if (has_componenthandle()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->componenthandle(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.amfAppRpc.TerminateRequest)
  return target;
}

int TerminateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 invocation = 1;
    if (has_invocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invocation());
    }

    // optional string componentName = 2;
    if (has_componentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentname());
    }

    // optional bytes componentHandle = 3;
    if (has_componenthandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->componenthandle());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TerminateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TerminateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TerminateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TerminateRequest::MergeFrom(const TerminateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invocation()) {
      set_invocation(from.invocation());
    }
    if (from.has_componentname()) {
      set_componentname(from.componentname());
    }
    if (from.has_componenthandle()) {
      set_componenthandle(from.componenthandle());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TerminateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerminateRequest::CopyFrom(const TerminateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminateRequest::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TerminateRequest::Swap(TerminateRequest* other) {
  if (other != this) {
    std::swap(invocation_, other->invocation_);
    std::swap(componentname_, other->componentname_);
    std::swap(componenthandle_, other->componenthandle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata TerminateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TerminateRequest_descriptor_;
  metadata.reflection = TerminateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TerminateResponse::kInvocationFieldNumber;
const int TerminateResponse::kResultFieldNumber;
#endif  // !_MSC_VER

TerminateResponse::TerminateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.amfAppRpc.TerminateResponse)
}

void TerminateResponse::InitAsDefaultInstance() {
}

TerminateResponse::TerminateResponse(const TerminateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.amfAppRpc.TerminateResponse)
}

void TerminateResponse::SharedCtor() {
  _cached_size_ = 0;
  invocation_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TerminateResponse::~TerminateResponse() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.amfAppRpc.TerminateResponse)
  SharedDtor();
}

void TerminateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TerminateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TerminateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TerminateResponse_descriptor_;
}

const TerminateResponse& TerminateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_amfAppRpc_2eproto();
  return *default_instance_;
}

TerminateResponse* TerminateResponse::default_instance_ = NULL;

TerminateResponse* TerminateResponse::New() const {
  return new TerminateResponse;
}

void TerminateResponse::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TerminateResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(invocation_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TerminateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.amfAppRpc.TerminateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invocation = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invocation_)));
          set_has_invocation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_result;
        break;
      }

      // optional fixed32 result = 2;
      case 2: {
        if (tag == 21) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.amfAppRpc.TerminateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.amfAppRpc.TerminateResponse)
  return false;
#undef DO_
}

void TerminateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.amfAppRpc.TerminateResponse)
  // optional uint64 invocation = 1;
  if (has_invocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invocation(), output);
  }

  // optional fixed32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->result(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.amfAppRpc.TerminateResponse)
}

::google::protobuf::uint8* TerminateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.amfAppRpc.TerminateResponse)
  // optional uint64 invocation = 1;
  if (has_invocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invocation(), target);
  }

  // optional fixed32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->result(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.amfAppRpc.TerminateResponse)
  return target;
}

int TerminateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 invocation = 1;
    if (has_invocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invocation());
    }

    // optional fixed32 result = 2;
    if (has_result()) {
      total_size += 1 + 4;
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TerminateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TerminateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TerminateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TerminateResponse::MergeFrom(const TerminateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invocation()) {
      set_invocation(from.invocation());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TerminateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerminateResponse::CopyFrom(const TerminateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminateResponse::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TerminateResponse::Swap(TerminateResponse* other) {
  if (other != this) {
    std::swap(invocation_, other->invocation_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata TerminateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TerminateResponse_descriptor_;
  metadata.reflection = TerminateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValuePairs::kTheKeyFieldNumber;
const int KeyValuePairs::kTheValueFieldNumber;
#endif  // !_MSC_VER

KeyValuePairs::KeyValuePairs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.amfAppRpc.KeyValuePairs)
}

void KeyValuePairs::InitAsDefaultInstance() {
}

KeyValuePairs::KeyValuePairs(const KeyValuePairs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.amfAppRpc.KeyValuePairs)
}

void KeyValuePairs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  thekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValuePairs::~KeyValuePairs() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.amfAppRpc.KeyValuePairs)
  SharedDtor();
}

void KeyValuePairs::SharedDtor() {
  if (thekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thekey_;
  }
  if (thevalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thevalue_;
  }
  if (this != default_instance_) {
  }
}

void KeyValuePairs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValuePairs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValuePairs_descriptor_;
}

const KeyValuePairs& KeyValuePairs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_amfAppRpc_2eproto();
  return *default_instance_;
}

KeyValuePairs* KeyValuePairs::default_instance_ = NULL;

KeyValuePairs* KeyValuePairs::New() const {
  return new KeyValuePairs;
}

void KeyValuePairs::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 3) {
    if (has_thekey()) {
      if (thekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thekey_->clear();
      }
    }
    if (has_thevalue()) {
      if (thevalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thevalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValuePairs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.amfAppRpc.KeyValuePairs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string theKey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thekey().data(), this->thekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thekey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_theValue;
        break;
      }

      // optional string theValue = 2;
      case 2: {
        if (tag == 18) {
         parse_theValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thevalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thevalue().data(), this->thevalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thevalue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.amfAppRpc.KeyValuePairs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.amfAppRpc.KeyValuePairs)
  return false;
#undef DO_
}

void KeyValuePairs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.amfAppRpc.KeyValuePairs)
  // optional string theKey = 1;
  if (has_thekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thekey().data(), this->thekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thekey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->thekey(), output);
  }

  // optional string theValue = 2;
  if (has_thevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thevalue().data(), this->thevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thevalue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->thevalue(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.amfAppRpc.KeyValuePairs)
}

::google::protobuf::uint8* KeyValuePairs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.amfAppRpc.KeyValuePairs)
  // optional string theKey = 1;
  if (has_thekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thekey().data(), this->thekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thekey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->thekey(), target);
  }

  // optional string theValue = 2;
  if (has_thevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thevalue().data(), this->thevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thevalue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->thevalue(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.amfAppRpc.KeyValuePairs)
  return target;
}

int KeyValuePairs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string theKey = 1;
    if (has_thekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thekey());
    }

    // optional string theValue = 2;
    if (has_thevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thevalue());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValuePairs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValuePairs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValuePairs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValuePairs::MergeFrom(const KeyValuePairs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thekey()) {
      set_thekey(from.thekey());
    }
    if (from.has_thevalue()) {
      set_thevalue(from.thevalue());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValuePairs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValuePairs::CopyFrom(const KeyValuePairs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValuePairs::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void KeyValuePairs::Swap(KeyValuePairs* other) {
  if (other != this) {
    std::swap(thekey_, other->thekey_);
    std::swap(thevalue_, other->thevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata KeyValuePairs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValuePairs_descriptor_;
  metadata.reflection = KeyValuePairs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkOperationRequest::kInvocationFieldNumber;
const int WorkOperationRequest::kComponentNameFieldNumber;
const int WorkOperationRequest::kComponentHandleFieldNumber;
const int WorkOperationRequest::kOperationFieldNumber;
const int WorkOperationRequest::kTargetFieldNumber;
const int WorkOperationRequest::kKeyValuePairsFieldNumber;
#endif  // !_MSC_VER

WorkOperationRequest::WorkOperationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.amfAppRpc.WorkOperationRequest)
}

void WorkOperationRequest::InitAsDefaultInstance() {
}

WorkOperationRequest::WorkOperationRequest(const WorkOperationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.amfAppRpc.WorkOperationRequest)
}

void WorkOperationRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invocation_ = GOOGLE_ULONGLONG(0);
  componentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_ = 0u;
  target_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkOperationRequest::~WorkOperationRequest() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.amfAppRpc.WorkOperationRequest)
  SharedDtor();
}

void WorkOperationRequest::SharedDtor() {
  if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentname_;
  }
  if (this != default_instance_) {
  }
}

void WorkOperationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkOperationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkOperationRequest_descriptor_;
}

const WorkOperationRequest& WorkOperationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_amfAppRpc_2eproto();
  return *default_instance_;
}

WorkOperationRequest* WorkOperationRequest::default_instance_ = NULL;

WorkOperationRequest* WorkOperationRequest::New() const {
  return new WorkOperationRequest;
}

void WorkOperationRequest::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorkOperationRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(operation_, target_);
    invocation_ = GOOGLE_ULONGLONG(0);
    if (has_componentname()) {
      if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        componentname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  componenthandle_.Clear();
  keyvaluepairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkOperationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.amfAppRpc.WorkOperationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invocation = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invocation_)));
          set_has_invocation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_componentName;
        break;
      }

      // optional string componentName = 2;
      case 2: {
        if (tag == 18) {
         parse_componentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->componentname().data(), this->componentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "componentname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_componentHandle;
        break;
      }

      // repeated bytes componentHandle = 3;
      case 3: {
        if (tag == 26) {
         parse_componentHandle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_componenthandle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_componentHandle;
        if (input->ExpectTag(37)) goto parse_operation;
        break;
      }

      // optional fixed32 operation = 4;
      case 4: {
        if (tag == 37) {
         parse_operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_target;
        break;
      }

      // optional fixed32 target = 5;
      case 5: {
        if (tag == 45) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_keyValuePairs;
        break;
      }

      // repeated .SAFplus.Rpc.amfAppRpc.KeyValuePairs keyValuePairs = 6;
      case 6: {
        if (tag == 50) {
         parse_keyValuePairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyvaluepairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_keyValuePairs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.amfAppRpc.WorkOperationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.amfAppRpc.WorkOperationRequest)
  return false;
#undef DO_
}

void WorkOperationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.amfAppRpc.WorkOperationRequest)
  // optional uint64 invocation = 1;
  if (has_invocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invocation(), output);
  }

  // optional string componentName = 2;
  if (has_componentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->componentname().data(), this->componentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "componentname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->componentname(), output);
  }

  // repeated bytes componentHandle = 3;
  for (int i = 0; i < this->componenthandle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->componenthandle(i), output);
  }

  // optional fixed32 operation = 4;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->operation(), output);
  }

  // optional fixed32 target = 5;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->target(), output);
  }

  // repeated .SAFplus.Rpc.amfAppRpc.KeyValuePairs keyValuePairs = 6;
  for (int i = 0; i < this->keyvaluepairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->keyvaluepairs(i), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.amfAppRpc.WorkOperationRequest)
}

::google::protobuf::uint8* WorkOperationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.amfAppRpc.WorkOperationRequest)
  // optional uint64 invocation = 1;
  if (has_invocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invocation(), target);
  }

  // optional string componentName = 2;
  if (has_componentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->componentname().data(), this->componentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "componentname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->componentname(), target);
  }

  // repeated bytes componentHandle = 3;
  for (int i = 0; i < this->componenthandle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->componenthandle(i), target);
  }

  // optional fixed32 operation = 4;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->operation(), target);
  }

  // optional fixed32 target = 5;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->target(), target);
  }

  // repeated .SAFplus.Rpc.amfAppRpc.KeyValuePairs keyValuePairs = 6;
  for (int i = 0; i < this->keyvaluepairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->keyvaluepairs(i), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.amfAppRpc.WorkOperationRequest)
  return target;
}

int WorkOperationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 invocation = 1;
    if (has_invocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invocation());
    }

    // optional string componentName = 2;
    if (has_componentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentname());
    }

    // optional fixed32 operation = 4;
    if (has_operation()) {
      total_size += 1 + 4;
    }

    // optional fixed32 target = 5;
    if (has_target()) {
      total_size += 1 + 4;
    }

  }
  // repeated bytes componentHandle = 3;
  total_size += 1 * this->componenthandle_size();
  for (int i = 0; i < this->componenthandle_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->componenthandle(i));
  }

  // repeated .SAFplus.Rpc.amfAppRpc.KeyValuePairs keyValuePairs = 6;
  total_size += 1 * this->keyvaluepairs_size();
  for (int i = 0; i < this->keyvaluepairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyvaluepairs(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkOperationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkOperationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkOperationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkOperationRequest::MergeFrom(const WorkOperationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  componenthandle_.MergeFrom(from.componenthandle_);
  keyvaluepairs_.MergeFrom(from.keyvaluepairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invocation()) {
      set_invocation(from.invocation());
    }
    if (from.has_componentname()) {
      set_componentname(from.componentname());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkOperationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkOperationRequest::CopyFrom(const WorkOperationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkOperationRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->keyvaluepairs())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void WorkOperationRequest::Swap(WorkOperationRequest* other) {
  if (other != this) {
    std::swap(invocation_, other->invocation_);
    std::swap(componentname_, other->componentname_);
    componenthandle_.Swap(&other->componenthandle_);
    std::swap(operation_, other->operation_);
    std::swap(target_, other->target_);
    keyvaluepairs_.Swap(&other->keyvaluepairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata WorkOperationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkOperationRequest_descriptor_;
  metadata.reflection = WorkOperationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkOperationResponseRequest::kInvocationFieldNumber;
const int WorkOperationResponseRequest::kResultFieldNumber;
#endif  // !_MSC_VER

WorkOperationResponseRequest::WorkOperationResponseRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SAFplus.Rpc.amfAppRpc.WorkOperationResponseRequest)
}

void WorkOperationResponseRequest::InitAsDefaultInstance() {
}

WorkOperationResponseRequest::WorkOperationResponseRequest(const WorkOperationResponseRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SAFplus.Rpc.amfAppRpc.WorkOperationResponseRequest)
}

void WorkOperationResponseRequest::SharedCtor() {
  _cached_size_ = 0;
  invocation_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkOperationResponseRequest::~WorkOperationResponseRequest() {
  // @@protoc_insertion_point(destructor:SAFplus.Rpc.amfAppRpc.WorkOperationResponseRequest)
  SharedDtor();
}

void WorkOperationResponseRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkOperationResponseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkOperationResponseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkOperationResponseRequest_descriptor_;
}

const WorkOperationResponseRequest& WorkOperationResponseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_amfAppRpc_2eproto();
  return *default_instance_;
}

WorkOperationResponseRequest* WorkOperationResponseRequest::default_instance_ = NULL;

WorkOperationResponseRequest* WorkOperationResponseRequest::New() const {
  return new WorkOperationResponseRequest;
}

void WorkOperationResponseRequest::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorkOperationResponseRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(invocation_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkOperationResponseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SAFplus.Rpc.amfAppRpc.WorkOperationResponseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invocation = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invocation_)));
          set_has_invocation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_result;
        break;
      }

      // optional fixed32 result = 2;
      case 2: {
        if (tag == 21) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SAFplus.Rpc.amfAppRpc.WorkOperationResponseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SAFplus.Rpc.amfAppRpc.WorkOperationResponseRequest)
  return false;
#undef DO_
}

void WorkOperationResponseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SAFplus.Rpc.amfAppRpc.WorkOperationResponseRequest)
  // optional uint64 invocation = 1;
  if (has_invocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invocation(), output);
  }

  // optional fixed32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->result(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SAFplus.Rpc.amfAppRpc.WorkOperationResponseRequest)
}

::google::protobuf::uint8* WorkOperationResponseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAFplus.Rpc.amfAppRpc.WorkOperationResponseRequest)
  // optional uint64 invocation = 1;
  if (has_invocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invocation(), target);
  }

  // optional fixed32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->result(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAFplus.Rpc.amfAppRpc.WorkOperationResponseRequest)
  return target;
}

int WorkOperationResponseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 invocation = 1;
    if (has_invocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invocation());
    }

    // optional fixed32 result = 2;
    if (has_result()) {
      total_size += 1 + 4;
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkOperationResponseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkOperationResponseRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkOperationResponseRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkOperationResponseRequest::MergeFrom(const WorkOperationResponseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invocation()) {
      set_invocation(from.invocation());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkOperationResponseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkOperationResponseRequest::CopyFrom(const WorkOperationResponseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkOperationResponseRequest::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void WorkOperationResponseRequest::Swap(WorkOperationResponseRequest* other) {
  if (other != this) {
    std::swap(invocation_, other->invocation_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata WorkOperationResponseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkOperationResponseRequest_descriptor_;
  metadata.reflection = WorkOperationResponseRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace amfAppRpc
}  // namespace Rpc
}  // namespace SAFplus

// @@protoc_insertion_point(global_scope)
