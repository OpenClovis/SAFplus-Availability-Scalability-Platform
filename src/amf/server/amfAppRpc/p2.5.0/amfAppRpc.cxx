// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "clRpcChannel.hxx"
#include "amfAppRpc.hxx"

namespace SAFplus {
namespace Rpc {
namespace amfAppRpc {

namespace {

const ::google::protobuf::ServiceDescriptor* amfAppRpc_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Rpc_amfAppRpc_2eproto() {
  protobuf_AddDesc_amfAppRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "amfAppRpc.proto");
  GOOGLE_CHECK(file != NULL);
  amfAppRpc_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Rpc_amfAppRpc_2eproto);
}

}  // namespace
amfAppRpc::~amfAppRpc() {}

const ::google::protobuf::ServiceDescriptor* amfAppRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return amfAppRpc_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* amfAppRpc::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return amfAppRpc_descriptor_;
}

void amfAppRpc::heartbeat(const ::SAFplus::Rpc::amfAppRpc::HeartbeatRequest*,
                         ::SAFplus::Rpc::amfAppRpc::HeartbeatResponse*)
{
  logError("RPC","SVR","Method heartbeat() not implemented.");
}

void amfAppRpc::terminate(const ::SAFplus::Rpc::amfAppRpc::TerminateRequest*,
                         ::SAFplus::Rpc::amfAppRpc::TerminateResponse*)
{
  logError("RPC","SVR","Method terminate() not implemented.");
}

void amfAppRpc::workOperation(const ::SAFplus::Rpc::amfAppRpc::WorkOperationRequest*)
{
  logError("RPC","SVR","Method workOperation() not implemented.");
}

void amfAppRpc::workOperationResponse(const ::SAFplus::Rpc::amfAppRpc::WorkOperationResponseRequest*)
{
  logError("RPC","SVR","Method workOperationResponse() not implemented.");
}

void amfAppRpc::heartbeat(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfAppRpc::HeartbeatRequest* request,
                     ::SAFplus::Rpc::amfAppRpc::HeartbeatResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method heartbeat() not implemented.");
}

void amfAppRpc::terminate(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfAppRpc::TerminateRequest* request,
                     ::SAFplus::Rpc::amfAppRpc::TerminateResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method terminate() not implemented.");
}

void amfAppRpc::workOperation(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfAppRpc::WorkOperationRequest* request)
{
  logError("RPC","SVR","Method workOperation() not implemented.");
}

void amfAppRpc::workOperationResponse(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfAppRpc::WorkOperationResponseRequest* request)
{
  logError("RPC","SVR","Method workOperationResponse() not implemented.");
}

void amfAppRpc::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             SAFplus::Handle destination,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             SAFplus::Wakeable& wakeable) {
  GOOGLE_DCHECK_EQ(method->service(), amfAppRpc_descriptor_);
  switch(method->index()) {
    case 0:
      heartbeat(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfAppRpc::HeartbeatRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfAppRpc::HeartbeatResponse*>(response));
      break;
    case 1:
      terminate(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfAppRpc::TerminateRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfAppRpc::TerminateResponse*>(response));
      break;
    case 2:
      workOperation(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfAppRpc::WorkOperationRequest*>(request));
      break;
    case 3:
      workOperationResponse(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfAppRpc::WorkOperationResponseRequest*>(request));
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& amfAppRpc::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SAFplus::Rpc::amfAppRpc::HeartbeatRequest::default_instance();
    case 1:
      return ::SAFplus::Rpc::amfAppRpc::TerminateRequest::default_instance();
    case 2:
      return ::SAFplus::Rpc::amfAppRpc::WorkOperationRequest::default_instance();
    case 3:
      return ::SAFplus::Rpc::amfAppRpc::WorkOperationResponseRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& amfAppRpc::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SAFplus::Rpc::amfAppRpc::HeartbeatResponse::default_instance();
    case 1:
      return ::SAFplus::Rpc::amfAppRpc::TerminateResponse::default_instance();
    case 2:
      return ::SAFplus::Rpc::NO_RESPONSE::default_instance();
    case 3:
      return ::SAFplus::Rpc::NO_RESPONSE::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

amfAppRpc_Stub::amfAppRpc_Stub(SAFplus::Rpc::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
amfAppRpc_Stub::amfAppRpc_Stub(
    SAFplus::Rpc::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
amfAppRpc_Stub::~amfAppRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void amfAppRpc_Stub::heartbeat(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfAppRpc::HeartbeatRequest* request,
                              ::SAFplus::Rpc::amfAppRpc::HeartbeatResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(0), dest, request, response, wakeable);
}
void amfAppRpc_Stub::terminate(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfAppRpc::TerminateRequest* request,
                              ::SAFplus::Rpc::amfAppRpc::TerminateResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(1), dest, request, response, wakeable);
}
void amfAppRpc_Stub::workOperation(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfAppRpc::WorkOperationRequest* request) {
  channel_->CallMethod(descriptor()->method(2), dest, request, NULL, *((SAFplus::Wakeable*)nullptr));
}
void amfAppRpc_Stub::workOperationResponse(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfAppRpc::WorkOperationResponseRequest* request) {
  channel_->CallMethod(descriptor()->method(3), dest, request, NULL, *((SAFplus::Wakeable*)nullptr));
}

}  // namespace amfAppRpc
}  // namespace Rpc
}  // namespace SAFplus
