/* 
 * File EntityById.cxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 
#include "SAFplusAmfCommon.hxx"

#include <string>
#include "clTransaction.hxx"
#include "clMgtProv.hxx"
#include <vector>
#include "MgtFactory.hxx"
#include "clMgtContainer.hxx"
#include <cstdint>
#include "EntityById.hxx"


namespace SAFplusAmf
  {

    /* Apply MGT object factory */
    MGT_REGISTER_IMPL(EntityById, /SAFplusAmf/safplusAmf/EntityById)

    EntityById::EntityById(): SAFplus::MgtContainer("EntityById"), id("id"), entity("entity")
    {
        this->config = false;
        this->addChildObject(&id, "id");
        id.config = false;
        this->addChildObject(&entity, "entity");
        entity.config = false;
    };

    EntityById::EntityById(::uint16_t idValue): SAFplus::MgtContainer("EntityById"), id("id"), entity("entity")
    {
        this->id.value =  idValue;
        this->config = false;
        this->addChildObject(&id, "id");
        id.config = false;
        this->addChildObject(&entity, "entity");
        entity.config = false;
    };

    std::vector<std::string> EntityById::getKeys()
    {
        std::string keyNames[] = { "id" };
        return std::vector<std::string> (keyNames, keyNames + sizeof(keyNames) / sizeof(keyNames[0]));
    };

    std::vector<std::string>* EntityById::getChildNames()
    {
        std::string childNames[] = { "id", "entity" };
        return new std::vector<std::string> (childNames, childNames + sizeof(childNames) / sizeof(childNames[0]));
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/EntityById/id
     */
    ::uint16_t EntityById::getId()
    {
        return this->id.value;
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/EntityById/id
     */
    void EntityById::setId(::uint16_t idValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->id.value = idValue;
        else
        {
            SAFplus::SimpleTxnOperation<::uint16_t> *opt = new SAFplus::SimpleTxnOperation<::uint16_t>(&(id.value),idValue);
            t.addOperation(opt);
        }
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/EntityById/entity
     */
    std::string EntityById::getEntity()
    {
        return this->entity.value;
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/EntityById/entity
     */
    void EntityById::setEntity(std::string entityValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->entity.value = entityValue;
        else
        {
            SAFplus::SimpleTxnOperation<std::string> *opt = new SAFplus::SimpleTxnOperation<std::string>(&(entity.value),entityValue);
            t.addOperation(opt);
        }
    };

    EntityById::~EntityById()
    {
    };

}
/* namespace ::SAFplusAmf */
