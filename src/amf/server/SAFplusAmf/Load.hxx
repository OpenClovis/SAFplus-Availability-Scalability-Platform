/* 
 * File Load.hxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 

#pragma once
#ifndef LOAD_HXX_
#define LOAD_HXX_
#include "SAFplusAmfCommon.hxx"

#include <vector>
#include "MgtFactory.hxx"
#include "clMgtContainer.hxx"

namespace SAFplusAmf
  {

    class Load : public SAFplus::MgtContainer {

        /* Apply MGT object factory */
        MGT_REGISTER(Load);

    public:
        SAFplus::MgtHistoryStat<float> user;
        SAFplus::MgtHistoryStat<float> lowPriorityUser;
        SAFplus::MgtHistoryStat<float> ioWait;
        SAFplus::MgtHistoryStat<float> sysTime;
        SAFplus::MgtHistoryStat<float> intTime;
        SAFplus::MgtHistoryStat<float> softIrqs;
        SAFplus::MgtHistoryStat<float> idle;
        SAFplus::MgtHistoryStat<int> contextSwitches;
        SAFplus::MgtHistoryStat<int> processCount;
        SAFplus::MgtHistoryStat<int> processStarts;

    public:
        Load();
        std::vector<std::string>* getChildNames();

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/user
         */
        SAFplus::MgtHistoryStat<float>* getUser();

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/user
         */
        void addUser(SAFplus::MgtHistoryStat<float> *userValue);

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/lowPriorityUser
         */
        SAFplus::MgtHistoryStat<float>* getLowPriorityUser();

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/lowPriorityUser
         */
        void addLowPriorityUser(SAFplus::MgtHistoryStat<float> *lowPriorityUserValue);

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/ioWait
         */
        SAFplus::MgtHistoryStat<float>* getIoWait();

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/ioWait
         */
        void addIoWait(SAFplus::MgtHistoryStat<float> *ioWaitValue);

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/sysTime
         */
        SAFplus::MgtHistoryStat<float>* getSysTime();

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/sysTime
         */
        void addSysTime(SAFplus::MgtHistoryStat<float> *sysTimeValue);

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/intTime
         */
        SAFplus::MgtHistoryStat<float>* getIntTime();

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/intTime
         */
        void addIntTime(SAFplus::MgtHistoryStat<float> *intTimeValue);

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/softIrqs
         */
        SAFplus::MgtHistoryStat<float>* getSoftIrqs();

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/softIrqs
         */
        void addSoftIrqs(SAFplus::MgtHistoryStat<float> *softIrqsValue);

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/idle
         */
        SAFplus::MgtHistoryStat<float>* getIdle();

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/idle
         */
        void addIdle(SAFplus::MgtHistoryStat<float> *idleValue);

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/contextSwitches
         */
        SAFplus::MgtHistoryStat<int>* getContextSwitches();

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/contextSwitches
         */
        void addContextSwitches(SAFplus::MgtHistoryStat<int> *contextSwitchesValue);

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/processCount
         */
        SAFplus::MgtHistoryStat<int>* getProcessCount();

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/processCount
         */
        void addProcessCount(SAFplus::MgtHistoryStat<int> *processCountValue);

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/processStarts
         */
        SAFplus::MgtHistoryStat<int>* getProcessStarts();

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/processStarts
         */
        void addProcessStarts(SAFplus::MgtHistoryStat<int> *processStartsValue);
        ~Load();

    };
}
/* namespace ::SAFplusAmf */
#endif /* LOAD_HXX_ */
