/* 
 * File Timeouts.hxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 

#pragma once
#ifndef TIMEOUTS_HXX_
#define TIMEOUTS_HXX_

#include "MgtFactory.hxx"
#include "clMgtContainer.hxx"
#include "clTransaction.hxx"
#include "clMgtProv.hxx"
#include "SAFplusAmfCommon.hxx"
#include <vector>

namespace SAFplusAmf
  {

    class Timeouts : public SAFplus::MgtContainer {

        /* Apply MGT object factory */
        MGT_REGISTER(Timeouts);

    public:

        /*
         * How much time to give a component to gracefully shut down before faulting it, in milliseconds.
         */
        SAFplus::MgtProv<SaTimeT> terminate;

        /*
         * How much time to give a component to gracefully finish handling its work before faulting it, in milliseconds.
         */
        SAFplus::MgtProv<SaTimeT> quiescingComplete;

        /*
         * How much time to give a component to execute its work (component service instance) removal callback before faulting the component.  Specified in milliseconds.
         */
        SAFplus::MgtProv<SaTimeT> workRemoval;

        /*
         * How much time to give a component to execute its work (component service instance) removal callback before faulting the component.  Specified in milliseconds.
         */
        SAFplus::MgtProv<SaTimeT> workAssignment;

    public:
        Timeouts();
        std::vector<std::string>* getChildNames();

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Component/timeouts/terminate
         */
        SaTimeT getTerminate();

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Component/timeouts/terminate
         */
        void setTerminate(SaTimeT &terminateValue, SAFplus::Transaction &txn=SAFplus::NO_TXN);

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Component/timeouts/quiescingComplete
         */
        SaTimeT getQuiescingComplete();

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Component/timeouts/quiescingComplete
         */
        void setQuiescingComplete(SaTimeT &quiescingCompleteValue, SAFplus::Transaction &txn=SAFplus::NO_TXN);

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Component/timeouts/workRemoval
         */
        SaTimeT getWorkRemoval();

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Component/timeouts/workRemoval
         */
        void setWorkRemoval(SaTimeT &workRemovalValue, SAFplus::Transaction &txn=SAFplus::NO_TXN);

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Component/timeouts/workAssignment
         */
        SaTimeT getWorkAssignment();

        /*
         * XPATH: /SAFplusAmf/safplusAmf/Component/timeouts/workAssignment
         */
        void setWorkAssignment(SaTimeT &workAssignmentValue, SAFplus::Transaction &txn=SAFplus::NO_TXN);
        ~Timeouts();

    };
}
/* namespace ::SAFplusAmf */
#endif /* TIMEOUTS_HXX_ */
