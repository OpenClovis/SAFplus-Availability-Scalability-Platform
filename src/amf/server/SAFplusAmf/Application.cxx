/* 
 * File Application.cxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 
#include "SAFplusAmfCommon.hxx"

#include "NumServiceGroups.hxx"
#include <string>
#include "clTransaction.hxx"
#include "clMgtProv.hxx"
#include "clMgtIdentifierList.hxx"
#include "ServiceGroup.hxx"
#include <vector>
#include "MgtFactory.hxx"
#include "NumServiceGroups.hxx"
#include "AdministrativeState.hxx"
#include "EntityId.hxx"
#include "Application.hxx"


namespace SAFplusAmf
  {

    /* Apply MGT object factory */
    MGT_REGISTER_IMPL(Application, /SAFplusAmf/Application)

    Application::Application(): adminState("adminState"), serviceGroups("serviceGroups"), keepTogether("keepTogether")
    {
        this->addChildObject(&adminState, "adminState");
        this->addChildObject(&serviceGroups, "serviceGroups");
        this->addChildObject(&keepTogether, "keepTogether");
        this->addChildObject(&numServiceGroups, "numServiceGroups");
        numServiceGroups.config = false;
        this->tag.assign("Application");
    };

    Application::Application(std::string nameValue): adminState("adminState"), serviceGroups("serviceGroups"), keepTogether("keepTogether")
    {
        this->name.value =  nameValue;
        this->addChildObject(&adminState, "adminState");
        this->addChildObject(&serviceGroups, "serviceGroups");
        this->addChildObject(&keepTogether, "keepTogether");
        this->addChildObject(&numServiceGroups, "numServiceGroups");
        numServiceGroups.config = false;
        this->tag.assign("Application");
    };

    std::vector<std::string> Application::getKeys()
    {
        std::string keyNames[] = { "name" };
        return std::vector<std::string> (keyNames, keyNames + sizeof(keyNames) / sizeof(keyNames[0]));
    };

    std::vector<std::string>* Application::getChildNames()
    {
        std::string childNames[] = { "name", "id", "adminState", "numServiceGroups", "serviceGroups", "keepTogether" };
        return new std::vector<std::string> (childNames, childNames + sizeof(childNames) / sizeof(childNames[0]));
    };

    /*
     * XPATH: /SAFplusAmf/Application/adminState
     */
    SAFplusAmf::AdministrativeState Application::getAdminState()
    {
        return this->adminState.value;
    };

    /*
     * XPATH: /SAFplusAmf/Application/adminState
     */
    void Application::setAdminState(SAFplusAmf::AdministrativeState &adminStateValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->adminState.value = adminStateValue;
        else
        {
            SAFplus::SimpleTxnOperation<SAFplusAmf::AdministrativeState> *opt = new SAFplus::SimpleTxnOperation<SAFplusAmf::AdministrativeState>(&(adminState.value),adminStateValue);
            t.addOperation(opt);
        }
    };

    /*
     * XPATH: /SAFplusAmf/Application/serviceGroups
     */
    std::vector<SAFplusAmf::ServiceGroup*> Application::getServiceGroups()
    {
        return this->serviceGroups.value;
    };

    /*
     * XPATH: /SAFplusAmf/Application/serviceGroups
     */
    void Application::setServiceGroups(SAFplusAmf::ServiceGroup* serviceGroupsValue)
    {
        this->serviceGroups.value.push_back(serviceGroupsValue);
    };

    /*
     * XPATH: /SAFplusAmf/Application/keepTogether
     */
    bool Application::getKeepTogether()
    {
        return this->keepTogether.value;
    };

    /*
     * XPATH: /SAFplusAmf/Application/keepTogether
     */
    void Application::setKeepTogether(bool keepTogetherValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->keepTogether.value = keepTogetherValue;
        else
        {
            SAFplus::SimpleTxnOperation<bool> *opt = new SAFplus::SimpleTxnOperation<bool>(&(keepTogether.value),keepTogetherValue);
            t.addOperation(opt);
        }
    };

    /*
     * XPATH: /SAFplusAmf/Application/numServiceGroups
     */
    SAFplusAmf::NumServiceGroups* Application::getNumServiceGroups()
    {
        return dynamic_cast<NumServiceGroups*>(this->getChildObject("numServiceGroups"));
    };

    /*
     * XPATH: /SAFplusAmf/Application/numServiceGroups
     */
    void Application::addNumServiceGroups(SAFplusAmf::NumServiceGroups *numServiceGroupsValue)
    {
        this->addChildObject(numServiceGroupsValue, "numServiceGroups");
    };

    Application::~Application()
    {
    };

}
/* namespace SAFplusAmf */
