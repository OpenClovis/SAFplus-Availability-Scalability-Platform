/* 
 * File Load.cxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 

#include "MgtFactory.hxx"
#include "clMgtContainer.hxx"
#include "clMgtHistoryStat.hxx"
#include "SAFplusAmfCommon.hxx"
#include <vector>
#include "Load.hxx"


namespace SAFplusAmf
  {

    Load::Load(): SAFplus::MgtContainer("load")
    {
        this->addChildObject(&user, "user");
        user.config = false;
        user.settable = false;
        user.loadDb = false;
        user.replicated = false;
        this->addChildObject(&lowPriorityUser, "lowPriorityUser");
        lowPriorityUser.config = false;
        lowPriorityUser.settable = false;
        lowPriorityUser.loadDb = false;
        lowPriorityUser.replicated = false;
        this->addChildObject(&ioWait, "ioWait");
        ioWait.config = false;
        ioWait.settable = false;
        ioWait.loadDb = false;
        ioWait.replicated = false;
        this->addChildObject(&sysTime, "sysTime");
        sysTime.config = false;
        sysTime.settable = false;
        sysTime.loadDb = false;
        sysTime.replicated = false;
        this->addChildObject(&intTime, "intTime");
        intTime.config = false;
        intTime.settable = false;
        intTime.loadDb = false;
        intTime.replicated = false;
        this->addChildObject(&softIrqs, "softIrqs");
        softIrqs.config = false;
        softIrqs.settable = false;
        softIrqs.loadDb = false;
        softIrqs.replicated = false;
        this->addChildObject(&idle, "idle");
        idle.config = false;
        idle.settable = false;
        idle.loadDb = false;
        idle.replicated = false;
        this->addChildObject(&contextSwitches, "contextSwitches");
        contextSwitches.config = false;
        contextSwitches.settable = false;
        contextSwitches.loadDb = false;
        contextSwitches.replicated = false;
        this->addChildObject(&processCount, "processCount");
        processCount.config = false;
        processCount.settable = false;
        processCount.loadDb = false;
        processCount.replicated = false;
        this->addChildObject(&processStarts, "processStarts");
        processStarts.config = false;
        processStarts.settable = false;
        processStarts.loadDb = false;
        processStarts.replicated = false;
    };

    std::vector<std::string>* Load::getChildNames()
    {
        std::string childNames[] = { "user", "lowPriorityUser", "ioWait", "sysTime", "intTime", "softIrqs", "idle", "contextSwitches", "processCount", "processStarts" };
        return new std::vector<std::string> (childNames, childNames + sizeof(childNames) / sizeof(childNames[0]));
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/user
     */
    SAFplus::MgtHistoryStat<float>* Load::getUser()
    {
        return dynamic_cast<SAFplus::MgtHistoryStat<float>*>(this->getChildObject("user"));
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/user
     */
    void Load::addUser(SAFplus::MgtHistoryStat<float> *userValue)
    {
        this->addChildObject(userValue, "user");
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/lowPriorityUser
     */
    SAFplus::MgtHistoryStat<float>* Load::getLowPriorityUser()
    {
        return dynamic_cast<SAFplus::MgtHistoryStat<float>*>(this->getChildObject("lowPriorityUser"));
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/lowPriorityUser
     */
    void Load::addLowPriorityUser(SAFplus::MgtHistoryStat<float> *lowPriorityUserValue)
    {
        this->addChildObject(lowPriorityUserValue, "lowPriorityUser");
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/ioWait
     */
    SAFplus::MgtHistoryStat<float>* Load::getIoWait()
    {
        return dynamic_cast<SAFplus::MgtHistoryStat<float>*>(this->getChildObject("ioWait"));
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/ioWait
     */
    void Load::addIoWait(SAFplus::MgtHistoryStat<float> *ioWaitValue)
    {
        this->addChildObject(ioWaitValue, "ioWait");
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/sysTime
     */
    SAFplus::MgtHistoryStat<float>* Load::getSysTime()
    {
        return dynamic_cast<SAFplus::MgtHistoryStat<float>*>(this->getChildObject("sysTime"));
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/sysTime
     */
    void Load::addSysTime(SAFplus::MgtHistoryStat<float> *sysTimeValue)
    {
        this->addChildObject(sysTimeValue, "sysTime");
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/intTime
     */
    SAFplus::MgtHistoryStat<float>* Load::getIntTime()
    {
        return dynamic_cast<SAFplus::MgtHistoryStat<float>*>(this->getChildObject("intTime"));
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/intTime
     */
    void Load::addIntTime(SAFplus::MgtHistoryStat<float> *intTimeValue)
    {
        this->addChildObject(intTimeValue, "intTime");
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/softIrqs
     */
    SAFplus::MgtHistoryStat<float>* Load::getSoftIrqs()
    {
        return dynamic_cast<SAFplus::MgtHistoryStat<float>*>(this->getChildObject("softIrqs"));
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/softIrqs
     */
    void Load::addSoftIrqs(SAFplus::MgtHistoryStat<float> *softIrqsValue)
    {
        this->addChildObject(softIrqsValue, "softIrqs");
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/idle
     */
    SAFplus::MgtHistoryStat<float>* Load::getIdle()
    {
        return dynamic_cast<SAFplus::MgtHistoryStat<float>*>(this->getChildObject("idle"));
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/idle
     */
    void Load::addIdle(SAFplus::MgtHistoryStat<float> *idleValue)
    {
        this->addChildObject(idleValue, "idle");
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/contextSwitches
     */
    SAFplus::MgtHistoryStat<int>* Load::getContextSwitches()
    {
        return dynamic_cast<SAFplus::MgtHistoryStat<int>*>(this->getChildObject("contextSwitches"));
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/contextSwitches
     */
    void Load::addContextSwitches(SAFplus::MgtHistoryStat<int> *contextSwitchesValue)
    {
        this->addChildObject(contextSwitchesValue, "contextSwitches");
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/processCount
     */
    SAFplus::MgtHistoryStat<int>* Load::getProcessCount()
    {
        return dynamic_cast<SAFplus::MgtHistoryStat<int>*>(this->getChildObject("processCount"));
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/processCount
     */
    void Load::addProcessCount(SAFplus::MgtHistoryStat<int> *processCountValue)
    {
        this->addChildObject(processCountValue, "processCount");
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/processStarts
     */
    SAFplus::MgtHistoryStat<int>* Load::getProcessStarts()
    {
        return dynamic_cast<SAFplus::MgtHistoryStat<int>*>(this->getChildObject("processStarts"));
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/Node/stats/load/processStarts
     */
    void Load::addProcessStarts(SAFplus::MgtHistoryStat<int> *processStartsValue)
    {
        this->addChildObject(processStartsValue, "processStarts");
    };

    Load::~Load()
    {
    };

}
/* namespace ::SAFplusAmf */
