/* 
 * File ComponentServiceInstance.cxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 

#include "EntityId.hxx"
#include "clMgtIdentifier.hxx"
#include "MgtFactory.hxx"
#include "clMgtProvList.hxx"
#include "Component.hxx"
#include "clTransaction.hxx"
#include "clMgtIdentifierList.hxx"
#include <string>
#include "clMgtList.hxx"
#include "ServiceInstance.hxx"
#include "SAFplusAmfCommon.hxx"
#include <vector>
#include "ComponentServiceInstance.hxx"

using namespace  std;

namespace SAFplusAmf
  {

    /* Apply MGT object factory */
    MGT_REGISTER_IMPL(ComponentServiceInstance, /SAFplusAmf/safplusAmf/ComponentServiceInstance)

    ComponentServiceInstance::ComponentServiceInstance(): protectionGroup("protectionGroup"), dependencies("dependencies"), serviceInstance("serviceInstance"), standbyComponents("standbyComponents"), activeComponents("activeComponents"), dataList("data"), type("type"), isProxyCSI("isProxyCSI",false)
    {
        this->addChildObject(&type,"type");
        this->addChildObject(&isProxyCSI,"isProxyCSI");
        this->addChildObject(&protectionGroup, "protectionGroup");
        this->addChildObject(&dependencies, "dependencies");
        this->addChildObject(&serviceInstance, "serviceInstance");
        this->addChildObject(&standbyComponents, "standbyComponents");
        standbyComponents.config = false;
        standbyComponents.settable = false;
        standbyComponents.loadDb = false;
        standbyComponents.replicated = false;
        this->addChildObject(&activeComponents, "activeComponents");
        activeComponents.config = false;
        activeComponents.settable = false;
        activeComponents.loadDb = false;
        activeComponents.replicated = false;
        this->addChildObject(&dataList, "data");
        dataList.childXpath="/SAFplusAmf/safplusAmf/ComponentServiceInstance/data";
        dataList.setListKey("name");
        this->tag.assign("ComponentServiceInstance");
    };

    ComponentServiceInstance::ComponentServiceInstance(const std::string& nameValue): protectionGroup("protectionGroup"), dependencies("dependencies"), serviceInstance("serviceInstance"), standbyComponents("standbyComponents"), activeComponents("activeComponents"), dataList("data"), type("type"), isProxyCSI("isProxyCSI",false)
    {
        this->addChildObject(&type,"type");
        this->addChildObject(&isProxyCSI,"isProxyCSI");
        this->name.value =  nameValue;
        this->addChildObject(&protectionGroup, "protectionGroup");
        this->addChildObject(&dependencies, "dependencies");
        this->addChildObject(&serviceInstance, "serviceInstance");
        this->addChildObject(&standbyComponents, "standbyComponents");
        standbyComponents.config = false;
        standbyComponents.settable = false;
        standbyComponents.loadDb = false;
        standbyComponents.replicated = false;
        this->addChildObject(&activeComponents, "activeComponents");
        activeComponents.config = false;
        activeComponents.settable = false;
        activeComponents.loadDb = false;
        activeComponents.replicated = false;
        this->addChildObject(&dataList, "data");
        dataList.childXpath="/SAFplusAmf/safplusAmf/ComponentServiceInstance/data";
        dataList.setListKey("name");
        this->tag.assign("ComponentServiceInstance");
    };

    std::vector<std::string> ComponentServiceInstance::getKeys()
    {
        std::string keyNames[] = { "name" };
        return std::vector<std::string> (keyNames, keyNames + sizeof(keyNames) / sizeof(keyNames[0]));
    };

    std::vector<std::string>* ComponentServiceInstance::getChildNames()
    {
        std::string childNames[] = { "name", "id", "protectionGroup", "dependencies", "data", "serviceInstance", "standbyComponents", "activeComponents", "type"};
        return new std::vector<std::string> (childNames, childNames + sizeof(childNames) / sizeof(childNames[0]));
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/ComponentServiceInstance/serviceInstance
     */
    ServiceInstance* ComponentServiceInstance::getServiceInstance()
    {
        return this->serviceInstance.value;
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/ComponentServiceInstance/serviceInstance
     */
    void ComponentServiceInstance::setServiceInstance(ServiceInstance* serviceInstanceValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->serviceInstance.value = serviceInstanceValue;
        else
        {
            SAFplus::SimpleTxnOperation<ServiceInstance*> *opt = new SAFplus::SimpleTxnOperation<ServiceInstance*>(&(serviceInstance.value),serviceInstanceValue);
            t.addOperation(opt);
        }
    };

    ComponentServiceInstance::~ComponentServiceInstance()
    {
    };

}
/* namespace ::SAFplusAmf */
