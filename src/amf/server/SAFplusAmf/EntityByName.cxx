/* 
 * File EntityByName.cxx
 * This file has been auto-generated by Y2CPP, the
 * plug-in of pyang.
 */ 

#include "MgtFactory.hxx"
#include "clMgtContainer.hxx"
#include "clTransaction.hxx"
#include <string>
#include "clMgtProv.hxx"
#include "SAFplusAmfCommon.hxx"
#include <vector>
#include "EntityByName.hxx"

using namespace  std;

namespace SAFplusAmf
  {

    /* Apply MGT object factory */
    MGT_REGISTER_IMPL(EntityByName, /SAFplusAmf/safplusAmf/EntityByName)

    EntityByName::EntityByName(): SAFplus::MgtContainer("EntityByName"), name("name"), entity("entity")
    {
        this->config = false;
        this->addChildObject(&name, "name");
        name.config = false;
        name.settable = false;
        name.loadDb = false;
        name.replicated = false;
        this->addChildObject(&entity, "entity");
        entity.config = false;
        entity.settable = false;
        entity.loadDb = false;
        entity.replicated = false;
    };

    EntityByName::EntityByName(const std::string& nameValue): SAFplus::MgtContainer("EntityByName"), name("name"), entity("entity")
    {
        this->name.value =  nameValue;
        this->config = false;
        this->addChildObject(&name, "name");
        name.config = false;
        name.settable = false;
        name.loadDb = false;
        name.replicated = false;
        this->addChildObject(&entity, "entity");
        entity.config = false;
        entity.settable = false;
        entity.loadDb = false;
        entity.replicated = false;
    };

    std::vector<std::string> EntityByName::getKeys()
    {
        std::string keyNames[] = { "name" };
        return std::vector<std::string> (keyNames, keyNames + sizeof(keyNames) / sizeof(keyNames[0]));
    };

    std::vector<std::string>* EntityByName::getChildNames()
    {
        std::string childNames[] = { "name", "entity" };
        return new std::vector<std::string> (childNames, childNames + sizeof(childNames) / sizeof(childNames[0]));
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/EntityByName/name
     */
    std::string EntityByName::getName()
    {
        return this->name.value;
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/EntityByName/name
     */
    void EntityByName::setName(std::string nameValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->name.value = nameValue;
        else
        {
            SAFplus::SimpleTxnOperation<std::string> *opt = new SAFplus::SimpleTxnOperation<std::string>(&(name.value),nameValue);
            t.addOperation(opt);
        }
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/EntityByName/entity
     */
    std::string EntityByName::getEntity()
    {
        return this->entity.value;
    };

    /*
     * XPATH: /SAFplusAmf/safplusAmf/EntityByName/entity
     */
    void EntityByName::setEntity(std::string entityValue, SAFplus::Transaction &t)
    {
        if(&t == &SAFplus::NO_TXN) this->entity.value = entityValue;
        else
        {
            SAFplus::SimpleTxnOperation<std::string> *opt = new SAFplus::SimpleTxnOperation<std::string>(&(entity.value),entityValue);
            t.addOperation(opt);
        }
    };

    EntityByName::~EntityByName()
    {
    };

}
/* namespace ::SAFplusAmf */
