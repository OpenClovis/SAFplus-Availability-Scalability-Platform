// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "clRpcChannel.hxx"
#include "amfRpc.hxx"

namespace SAFplus {
namespace Rpc {
namespace amfRpc {

namespace {

const ::google::protobuf::ServiceDescriptor* amfRpc_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Rpc_amfRpc_2eproto() {
  protobuf_AddDesc_amfRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "amfRpc.proto");
  GOOGLE_CHECK(file != NULL);
  amfRpc_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Rpc_amfRpc_2eproto);
}

}  // namespace
amfRpc::~amfRpc() {}

const ::google::protobuf::ServiceDescriptor* amfRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return amfRpc_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* amfRpc::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return amfRpc_descriptor_;
}

void amfRpc::startComponent(const ::SAFplus::Rpc::amfRpc::StartComponentRequest*,
                         ::SAFplus::Rpc::amfRpc::StartComponentResponse*)
{
  logError("RPC","SVR","Method startComponent() not implemented.");
}

void amfRpc::stopComponent(const ::SAFplus::Rpc::amfRpc::StopComponentRequest*,
                         ::SAFplus::Rpc::amfRpc::StopComponentResponse*)
{
  logError("RPC","SVR","Method stopComponent() not implemented.");
}

void amfRpc::cleanupComponent(const ::SAFplus::Rpc::amfRpc::CleanupComponentRequest*,
                         ::SAFplus::Rpc::amfRpc::CleanupComponentResponse*)
{
  logError("RPC","SVR","Method cleanupComponent() not implemented.");
}

void amfRpc::nodeInfo(const ::SAFplus::Rpc::amfRpc::NodeInfoRequest*,
                         ::SAFplus::Rpc::amfRpc::NodeInfoResponse*)
{
  logError("RPC","SVR","Method nodeInfo() not implemented.");
}

void amfRpc::processInfo(const ::SAFplus::Rpc::amfRpc::ProcessInfoRequest*,
                         ::SAFplus::Rpc::amfRpc::ProcessInfoResponse*)
{
  logError("RPC","SVR","Method processInfo() not implemented.");
}

void amfRpc::processFailed(const ::SAFplus::Rpc::amfRpc::ProcessFailedRequest*,
                         ::SAFplus::Rpc::amfRpc::ProcessFailedResponse*)
{
  logError("RPC","SVR","Method processFailed() not implemented.");
}

void amfRpc::startComponent(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfRpc::StartComponentRequest* request,
                     ::SAFplus::Rpc::amfRpc::StartComponentResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method startComponent() not implemented.");
}

void amfRpc::stopComponent(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfRpc::StopComponentRequest* request,
                     ::SAFplus::Rpc::amfRpc::StopComponentResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method stopComponent() not implemented.");
}

void amfRpc::cleanupComponent(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfRpc::CleanupComponentRequest* request,
                     ::SAFplus::Rpc::amfRpc::CleanupComponentResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method cleanupComponent() not implemented.");
}

void amfRpc::nodeInfo(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfRpc::NodeInfoRequest* request,
                     ::SAFplus::Rpc::amfRpc::NodeInfoResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method nodeInfo() not implemented.");
}

void amfRpc::processInfo(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfRpc::ProcessInfoRequest* request,
                     ::SAFplus::Rpc::amfRpc::ProcessInfoResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method processInfo() not implemented.");
}

void amfRpc::processFailed(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfRpc::ProcessFailedRequest* request,
                     ::SAFplus::Rpc::amfRpc::ProcessFailedResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method processFailed() not implemented.");
}

void amfRpc::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             SAFplus::Handle destination,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             SAFplus::Wakeable& wakeable) {
  GOOGLE_DCHECK_EQ(method->service(), amfRpc_descriptor_);
  switch(method->index()) {
    case 0:
      startComponent(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfRpc::StartComponentRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfRpc::StartComponentResponse*>(response));
      break;
    case 1:
      stopComponent(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfRpc::StopComponentRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfRpc::StopComponentResponse*>(response));
      break;
    case 2:
      cleanupComponent(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfRpc::CleanupComponentRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfRpc::CleanupComponentResponse*>(response));
      break;
    case 3:
      nodeInfo(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfRpc::NodeInfoRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfRpc::NodeInfoResponse*>(response));
      break;
    case 4:
      processInfo(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfRpc::ProcessInfoRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfRpc::ProcessInfoResponse*>(response));
      break;
    case 5:
      processFailed(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfRpc::ProcessFailedRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfRpc::ProcessFailedResponse*>(response));
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& amfRpc::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SAFplus::Rpc::amfRpc::StartComponentRequest::default_instance();
    case 1:
      return ::SAFplus::Rpc::amfRpc::StopComponentRequest::default_instance();
    case 2:
      return ::SAFplus::Rpc::amfRpc::CleanupComponentRequest::default_instance();
    case 3:
      return ::SAFplus::Rpc::amfRpc::NodeInfoRequest::default_instance();
    case 4:
      return ::SAFplus::Rpc::amfRpc::ProcessInfoRequest::default_instance();
    case 5:
      return ::SAFplus::Rpc::amfRpc::ProcessFailedRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& amfRpc::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SAFplus::Rpc::amfRpc::StartComponentResponse::default_instance();
    case 1:
      return ::SAFplus::Rpc::amfRpc::StopComponentResponse::default_instance();
    case 2:
      return ::SAFplus::Rpc::amfRpc::CleanupComponentResponse::default_instance();
    case 3:
      return ::SAFplus::Rpc::amfRpc::NodeInfoResponse::default_instance();
    case 4:
      return ::SAFplus::Rpc::amfRpc::ProcessInfoResponse::default_instance();
    case 5:
      return ::SAFplus::Rpc::amfRpc::ProcessFailedResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

amfRpc_Stub::amfRpc_Stub(SAFplus::Rpc::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
amfRpc_Stub::amfRpc_Stub(
    SAFplus::Rpc::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
amfRpc_Stub::~amfRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void amfRpc_Stub::startComponent(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfRpc::StartComponentRequest* request,
                              ::SAFplus::Rpc::amfRpc::StartComponentResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(0), dest, request, response, wakeable);
}
void amfRpc_Stub::stopComponent(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfRpc::StopComponentRequest* request,
                              ::SAFplus::Rpc::amfRpc::StopComponentResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(1), dest, request, response, wakeable);
}
void amfRpc_Stub::cleanupComponent(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfRpc::CleanupComponentRequest* request,
                              ::SAFplus::Rpc::amfRpc::CleanupComponentResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(2), dest, request, response, wakeable);
}
void amfRpc_Stub::nodeInfo(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfRpc::NodeInfoRequest* request,
                              ::SAFplus::Rpc::amfRpc::NodeInfoResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(3), dest, request, response, wakeable);
}
void amfRpc_Stub::processInfo(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfRpc::ProcessInfoRequest* request,
                              ::SAFplus::Rpc::amfRpc::ProcessInfoResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(4), dest, request, response, wakeable);
}
void amfRpc_Stub::processFailed(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfRpc::ProcessFailedRequest* request,
                              ::SAFplus::Rpc::amfRpc::ProcessFailedResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(5), dest, request, response, wakeable);
}

}  // namespace amfRpc
}  // namespace Rpc
}  // namespace SAFplus
