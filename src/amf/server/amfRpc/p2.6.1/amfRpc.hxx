// Generated by the protocol buffer compiler.
#pragma once
#include <string>

#include <google/protobuf/service.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <clRpcService.hxx>
#include "amfRpc.pb.hxx"

namespace SAFplus {
  namespace Rpc {
    class RpcChannel;
  }
}

namespace SAFplus {
namespace Rpc {
namespace amfRpc {
class amfRpc_Stub;

class amfRpc : public SAFplus::Rpc::RpcService {
 protected:
  // This class should be treated as an abstract interface.
  inline amfRpc() {};
 public:
  virtual ~amfRpc();

  typedef amfRpc_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();


  // implements amfRpcImpl ----------------------------------------------
  virtual void startComponent(const ::SAFplus::Rpc::amfRpc::StartComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::StartComponentResponse* response);
  virtual void stopComponent(const ::SAFplus::Rpc::amfRpc::StopComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::StopComponentResponse* response);
  virtual void cleanupComponent(const ::SAFplus::Rpc::amfRpc::CleanupComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::CleanupComponentResponse* response);
  virtual void nodeInfo(const ::SAFplus::Rpc::amfRpc::NodeInfoRequest* request,
                       ::SAFplus::Rpc::amfRpc::NodeInfoResponse* response);
  virtual void processInfo(const ::SAFplus::Rpc::amfRpc::ProcessInfoRequest* request,
                       ::SAFplus::Rpc::amfRpc::ProcessInfoResponse* response);
  virtual void processFailed(const ::SAFplus::Rpc::amfRpc::ProcessFailedRequest* request,
                       ::SAFplus::Rpc::amfRpc::ProcessFailedResponse* response);
  virtual void rebootNode(const ::SAFplus::Rpc::amfRpc::RebootNodeRequest* request,
                       ::SAFplus::Rpc::amfRpc::RebootNodeResponse* response);
  virtual void shutdownAmf(const ::SAFplus::Rpc::amfRpc::ShutdownAmfRequest* request,
                       ::SAFplus::Rpc::amfRpc::ShutdownAmfResponse* response);

  // implements amfRpc ------------------------------------------
  virtual void startComponent(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::StartComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::StartComponentResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  virtual void stopComponent(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::StopComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::StopComponentResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  virtual void cleanupComponent(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::CleanupComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::CleanupComponentResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  virtual void nodeInfo(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::NodeInfoRequest* request,
                       ::SAFplus::Rpc::amfRpc::NodeInfoResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  virtual void processInfo(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::ProcessInfoRequest* request,
                       ::SAFplus::Rpc::amfRpc::ProcessInfoResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  virtual void processFailed(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::ProcessFailedRequest* request,
                       ::SAFplus::Rpc::amfRpc::ProcessFailedResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  virtual void rebootNode(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::RebootNodeRequest* request,
                       ::SAFplus::Rpc::amfRpc::RebootNodeResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  virtual void shutdownAmf(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::ShutdownAmfRequest* request,
                       ::SAFplus::Rpc::amfRpc::ShutdownAmfResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));


  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  SAFplus::Handle destination,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(amfRpc);
};

class amfRpc_Stub : public amfRpc {
 public:
  amfRpc_Stub(SAFplus::Rpc::RpcChannel* channel);
  amfRpc_Stub(SAFplus::Rpc::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~amfRpc_Stub();

  inline SAFplus::Rpc::RpcChannel* channel() { return channel_; }


  // implements amfRpc ------------------------------------------
  void startComponent(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::StartComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::StartComponentResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  void stopComponent(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::StopComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::StopComponentResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  void cleanupComponent(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::CleanupComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::CleanupComponentResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  void nodeInfo(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::NodeInfoRequest* request,
                       ::SAFplus::Rpc::amfRpc::NodeInfoResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  void processInfo(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::ProcessInfoRequest* request,
                       ::SAFplus::Rpc::amfRpc::ProcessInfoResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  void processFailed(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::ProcessFailedRequest* request,
                       ::SAFplus::Rpc::amfRpc::ProcessFailedResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  void rebootNode(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::RebootNodeRequest* request,
                       ::SAFplus::Rpc::amfRpc::RebootNodeResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
  void shutdownAmf(SAFplus::Handle destination,
                       const ::SAFplus::Rpc::amfRpc::ShutdownAmfRequest* request,
                       ::SAFplus::Rpc::amfRpc::ShutdownAmfResponse* response,
                       SAFplus::Wakeable& wakeable = *((SAFplus::Wakeable*)nullptr));
 private:
  SAFplus::Rpc::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(amfRpc_Stub);
};

class amfRpcImpl : public amfRpc {
 public:
  amfRpcImpl();
  ~amfRpcImpl();


  // implements amfRpcImpl ----------------------------------------------
  void startComponent(const ::SAFplus::Rpc::amfRpc::StartComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::StartComponentResponse* response);
  void stopComponent(const ::SAFplus::Rpc::amfRpc::StopComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::StopComponentResponse* response);
  void cleanupComponent(const ::SAFplus::Rpc::amfRpc::CleanupComponentRequest* request,
                       ::SAFplus::Rpc::amfRpc::CleanupComponentResponse* response);
  void nodeInfo(const ::SAFplus::Rpc::amfRpc::NodeInfoRequest* request,
                       ::SAFplus::Rpc::amfRpc::NodeInfoResponse* response);
  void processInfo(const ::SAFplus::Rpc::amfRpc::ProcessInfoRequest* request,
                       ::SAFplus::Rpc::amfRpc::ProcessInfoResponse* response);
  void processFailed(const ::SAFplus::Rpc::amfRpc::ProcessFailedRequest* request,
                       ::SAFplus::Rpc::amfRpc::ProcessFailedResponse* response);
  void rebootNode(const ::SAFplus::Rpc::amfRpc::RebootNodeRequest* request,
                       ::SAFplus::Rpc::amfRpc::RebootNodeResponse* response);
  void shutdownAmf(const ::SAFplus::Rpc::amfRpc::ShutdownAmfRequest* request,
                       ::SAFplus::Rpc::amfRpc::ShutdownAmfResponse* response);
};

}  // namespace amfRpc
}  // namespace Rpc
}  // namespace SAFplus
