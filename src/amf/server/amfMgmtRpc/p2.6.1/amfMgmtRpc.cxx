// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "clRpcChannel.hxx"
#include "amfMgmtRpc.hxx"

namespace SAFplus {
namespace Rpc {
namespace amfMgmtRpc {

namespace {

const ::google::protobuf::ServiceDescriptor* amfMgmtRpc_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Rpc_amfMgmtRpc_2eproto() {
  protobuf_AddDesc_amfMgmtRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "amfMgmtRpc.proto");
  GOOGLE_CHECK(file != NULL);
  amfMgmtRpc_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Rpc_amfMgmtRpc_2eproto);
}

}  // namespace
amfMgmtRpc::~amfMgmtRpc() {}

const ::google::protobuf::ServiceDescriptor* amfMgmtRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return amfMgmtRpc_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* amfMgmtRpc::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return amfMgmtRpc_descriptor_;
}

void amfMgmtRpc::initialize(const ::SAFplus::Rpc::amfMgmtRpc::InitializeRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::InitializeResponse*)
{
  logError("RPC","SVR","Method initialize() not implemented.");
}

void amfMgmtRpc::finalize(const ::SAFplus::Rpc::amfMgmtRpc::FinalizeRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::FinalizeResponse*)
{
  logError("RPC","SVR","Method finalize() not implemented.");
}

void amfMgmtRpc::commit(const ::SAFplus::Rpc::amfMgmtRpc::CommitRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::CommitResponse*)
{
  logError("RPC","SVR","Method commit() not implemented.");
}

void amfMgmtRpc::createComponent(const ::SAFplus::Rpc::amfMgmtRpc::CreateComponentRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::CreateComponentResponse*)
{
  logError("RPC","SVR","Method createComponent() not implemented.");
}

void amfMgmtRpc::updateComponent(const ::SAFplus::Rpc::amfMgmtRpc::UpdateComponentRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::UpdateComponentResponse*)
{
  logError("RPC","SVR","Method updateComponent() not implemented.");
}

void amfMgmtRpc::deleteComponent(const ::SAFplus::Rpc::amfMgmtRpc::DeleteComponentRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::DeleteComponentResponse*)
{
  logError("RPC","SVR","Method deleteComponent() not implemented.");
}

void amfMgmtRpc::createSG(const ::SAFplus::Rpc::amfMgmtRpc::CreateSGRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::CreateSGResponse*)
{
  logError("RPC","SVR","Method createSG() not implemented.");
}

void amfMgmtRpc::updateSG(const ::SAFplus::Rpc::amfMgmtRpc::UpdateSGRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::UpdateSGResponse*)
{
  logError("RPC","SVR","Method updateSG() not implemented.");
}

void amfMgmtRpc::deleteSG(const ::SAFplus::Rpc::amfMgmtRpc::DeleteSGRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::DeleteSGResponse*)
{
  logError("RPC","SVR","Method deleteSG() not implemented.");
}

void amfMgmtRpc::createNode(const ::SAFplus::Rpc::amfMgmtRpc::CreateNodeRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::CreateNodeResponse*)
{
  logError("RPC","SVR","Method createNode() not implemented.");
}

void amfMgmtRpc::updateNode(const ::SAFplus::Rpc::amfMgmtRpc::UpdateNodeRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::UpdateNodeResponse*)
{
  logError("RPC","SVR","Method updateNode() not implemented.");
}

void amfMgmtRpc::deleteNode(const ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeResponse*)
{
  logError("RPC","SVR","Method deleteNode() not implemented.");
}

void amfMgmtRpc::createSU(const ::SAFplus::Rpc::amfMgmtRpc::CreateSURequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::CreateSUResponse*)
{
  logError("RPC","SVR","Method createSU() not implemented.");
}

void amfMgmtRpc::updateSU(const ::SAFplus::Rpc::amfMgmtRpc::UpdateSURequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::UpdateSUResponse*)
{
  logError("RPC","SVR","Method updateSU() not implemented.");
}

void amfMgmtRpc::deleteSU(const ::SAFplus::Rpc::amfMgmtRpc::DeleteSURequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::DeleteSUResponse*)
{
  logError("RPC","SVR","Method deleteSU() not implemented.");
}

void amfMgmtRpc::createSI(const ::SAFplus::Rpc::amfMgmtRpc::CreateSIRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::CreateSIResponse*)
{
  logError("RPC","SVR","Method createSI() not implemented.");
}

void amfMgmtRpc::updateSI(const ::SAFplus::Rpc::amfMgmtRpc::UpdateSIRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::UpdateSIResponse*)
{
  logError("RPC","SVR","Method updateSI() not implemented.");
}

void amfMgmtRpc::deleteSI(const ::SAFplus::Rpc::amfMgmtRpc::DeleteSIRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::DeleteSIResponse*)
{
  logError("RPC","SVR","Method deleteSI() not implemented.");
}

void amfMgmtRpc::createCSI(const ::SAFplus::Rpc::amfMgmtRpc::CreateCSIRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::CreateCSIResponse*)
{
  logError("RPC","SVR","Method createCSI() not implemented.");
}

void amfMgmtRpc::updateCSI(const ::SAFplus::Rpc::amfMgmtRpc::UpdateCSIRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::UpdateCSIResponse*)
{
  logError("RPC","SVR","Method updateCSI() not implemented.");
}

void amfMgmtRpc::deleteCSI(const ::SAFplus::Rpc::amfMgmtRpc::DeleteCSIRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::DeleteCSIResponse*)
{
  logError("RPC","SVR","Method deleteCSI() not implemented.");
}

void amfMgmtRpc::deleteCSINVP(const ::SAFplus::Rpc::amfMgmtRpc::DeleteCSINVPRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::DeleteCSINVPResponse*)
{
  logError("RPC","SVR","Method deleteCSINVP() not implemented.");
}

void amfMgmtRpc::deleteNodeSUList(const ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeSUListRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeSUListResponse*)
{
  logError("RPC","SVR","Method deleteNodeSUList() not implemented.");
}

void amfMgmtRpc::deleteSGSUList(const ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSUListRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSUListResponse*)
{
  logError("RPC","SVR","Method deleteSGSUList() not implemented.");
}

void amfMgmtRpc::deleteSGSIList(const ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSIListRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSIListResponse*)
{
  logError("RPC","SVR","Method deleteSGSIList() not implemented.");
}

void amfMgmtRpc::deleteSUCompList(const ::SAFplus::Rpc::amfMgmtRpc::DeleteSUCompListRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::DeleteSUCompListResponse*)
{
  logError("RPC","SVR","Method deleteSUCompList() not implemented.");
}

void amfMgmtRpc::deleteSICSIList(const ::SAFplus::Rpc::amfMgmtRpc::DeleteSICSIListRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::DeleteSICSIListResponse*)
{
  logError("RPC","SVR","Method deleteSICSIList() not implemented.");
}

void amfMgmtRpc::lockNodeAssignment(const ::SAFplus::Rpc::amfMgmtRpc::LockNodeAssignmentRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::LockNodeAssignmentResponse*)
{
  logError("RPC","SVR","Method lockNodeAssignment() not implemented.");
}

void amfMgmtRpc::lockSGAssignment(const ::SAFplus::Rpc::amfMgmtRpc::LockSGAssignmentRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::LockSGAssignmentResponse*)
{
  logError("RPC","SVR","Method lockSGAssignment() not implemented.");
}

void amfMgmtRpc::lockSUAssignment(const ::SAFplus::Rpc::amfMgmtRpc::LockSUAssignmentRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::LockSUAssignmentResponse*)
{
  logError("RPC","SVR","Method lockSUAssignment() not implemented.");
}

void amfMgmtRpc::lockSIAssignment(const ::SAFplus::Rpc::amfMgmtRpc::LockSIAssignmentRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::LockSIAssignmentResponse*)
{
  logError("RPC","SVR","Method lockSIAssignment() not implemented.");
}

void amfMgmtRpc::lockNodeInstantiation(const ::SAFplus::Rpc::amfMgmtRpc::LockNodeInstantiationRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::LockNodeInstantiationResponse*)
{
  logError("RPC","SVR","Method lockNodeInstantiation() not implemented.");
}

void amfMgmtRpc::lockSGInstantiation(const ::SAFplus::Rpc::amfMgmtRpc::LockSGInstantiationRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::LockSGInstantiationResponse*)
{
  logError("RPC","SVR","Method lockSGInstantiation() not implemented.");
}

void amfMgmtRpc::lockSUInstantiation(const ::SAFplus::Rpc::amfMgmtRpc::LockSUInstantiationRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::LockSUInstantiationResponse*)
{
  logError("RPC","SVR","Method lockSUInstantiation() not implemented.");
}

void amfMgmtRpc::unlockNode(const ::SAFplus::Rpc::amfMgmtRpc::UnlockNodeRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::UnlockNodeResponse*)
{
  logError("RPC","SVR","Method unlockNode() not implemented.");
}

void amfMgmtRpc::unlockSG(const ::SAFplus::Rpc::amfMgmtRpc::UnlockSGRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::UnlockSGResponse*)
{
  logError("RPC","SVR","Method unlockSG() not implemented.");
}

void amfMgmtRpc::unlockSU(const ::SAFplus::Rpc::amfMgmtRpc::UnlockSURequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::UnlockSUResponse*)
{
  logError("RPC","SVR","Method unlockSU() not implemented.");
}

void amfMgmtRpc::unlockSI(const ::SAFplus::Rpc::amfMgmtRpc::UnlockSIRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::UnlockSIResponse*)
{
  logError("RPC","SVR","Method unlockSI() not implemented.");
}

void amfMgmtRpc::repairNode(const ::SAFplus::Rpc::amfMgmtRpc::RepairNodeRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::RepairNodeResponse*)
{
  logError("RPC","SVR","Method repairNode() not implemented.");
}

void amfMgmtRpc::repairComponent(const ::SAFplus::Rpc::amfMgmtRpc::RepairComponentRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::RepairComponentResponse*)
{
  logError("RPC","SVR","Method repairComponent() not implemented.");
}

void amfMgmtRpc::repairSU(const ::SAFplus::Rpc::amfMgmtRpc::RepairSURequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::RepairSUResponse*)
{
  logError("RPC","SVR","Method repairSU() not implemented.");
}

void amfMgmtRpc::getComponentConfig(const ::SAFplus::Rpc::amfMgmtRpc::GetComponentConfigRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::GetComponentConfigResponse*)
{
  logError("RPC","SVR","Method getComponentConfig() not implemented.");
}

void amfMgmtRpc::getNodeConfig(const ::SAFplus::Rpc::amfMgmtRpc::GetNodeConfigRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::GetNodeConfigResponse*)
{
  logError("RPC","SVR","Method getNodeConfig() not implemented.");
}

void amfMgmtRpc::getSUConfig(const ::SAFplus::Rpc::amfMgmtRpc::GetSUConfigRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::GetSUConfigResponse*)
{
  logError("RPC","SVR","Method getSUConfig() not implemented.");
}

void amfMgmtRpc::getSGConfig(const ::SAFplus::Rpc::amfMgmtRpc::GetSGConfigRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::GetSGConfigResponse*)
{
  logError("RPC","SVR","Method getSGConfig() not implemented.");
}

void amfMgmtRpc::getSIConfig(const ::SAFplus::Rpc::amfMgmtRpc::GetSIConfigRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::GetSIConfigResponse*)
{
  logError("RPC","SVR","Method getSIConfig() not implemented.");
}

void amfMgmtRpc::getCSIConfig(const ::SAFplus::Rpc::amfMgmtRpc::GetCSIConfigRequest*,
                         ::SAFplus::Rpc::amfMgmtRpc::GetCSIConfigResponse*)
{
  logError("RPC","SVR","Method getCSIConfig() not implemented.");
}

void amfMgmtRpc::initialize(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::InitializeRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::InitializeResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method initialize() not implemented.");
}

void amfMgmtRpc::finalize(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::FinalizeRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::FinalizeResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method finalize() not implemented.");
}

void amfMgmtRpc::commit(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::CommitRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::CommitResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method commit() not implemented.");
}

void amfMgmtRpc::createComponent(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::CreateComponentRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::CreateComponentResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method createComponent() not implemented.");
}

void amfMgmtRpc::updateComponent(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::UpdateComponentRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::UpdateComponentResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method updateComponent() not implemented.");
}

void amfMgmtRpc::deleteComponent(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::DeleteComponentRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::DeleteComponentResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method deleteComponent() not implemented.");
}

void amfMgmtRpc::createSG(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::CreateSGRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::CreateSGResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method createSG() not implemented.");
}

void amfMgmtRpc::updateSG(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::UpdateSGRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::UpdateSGResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method updateSG() not implemented.");
}

void amfMgmtRpc::deleteSG(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::DeleteSGRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::DeleteSGResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method deleteSG() not implemented.");
}

void amfMgmtRpc::createNode(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::CreateNodeRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::CreateNodeResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method createNode() not implemented.");
}

void amfMgmtRpc::updateNode(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::UpdateNodeRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::UpdateNodeResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method updateNode() not implemented.");
}

void amfMgmtRpc::deleteNode(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method deleteNode() not implemented.");
}

void amfMgmtRpc::createSU(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::CreateSURequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::CreateSUResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method createSU() not implemented.");
}

void amfMgmtRpc::updateSU(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::UpdateSURequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::UpdateSUResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method updateSU() not implemented.");
}

void amfMgmtRpc::deleteSU(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::DeleteSURequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::DeleteSUResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method deleteSU() not implemented.");
}

void amfMgmtRpc::createSI(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::CreateSIRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::CreateSIResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method createSI() not implemented.");
}

void amfMgmtRpc::updateSI(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::UpdateSIRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::UpdateSIResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method updateSI() not implemented.");
}

void amfMgmtRpc::deleteSI(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::DeleteSIRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::DeleteSIResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method deleteSI() not implemented.");
}

void amfMgmtRpc::createCSI(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::CreateCSIRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::CreateCSIResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method createCSI() not implemented.");
}

void amfMgmtRpc::updateCSI(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::UpdateCSIRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::UpdateCSIResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method updateCSI() not implemented.");
}

void amfMgmtRpc::deleteCSI(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::DeleteCSIRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::DeleteCSIResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method deleteCSI() not implemented.");
}

void amfMgmtRpc::deleteCSINVP(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::DeleteCSINVPRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::DeleteCSINVPResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method deleteCSINVP() not implemented.");
}

void amfMgmtRpc::deleteNodeSUList(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeSUListRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeSUListResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method deleteNodeSUList() not implemented.");
}

void amfMgmtRpc::deleteSGSUList(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSUListRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSUListResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method deleteSGSUList() not implemented.");
}

void amfMgmtRpc::deleteSGSIList(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSIListRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSIListResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method deleteSGSIList() not implemented.");
}

void amfMgmtRpc::deleteSUCompList(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::DeleteSUCompListRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::DeleteSUCompListResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method deleteSUCompList() not implemented.");
}

void amfMgmtRpc::deleteSICSIList(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::DeleteSICSIListRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::DeleteSICSIListResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method deleteSICSIList() not implemented.");
}

void amfMgmtRpc::lockNodeAssignment(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::LockNodeAssignmentRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::LockNodeAssignmentResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method lockNodeAssignment() not implemented.");
}

void amfMgmtRpc::lockSGAssignment(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::LockSGAssignmentRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::LockSGAssignmentResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method lockSGAssignment() not implemented.");
}

void amfMgmtRpc::lockSUAssignment(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::LockSUAssignmentRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::LockSUAssignmentResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method lockSUAssignment() not implemented.");
}

void amfMgmtRpc::lockSIAssignment(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::LockSIAssignmentRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::LockSIAssignmentResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method lockSIAssignment() not implemented.");
}

void amfMgmtRpc::lockNodeInstantiation(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::LockNodeInstantiationRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::LockNodeInstantiationResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method lockNodeInstantiation() not implemented.");
}

void amfMgmtRpc::lockSGInstantiation(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::LockSGInstantiationRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::LockSGInstantiationResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method lockSGInstantiation() not implemented.");
}

void amfMgmtRpc::lockSUInstantiation(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::LockSUInstantiationRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::LockSUInstantiationResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method lockSUInstantiation() not implemented.");
}

void amfMgmtRpc::unlockNode(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::UnlockNodeRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::UnlockNodeResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method unlockNode() not implemented.");
}

void amfMgmtRpc::unlockSG(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::UnlockSGRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::UnlockSGResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method unlockSG() not implemented.");
}

void amfMgmtRpc::unlockSU(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::UnlockSURequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::UnlockSUResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method unlockSU() not implemented.");
}

void amfMgmtRpc::unlockSI(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::UnlockSIRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::UnlockSIResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method unlockSI() not implemented.");
}

void amfMgmtRpc::repairNode(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::RepairNodeRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::RepairNodeResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method repairNode() not implemented.");
}

void amfMgmtRpc::repairComponent(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::RepairComponentRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::RepairComponentResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method repairComponent() not implemented.");
}

void amfMgmtRpc::repairSU(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::RepairSURequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::RepairSUResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method repairSU() not implemented.");
}

void amfMgmtRpc::getComponentConfig(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::GetComponentConfigRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::GetComponentConfigResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method getComponentConfig() not implemented.");
}

void amfMgmtRpc::getNodeConfig(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::GetNodeConfigRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::GetNodeConfigResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method getNodeConfig() not implemented.");
}

void amfMgmtRpc::getSUConfig(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::GetSUConfigRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::GetSUConfigResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method getSUConfig() not implemented.");
}

void amfMgmtRpc::getSGConfig(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::GetSGConfigRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::GetSGConfigResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method getSGConfig() not implemented.");
}

void amfMgmtRpc::getSIConfig(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::GetSIConfigRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::GetSIConfigResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method getSIConfig() not implemented.");
}

void amfMgmtRpc::getCSIConfig(SAFplus::Handle destination,
                     const ::SAFplus::Rpc::amfMgmtRpc::GetCSIConfigRequest* request,
                     ::SAFplus::Rpc::amfMgmtRpc::GetCSIConfigResponse* response,
                     SAFplus::Wakeable& wakeable)
{
  logError("RPC","SVR","Method getCSIConfig() not implemented.");
}

void amfMgmtRpc::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             SAFplus::Handle destination,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             SAFplus::Wakeable& wakeable) {
  GOOGLE_DCHECK_EQ(method->service(), amfMgmtRpc_descriptor_);
  switch(method->index()) {
    case 0:
      initialize(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::InitializeRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::InitializeResponse*>(response));
      break;
    case 1:
      finalize(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::FinalizeRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::FinalizeResponse*>(response));
      break;
    case 2:
      commit(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::CommitRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::CommitResponse*>(response));
      break;
    case 3:
      createComponent(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::CreateComponentRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::CreateComponentResponse*>(response));
      break;
    case 4:
      updateComponent(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::UpdateComponentRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::UpdateComponentResponse*>(response));
      break;
    case 5:
      deleteComponent(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::DeleteComponentRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::DeleteComponentResponse*>(response));
      break;
    case 6:
      createSG(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::CreateSGRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::CreateSGResponse*>(response));
      break;
    case 7:
      updateSG(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::UpdateSGRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::UpdateSGResponse*>(response));
      break;
    case 8:
      deleteSG(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::DeleteSGRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::DeleteSGResponse*>(response));
      break;
    case 9:
      createNode(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::CreateNodeRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::CreateNodeResponse*>(response));
      break;
    case 10:
      updateNode(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::UpdateNodeRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::UpdateNodeResponse*>(response));
      break;
    case 11:
      deleteNode(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeResponse*>(response));
      break;
    case 12:
      createSU(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::CreateSURequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::CreateSUResponse*>(response));
      break;
    case 13:
      updateSU(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::UpdateSURequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::UpdateSUResponse*>(response));
      break;
    case 14:
      deleteSU(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::DeleteSURequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::DeleteSUResponse*>(response));
      break;
    case 15:
      createSI(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::CreateSIRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::CreateSIResponse*>(response));
      break;
    case 16:
      updateSI(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::UpdateSIRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::UpdateSIResponse*>(response));
      break;
    case 17:
      deleteSI(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::DeleteSIRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::DeleteSIResponse*>(response));
      break;
    case 18:
      createCSI(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::CreateCSIRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::CreateCSIResponse*>(response));
      break;
    case 19:
      updateCSI(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::UpdateCSIRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::UpdateCSIResponse*>(response));
      break;
    case 20:
      deleteCSI(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::DeleteCSIRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::DeleteCSIResponse*>(response));
      break;
    case 21:
      deleteCSINVP(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::DeleteCSINVPRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::DeleteCSINVPResponse*>(response));
      break;
    case 22:
      deleteNodeSUList(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeSUListRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeSUListResponse*>(response));
      break;
    case 23:
      deleteSGSUList(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSUListRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSUListResponse*>(response));
      break;
    case 24:
      deleteSGSIList(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSIListRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSIListResponse*>(response));
      break;
    case 25:
      deleteSUCompList(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::DeleteSUCompListRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::DeleteSUCompListResponse*>(response));
      break;
    case 26:
      deleteSICSIList(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::DeleteSICSIListRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::DeleteSICSIListResponse*>(response));
      break;
    case 27:
      lockNodeAssignment(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::LockNodeAssignmentRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::LockNodeAssignmentResponse*>(response));
      break;
    case 28:
      lockSGAssignment(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::LockSGAssignmentRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::LockSGAssignmentResponse*>(response));
      break;
    case 29:
      lockSUAssignment(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::LockSUAssignmentRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::LockSUAssignmentResponse*>(response));
      break;
    case 30:
      lockSIAssignment(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::LockSIAssignmentRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::LockSIAssignmentResponse*>(response));
      break;
    case 31:
      lockNodeInstantiation(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::LockNodeInstantiationRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::LockNodeInstantiationResponse*>(response));
      break;
    case 32:
      lockSGInstantiation(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::LockSGInstantiationRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::LockSGInstantiationResponse*>(response));
      break;
    case 33:
      lockSUInstantiation(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::LockSUInstantiationRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::LockSUInstantiationResponse*>(response));
      break;
    case 34:
      unlockNode(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::UnlockNodeRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::UnlockNodeResponse*>(response));
      break;
    case 35:
      unlockSG(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::UnlockSGRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::UnlockSGResponse*>(response));
      break;
    case 36:
      unlockSU(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::UnlockSURequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::UnlockSUResponse*>(response));
      break;
    case 37:
      unlockSI(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::UnlockSIRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::UnlockSIResponse*>(response));
      break;
    case 38:
      repairNode(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::RepairNodeRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::RepairNodeResponse*>(response));
      break;
    case 39:
      repairComponent(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::RepairComponentRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::RepairComponentResponse*>(response));
      break;
    case 40:
      repairSU(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::RepairSURequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::RepairSUResponse*>(response));
      break;
    case 41:
      getComponentConfig(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::GetComponentConfigRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::GetComponentConfigResponse*>(response));
      break;
    case 42:
      getNodeConfig(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::GetNodeConfigRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::GetNodeConfigResponse*>(response));
      break;
    case 43:
      getSUConfig(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::GetSUConfigRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::GetSUConfigResponse*>(response));
      break;
    case 44:
      getSGConfig(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::GetSGConfigRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::GetSGConfigResponse*>(response));
      break;
    case 45:
      getSIConfig(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::GetSIConfigRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::GetSIConfigResponse*>(response));
      break;
    case 46:
      getCSIConfig(::google::protobuf::down_cast<const ::SAFplus::Rpc::amfMgmtRpc::GetCSIConfigRequest*>(request),
             ::google::protobuf::down_cast< ::SAFplus::Rpc::amfMgmtRpc::GetCSIConfigResponse*>(response));
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& amfMgmtRpc::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SAFplus::Rpc::amfMgmtRpc::InitializeRequest::default_instance();
    case 1:
      return ::SAFplus::Rpc::amfMgmtRpc::FinalizeRequest::default_instance();
    case 2:
      return ::SAFplus::Rpc::amfMgmtRpc::CommitRequest::default_instance();
    case 3:
      return ::SAFplus::Rpc::amfMgmtRpc::CreateComponentRequest::default_instance();
    case 4:
      return ::SAFplus::Rpc::amfMgmtRpc::UpdateComponentRequest::default_instance();
    case 5:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteComponentRequest::default_instance();
    case 6:
      return ::SAFplus::Rpc::amfMgmtRpc::CreateSGRequest::default_instance();
    case 7:
      return ::SAFplus::Rpc::amfMgmtRpc::UpdateSGRequest::default_instance();
    case 8:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteSGRequest::default_instance();
    case 9:
      return ::SAFplus::Rpc::amfMgmtRpc::CreateNodeRequest::default_instance();
    case 10:
      return ::SAFplus::Rpc::amfMgmtRpc::UpdateNodeRequest::default_instance();
    case 11:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeRequest::default_instance();
    case 12:
      return ::SAFplus::Rpc::amfMgmtRpc::CreateSURequest::default_instance();
    case 13:
      return ::SAFplus::Rpc::amfMgmtRpc::UpdateSURequest::default_instance();
    case 14:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteSURequest::default_instance();
    case 15:
      return ::SAFplus::Rpc::amfMgmtRpc::CreateSIRequest::default_instance();
    case 16:
      return ::SAFplus::Rpc::amfMgmtRpc::UpdateSIRequest::default_instance();
    case 17:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteSIRequest::default_instance();
    case 18:
      return ::SAFplus::Rpc::amfMgmtRpc::CreateCSIRequest::default_instance();
    case 19:
      return ::SAFplus::Rpc::amfMgmtRpc::UpdateCSIRequest::default_instance();
    case 20:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteCSIRequest::default_instance();
    case 21:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteCSINVPRequest::default_instance();
    case 22:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeSUListRequest::default_instance();
    case 23:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSUListRequest::default_instance();
    case 24:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSIListRequest::default_instance();
    case 25:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteSUCompListRequest::default_instance();
    case 26:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteSICSIListRequest::default_instance();
    case 27:
      return ::SAFplus::Rpc::amfMgmtRpc::LockNodeAssignmentRequest::default_instance();
    case 28:
      return ::SAFplus::Rpc::amfMgmtRpc::LockSGAssignmentRequest::default_instance();
    case 29:
      return ::SAFplus::Rpc::amfMgmtRpc::LockSUAssignmentRequest::default_instance();
    case 30:
      return ::SAFplus::Rpc::amfMgmtRpc::LockSIAssignmentRequest::default_instance();
    case 31:
      return ::SAFplus::Rpc::amfMgmtRpc::LockNodeInstantiationRequest::default_instance();
    case 32:
      return ::SAFplus::Rpc::amfMgmtRpc::LockSGInstantiationRequest::default_instance();
    case 33:
      return ::SAFplus::Rpc::amfMgmtRpc::LockSUInstantiationRequest::default_instance();
    case 34:
      return ::SAFplus::Rpc::amfMgmtRpc::UnlockNodeRequest::default_instance();
    case 35:
      return ::SAFplus::Rpc::amfMgmtRpc::UnlockSGRequest::default_instance();
    case 36:
      return ::SAFplus::Rpc::amfMgmtRpc::UnlockSURequest::default_instance();
    case 37:
      return ::SAFplus::Rpc::amfMgmtRpc::UnlockSIRequest::default_instance();
    case 38:
      return ::SAFplus::Rpc::amfMgmtRpc::RepairNodeRequest::default_instance();
    case 39:
      return ::SAFplus::Rpc::amfMgmtRpc::RepairComponentRequest::default_instance();
    case 40:
      return ::SAFplus::Rpc::amfMgmtRpc::RepairSURequest::default_instance();
    case 41:
      return ::SAFplus::Rpc::amfMgmtRpc::GetComponentConfigRequest::default_instance();
    case 42:
      return ::SAFplus::Rpc::amfMgmtRpc::GetNodeConfigRequest::default_instance();
    case 43:
      return ::SAFplus::Rpc::amfMgmtRpc::GetSUConfigRequest::default_instance();
    case 44:
      return ::SAFplus::Rpc::amfMgmtRpc::GetSGConfigRequest::default_instance();
    case 45:
      return ::SAFplus::Rpc::amfMgmtRpc::GetSIConfigRequest::default_instance();
    case 46:
      return ::SAFplus::Rpc::amfMgmtRpc::GetCSIConfigRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& amfMgmtRpc::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SAFplus::Rpc::amfMgmtRpc::InitializeResponse::default_instance();
    case 1:
      return ::SAFplus::Rpc::amfMgmtRpc::FinalizeResponse::default_instance();
    case 2:
      return ::SAFplus::Rpc::amfMgmtRpc::CommitResponse::default_instance();
    case 3:
      return ::SAFplus::Rpc::amfMgmtRpc::CreateComponentResponse::default_instance();
    case 4:
      return ::SAFplus::Rpc::amfMgmtRpc::UpdateComponentResponse::default_instance();
    case 5:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteComponentResponse::default_instance();
    case 6:
      return ::SAFplus::Rpc::amfMgmtRpc::CreateSGResponse::default_instance();
    case 7:
      return ::SAFplus::Rpc::amfMgmtRpc::UpdateSGResponse::default_instance();
    case 8:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteSGResponse::default_instance();
    case 9:
      return ::SAFplus::Rpc::amfMgmtRpc::CreateNodeResponse::default_instance();
    case 10:
      return ::SAFplus::Rpc::amfMgmtRpc::UpdateNodeResponse::default_instance();
    case 11:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeResponse::default_instance();
    case 12:
      return ::SAFplus::Rpc::amfMgmtRpc::CreateSUResponse::default_instance();
    case 13:
      return ::SAFplus::Rpc::amfMgmtRpc::UpdateSUResponse::default_instance();
    case 14:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteSUResponse::default_instance();
    case 15:
      return ::SAFplus::Rpc::amfMgmtRpc::CreateSIResponse::default_instance();
    case 16:
      return ::SAFplus::Rpc::amfMgmtRpc::UpdateSIResponse::default_instance();
    case 17:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteSIResponse::default_instance();
    case 18:
      return ::SAFplus::Rpc::amfMgmtRpc::CreateCSIResponse::default_instance();
    case 19:
      return ::SAFplus::Rpc::amfMgmtRpc::UpdateCSIResponse::default_instance();
    case 20:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteCSIResponse::default_instance();
    case 21:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteCSINVPResponse::default_instance();
    case 22:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeSUListResponse::default_instance();
    case 23:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSUListResponse::default_instance();
    case 24:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSIListResponse::default_instance();
    case 25:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteSUCompListResponse::default_instance();
    case 26:
      return ::SAFplus::Rpc::amfMgmtRpc::DeleteSICSIListResponse::default_instance();
    case 27:
      return ::SAFplus::Rpc::amfMgmtRpc::LockNodeAssignmentResponse::default_instance();
    case 28:
      return ::SAFplus::Rpc::amfMgmtRpc::LockSGAssignmentResponse::default_instance();
    case 29:
      return ::SAFplus::Rpc::amfMgmtRpc::LockSUAssignmentResponse::default_instance();
    case 30:
      return ::SAFplus::Rpc::amfMgmtRpc::LockSIAssignmentResponse::default_instance();
    case 31:
      return ::SAFplus::Rpc::amfMgmtRpc::LockNodeInstantiationResponse::default_instance();
    case 32:
      return ::SAFplus::Rpc::amfMgmtRpc::LockSGInstantiationResponse::default_instance();
    case 33:
      return ::SAFplus::Rpc::amfMgmtRpc::LockSUInstantiationResponse::default_instance();
    case 34:
      return ::SAFplus::Rpc::amfMgmtRpc::UnlockNodeResponse::default_instance();
    case 35:
      return ::SAFplus::Rpc::amfMgmtRpc::UnlockSGResponse::default_instance();
    case 36:
      return ::SAFplus::Rpc::amfMgmtRpc::UnlockSUResponse::default_instance();
    case 37:
      return ::SAFplus::Rpc::amfMgmtRpc::UnlockSIResponse::default_instance();
    case 38:
      return ::SAFplus::Rpc::amfMgmtRpc::RepairNodeResponse::default_instance();
    case 39:
      return ::SAFplus::Rpc::amfMgmtRpc::RepairComponentResponse::default_instance();
    case 40:
      return ::SAFplus::Rpc::amfMgmtRpc::RepairSUResponse::default_instance();
    case 41:
      return ::SAFplus::Rpc::amfMgmtRpc::GetComponentConfigResponse::default_instance();
    case 42:
      return ::SAFplus::Rpc::amfMgmtRpc::GetNodeConfigResponse::default_instance();
    case 43:
      return ::SAFplus::Rpc::amfMgmtRpc::GetSUConfigResponse::default_instance();
    case 44:
      return ::SAFplus::Rpc::amfMgmtRpc::GetSGConfigResponse::default_instance();
    case 45:
      return ::SAFplus::Rpc::amfMgmtRpc::GetSIConfigResponse::default_instance();
    case 46:
      return ::SAFplus::Rpc::amfMgmtRpc::GetCSIConfigResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

amfMgmtRpc_Stub::amfMgmtRpc_Stub(SAFplus::Rpc::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
amfMgmtRpc_Stub::amfMgmtRpc_Stub(
    SAFplus::Rpc::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
amfMgmtRpc_Stub::~amfMgmtRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void amfMgmtRpc_Stub::initialize(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::InitializeRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::InitializeResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(0), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::finalize(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::FinalizeRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::FinalizeResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(1), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::commit(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::CommitRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::CommitResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(2), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::createComponent(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::CreateComponentRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::CreateComponentResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(3), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::updateComponent(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::UpdateComponentRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::UpdateComponentResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(4), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::deleteComponent(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::DeleteComponentRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::DeleteComponentResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(5), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::createSG(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::CreateSGRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::CreateSGResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(6), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::updateSG(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::UpdateSGRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::UpdateSGResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(7), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::deleteSG(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::DeleteSGRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::DeleteSGResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(8), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::createNode(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::CreateNodeRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::CreateNodeResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(9), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::updateNode(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::UpdateNodeRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::UpdateNodeResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(10), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::deleteNode(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(11), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::createSU(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::CreateSURequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::CreateSUResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(12), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::updateSU(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::UpdateSURequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::UpdateSUResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(13), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::deleteSU(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::DeleteSURequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::DeleteSUResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(14), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::createSI(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::CreateSIRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::CreateSIResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(15), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::updateSI(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::UpdateSIRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::UpdateSIResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(16), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::deleteSI(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::DeleteSIRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::DeleteSIResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(17), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::createCSI(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::CreateCSIRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::CreateCSIResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(18), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::updateCSI(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::UpdateCSIRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::UpdateCSIResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(19), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::deleteCSI(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::DeleteCSIRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::DeleteCSIResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(20), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::deleteCSINVP(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::DeleteCSINVPRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::DeleteCSINVPResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(21), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::deleteNodeSUList(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeSUListRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::DeleteNodeSUListResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(22), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::deleteSGSUList(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSUListRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSUListResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(23), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::deleteSGSIList(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSIListRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::DeleteSGSIListResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(24), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::deleteSUCompList(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::DeleteSUCompListRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::DeleteSUCompListResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(25), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::deleteSICSIList(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::DeleteSICSIListRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::DeleteSICSIListResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(26), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::lockNodeAssignment(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::LockNodeAssignmentRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::LockNodeAssignmentResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(27), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::lockSGAssignment(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::LockSGAssignmentRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::LockSGAssignmentResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(28), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::lockSUAssignment(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::LockSUAssignmentRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::LockSUAssignmentResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(29), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::lockSIAssignment(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::LockSIAssignmentRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::LockSIAssignmentResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(30), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::lockNodeInstantiation(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::LockNodeInstantiationRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::LockNodeInstantiationResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(31), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::lockSGInstantiation(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::LockSGInstantiationRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::LockSGInstantiationResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(32), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::lockSUInstantiation(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::LockSUInstantiationRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::LockSUInstantiationResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(33), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::unlockNode(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::UnlockNodeRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::UnlockNodeResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(34), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::unlockSG(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::UnlockSGRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::UnlockSGResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(35), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::unlockSU(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::UnlockSURequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::UnlockSUResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(36), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::unlockSI(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::UnlockSIRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::UnlockSIResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(37), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::repairNode(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::RepairNodeRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::RepairNodeResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(38), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::repairComponent(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::RepairComponentRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::RepairComponentResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(39), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::repairSU(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::RepairSURequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::RepairSUResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(40), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::getComponentConfig(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::GetComponentConfigRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::GetComponentConfigResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(41), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::getNodeConfig(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::GetNodeConfigRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::GetNodeConfigResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(42), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::getSUConfig(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::GetSUConfigRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::GetSUConfigResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(43), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::getSGConfig(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::GetSGConfigRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::GetSGConfigResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(44), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::getSIConfig(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::GetSIConfigRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::GetSIConfigResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(45), dest, request, response, wakeable);
}
void amfMgmtRpc_Stub::getCSIConfig(SAFplus::Handle dest,
                              const ::SAFplus::Rpc::amfMgmtRpc::GetCSIConfigRequest* request,
                              ::SAFplus::Rpc::amfMgmtRpc::GetCSIConfigResponse* response,
                              SAFplus::Wakeable& wakeable) {
  channel_->CallMethod(descriptor()->method(46), dest, request, response, wakeable);
}

}  // namespace amfMgmtRpc
}  // namespace Rpc
}  // namespace SAFplus
