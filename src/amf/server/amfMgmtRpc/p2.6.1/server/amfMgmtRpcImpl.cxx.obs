#include "amfMgmtRpc.hxx"
//#include <clAmfMgmtApi.hxx>
#include <clMgtDatabase.hxx>
#include <SafplusAmf.hxx>
#include <SAFplusAmfModule.hxx>
#include <CapabilityModel.hxx>
#include <clDbalBase.hxx>
#include <boost/unordered_map.hpp>

extern SAFplus::MgtDatabase amfDb;
extern SAFplusAmf::SAFplusAmfModule cfg;

namespace SAFplus {

typedef std::pair<const Handle,SQLiteDBHandle_t*> SQLiteHandleMapPair; 
//typedef std::pair<const SAFplus::Handle&,void*> RefObjMapPair;
typedef boost::unordered_map <SAFplus::Handle, SQLiteDBHandle_t*> SQLiteHandleHashMap;

namespace Rpc {
namespace amfMgmtRpc {

  amfMgmtRpcImpl::amfMgmtRpcImpl()
  {
    //TODO: Auto-generated constructor stub
  }

  amfMgmtRpcImpl::~amfMgmtRpcImpl()
  {
    //TODO: Auto-generated destructor stub
  }

  ClRcT addEntityConfigToDatabase(const std::string& xpath, const std::string& entityName)
  {
    // check if the xpath exists in the DB
    std::string val;
    std::vector<std::string>child;
    ClRcT rc = amfDb.getRecord(xpath,val,&child);
    if (rc == CL_OK)
    {
       std::vector<std::string>::iterator it;
       it = std::find(child.begin(),child.end(),entityName);
       if (it != child.end())
       {
          return CL_ERR_ALREADY_EXIST;
       }
       child.push_back(entityName);
       rc = amfDb.setRecord(xpath,val,&child);
    }
    return rc;
  }

  ClRcT addEntityToDatabase(const char* xpath, const std::string& entityName)
  {
    // check if the xpath exists in the DB
    logInfo("HUNG","---", "enter [%s] with params [%s] [%s]",__FUNCTION__, xpath, entityName.c_str());
    std::string val;
    std::vector<std::string>child;
    std::string strXpath(xpath);
    ClRcT rc = amfDb.getRecord(strXpath,val,&child);
    logInfo("HUNG","---", "get record rc=[0x%x]", rc);
    if (rc == CL_OK)
    {
       std::vector<std::string>::iterator it;
       it = std::find(child.begin(),child.end(),entityName);
       if (it != child.end())
       {
          return CL_ERR_ALREADY_EXIST;
       }
       std::string entname = entityName;
       entname.insert(0,"[@name=\"");
       entname.append("\"]");
       child.push_back(entname);
       rc = amfDb.setRecord(xpath,val,&child);
       logInfo("HUNG","---", "set record rc=[0x%x]", rc);
    }
    return rc;
  }
 
  ClRcT updateEntityFromDatabase(const char* xpath, const std::string& entityName, const char* tagName, const std::string& value)
  {
    // check if the xpath exists in the DB
    logInfo("HUNG","---", "enter [%s] with params [%s] [%s] [%s]",__FUNCTION__, xpath, entityName.c_str(), value.c_str());
    //std::string val;
    //std::vector<std::string>child;
    std::string strXpath(xpath);
    ClRcT rc = CL_OK;//amfDb.getRecord(strXpath,val,&child);
    //logInfo("HUNG","---", "get record rc=[0x%x]", rc);
    if (rc == CL_OK)
    {
       /*std::vector<std::string>::iterator it;
       it = std::find(child.begin(),child.end(),entityName);
       if (it != child.end())
       {
          return CL_ERR_ALREADY_EXIST;
       }*/
       //std::string entname = entityName;
       strXpath.append("[@name=\"");
       strXpath.append(entityName);
       strXpath.append("\"]/");
       strXpath.append(tagName);       
       rc = amfDb.setRecord(strXpath,value);
       logInfo("HUNG","---", "set record with xpath [%s], value [%s]  rc=[0x%x]", strXpath.c_str(), value.c_str(), rc);
    }
    return rc;
  }

  void amfMgmtRpcImpl::createComponent(const ::SAFplus::Rpc::amfMgmtRpc::CreateComponentRequest* request,
                                ::SAFplus::Rpc::amfMgmtRpc::CreateComponentResponse* response)
  {
    //TODO: put your code here
    //ComponentConfig* comp = new ComponentConfig();
    //comp->set_name("TestComp");
    //request->set_allocated_componentconfig(comp);
    #if 0
    const ComponentConfig& comp = request->componentconfig();
    logInfo("HUNG","---", "server is processing createComponent name [%s]", comp.name().c_str());    
    ClRcT rc = addEntityToDatabase("/safplusAmf/Component",comp.name());
    logInfo("HUNG","---", "addEntityToDB rc=[0x%x]", rc);
    #endif
    const ComponentConfig& comp = request->componentconfig();
    logInfo("HUNG","---", "server is processing updateComponent name [%s]", comp.name().c_str());
    SAFplusAmf::CapabilityModel cm = static_cast<SAFplusAmf::CapabilityModel>(comp.capabilitymodel());
    logInfo("HUNG","--","capabilityModel [%d]", (int)cm);
    std::stringstream ssCm;
    ssCm<<cm;
    std::string strCm;
    ssCm>>strCm;
    ClRcT rc = updateEntityFromDatabase("/safplusAmf/Component",comp.name(),"capabilityModel",strCm);
    logInfo("HUNG","---","read the DB");     
    cfg.read(&amfDb);
    response->set_err(rc);
  }

  void amfMgmtRpcImpl::addNodeSUList(const ::SAFplus::Rpc::amfMgmtRpc::AddNodeSUListRequest* request,
                                ::SAFplus::Rpc::amfMgmtRpc::AddNodeSUListResponse* response)
  {
    //TODO: put your code here
  }

}  // namespace amfMgmtRpc
}  // namespace Rpc
}  // namespace SAFplus
