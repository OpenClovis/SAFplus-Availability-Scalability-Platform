// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: amfMgmtRpc.proto

#ifndef PROTOBUF_amfMgmtRpc_2eproto__INCLUDED
#define PROTOBUF_amfMgmtRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "SAFplusPBExt.pb.hxx"
// @@protoc_insertion_point(includes)

namespace SAFplus {
namespace Rpc {
namespace amfMgmtRpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_amfMgmtRpc_2eproto();
void protobuf_AssignDesc_amfMgmtRpc_2eproto();
void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

class SaTimeT;
class EscalationPolicy;
class Execution;
class ServiceUnitFailureEscalationPolicy;
class NodeConfig;
class ComponentRestart;
class ServiceUnitRestart;
class ServiceGroupConfig;
class Instantiate;
class Terminate;
class Cleanup;
class Timeouts;
class ComponentConfig;
class Data;
class ComponentServiceInstanceConfig;
class ServiceInstanceConfig;
class ServiceUnitConfig;
class InitializeRequest;
class InitializeResponse;
class FinalizeRequest;
class FinalizeResponse;
class CommitRequest;
class CommitResponse;
class CreateComponentRequest;
class CreateComponentResponse;
class UpdateComponentRequest;
class UpdateComponentResponse;
class DeleteComponentRequest;
class DeleteComponentResponse;
class CreateSGRequest;
class CreateSGResponse;
class UpdateSGRequest;
class UpdateSGResponse;
class DeleteSGRequest;
class DeleteSGResponse;
class CreateNodeRequest;
class CreateNodeResponse;
class UpdateNodeRequest;
class UpdateNodeResponse;
class DeleteNodeRequest;
class DeleteNodeResponse;
class CreateSURequest;
class CreateSUResponse;
class UpdateSURequest;
class UpdateSUResponse;
class DeleteSURequest;
class DeleteSUResponse;
class CreateSIRequest;
class CreateSIResponse;
class UpdateSIRequest;
class UpdateSIResponse;
class DeleteSIRequest;
class DeleteSIResponse;
class CreateCSIRequest;
class CreateCSIResponse;
class UpdateCSIRequest;
class UpdateCSIResponse;
class DeleteCSIRequest;
class DeleteCSIResponse;
class DeleteCSINVPRequest;
class DeleteCSINVPResponse;
class DeleteNodeSUListRequest;
class DeleteNodeSUListResponse;
class DeleteSGSUListRequest;
class DeleteSGSUListResponse;
class DeleteSGSIListRequest;
class DeleteSGSIListResponse;
class DeleteSUCompListRequest;
class DeleteSUCompListResponse;
class DeleteSICSIListRequest;
class DeleteSICSIListResponse;
class LockNodeAssignmentRequest;
class LockNodeAssignmentResponse;
class LockSGAssignmentRequest;
class LockSGAssignmentResponse;
class LockSUAssignmentRequest;
class LockSUAssignmentResponse;
class LockSIAssignmentRequest;
class LockSIAssignmentResponse;
class LockNodeInstantiationRequest;
class LockNodeInstantiationResponse;
class LockSGInstantiationRequest;
class LockSGInstantiationResponse;
class LockSUInstantiationRequest;
class LockSUInstantiationResponse;
class UnlockNodeRequest;
class UnlockNodeResponse;
class UnlockSGRequest;
class UnlockSGResponse;
class UnlockSURequest;
class UnlockSUResponse;
class UnlockSIRequest;
class UnlockSIResponse;
class RepairNodeRequest;
class RepairNodeResponse;
class RepairComponentRequest;
class RepairComponentResponse;
class RepairSURequest;
class RepairSUResponse;
class GetComponentConfigRequest;
class GetComponentConfigResponse;
class GetNodeConfigRequest;
class GetNodeConfigResponse;
class GetSUConfigRequest;
class GetSUConfigResponse;
class GetSGConfigRequest;
class GetSGConfigResponse;
class GetSIConfigRequest;
class GetSIConfigResponse;
class GetCSIConfigRequest;
class GetCSIConfigResponse;

enum AdministrativeState {
  AdministrativeState_off = 0,
  AdministrativeState_idle = 1,
  AdministrativeState_on = 2
};
bool AdministrativeState_IsValid(int value);
const AdministrativeState AdministrativeState_MIN = AdministrativeState_off;
const AdministrativeState AdministrativeState_MAX = AdministrativeState_on;
const int AdministrativeState_ARRAYSIZE = AdministrativeState_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdministrativeState_descriptor();
inline const ::std::string& AdministrativeState_Name(AdministrativeState value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdministrativeState_descriptor(), value);
}
inline bool AdministrativeState_Parse(
    const ::std::string& name, AdministrativeState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdministrativeState>(
    AdministrativeState_descriptor(), name, value);
}
enum CapabilityModel {
  CapabilityModel_x_active_and_y_standby = 0,
  CapabilityModel_x_active_or_y_standby = 1,
  CapabilityModel_not_preinstantiable = 2
};
bool CapabilityModel_IsValid(int value);
const CapabilityModel CapabilityModel_MIN = CapabilityModel_x_active_and_y_standby;
const CapabilityModel CapabilityModel_MAX = CapabilityModel_not_preinstantiable;
const int CapabilityModel_ARRAYSIZE = CapabilityModel_MAX + 1;

const ::google::protobuf::EnumDescriptor* CapabilityModel_descriptor();
inline const ::std::string& CapabilityModel_Name(CapabilityModel value) {
  return ::google::protobuf::internal::NameOfEnum(
    CapabilityModel_descriptor(), value);
}
inline bool CapabilityModel_Parse(
    const ::std::string& name, CapabilityModel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CapabilityModel>(
    CapabilityModel_descriptor(), name, value);
}
enum Recovery {
  Recovery_NoRecommendation = 1,
  Recovery_Restart = 2,
  Recovery_Failover = 3,
  Recovery_NodeSwitchover = 4,
  Recovery_NodeFailover = 5,
  Recovery_NodeFailfast = 6,
  Recovery_ClusterReset = 7,
  Recovery_ApplicationRestart = 8,
  Recovery_ContainerRestart = 9
};
bool Recovery_IsValid(int value);
const Recovery Recovery_MIN = Recovery_NoRecommendation;
const Recovery Recovery_MAX = Recovery_ContainerRestart;
const int Recovery_ARRAYSIZE = Recovery_MAX + 1;

const ::google::protobuf::EnumDescriptor* Recovery_descriptor();
inline const ::std::string& Recovery_Name(Recovery value) {
  return ::google::protobuf::internal::NameOfEnum(
    Recovery_descriptor(), value);
}
inline bool Recovery_Parse(
    const ::std::string& name, Recovery* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Recovery>(
    Recovery_descriptor(), name, value);
}
// ===================================================================

class SaTimeT : public ::google::protobuf::Message {
 public:
  SaTimeT();
  virtual ~SaTimeT();

  SaTimeT(const SaTimeT& from);

  inline SaTimeT& operator=(const SaTimeT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaTimeT& default_instance();

  void Swap(SaTimeT* other);

  // implements Message ----------------------------------------------

  SaTimeT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaTimeT& from);
  void MergeFrom(const SaTimeT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 uint64 = 1;
  inline bool has_uint64() const;
  inline void clear_uint64();
  static const int kUint64FieldNumber = 1;
  inline ::google::protobuf::uint64 uint64() const;
  inline void set_uint64(::google::protobuf::uint64 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SaTimeT)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.SaTimeT)
 private:
  inline void set_has_uint64();
  inline void clear_has_uint64();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uint64_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static SaTimeT* default_instance_;
};
// -------------------------------------------------------------------

class EscalationPolicy : public ::google::protobuf::Message {
 public:
  EscalationPolicy();
  virtual ~EscalationPolicy();

  EscalationPolicy(const EscalationPolicy& from);

  inline EscalationPolicy& operator=(const EscalationPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EscalationPolicy& default_instance();

  void Swap(EscalationPolicy* other);

  // implements Message ----------------------------------------------

  EscalationPolicy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EscalationPolicy& from);
  void MergeFrom(const EscalationPolicy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 maximum = 1;
  inline bool has_maximum() const;
  inline void clear_maximum();
  static const int kMaximumFieldNumber = 1;
  inline ::google::protobuf::uint64 maximum() const;
  inline void set_maximum(::google::protobuf::uint64 value);

  // optional .SAFplus.Rpc.amfMgmtRpc.SaTimeT duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  inline const ::SAFplus::Rpc::amfMgmtRpc::SaTimeT& duration() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* mutable_duration();
  inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* release_duration();
  inline void set_allocated_duration(::SAFplus::Rpc::amfMgmtRpc::SaTimeT* duration);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(EscalationPolicy)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.EscalationPolicy)
 private:
  inline void set_has_maximum();
  inline void clear_has_maximum();
  inline void set_has_duration();
  inline void clear_has_duration();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 maximum_;
  ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* duration_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static EscalationPolicy* default_instance_;
};
// -------------------------------------------------------------------

class Execution : public ::google::protobuf::Message {
 public:
  Execution();
  virtual ~Execution();

  Execution(const Execution& from);

  inline Execution& operator=(const Execution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Execution& default_instance();

  void Swap(Execution* other);

  // implements Message ----------------------------------------------

  Execution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Execution& from);
  void MergeFrom(const Execution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  inline ::std::string* release_command();
  inline void set_allocated_command(::std::string* command);

  // optional uint64 timeout = 2;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 2;
  inline ::google::protobuf::uint64 timeout() const;
  inline void set_timeout(::google::protobuf::uint64 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Execution)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.Execution)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_timeout();
  inline void clear_has_timeout();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* command_;
  ::google::protobuf::uint64 timeout_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static Execution* default_instance_;
};
// -------------------------------------------------------------------

class ServiceUnitFailureEscalationPolicy : public ::google::protobuf::Message {
 public:
  ServiceUnitFailureEscalationPolicy();
  virtual ~ServiceUnitFailureEscalationPolicy();

  ServiceUnitFailureEscalationPolicy(const ServiceUnitFailureEscalationPolicy& from);

  inline ServiceUnitFailureEscalationPolicy& operator=(const ServiceUnitFailureEscalationPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceUnitFailureEscalationPolicy& default_instance();

  void Swap(ServiceUnitFailureEscalationPolicy* other);

  // implements Message ----------------------------------------------

  ServiceUnitFailureEscalationPolicy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceUnitFailureEscalationPolicy& from);
  void MergeFrom(const ServiceUnitFailureEscalationPolicy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.amfMgmtRpc.EscalationPolicy EscalationPolicy = 1;
  inline bool has_escalationpolicy() const;
  inline void clear_escalationpolicy();
  static const int kEscalationPolicyFieldNumber = 1;
  inline const ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy& escalationpolicy() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* mutable_escalationpolicy();
  inline ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* release_escalationpolicy();
  inline void set_allocated_escalationpolicy(::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* escalationpolicy);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ServiceUnitFailureEscalationPolicy)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.ServiceUnitFailureEscalationPolicy)
 private:
  inline void set_has_escalationpolicy();
  inline void clear_has_escalationpolicy();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* escalationpolicy_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static ServiceUnitFailureEscalationPolicy* default_instance_;
};
// -------------------------------------------------------------------

class NodeConfig : public ::google::protobuf::Message {
 public:
  NodeConfig();
  virtual ~NodeConfig();

  NodeConfig(const NodeConfig& from);

  inline NodeConfig& operator=(const NodeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeConfig& default_instance();

  void Swap(NodeConfig* other);

  // implements Message ----------------------------------------------

  NodeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeConfig& from);
  void MergeFrom(const NodeConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .SAFplus.Rpc.amfMgmtRpc.AdministrativeState adminState = 2;
  inline bool has_adminstate() const;
  inline void clear_adminstate();
  static const int kAdminStateFieldNumber = 2;
  inline ::SAFplus::Rpc::amfMgmtRpc::AdministrativeState adminstate() const;
  inline void set_adminstate(::SAFplus::Rpc::amfMgmtRpc::AdministrativeState value);

  // optional .SAFplus.Rpc.amfMgmtRpc.ServiceUnitFailureEscalationPolicy serviceUnitFailureEscalationPolicy = 3;
  inline bool has_serviceunitfailureescalationpolicy() const;
  inline void clear_serviceunitfailureescalationpolicy();
  static const int kServiceUnitFailureEscalationPolicyFieldNumber = 3;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitFailureEscalationPolicy& serviceunitfailureescalationpolicy() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitFailureEscalationPolicy* mutable_serviceunitfailureescalationpolicy();
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitFailureEscalationPolicy* release_serviceunitfailureescalationpolicy();
  inline void set_allocated_serviceunitfailureescalationpolicy(::SAFplus::Rpc::amfMgmtRpc::ServiceUnitFailureEscalationPolicy* serviceunitfailureescalationpolicy);

  // optional bool autoRepair = 4;
  inline bool has_autorepair() const;
  inline void clear_autorepair();
  static const int kAutoRepairFieldNumber = 4;
  inline bool autorepair() const;
  inline void set_autorepair(bool value);

  // optional bool failFastOnInstantiationFailure = 5;
  inline bool has_failfastoninstantiationfailure() const;
  inline void clear_failfastoninstantiationfailure();
  static const int kFailFastOnInstantiationFailureFieldNumber = 5;
  inline bool failfastoninstantiationfailure() const;
  inline void set_failfastoninstantiationfailure(bool value);

  // optional bool failFastOnCleanupFailure = 6;
  inline bool has_failfastoncleanupfailure() const;
  inline void clear_failfastoncleanupfailure();
  static const int kFailFastOnCleanupFailureFieldNumber = 6;
  inline bool failfastoncleanupfailure() const;
  inline void set_failfastoncleanupfailure(bool value);

  // repeated string serviceUnits = 7;
  inline int serviceunits_size() const;
  inline void clear_serviceunits();
  static const int kServiceUnitsFieldNumber = 7;
  inline const ::std::string& serviceunits(int index) const;
  inline ::std::string* mutable_serviceunits(int index);
  inline void set_serviceunits(int index, const ::std::string& value);
  inline void set_serviceunits(int index, const char* value);
  inline void set_serviceunits(int index, const char* value, size_t size);
  inline ::std::string* add_serviceunits();
  inline void add_serviceunits(const ::std::string& value);
  inline void add_serviceunits(const char* value);
  inline void add_serviceunits(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& serviceunits() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_serviceunits();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NodeConfig)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.NodeConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_adminstate();
  inline void clear_has_adminstate();
  inline void set_has_serviceunitfailureescalationpolicy();
  inline void clear_has_serviceunitfailureescalationpolicy();
  inline void set_has_autorepair();
  inline void clear_has_autorepair();
  inline void set_has_failfastoninstantiationfailure();
  inline void clear_has_failfastoninstantiationfailure();
  inline void set_has_failfastoncleanupfailure();
  inline void clear_has_failfastoncleanupfailure();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitFailureEscalationPolicy* serviceunitfailureescalationpolicy_;
  int adminstate_;
  bool autorepair_;
  bool failfastoninstantiationfailure_;
  bool failfastoncleanupfailure_;
  ::google::protobuf::RepeatedPtrField< ::std::string> serviceunits_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static NodeConfig* default_instance_;
};
// -------------------------------------------------------------------

class ComponentRestart : public ::google::protobuf::Message {
 public:
  ComponentRestart();
  virtual ~ComponentRestart();

  ComponentRestart(const ComponentRestart& from);

  inline ComponentRestart& operator=(const ComponentRestart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComponentRestart& default_instance();

  void Swap(ComponentRestart* other);

  // implements Message ----------------------------------------------

  ComponentRestart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComponentRestart& from);
  void MergeFrom(const ComponentRestart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.amfMgmtRpc.EscalationPolicy EscalationPolicy = 1;
  inline bool has_escalationpolicy() const;
  inline void clear_escalationpolicy();
  static const int kEscalationPolicyFieldNumber = 1;
  inline const ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy& escalationpolicy() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* mutable_escalationpolicy();
  inline ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* release_escalationpolicy();
  inline void set_allocated_escalationpolicy(::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* escalationpolicy);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ComponentRestart)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.ComponentRestart)
 private:
  inline void set_has_escalationpolicy();
  inline void clear_has_escalationpolicy();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* escalationpolicy_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static ComponentRestart* default_instance_;
};
// -------------------------------------------------------------------

class ServiceUnitRestart : public ::google::protobuf::Message {
 public:
  ServiceUnitRestart();
  virtual ~ServiceUnitRestart();

  ServiceUnitRestart(const ServiceUnitRestart& from);

  inline ServiceUnitRestart& operator=(const ServiceUnitRestart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceUnitRestart& default_instance();

  void Swap(ServiceUnitRestart* other);

  // implements Message ----------------------------------------------

  ServiceUnitRestart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceUnitRestart& from);
  void MergeFrom(const ServiceUnitRestart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.amfMgmtRpc.EscalationPolicy EscalationPolicy = 1;
  inline bool has_escalationpolicy() const;
  inline void clear_escalationpolicy();
  static const int kEscalationPolicyFieldNumber = 1;
  inline const ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy& escalationpolicy() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* mutable_escalationpolicy();
  inline ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* release_escalationpolicy();
  inline void set_allocated_escalationpolicy(::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* escalationpolicy);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ServiceUnitRestart)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.ServiceUnitRestart)
 private:
  inline void set_has_escalationpolicy();
  inline void clear_has_escalationpolicy();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* escalationpolicy_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static ServiceUnitRestart* default_instance_;
};
// -------------------------------------------------------------------

class ServiceGroupConfig : public ::google::protobuf::Message {
 public:
  ServiceGroupConfig();
  virtual ~ServiceGroupConfig();

  ServiceGroupConfig(const ServiceGroupConfig& from);

  inline ServiceGroupConfig& operator=(const ServiceGroupConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceGroupConfig& default_instance();

  void Swap(ServiceGroupConfig* other);

  // implements Message ----------------------------------------------

  ServiceGroupConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceGroupConfig& from);
  void MergeFrom(const ServiceGroupConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .SAFplus.Rpc.amfMgmtRpc.AdministrativeState adminState = 2;
  inline bool has_adminstate() const;
  inline void clear_adminstate();
  static const int kAdminStateFieldNumber = 2;
  inline ::SAFplus::Rpc::amfMgmtRpc::AdministrativeState adminstate() const;
  inline void set_adminstate(::SAFplus::Rpc::amfMgmtRpc::AdministrativeState value);

  // optional bool autoRepair = 3;
  inline bool has_autorepair() const;
  inline void clear_autorepair();
  static const int kAutoRepairFieldNumber = 3;
  inline bool autorepair() const;
  inline void set_autorepair(bool value);

  // optional bool autoAdjust = 4;
  inline bool has_autoadjust() const;
  inline void clear_autoadjust();
  static const int kAutoAdjustFieldNumber = 4;
  inline bool autoadjust() const;
  inline void set_autoadjust(bool value);

  // optional .SAFplus.Rpc.amfMgmtRpc.SaTimeT autoAdjustInterval = 5;
  inline bool has_autoadjustinterval() const;
  inline void clear_autoadjustinterval();
  static const int kAutoAdjustIntervalFieldNumber = 5;
  inline const ::SAFplus::Rpc::amfMgmtRpc::SaTimeT& autoadjustinterval() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* mutable_autoadjustinterval();
  inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* release_autoadjustinterval();
  inline void set_allocated_autoadjustinterval(::SAFplus::Rpc::amfMgmtRpc::SaTimeT* autoadjustinterval);

  // optional fixed32 preferredNumActiveServiceUnits = 6;
  inline bool has_preferrednumactiveserviceunits() const;
  inline void clear_preferrednumactiveserviceunits();
  static const int kPreferredNumActiveServiceUnitsFieldNumber = 6;
  inline ::google::protobuf::uint32 preferrednumactiveserviceunits() const;
  inline void set_preferrednumactiveserviceunits(::google::protobuf::uint32 value);

  // optional fixed32 preferredNumStandbyServiceUnits = 7;
  inline bool has_preferrednumstandbyserviceunits() const;
  inline void clear_preferrednumstandbyserviceunits();
  static const int kPreferredNumStandbyServiceUnitsFieldNumber = 7;
  inline ::google::protobuf::uint32 preferrednumstandbyserviceunits() const;
  inline void set_preferrednumstandbyserviceunits(::google::protobuf::uint32 value);

  // optional fixed32 preferredNumIdleServiceUnits = 8;
  inline bool has_preferrednumidleserviceunits() const;
  inline void clear_preferrednumidleserviceunits();
  static const int kPreferredNumIdleServiceUnitsFieldNumber = 8;
  inline ::google::protobuf::uint32 preferrednumidleserviceunits() const;
  inline void set_preferrednumidleserviceunits(::google::protobuf::uint32 value);

  // optional fixed32 maxActiveWorkAssignments = 9;
  inline bool has_maxactiveworkassignments() const;
  inline void clear_maxactiveworkassignments();
  static const int kMaxActiveWorkAssignmentsFieldNumber = 9;
  inline ::google::protobuf::uint32 maxactiveworkassignments() const;
  inline void set_maxactiveworkassignments(::google::protobuf::uint32 value);

  // optional fixed32 maxStandbyWorkAssignments = 10;
  inline bool has_maxstandbyworkassignments() const;
  inline void clear_maxstandbyworkassignments();
  static const int kMaxStandbyWorkAssignmentsFieldNumber = 10;
  inline ::google::protobuf::uint32 maxstandbyworkassignments() const;
  inline void set_maxstandbyworkassignments(::google::protobuf::uint32 value);

  // optional .SAFplus.Rpc.amfMgmtRpc.ComponentRestart componentRestart = 11;
  inline bool has_componentrestart() const;
  inline void clear_componentrestart();
  static const int kComponentRestartFieldNumber = 11;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ComponentRestart& componentrestart() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ComponentRestart* mutable_componentrestart();
  inline ::SAFplus::Rpc::amfMgmtRpc::ComponentRestart* release_componentrestart();
  inline void set_allocated_componentrestart(::SAFplus::Rpc::amfMgmtRpc::ComponentRestart* componentrestart);

  // optional .SAFplus.Rpc.amfMgmtRpc.ServiceUnitRestart serviceUnitRestart = 12;
  inline bool has_serviceunitrestart() const;
  inline void clear_serviceunitrestart();
  static const int kServiceUnitRestartFieldNumber = 12;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitRestart& serviceunitrestart() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitRestart* mutable_serviceunitrestart();
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitRestart* release_serviceunitrestart();
  inline void set_allocated_serviceunitrestart(::SAFplus::Rpc::amfMgmtRpc::ServiceUnitRestart* serviceunitrestart);

  // repeated string serviceUnits = 13;
  inline int serviceunits_size() const;
  inline void clear_serviceunits();
  static const int kServiceUnitsFieldNumber = 13;
  inline const ::std::string& serviceunits(int index) const;
  inline ::std::string* mutable_serviceunits(int index);
  inline void set_serviceunits(int index, const ::std::string& value);
  inline void set_serviceunits(int index, const char* value);
  inline void set_serviceunits(int index, const char* value, size_t size);
  inline ::std::string* add_serviceunits();
  inline void add_serviceunits(const ::std::string& value);
  inline void add_serviceunits(const char* value);
  inline void add_serviceunits(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& serviceunits() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_serviceunits();

  // repeated string serviceInstances = 14;
  inline int serviceinstances_size() const;
  inline void clear_serviceinstances();
  static const int kServiceInstancesFieldNumber = 14;
  inline const ::std::string& serviceinstances(int index) const;
  inline ::std::string* mutable_serviceinstances(int index);
  inline void set_serviceinstances(int index, const ::std::string& value);
  inline void set_serviceinstances(int index, const char* value);
  inline void set_serviceinstances(int index, const char* value, size_t size);
  inline ::std::string* add_serviceinstances();
  inline void add_serviceinstances(const ::std::string& value);
  inline void add_serviceinstances(const char* value);
  inline void add_serviceinstances(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& serviceinstances() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_serviceinstances();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ServiceGroupConfig)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_adminstate();
  inline void clear_has_adminstate();
  inline void set_has_autorepair();
  inline void clear_has_autorepair();
  inline void set_has_autoadjust();
  inline void clear_has_autoadjust();
  inline void set_has_autoadjustinterval();
  inline void clear_has_autoadjustinterval();
  inline void set_has_preferrednumactiveserviceunits();
  inline void clear_has_preferrednumactiveserviceunits();
  inline void set_has_preferrednumstandbyserviceunits();
  inline void clear_has_preferrednumstandbyserviceunits();
  inline void set_has_preferrednumidleserviceunits();
  inline void clear_has_preferrednumidleserviceunits();
  inline void set_has_maxactiveworkassignments();
  inline void clear_has_maxactiveworkassignments();
  inline void set_has_maxstandbyworkassignments();
  inline void clear_has_maxstandbyworkassignments();
  inline void set_has_componentrestart();
  inline void clear_has_componentrestart();
  inline void set_has_serviceunitrestart();
  inline void clear_has_serviceunitrestart();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int adminstate_;
  bool autorepair_;
  bool autoadjust_;
  ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* autoadjustinterval_;
  ::google::protobuf::uint32 preferrednumactiveserviceunits_;
  ::google::protobuf::uint32 preferrednumstandbyserviceunits_;
  ::google::protobuf::uint32 preferrednumidleserviceunits_;
  ::google::protobuf::uint32 maxactiveworkassignments_;
  ::SAFplus::Rpc::amfMgmtRpc::ComponentRestart* componentrestart_;
  ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitRestart* serviceunitrestart_;
  ::google::protobuf::RepeatedPtrField< ::std::string> serviceunits_;
  ::google::protobuf::RepeatedPtrField< ::std::string> serviceinstances_;
  ::google::protobuf::uint32 maxstandbyworkassignments_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static ServiceGroupConfig* default_instance_;
};
// -------------------------------------------------------------------

class Instantiate : public ::google::protobuf::Message {
 public:
  Instantiate();
  virtual ~Instantiate();

  Instantiate(const Instantiate& from);

  inline Instantiate& operator=(const Instantiate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Instantiate& default_instance();

  void Swap(Instantiate* other);

  // implements Message ----------------------------------------------

  Instantiate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Instantiate& from);
  void MergeFrom(const Instantiate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.amfMgmtRpc.Execution Execution = 1;
  inline bool has_execution() const;
  inline void clear_execution();
  static const int kExecutionFieldNumber = 1;
  inline const ::SAFplus::Rpc::amfMgmtRpc::Execution& execution() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::Execution* mutable_execution();
  inline ::SAFplus::Rpc::amfMgmtRpc::Execution* release_execution();
  inline void set_allocated_execution(::SAFplus::Rpc::amfMgmtRpc::Execution* execution);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Instantiate)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.Instantiate)
 private:
  inline void set_has_execution();
  inline void clear_has_execution();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::amfMgmtRpc::Execution* execution_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static Instantiate* default_instance_;
};
// -------------------------------------------------------------------

class Terminate : public ::google::protobuf::Message {
 public:
  Terminate();
  virtual ~Terminate();

  Terminate(const Terminate& from);

  inline Terminate& operator=(const Terminate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Terminate& default_instance();

  void Swap(Terminate* other);

  // implements Message ----------------------------------------------

  Terminate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Terminate& from);
  void MergeFrom(const Terminate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.amfMgmtRpc.Execution Execution = 1;
  inline bool has_execution() const;
  inline void clear_execution();
  static const int kExecutionFieldNumber = 1;
  inline const ::SAFplus::Rpc::amfMgmtRpc::Execution& execution() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::Execution* mutable_execution();
  inline ::SAFplus::Rpc::amfMgmtRpc::Execution* release_execution();
  inline void set_allocated_execution(::SAFplus::Rpc::amfMgmtRpc::Execution* execution);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Terminate)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.Terminate)
 private:
  inline void set_has_execution();
  inline void clear_has_execution();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::amfMgmtRpc::Execution* execution_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static Terminate* default_instance_;
};
// -------------------------------------------------------------------

class Cleanup : public ::google::protobuf::Message {
 public:
  Cleanup();
  virtual ~Cleanup();

  Cleanup(const Cleanup& from);

  inline Cleanup& operator=(const Cleanup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cleanup& default_instance();

  void Swap(Cleanup* other);

  // implements Message ----------------------------------------------

  Cleanup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cleanup& from);
  void MergeFrom(const Cleanup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.amfMgmtRpc.Execution Execution = 1;
  inline bool has_execution() const;
  inline void clear_execution();
  static const int kExecutionFieldNumber = 1;
  inline const ::SAFplus::Rpc::amfMgmtRpc::Execution& execution() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::Execution* mutable_execution();
  inline ::SAFplus::Rpc::amfMgmtRpc::Execution* release_execution();
  inline void set_allocated_execution(::SAFplus::Rpc::amfMgmtRpc::Execution* execution);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Cleanup)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.Cleanup)
 private:
  inline void set_has_execution();
  inline void clear_has_execution();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::amfMgmtRpc::Execution* execution_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static Cleanup* default_instance_;
};
// -------------------------------------------------------------------

class Timeouts : public ::google::protobuf::Message {
 public:
  Timeouts();
  virtual ~Timeouts();

  Timeouts(const Timeouts& from);

  inline Timeouts& operator=(const Timeouts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Timeouts& default_instance();

  void Swap(Timeouts* other);

  // implements Message ----------------------------------------------

  Timeouts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Timeouts& from);
  void MergeFrom(const Timeouts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.amfMgmtRpc.SaTimeT terminate = 1;
  inline bool has_terminate() const;
  inline void clear_terminate();
  static const int kTerminateFieldNumber = 1;
  inline const ::SAFplus::Rpc::amfMgmtRpc::SaTimeT& terminate() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* mutable_terminate();
  inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* release_terminate();
  inline void set_allocated_terminate(::SAFplus::Rpc::amfMgmtRpc::SaTimeT* terminate);

  // optional .SAFplus.Rpc.amfMgmtRpc.SaTimeT quiescingComplete = 2;
  inline bool has_quiescingcomplete() const;
  inline void clear_quiescingcomplete();
  static const int kQuiescingCompleteFieldNumber = 2;
  inline const ::SAFplus::Rpc::amfMgmtRpc::SaTimeT& quiescingcomplete() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* mutable_quiescingcomplete();
  inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* release_quiescingcomplete();
  inline void set_allocated_quiescingcomplete(::SAFplus::Rpc::amfMgmtRpc::SaTimeT* quiescingcomplete);

  // optional .SAFplus.Rpc.amfMgmtRpc.SaTimeT workRemoval = 3;
  inline bool has_workremoval() const;
  inline void clear_workremoval();
  static const int kWorkRemovalFieldNumber = 3;
  inline const ::SAFplus::Rpc::amfMgmtRpc::SaTimeT& workremoval() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* mutable_workremoval();
  inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* release_workremoval();
  inline void set_allocated_workremoval(::SAFplus::Rpc::amfMgmtRpc::SaTimeT* workremoval);

  // optional .SAFplus.Rpc.amfMgmtRpc.SaTimeT workAssignment = 4;
  inline bool has_workassignment() const;
  inline void clear_workassignment();
  static const int kWorkAssignmentFieldNumber = 4;
  inline const ::SAFplus::Rpc::amfMgmtRpc::SaTimeT& workassignment() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* mutable_workassignment();
  inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* release_workassignment();
  inline void set_allocated_workassignment(::SAFplus::Rpc::amfMgmtRpc::SaTimeT* workassignment);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Timeouts)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.Timeouts)
 private:
  inline void set_has_terminate();
  inline void clear_has_terminate();
  inline void set_has_quiescingcomplete();
  inline void clear_has_quiescingcomplete();
  inline void set_has_workremoval();
  inline void clear_has_workremoval();
  inline void set_has_workassignment();
  inline void clear_has_workassignment();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* terminate_;
  ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* quiescingcomplete_;
  ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* workremoval_;
  ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* workassignment_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static Timeouts* default_instance_;
};
// -------------------------------------------------------------------

class ComponentConfig : public ::google::protobuf::Message {
 public:
  ComponentConfig();
  virtual ~ComponentConfig();

  ComponentConfig(const ComponentConfig& from);

  inline ComponentConfig& operator=(const ComponentConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComponentConfig& default_instance();

  void Swap(ComponentConfig* other);

  // implements Message ----------------------------------------------

  ComponentConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComponentConfig& from);
  void MergeFrom(const ComponentConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .SAFplus.Rpc.amfMgmtRpc.CapabilityModel capabilityModel = 2;
  inline bool has_capabilitymodel() const;
  inline void clear_capabilitymodel();
  static const int kCapabilityModelFieldNumber = 2;
  inline ::SAFplus::Rpc::amfMgmtRpc::CapabilityModel capabilitymodel() const;
  inline void set_capabilitymodel(::SAFplus::Rpc::amfMgmtRpc::CapabilityModel value);

  // optional fixed32 maxActiveAssignments = 3;
  inline bool has_maxactiveassignments() const;
  inline void clear_maxactiveassignments();
  static const int kMaxActiveAssignmentsFieldNumber = 3;
  inline ::google::protobuf::uint32 maxactiveassignments() const;
  inline void set_maxactiveassignments(::google::protobuf::uint32 value);

  // optional fixed32 maxStandbyAssignments = 4;
  inline bool has_maxstandbyassignments() const;
  inline void clear_maxstandbyassignments();
  static const int kMaxStandbyAssignmentsFieldNumber = 4;
  inline ::google::protobuf::uint32 maxstandbyassignments() const;
  inline void set_maxstandbyassignments(::google::protobuf::uint32 value);

  // repeated string commandEnvironment = 5;
  inline int commandenvironment_size() const;
  inline void clear_commandenvironment();
  static const int kCommandEnvironmentFieldNumber = 5;
  inline const ::std::string& commandenvironment(int index) const;
  inline ::std::string* mutable_commandenvironment(int index);
  inline void set_commandenvironment(int index, const ::std::string& value);
  inline void set_commandenvironment(int index, const char* value);
  inline void set_commandenvironment(int index, const char* value, size_t size);
  inline ::std::string* add_commandenvironment();
  inline void add_commandenvironment(const ::std::string& value);
  inline void add_commandenvironment(const char* value);
  inline void add_commandenvironment(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& commandenvironment() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_commandenvironment();

  // optional .SAFplus.Rpc.amfMgmtRpc.Instantiate instantiate = 6;
  inline bool has_instantiate() const;
  inline void clear_instantiate();
  static const int kInstantiateFieldNumber = 6;
  inline const ::SAFplus::Rpc::amfMgmtRpc::Instantiate& instantiate() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::Instantiate* mutable_instantiate();
  inline ::SAFplus::Rpc::amfMgmtRpc::Instantiate* release_instantiate();
  inline void set_allocated_instantiate(::SAFplus::Rpc::amfMgmtRpc::Instantiate* instantiate);

  // optional .SAFplus.Rpc.amfMgmtRpc.Terminate terminate = 7;
  inline bool has_terminate() const;
  inline void clear_terminate();
  static const int kTerminateFieldNumber = 7;
  inline const ::SAFplus::Rpc::amfMgmtRpc::Terminate& terminate() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::Terminate* mutable_terminate();
  inline ::SAFplus::Rpc::amfMgmtRpc::Terminate* release_terminate();
  inline void set_allocated_terminate(::SAFplus::Rpc::amfMgmtRpc::Terminate* terminate);

  // optional .SAFplus.Rpc.amfMgmtRpc.Cleanup cleanup = 8;
  inline bool has_cleanup() const;
  inline void clear_cleanup();
  static const int kCleanupFieldNumber = 8;
  inline const ::SAFplus::Rpc::amfMgmtRpc::Cleanup& cleanup() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::Cleanup* mutable_cleanup();
  inline ::SAFplus::Rpc::amfMgmtRpc::Cleanup* release_cleanup();
  inline void set_allocated_cleanup(::SAFplus::Rpc::amfMgmtRpc::Cleanup* cleanup);

  // optional fixed32 maxInstantInstantiations = 9;
  inline bool has_maxinstantinstantiations() const;
  inline void clear_maxinstantinstantiations();
  static const int kMaxInstantInstantiationsFieldNumber = 9;
  inline ::google::protobuf::uint32 maxinstantinstantiations() const;
  inline void set_maxinstantinstantiations(::google::protobuf::uint32 value);

  // optional fixed32 maxDelayedInstantiations = 10;
  inline bool has_maxdelayedinstantiations() const;
  inline void clear_maxdelayedinstantiations();
  static const int kMaxDelayedInstantiationsFieldNumber = 10;
  inline ::google::protobuf::uint32 maxdelayedinstantiations() const;
  inline void set_maxdelayedinstantiations(::google::protobuf::uint32 value);

  // optional fixed32 instantiationSuccessDuration = 11;
  inline bool has_instantiationsuccessduration() const;
  inline void clear_instantiationsuccessduration();
  static const int kInstantiationSuccessDurationFieldNumber = 11;
  inline ::google::protobuf::uint32 instantiationsuccessduration() const;
  inline void set_instantiationsuccessduration(::google::protobuf::uint32 value);

  // optional fixed32 delayBetweenInstantiation = 12;
  inline bool has_delaybetweeninstantiation() const;
  inline void clear_delaybetweeninstantiation();
  static const int kDelayBetweenInstantiationFieldNumber = 12;
  inline ::google::protobuf::uint32 delaybetweeninstantiation() const;
  inline void set_delaybetweeninstantiation(::google::protobuf::uint32 value);

  // optional .SAFplus.Rpc.amfMgmtRpc.Timeouts timeouts = 13;
  inline bool has_timeouts() const;
  inline void clear_timeouts();
  static const int kTimeoutsFieldNumber = 13;
  inline const ::SAFplus::Rpc::amfMgmtRpc::Timeouts& timeouts() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::Timeouts* mutable_timeouts();
  inline ::SAFplus::Rpc::amfMgmtRpc::Timeouts* release_timeouts();
  inline void set_allocated_timeouts(::SAFplus::Rpc::amfMgmtRpc::Timeouts* timeouts);

  // optional string serviceUnit = 14;
  inline bool has_serviceunit() const;
  inline void clear_serviceunit();
  static const int kServiceUnitFieldNumber = 14;
  inline const ::std::string& serviceunit() const;
  inline void set_serviceunit(const ::std::string& value);
  inline void set_serviceunit(const char* value);
  inline void set_serviceunit(const char* value, size_t size);
  inline ::std::string* mutable_serviceunit();
  inline ::std::string* release_serviceunit();
  inline void set_allocated_serviceunit(::std::string* serviceunit);

  // optional .SAFplus.Rpc.amfMgmtRpc.Recovery recovery = 15;
  inline bool has_recovery() const;
  inline void clear_recovery();
  static const int kRecoveryFieldNumber = 15;
  inline ::SAFplus::Rpc::amfMgmtRpc::Recovery recovery() const;
  inline void set_recovery(::SAFplus::Rpc::amfMgmtRpc::Recovery value);

  // optional bool restartable = 16;
  inline bool has_restartable() const;
  inline void clear_restartable();
  static const int kRestartableFieldNumber = 16;
  inline bool restartable() const;
  inline void set_restartable(bool value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ComponentConfig)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.ComponentConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_capabilitymodel();
  inline void clear_has_capabilitymodel();
  inline void set_has_maxactiveassignments();
  inline void clear_has_maxactiveassignments();
  inline void set_has_maxstandbyassignments();
  inline void clear_has_maxstandbyassignments();
  inline void set_has_instantiate();
  inline void clear_has_instantiate();
  inline void set_has_terminate();
  inline void clear_has_terminate();
  inline void set_has_cleanup();
  inline void clear_has_cleanup();
  inline void set_has_maxinstantinstantiations();
  inline void clear_has_maxinstantinstantiations();
  inline void set_has_maxdelayedinstantiations();
  inline void clear_has_maxdelayedinstantiations();
  inline void set_has_instantiationsuccessduration();
  inline void clear_has_instantiationsuccessduration();
  inline void set_has_delaybetweeninstantiation();
  inline void clear_has_delaybetweeninstantiation();
  inline void set_has_timeouts();
  inline void clear_has_timeouts();
  inline void set_has_serviceunit();
  inline void clear_has_serviceunit();
  inline void set_has_recovery();
  inline void clear_has_recovery();
  inline void set_has_restartable();
  inline void clear_has_restartable();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int capabilitymodel_;
  ::google::protobuf::uint32 maxactiveassignments_;
  ::google::protobuf::RepeatedPtrField< ::std::string> commandenvironment_;
  ::SAFplus::Rpc::amfMgmtRpc::Instantiate* instantiate_;
  ::google::protobuf::uint32 maxstandbyassignments_;
  ::google::protobuf::uint32 maxinstantinstantiations_;
  ::SAFplus::Rpc::amfMgmtRpc::Terminate* terminate_;
  ::SAFplus::Rpc::amfMgmtRpc::Cleanup* cleanup_;
  ::google::protobuf::uint32 maxdelayedinstantiations_;
  ::google::protobuf::uint32 instantiationsuccessduration_;
  ::SAFplus::Rpc::amfMgmtRpc::Timeouts* timeouts_;
  ::google::protobuf::uint32 delaybetweeninstantiation_;
  int recovery_;
  ::std::string* serviceunit_;
  bool restartable_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static ComponentConfig* default_instance_;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const char* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  inline void set_allocated_val(::std::string* val);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Data)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.Data)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* val_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static Data* default_instance_;
};
// -------------------------------------------------------------------

class ComponentServiceInstanceConfig : public ::google::protobuf::Message {
 public:
  ComponentServiceInstanceConfig();
  virtual ~ComponentServiceInstanceConfig();

  ComponentServiceInstanceConfig(const ComponentServiceInstanceConfig& from);

  inline ComponentServiceInstanceConfig& operator=(const ComponentServiceInstanceConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComponentServiceInstanceConfig& default_instance();

  void Swap(ComponentServiceInstanceConfig* other);

  // implements Message ----------------------------------------------

  ComponentServiceInstanceConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComponentServiceInstanceConfig& from);
  void MergeFrom(const ComponentServiceInstanceConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string dependencies = 2;
  inline int dependencies_size() const;
  inline void clear_dependencies();
  static const int kDependenciesFieldNumber = 2;
  inline const ::std::string& dependencies(int index) const;
  inline ::std::string* mutable_dependencies(int index);
  inline void set_dependencies(int index, const ::std::string& value);
  inline void set_dependencies(int index, const char* value);
  inline void set_dependencies(int index, const char* value, size_t size);
  inline ::std::string* add_dependencies();
  inline void add_dependencies(const ::std::string& value);
  inline void add_dependencies(const char* value);
  inline void add_dependencies(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& dependencies() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dependencies();

  // repeated .SAFplus.Rpc.amfMgmtRpc.Data data = 3;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SAFplus::Rpc::amfMgmtRpc::Data& data(int index) const;
  inline ::SAFplus::Rpc::amfMgmtRpc::Data* mutable_data(int index);
  inline ::SAFplus::Rpc::amfMgmtRpc::Data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SAFplus::Rpc::amfMgmtRpc::Data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SAFplus::Rpc::amfMgmtRpc::Data >*
      mutable_data();

  // optional string serviceInstance = 4;
  inline bool has_serviceinstance() const;
  inline void clear_serviceinstance();
  static const int kServiceInstanceFieldNumber = 4;
  inline const ::std::string& serviceinstance() const;
  inline void set_serviceinstance(const ::std::string& value);
  inline void set_serviceinstance(const char* value);
  inline void set_serviceinstance(const char* value, size_t size);
  inline ::std::string* mutable_serviceinstance();
  inline ::std::string* release_serviceinstance();
  inline void set_allocated_serviceinstance(::std::string* serviceinstance);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ComponentServiceInstanceConfig)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_serviceinstance();
  inline void clear_has_serviceinstance();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dependencies_;
  ::google::protobuf::RepeatedPtrField< ::SAFplus::Rpc::amfMgmtRpc::Data > data_;
  ::std::string* serviceinstance_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static ComponentServiceInstanceConfig* default_instance_;
};
// -------------------------------------------------------------------

class ServiceInstanceConfig : public ::google::protobuf::Message {
 public:
  ServiceInstanceConfig();
  virtual ~ServiceInstanceConfig();

  ServiceInstanceConfig(const ServiceInstanceConfig& from);

  inline ServiceInstanceConfig& operator=(const ServiceInstanceConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceInstanceConfig& default_instance();

  void Swap(ServiceInstanceConfig* other);

  // implements Message ----------------------------------------------

  ServiceInstanceConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceInstanceConfig& from);
  void MergeFrom(const ServiceInstanceConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .SAFplus.Rpc.amfMgmtRpc.AdministrativeState adminState = 2;
  inline bool has_adminstate() const;
  inline void clear_adminstate();
  static const int kAdminStateFieldNumber = 2;
  inline ::SAFplus::Rpc::amfMgmtRpc::AdministrativeState adminstate() const;
  inline void set_adminstate(::SAFplus::Rpc::amfMgmtRpc::AdministrativeState value);

  // optional fixed32 preferredActiveAssignments = 3;
  inline bool has_preferredactiveassignments() const;
  inline void clear_preferredactiveassignments();
  static const int kPreferredActiveAssignmentsFieldNumber = 3;
  inline ::google::protobuf::uint32 preferredactiveassignments() const;
  inline void set_preferredactiveassignments(::google::protobuf::uint32 value);

  // optional fixed32 preferredStandbyAssignments = 4;
  inline bool has_preferredstandbyassignments() const;
  inline void clear_preferredstandbyassignments();
  static const int kPreferredStandbyAssignmentsFieldNumber = 4;
  inline ::google::protobuf::uint32 preferredstandbyassignments() const;
  inline void set_preferredstandbyassignments(::google::protobuf::uint32 value);

  // optional fixed32 rank = 5;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 5;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // repeated string componentServiceInstances = 6;
  inline int componentserviceinstances_size() const;
  inline void clear_componentserviceinstances();
  static const int kComponentServiceInstancesFieldNumber = 6;
  inline const ::std::string& componentserviceinstances(int index) const;
  inline ::std::string* mutable_componentserviceinstances(int index);
  inline void set_componentserviceinstances(int index, const ::std::string& value);
  inline void set_componentserviceinstances(int index, const char* value);
  inline void set_componentserviceinstances(int index, const char* value, size_t size);
  inline ::std::string* add_componentserviceinstances();
  inline void add_componentserviceinstances(const ::std::string& value);
  inline void add_componentserviceinstances(const char* value);
  inline void add_componentserviceinstances(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& componentserviceinstances() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_componentserviceinstances();

  // optional string serviceGroup = 7;
  inline bool has_servicegroup() const;
  inline void clear_servicegroup();
  static const int kServiceGroupFieldNumber = 7;
  inline const ::std::string& servicegroup() const;
  inline void set_servicegroup(const ::std::string& value);
  inline void set_servicegroup(const char* value);
  inline void set_servicegroup(const char* value, size_t size);
  inline ::std::string* mutable_servicegroup();
  inline ::std::string* release_servicegroup();
  inline void set_allocated_servicegroup(::std::string* servicegroup);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ServiceInstanceConfig)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_adminstate();
  inline void clear_has_adminstate();
  inline void set_has_preferredactiveassignments();
  inline void clear_has_preferredactiveassignments();
  inline void set_has_preferredstandbyassignments();
  inline void clear_has_preferredstandbyassignments();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_servicegroup();
  inline void clear_has_servicegroup();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int adminstate_;
  ::google::protobuf::uint32 preferredactiveassignments_;
  ::google::protobuf::uint32 preferredstandbyassignments_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::RepeatedPtrField< ::std::string> componentserviceinstances_;
  ::std::string* servicegroup_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static ServiceInstanceConfig* default_instance_;
};
// -------------------------------------------------------------------

class ServiceUnitConfig : public ::google::protobuf::Message {
 public:
  ServiceUnitConfig();
  virtual ~ServiceUnitConfig();

  ServiceUnitConfig(const ServiceUnitConfig& from);

  inline ServiceUnitConfig& operator=(const ServiceUnitConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceUnitConfig& default_instance();

  void Swap(ServiceUnitConfig* other);

  // implements Message ----------------------------------------------

  ServiceUnitConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceUnitConfig& from);
  void MergeFrom(const ServiceUnitConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .SAFplus.Rpc.amfMgmtRpc.AdministrativeState adminState = 2;
  inline bool has_adminstate() const;
  inline void clear_adminstate();
  static const int kAdminStateFieldNumber = 2;
  inline ::SAFplus::Rpc::amfMgmtRpc::AdministrativeState adminstate() const;
  inline void set_adminstate(::SAFplus::Rpc::amfMgmtRpc::AdministrativeState value);

  // optional fixed32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional bool failover = 4;
  inline bool has_failover() const;
  inline void clear_failover();
  static const int kFailoverFieldNumber = 4;
  inline bool failover() const;
  inline void set_failover(bool value);

  // repeated string components = 5;
  inline int components_size() const;
  inline void clear_components();
  static const int kComponentsFieldNumber = 5;
  inline const ::std::string& components(int index) const;
  inline ::std::string* mutable_components(int index);
  inline void set_components(int index, const ::std::string& value);
  inline void set_components(int index, const char* value);
  inline void set_components(int index, const char* value, size_t size);
  inline ::std::string* add_components();
  inline void add_components(const ::std::string& value);
  inline void add_components(const char* value);
  inline void add_components(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& components() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_components();

  // optional string node = 6;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 6;
  inline const ::std::string& node() const;
  inline void set_node(const ::std::string& value);
  inline void set_node(const char* value);
  inline void set_node(const char* value, size_t size);
  inline ::std::string* mutable_node();
  inline ::std::string* release_node();
  inline void set_allocated_node(::std::string* node);

  // optional string serviceGroup = 7;
  inline bool has_servicegroup() const;
  inline void clear_servicegroup();
  static const int kServiceGroupFieldNumber = 7;
  inline const ::std::string& servicegroup() const;
  inline void set_servicegroup(const ::std::string& value);
  inline void set_servicegroup(const char* value);
  inline void set_servicegroup(const char* value, size_t size);
  inline ::std::string* mutable_servicegroup();
  inline ::std::string* release_servicegroup();
  inline void set_allocated_servicegroup(::std::string* servicegroup);

  // optional fixed32 probationTime = 8;
  inline bool has_probationtime() const;
  inline void clear_probationtime();
  static const int kProbationTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 probationtime() const;
  inline void set_probationtime(::google::protobuf::uint32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ServiceUnitConfig)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_adminstate();
  inline void clear_has_adminstate();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_failover();
  inline void clear_has_failover();
  inline void set_has_node();
  inline void clear_has_node();
  inline void set_has_servicegroup();
  inline void clear_has_servicegroup();
  inline void set_has_probationtime();
  inline void clear_has_probationtime();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int adminstate_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::RepeatedPtrField< ::std::string> components_;
  ::std::string* node_;
  bool failover_;
  ::google::protobuf::uint32 probationtime_;
  ::std::string* servicegroup_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static ServiceUnitConfig* default_instance_;
};
// -------------------------------------------------------------------

class InitializeRequest : public ::google::protobuf::Message {
 public:
  InitializeRequest();
  virtual ~InitializeRequest();

  InitializeRequest(const InitializeRequest& from);

  inline InitializeRequest& operator=(const InitializeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitializeRequest& default_instance();

  void Swap(InitializeRequest* other);

  // implements Message ----------------------------------------------

  InitializeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitializeRequest& from);
  void MergeFrom(const InitializeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(InitializeRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.InitializeRequest)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static InitializeRequest* default_instance_;
};
// -------------------------------------------------------------------

class InitializeResponse : public ::google::protobuf::Message {
 public:
  InitializeResponse();
  virtual ~InitializeResponse();

  InitializeResponse(const InitializeResponse& from);

  inline InitializeResponse& operator=(const InitializeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitializeResponse& default_instance();

  void Swap(InitializeResponse* other);

  // implements Message ----------------------------------------------

  InitializeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitializeResponse& from);
  void MergeFrom(const InitializeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(InitializeResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.InitializeResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static InitializeResponse* default_instance_;
};
// -------------------------------------------------------------------

class FinalizeRequest : public ::google::protobuf::Message {
 public:
  FinalizeRequest();
  virtual ~FinalizeRequest();

  FinalizeRequest(const FinalizeRequest& from);

  inline FinalizeRequest& operator=(const FinalizeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FinalizeRequest& default_instance();

  void Swap(FinalizeRequest* other);

  // implements Message ----------------------------------------------

  FinalizeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FinalizeRequest& from);
  void MergeFrom(const FinalizeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(FinalizeRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.FinalizeRequest)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static FinalizeRequest* default_instance_;
};
// -------------------------------------------------------------------

class FinalizeResponse : public ::google::protobuf::Message {
 public:
  FinalizeResponse();
  virtual ~FinalizeResponse();

  FinalizeResponse(const FinalizeResponse& from);

  inline FinalizeResponse& operator=(const FinalizeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FinalizeResponse& default_instance();

  void Swap(FinalizeResponse* other);

  // implements Message ----------------------------------------------

  FinalizeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FinalizeResponse& from);
  void MergeFrom(const FinalizeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(FinalizeResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.FinalizeResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static FinalizeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CommitRequest : public ::google::protobuf::Message {
 public:
  CommitRequest();
  virtual ~CommitRequest();

  CommitRequest(const CommitRequest& from);

  inline CommitRequest& operator=(const CommitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitRequest& default_instance();

  void Swap(CommitRequest* other);

  // implements Message ----------------------------------------------

  CommitRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitRequest& from);
  void MergeFrom(const CommitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CommitRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.CommitRequest)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static CommitRequest* default_instance_;
};
// -------------------------------------------------------------------

class CommitResponse : public ::google::protobuf::Message {
 public:
  CommitResponse();
  virtual ~CommitResponse();

  CommitResponse(const CommitResponse& from);

  inline CommitResponse& operator=(const CommitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitResponse& default_instance();

  void Swap(CommitResponse* other);

  // implements Message ----------------------------------------------

  CommitResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitResponse& from);
  void MergeFrom(const CommitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CommitResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.CommitResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static CommitResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreateComponentRequest : public ::google::protobuf::Message {
 public:
  CreateComponentRequest();
  virtual ~CreateComponentRequest();

  CreateComponentRequest(const CreateComponentRequest& from);

  inline CreateComponentRequest& operator=(const CreateComponentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateComponentRequest& default_instance();

  void Swap(CreateComponentRequest* other);

  // implements Message ----------------------------------------------

  CreateComponentRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateComponentRequest& from);
  void MergeFrom(const CreateComponentRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional .SAFplus.Rpc.amfMgmtRpc.ComponentConfig ComponentConfig = 2;
  inline bool has_componentconfig() const;
  inline void clear_componentconfig();
  static const int kComponentConfigFieldNumber = 2;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig& componentconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* mutable_componentconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* release_componentconfig();
  inline void set_allocated_componentconfig(::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* componentconfig);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CreateComponentRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.CreateComponentRequest)
 private:
  inline void set_has_componentconfig();
  inline void clear_has_componentconfig();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* componentconfig_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static CreateComponentRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateComponentResponse : public ::google::protobuf::Message {
 public:
  CreateComponentResponse();
  virtual ~CreateComponentResponse();

  CreateComponentResponse(const CreateComponentResponse& from);

  inline CreateComponentResponse& operator=(const CreateComponentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateComponentResponse& default_instance();

  void Swap(CreateComponentResponse* other);

  // implements Message ----------------------------------------------

  CreateComponentResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateComponentResponse& from);
  void MergeFrom(const CreateComponentResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CreateComponentResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.CreateComponentResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static CreateComponentResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateComponentRequest : public ::google::protobuf::Message {
 public:
  UpdateComponentRequest();
  virtual ~UpdateComponentRequest();

  UpdateComponentRequest(const UpdateComponentRequest& from);

  inline UpdateComponentRequest& operator=(const UpdateComponentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateComponentRequest& default_instance();

  void Swap(UpdateComponentRequest* other);

  // implements Message ----------------------------------------------

  UpdateComponentRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateComponentRequest& from);
  void MergeFrom(const UpdateComponentRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional .SAFplus.Rpc.amfMgmtRpc.ComponentConfig ComponentConfig = 2;
  inline bool has_componentconfig() const;
  inline void clear_componentconfig();
  static const int kComponentConfigFieldNumber = 2;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig& componentconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* mutable_componentconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* release_componentconfig();
  inline void set_allocated_componentconfig(::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* componentconfig);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UpdateComponentRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UpdateComponentRequest)
 private:
  inline void set_has_componentconfig();
  inline void clear_has_componentconfig();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* componentconfig_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UpdateComponentRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateComponentResponse : public ::google::protobuf::Message {
 public:
  UpdateComponentResponse();
  virtual ~UpdateComponentResponse();

  UpdateComponentResponse(const UpdateComponentResponse& from);

  inline UpdateComponentResponse& operator=(const UpdateComponentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateComponentResponse& default_instance();

  void Swap(UpdateComponentResponse* other);

  // implements Message ----------------------------------------------

  UpdateComponentResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateComponentResponse& from);
  void MergeFrom(const UpdateComponentResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UpdateComponentResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UpdateComponentResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UpdateComponentResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteComponentRequest : public ::google::protobuf::Message {
 public:
  DeleteComponentRequest();
  virtual ~DeleteComponentRequest();

  DeleteComponentRequest(const DeleteComponentRequest& from);

  inline DeleteComponentRequest& operator=(const DeleteComponentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteComponentRequest& default_instance();

  void Swap(DeleteComponentRequest* other);

  // implements Message ----------------------------------------------

  DeleteComponentRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteComponentRequest& from);
  void MergeFrom(const DeleteComponentRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteComponentRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteComponentRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteComponentResponse : public ::google::protobuf::Message {
 public:
  DeleteComponentResponse();
  virtual ~DeleteComponentResponse();

  DeleteComponentResponse(const DeleteComponentResponse& from);

  inline DeleteComponentResponse& operator=(const DeleteComponentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteComponentResponse& default_instance();

  void Swap(DeleteComponentResponse* other);

  // implements Message ----------------------------------------------

  DeleteComponentResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteComponentResponse& from);
  void MergeFrom(const DeleteComponentResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteComponentResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteComponentResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteComponentResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreateSGRequest : public ::google::protobuf::Message {
 public:
  CreateSGRequest();
  virtual ~CreateSGRequest();

  CreateSGRequest(const CreateSGRequest& from);

  inline CreateSGRequest& operator=(const CreateSGRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSGRequest& default_instance();

  void Swap(CreateSGRequest* other);

  // implements Message ----------------------------------------------

  CreateSGRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateSGRequest& from);
  void MergeFrom(const CreateSGRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional .SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig ServiceGroupConfig = 2;
  inline bool has_servicegroupconfig() const;
  inline void clear_servicegroupconfig();
  static const int kServiceGroupConfigFieldNumber = 2;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig& servicegroupconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* mutable_servicegroupconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* release_servicegroupconfig();
  inline void set_allocated_servicegroupconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* servicegroupconfig);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CreateSGRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.CreateSGRequest)
 private:
  inline void set_has_servicegroupconfig();
  inline void clear_has_servicegroupconfig();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* servicegroupconfig_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static CreateSGRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateSGResponse : public ::google::protobuf::Message {
 public:
  CreateSGResponse();
  virtual ~CreateSGResponse();

  CreateSGResponse(const CreateSGResponse& from);

  inline CreateSGResponse& operator=(const CreateSGResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSGResponse& default_instance();

  void Swap(CreateSGResponse* other);

  // implements Message ----------------------------------------------

  CreateSGResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateSGResponse& from);
  void MergeFrom(const CreateSGResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CreateSGResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.CreateSGResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static CreateSGResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateSGRequest : public ::google::protobuf::Message {
 public:
  UpdateSGRequest();
  virtual ~UpdateSGRequest();

  UpdateSGRequest(const UpdateSGRequest& from);

  inline UpdateSGRequest& operator=(const UpdateSGRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSGRequest& default_instance();

  void Swap(UpdateSGRequest* other);

  // implements Message ----------------------------------------------

  UpdateSGRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateSGRequest& from);
  void MergeFrom(const UpdateSGRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional .SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig ServiceGroupConfig = 2;
  inline bool has_servicegroupconfig() const;
  inline void clear_servicegroupconfig();
  static const int kServiceGroupConfigFieldNumber = 2;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig& servicegroupconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* mutable_servicegroupconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* release_servicegroupconfig();
  inline void set_allocated_servicegroupconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* servicegroupconfig);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UpdateSGRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UpdateSGRequest)
 private:
  inline void set_has_servicegroupconfig();
  inline void clear_has_servicegroupconfig();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* servicegroupconfig_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UpdateSGRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateSGResponse : public ::google::protobuf::Message {
 public:
  UpdateSGResponse();
  virtual ~UpdateSGResponse();

  UpdateSGResponse(const UpdateSGResponse& from);

  inline UpdateSGResponse& operator=(const UpdateSGResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSGResponse& default_instance();

  void Swap(UpdateSGResponse* other);

  // implements Message ----------------------------------------------

  UpdateSGResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateSGResponse& from);
  void MergeFrom(const UpdateSGResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UpdateSGResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UpdateSGResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UpdateSGResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSGRequest : public ::google::protobuf::Message {
 public:
  DeleteSGRequest();
  virtual ~DeleteSGRequest();

  DeleteSGRequest(const DeleteSGRequest& from);

  inline DeleteSGRequest& operator=(const DeleteSGRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSGRequest& default_instance();

  void Swap(DeleteSGRequest* other);

  // implements Message ----------------------------------------------

  DeleteSGRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSGRequest& from);
  void MergeFrom(const DeleteSGRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteSGRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteSGRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSGResponse : public ::google::protobuf::Message {
 public:
  DeleteSGResponse();
  virtual ~DeleteSGResponse();

  DeleteSGResponse(const DeleteSGResponse& from);

  inline DeleteSGResponse& operator=(const DeleteSGResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSGResponse& default_instance();

  void Swap(DeleteSGResponse* other);

  // implements Message ----------------------------------------------

  DeleteSGResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSGResponse& from);
  void MergeFrom(const DeleteSGResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteSGResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteSGResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteSGResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreateNodeRequest : public ::google::protobuf::Message {
 public:
  CreateNodeRequest();
  virtual ~CreateNodeRequest();

  CreateNodeRequest(const CreateNodeRequest& from);

  inline CreateNodeRequest& operator=(const CreateNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateNodeRequest& default_instance();

  void Swap(CreateNodeRequest* other);

  // implements Message ----------------------------------------------

  CreateNodeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateNodeRequest& from);
  void MergeFrom(const CreateNodeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional .SAFplus.Rpc.amfMgmtRpc.NodeConfig NodeConfig = 2;
  inline bool has_nodeconfig() const;
  inline void clear_nodeconfig();
  static const int kNodeConfigFieldNumber = 2;
  inline const ::SAFplus::Rpc::amfMgmtRpc::NodeConfig& nodeconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* mutable_nodeconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* release_nodeconfig();
  inline void set_allocated_nodeconfig(::SAFplus::Rpc::amfMgmtRpc::NodeConfig* nodeconfig);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CreateNodeRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.CreateNodeRequest)
 private:
  inline void set_has_nodeconfig();
  inline void clear_has_nodeconfig();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* nodeconfig_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static CreateNodeRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateNodeResponse : public ::google::protobuf::Message {
 public:
  CreateNodeResponse();
  virtual ~CreateNodeResponse();

  CreateNodeResponse(const CreateNodeResponse& from);

  inline CreateNodeResponse& operator=(const CreateNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateNodeResponse& default_instance();

  void Swap(CreateNodeResponse* other);

  // implements Message ----------------------------------------------

  CreateNodeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateNodeResponse& from);
  void MergeFrom(const CreateNodeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CreateNodeResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.CreateNodeResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static CreateNodeResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateNodeRequest : public ::google::protobuf::Message {
 public:
  UpdateNodeRequest();
  virtual ~UpdateNodeRequest();

  UpdateNodeRequest(const UpdateNodeRequest& from);

  inline UpdateNodeRequest& operator=(const UpdateNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateNodeRequest& default_instance();

  void Swap(UpdateNodeRequest* other);

  // implements Message ----------------------------------------------

  UpdateNodeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateNodeRequest& from);
  void MergeFrom(const UpdateNodeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional .SAFplus.Rpc.amfMgmtRpc.NodeConfig NodeConfig = 2;
  inline bool has_nodeconfig() const;
  inline void clear_nodeconfig();
  static const int kNodeConfigFieldNumber = 2;
  inline const ::SAFplus::Rpc::amfMgmtRpc::NodeConfig& nodeconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* mutable_nodeconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* release_nodeconfig();
  inline void set_allocated_nodeconfig(::SAFplus::Rpc::amfMgmtRpc::NodeConfig* nodeconfig);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UpdateNodeRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UpdateNodeRequest)
 private:
  inline void set_has_nodeconfig();
  inline void clear_has_nodeconfig();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* nodeconfig_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UpdateNodeRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateNodeResponse : public ::google::protobuf::Message {
 public:
  UpdateNodeResponse();
  virtual ~UpdateNodeResponse();

  UpdateNodeResponse(const UpdateNodeResponse& from);

  inline UpdateNodeResponse& operator=(const UpdateNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateNodeResponse& default_instance();

  void Swap(UpdateNodeResponse* other);

  // implements Message ----------------------------------------------

  UpdateNodeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateNodeResponse& from);
  void MergeFrom(const UpdateNodeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UpdateNodeResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UpdateNodeResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UpdateNodeResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteNodeRequest : public ::google::protobuf::Message {
 public:
  DeleteNodeRequest();
  virtual ~DeleteNodeRequest();

  DeleteNodeRequest(const DeleteNodeRequest& from);

  inline DeleteNodeRequest& operator=(const DeleteNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteNodeRequest& default_instance();

  void Swap(DeleteNodeRequest* other);

  // implements Message ----------------------------------------------

  DeleteNodeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteNodeRequest& from);
  void MergeFrom(const DeleteNodeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteNodeRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteNodeRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteNodeResponse : public ::google::protobuf::Message {
 public:
  DeleteNodeResponse();
  virtual ~DeleteNodeResponse();

  DeleteNodeResponse(const DeleteNodeResponse& from);

  inline DeleteNodeResponse& operator=(const DeleteNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteNodeResponse& default_instance();

  void Swap(DeleteNodeResponse* other);

  // implements Message ----------------------------------------------

  DeleteNodeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteNodeResponse& from);
  void MergeFrom(const DeleteNodeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteNodeResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteNodeResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteNodeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreateSURequest : public ::google::protobuf::Message {
 public:
  CreateSURequest();
  virtual ~CreateSURequest();

  CreateSURequest(const CreateSURequest& from);

  inline CreateSURequest& operator=(const CreateSURequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSURequest& default_instance();

  void Swap(CreateSURequest* other);

  // implements Message ----------------------------------------------

  CreateSURequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateSURequest& from);
  void MergeFrom(const CreateSURequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional .SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig ServiceUnitConfig = 2;
  inline bool has_serviceunitconfig() const;
  inline void clear_serviceunitconfig();
  static const int kServiceUnitConfigFieldNumber = 2;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig& serviceunitconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* mutable_serviceunitconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* release_serviceunitconfig();
  inline void set_allocated_serviceunitconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* serviceunitconfig);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CreateSURequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.CreateSURequest)
 private:
  inline void set_has_serviceunitconfig();
  inline void clear_has_serviceunitconfig();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* serviceunitconfig_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static CreateSURequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateSUResponse : public ::google::protobuf::Message {
 public:
  CreateSUResponse();
  virtual ~CreateSUResponse();

  CreateSUResponse(const CreateSUResponse& from);

  inline CreateSUResponse& operator=(const CreateSUResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSUResponse& default_instance();

  void Swap(CreateSUResponse* other);

  // implements Message ----------------------------------------------

  CreateSUResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateSUResponse& from);
  void MergeFrom(const CreateSUResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CreateSUResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.CreateSUResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static CreateSUResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateSURequest : public ::google::protobuf::Message {
 public:
  UpdateSURequest();
  virtual ~UpdateSURequest();

  UpdateSURequest(const UpdateSURequest& from);

  inline UpdateSURequest& operator=(const UpdateSURequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSURequest& default_instance();

  void Swap(UpdateSURequest* other);

  // implements Message ----------------------------------------------

  UpdateSURequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateSURequest& from);
  void MergeFrom(const UpdateSURequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional .SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig ServiceUnitConfig = 2;
  inline bool has_serviceunitconfig() const;
  inline void clear_serviceunitconfig();
  static const int kServiceUnitConfigFieldNumber = 2;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig& serviceunitconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* mutable_serviceunitconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* release_serviceunitconfig();
  inline void set_allocated_serviceunitconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* serviceunitconfig);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UpdateSURequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UpdateSURequest)
 private:
  inline void set_has_serviceunitconfig();
  inline void clear_has_serviceunitconfig();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* serviceunitconfig_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UpdateSURequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateSUResponse : public ::google::protobuf::Message {
 public:
  UpdateSUResponse();
  virtual ~UpdateSUResponse();

  UpdateSUResponse(const UpdateSUResponse& from);

  inline UpdateSUResponse& operator=(const UpdateSUResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSUResponse& default_instance();

  void Swap(UpdateSUResponse* other);

  // implements Message ----------------------------------------------

  UpdateSUResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateSUResponse& from);
  void MergeFrom(const UpdateSUResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UpdateSUResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UpdateSUResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UpdateSUResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSURequest : public ::google::protobuf::Message {
 public:
  DeleteSURequest();
  virtual ~DeleteSURequest();

  DeleteSURequest(const DeleteSURequest& from);

  inline DeleteSURequest& operator=(const DeleteSURequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSURequest& default_instance();

  void Swap(DeleteSURequest* other);

  // implements Message ----------------------------------------------

  DeleteSURequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSURequest& from);
  void MergeFrom(const DeleteSURequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteSURequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteSURequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSUResponse : public ::google::protobuf::Message {
 public:
  DeleteSUResponse();
  virtual ~DeleteSUResponse();

  DeleteSUResponse(const DeleteSUResponse& from);

  inline DeleteSUResponse& operator=(const DeleteSUResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSUResponse& default_instance();

  void Swap(DeleteSUResponse* other);

  // implements Message ----------------------------------------------

  DeleteSUResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSUResponse& from);
  void MergeFrom(const DeleteSUResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteSUResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteSUResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteSUResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreateSIRequest : public ::google::protobuf::Message {
 public:
  CreateSIRequest();
  virtual ~CreateSIRequest();

  CreateSIRequest(const CreateSIRequest& from);

  inline CreateSIRequest& operator=(const CreateSIRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSIRequest& default_instance();

  void Swap(CreateSIRequest* other);

  // implements Message ----------------------------------------------

  CreateSIRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateSIRequest& from);
  void MergeFrom(const CreateSIRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional .SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig ServiceInstanceConfig = 2;
  inline bool has_serviceinstanceconfig() const;
  inline void clear_serviceinstanceconfig();
  static const int kServiceInstanceConfigFieldNumber = 2;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig& serviceinstanceconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* mutable_serviceinstanceconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* release_serviceinstanceconfig();
  inline void set_allocated_serviceinstanceconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* serviceinstanceconfig);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CreateSIRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.CreateSIRequest)
 private:
  inline void set_has_serviceinstanceconfig();
  inline void clear_has_serviceinstanceconfig();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* serviceinstanceconfig_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static CreateSIRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateSIResponse : public ::google::protobuf::Message {
 public:
  CreateSIResponse();
  virtual ~CreateSIResponse();

  CreateSIResponse(const CreateSIResponse& from);

  inline CreateSIResponse& operator=(const CreateSIResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSIResponse& default_instance();

  void Swap(CreateSIResponse* other);

  // implements Message ----------------------------------------------

  CreateSIResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateSIResponse& from);
  void MergeFrom(const CreateSIResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CreateSIResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.CreateSIResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static CreateSIResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateSIRequest : public ::google::protobuf::Message {
 public:
  UpdateSIRequest();
  virtual ~UpdateSIRequest();

  UpdateSIRequest(const UpdateSIRequest& from);

  inline UpdateSIRequest& operator=(const UpdateSIRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSIRequest& default_instance();

  void Swap(UpdateSIRequest* other);

  // implements Message ----------------------------------------------

  UpdateSIRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateSIRequest& from);
  void MergeFrom(const UpdateSIRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional .SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig ServiceInstanceConfig = 2;
  inline bool has_serviceinstanceconfig() const;
  inline void clear_serviceinstanceconfig();
  static const int kServiceInstanceConfigFieldNumber = 2;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig& serviceinstanceconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* mutable_serviceinstanceconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* release_serviceinstanceconfig();
  inline void set_allocated_serviceinstanceconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* serviceinstanceconfig);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UpdateSIRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UpdateSIRequest)
 private:
  inline void set_has_serviceinstanceconfig();
  inline void clear_has_serviceinstanceconfig();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* serviceinstanceconfig_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UpdateSIRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateSIResponse : public ::google::protobuf::Message {
 public:
  UpdateSIResponse();
  virtual ~UpdateSIResponse();

  UpdateSIResponse(const UpdateSIResponse& from);

  inline UpdateSIResponse& operator=(const UpdateSIResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSIResponse& default_instance();

  void Swap(UpdateSIResponse* other);

  // implements Message ----------------------------------------------

  UpdateSIResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateSIResponse& from);
  void MergeFrom(const UpdateSIResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UpdateSIResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UpdateSIResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UpdateSIResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSIRequest : public ::google::protobuf::Message {
 public:
  DeleteSIRequest();
  virtual ~DeleteSIRequest();

  DeleteSIRequest(const DeleteSIRequest& from);

  inline DeleteSIRequest& operator=(const DeleteSIRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSIRequest& default_instance();

  void Swap(DeleteSIRequest* other);

  // implements Message ----------------------------------------------

  DeleteSIRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSIRequest& from);
  void MergeFrom(const DeleteSIRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteSIRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteSIRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSIResponse : public ::google::protobuf::Message {
 public:
  DeleteSIResponse();
  virtual ~DeleteSIResponse();

  DeleteSIResponse(const DeleteSIResponse& from);

  inline DeleteSIResponse& operator=(const DeleteSIResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSIResponse& default_instance();

  void Swap(DeleteSIResponse* other);

  // implements Message ----------------------------------------------

  DeleteSIResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSIResponse& from);
  void MergeFrom(const DeleteSIResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteSIResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteSIResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteSIResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreateCSIRequest : public ::google::protobuf::Message {
 public:
  CreateCSIRequest();
  virtual ~CreateCSIRequest();

  CreateCSIRequest(const CreateCSIRequest& from);

  inline CreateCSIRequest& operator=(const CreateCSIRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateCSIRequest& default_instance();

  void Swap(CreateCSIRequest* other);

  // implements Message ----------------------------------------------

  CreateCSIRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateCSIRequest& from);
  void MergeFrom(const CreateCSIRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional .SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig ComponentServiceInstanceConfig = 2;
  inline bool has_componentserviceinstanceconfig() const;
  inline void clear_componentserviceinstanceconfig();
  static const int kComponentServiceInstanceConfigFieldNumber = 2;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig& componentserviceinstanceconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* mutable_componentserviceinstanceconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* release_componentserviceinstanceconfig();
  inline void set_allocated_componentserviceinstanceconfig(::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* componentserviceinstanceconfig);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CreateCSIRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.CreateCSIRequest)
 private:
  inline void set_has_componentserviceinstanceconfig();
  inline void clear_has_componentserviceinstanceconfig();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* componentserviceinstanceconfig_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static CreateCSIRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateCSIResponse : public ::google::protobuf::Message {
 public:
  CreateCSIResponse();
  virtual ~CreateCSIResponse();

  CreateCSIResponse(const CreateCSIResponse& from);

  inline CreateCSIResponse& operator=(const CreateCSIResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateCSIResponse& default_instance();

  void Swap(CreateCSIResponse* other);

  // implements Message ----------------------------------------------

  CreateCSIResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateCSIResponse& from);
  void MergeFrom(const CreateCSIResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CreateCSIResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.CreateCSIResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static CreateCSIResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateCSIRequest : public ::google::protobuf::Message {
 public:
  UpdateCSIRequest();
  virtual ~UpdateCSIRequest();

  UpdateCSIRequest(const UpdateCSIRequest& from);

  inline UpdateCSIRequest& operator=(const UpdateCSIRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateCSIRequest& default_instance();

  void Swap(UpdateCSIRequest* other);

  // implements Message ----------------------------------------------

  UpdateCSIRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateCSIRequest& from);
  void MergeFrom(const UpdateCSIRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional .SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig ComponentServiceInstanceConfig = 2;
  inline bool has_componentserviceinstanceconfig() const;
  inline void clear_componentserviceinstanceconfig();
  static const int kComponentServiceInstanceConfigFieldNumber = 2;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig& componentserviceinstanceconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* mutable_componentserviceinstanceconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* release_componentserviceinstanceconfig();
  inline void set_allocated_componentserviceinstanceconfig(::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* componentserviceinstanceconfig);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UpdateCSIRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UpdateCSIRequest)
 private:
  inline void set_has_componentserviceinstanceconfig();
  inline void clear_has_componentserviceinstanceconfig();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* componentserviceinstanceconfig_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UpdateCSIRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateCSIResponse : public ::google::protobuf::Message {
 public:
  UpdateCSIResponse();
  virtual ~UpdateCSIResponse();

  UpdateCSIResponse(const UpdateCSIResponse& from);

  inline UpdateCSIResponse& operator=(const UpdateCSIResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateCSIResponse& default_instance();

  void Swap(UpdateCSIResponse* other);

  // implements Message ----------------------------------------------

  UpdateCSIResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateCSIResponse& from);
  void MergeFrom(const UpdateCSIResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UpdateCSIResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UpdateCSIResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UpdateCSIResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteCSIRequest : public ::google::protobuf::Message {
 public:
  DeleteCSIRequest();
  virtual ~DeleteCSIRequest();

  DeleteCSIRequest(const DeleteCSIRequest& from);

  inline DeleteCSIRequest& operator=(const DeleteCSIRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteCSIRequest& default_instance();

  void Swap(DeleteCSIRequest* other);

  // implements Message ----------------------------------------------

  DeleteCSIRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteCSIRequest& from);
  void MergeFrom(const DeleteCSIRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteCSIRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteCSIRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteCSIResponse : public ::google::protobuf::Message {
 public:
  DeleteCSIResponse();
  virtual ~DeleteCSIResponse();

  DeleteCSIResponse(const DeleteCSIResponse& from);

  inline DeleteCSIResponse& operator=(const DeleteCSIResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteCSIResponse& default_instance();

  void Swap(DeleteCSIResponse* other);

  // implements Message ----------------------------------------------

  DeleteCSIResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteCSIResponse& from);
  void MergeFrom(const DeleteCSIResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteCSIResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteCSIResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteCSIResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteCSINVPRequest : public ::google::protobuf::Message {
 public:
  DeleteCSINVPRequest();
  virtual ~DeleteCSINVPRequest();

  DeleteCSINVPRequest(const DeleteCSINVPRequest& from);

  inline DeleteCSINVPRequest& operator=(const DeleteCSINVPRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteCSINVPRequest& default_instance();

  void Swap(DeleteCSINVPRequest* other);

  // implements Message ----------------------------------------------

  DeleteCSINVPRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteCSINVPRequest& from);
  void MergeFrom(const DeleteCSINVPRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .SAFplus.Rpc.amfMgmtRpc.Data data = 3;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SAFplus::Rpc::amfMgmtRpc::Data& data(int index) const;
  inline ::SAFplus::Rpc::amfMgmtRpc::Data* mutable_data(int index);
  inline ::SAFplus::Rpc::amfMgmtRpc::Data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SAFplus::Rpc::amfMgmtRpc::Data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SAFplus::Rpc::amfMgmtRpc::Data >*
      mutable_data();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteCSINVPRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::SAFplus::Rpc::amfMgmtRpc::Data > data_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteCSINVPRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteCSINVPResponse : public ::google::protobuf::Message {
 public:
  DeleteCSINVPResponse();
  virtual ~DeleteCSINVPResponse();

  DeleteCSINVPResponse(const DeleteCSINVPResponse& from);

  inline DeleteCSINVPResponse& operator=(const DeleteCSINVPResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteCSINVPResponse& default_instance();

  void Swap(DeleteCSINVPResponse* other);

  // implements Message ----------------------------------------------

  DeleteCSINVPResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteCSINVPResponse& from);
  void MergeFrom(const DeleteCSINVPResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteCSINVPResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteCSINVPResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteNodeSUListRequest : public ::google::protobuf::Message {
 public:
  DeleteNodeSUListRequest();
  virtual ~DeleteNodeSUListRequest();

  DeleteNodeSUListRequest(const DeleteNodeSUListRequest& from);

  inline DeleteNodeSUListRequest& operator=(const DeleteNodeSUListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteNodeSUListRequest& default_instance();

  void Swap(DeleteNodeSUListRequest* other);

  // implements Message ----------------------------------------------

  DeleteNodeSUListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteNodeSUListRequest& from);
  void MergeFrom(const DeleteNodeSUListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string nodeName = 2;
  inline bool has_nodename() const;
  inline void clear_nodename();
  static const int kNodeNameFieldNumber = 2;
  inline const ::std::string& nodename() const;
  inline void set_nodename(const ::std::string& value);
  inline void set_nodename(const char* value);
  inline void set_nodename(const char* value, size_t size);
  inline ::std::string* mutable_nodename();
  inline ::std::string* release_nodename();
  inline void set_allocated_nodename(::std::string* nodename);

  // repeated string suList = 3;
  inline int sulist_size() const;
  inline void clear_sulist();
  static const int kSuListFieldNumber = 3;
  inline const ::std::string& sulist(int index) const;
  inline ::std::string* mutable_sulist(int index);
  inline void set_sulist(int index, const ::std::string& value);
  inline void set_sulist(int index, const char* value);
  inline void set_sulist(int index, const char* value, size_t size);
  inline ::std::string* add_sulist();
  inline void add_sulist(const ::std::string& value);
  inline void add_sulist(const char* value);
  inline void add_sulist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& sulist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sulist();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteNodeSUListRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest)
 private:
  inline void set_has_nodename();
  inline void clear_has_nodename();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* nodename_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sulist_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteNodeSUListRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteNodeSUListResponse : public ::google::protobuf::Message {
 public:
  DeleteNodeSUListResponse();
  virtual ~DeleteNodeSUListResponse();

  DeleteNodeSUListResponse(const DeleteNodeSUListResponse& from);

  inline DeleteNodeSUListResponse& operator=(const DeleteNodeSUListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteNodeSUListResponse& default_instance();

  void Swap(DeleteNodeSUListResponse* other);

  // implements Message ----------------------------------------------

  DeleteNodeSUListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteNodeSUListResponse& from);
  void MergeFrom(const DeleteNodeSUListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteNodeSUListResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteNodeSUListResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSGSUListRequest : public ::google::protobuf::Message {
 public:
  DeleteSGSUListRequest();
  virtual ~DeleteSGSUListRequest();

  DeleteSGSUListRequest(const DeleteSGSUListRequest& from);

  inline DeleteSGSUListRequest& operator=(const DeleteSGSUListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSGSUListRequest& default_instance();

  void Swap(DeleteSGSUListRequest* other);

  // implements Message ----------------------------------------------

  DeleteSGSUListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSGSUListRequest& from);
  void MergeFrom(const DeleteSGSUListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string sgName = 2;
  inline bool has_sgname() const;
  inline void clear_sgname();
  static const int kSgNameFieldNumber = 2;
  inline const ::std::string& sgname() const;
  inline void set_sgname(const ::std::string& value);
  inline void set_sgname(const char* value);
  inline void set_sgname(const char* value, size_t size);
  inline ::std::string* mutable_sgname();
  inline ::std::string* release_sgname();
  inline void set_allocated_sgname(::std::string* sgname);

  // repeated string suList = 3;
  inline int sulist_size() const;
  inline void clear_sulist();
  static const int kSuListFieldNumber = 3;
  inline const ::std::string& sulist(int index) const;
  inline ::std::string* mutable_sulist(int index);
  inline void set_sulist(int index, const ::std::string& value);
  inline void set_sulist(int index, const char* value);
  inline void set_sulist(int index, const char* value, size_t size);
  inline ::std::string* add_sulist();
  inline void add_sulist(const ::std::string& value);
  inline void add_sulist(const char* value);
  inline void add_sulist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& sulist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sulist();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteSGSUListRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest)
 private:
  inline void set_has_sgname();
  inline void clear_has_sgname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* sgname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sulist_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteSGSUListRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSGSUListResponse : public ::google::protobuf::Message {
 public:
  DeleteSGSUListResponse();
  virtual ~DeleteSGSUListResponse();

  DeleteSGSUListResponse(const DeleteSGSUListResponse& from);

  inline DeleteSGSUListResponse& operator=(const DeleteSGSUListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSGSUListResponse& default_instance();

  void Swap(DeleteSGSUListResponse* other);

  // implements Message ----------------------------------------------

  DeleteSGSUListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSGSUListResponse& from);
  void MergeFrom(const DeleteSGSUListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteSGSUListResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteSGSUListResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSGSIListRequest : public ::google::protobuf::Message {
 public:
  DeleteSGSIListRequest();
  virtual ~DeleteSGSIListRequest();

  DeleteSGSIListRequest(const DeleteSGSIListRequest& from);

  inline DeleteSGSIListRequest& operator=(const DeleteSGSIListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSGSIListRequest& default_instance();

  void Swap(DeleteSGSIListRequest* other);

  // implements Message ----------------------------------------------

  DeleteSGSIListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSGSIListRequest& from);
  void MergeFrom(const DeleteSGSIListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string sgName = 2;
  inline bool has_sgname() const;
  inline void clear_sgname();
  static const int kSgNameFieldNumber = 2;
  inline const ::std::string& sgname() const;
  inline void set_sgname(const ::std::string& value);
  inline void set_sgname(const char* value);
  inline void set_sgname(const char* value, size_t size);
  inline ::std::string* mutable_sgname();
  inline ::std::string* release_sgname();
  inline void set_allocated_sgname(::std::string* sgname);

  // repeated string siList = 3;
  inline int silist_size() const;
  inline void clear_silist();
  static const int kSiListFieldNumber = 3;
  inline const ::std::string& silist(int index) const;
  inline ::std::string* mutable_silist(int index);
  inline void set_silist(int index, const ::std::string& value);
  inline void set_silist(int index, const char* value);
  inline void set_silist(int index, const char* value, size_t size);
  inline ::std::string* add_silist();
  inline void add_silist(const ::std::string& value);
  inline void add_silist(const char* value);
  inline void add_silist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& silist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_silist();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteSGSIListRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest)
 private:
  inline void set_has_sgname();
  inline void clear_has_sgname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* sgname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> silist_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteSGSIListRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSGSIListResponse : public ::google::protobuf::Message {
 public:
  DeleteSGSIListResponse();
  virtual ~DeleteSGSIListResponse();

  DeleteSGSIListResponse(const DeleteSGSIListResponse& from);

  inline DeleteSGSIListResponse& operator=(const DeleteSGSIListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSGSIListResponse& default_instance();

  void Swap(DeleteSGSIListResponse* other);

  // implements Message ----------------------------------------------

  DeleteSGSIListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSGSIListResponse& from);
  void MergeFrom(const DeleteSGSIListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteSGSIListResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteSGSIListResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSUCompListRequest : public ::google::protobuf::Message {
 public:
  DeleteSUCompListRequest();
  virtual ~DeleteSUCompListRequest();

  DeleteSUCompListRequest(const DeleteSUCompListRequest& from);

  inline DeleteSUCompListRequest& operator=(const DeleteSUCompListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSUCompListRequest& default_instance();

  void Swap(DeleteSUCompListRequest* other);

  // implements Message ----------------------------------------------

  DeleteSUCompListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSUCompListRequest& from);
  void MergeFrom(const DeleteSUCompListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string suName = 2;
  inline bool has_suname() const;
  inline void clear_suname();
  static const int kSuNameFieldNumber = 2;
  inline const ::std::string& suname() const;
  inline void set_suname(const ::std::string& value);
  inline void set_suname(const char* value);
  inline void set_suname(const char* value, size_t size);
  inline ::std::string* mutable_suname();
  inline ::std::string* release_suname();
  inline void set_allocated_suname(::std::string* suname);

  // repeated string compList = 3;
  inline int complist_size() const;
  inline void clear_complist();
  static const int kCompListFieldNumber = 3;
  inline const ::std::string& complist(int index) const;
  inline ::std::string* mutable_complist(int index);
  inline void set_complist(int index, const ::std::string& value);
  inline void set_complist(int index, const char* value);
  inline void set_complist(int index, const char* value, size_t size);
  inline ::std::string* add_complist();
  inline void add_complist(const ::std::string& value);
  inline void add_complist(const char* value);
  inline void add_complist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& complist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_complist();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteSUCompListRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest)
 private:
  inline void set_has_suname();
  inline void clear_has_suname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* suname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> complist_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteSUCompListRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSUCompListResponse : public ::google::protobuf::Message {
 public:
  DeleteSUCompListResponse();
  virtual ~DeleteSUCompListResponse();

  DeleteSUCompListResponse(const DeleteSUCompListResponse& from);

  inline DeleteSUCompListResponse& operator=(const DeleteSUCompListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSUCompListResponse& default_instance();

  void Swap(DeleteSUCompListResponse* other);

  // implements Message ----------------------------------------------

  DeleteSUCompListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSUCompListResponse& from);
  void MergeFrom(const DeleteSUCompListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteSUCompListResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteSUCompListResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSICSIListRequest : public ::google::protobuf::Message {
 public:
  DeleteSICSIListRequest();
  virtual ~DeleteSICSIListRequest();

  DeleteSICSIListRequest(const DeleteSICSIListRequest& from);

  inline DeleteSICSIListRequest& operator=(const DeleteSICSIListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSICSIListRequest& default_instance();

  void Swap(DeleteSICSIListRequest* other);

  // implements Message ----------------------------------------------

  DeleteSICSIListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSICSIListRequest& from);
  void MergeFrom(const DeleteSICSIListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string siName = 2;
  inline bool has_siname() const;
  inline void clear_siname();
  static const int kSiNameFieldNumber = 2;
  inline const ::std::string& siname() const;
  inline void set_siname(const ::std::string& value);
  inline void set_siname(const char* value);
  inline void set_siname(const char* value, size_t size);
  inline ::std::string* mutable_siname();
  inline ::std::string* release_siname();
  inline void set_allocated_siname(::std::string* siname);

  // repeated string csiList = 3;
  inline int csilist_size() const;
  inline void clear_csilist();
  static const int kCsiListFieldNumber = 3;
  inline const ::std::string& csilist(int index) const;
  inline ::std::string* mutable_csilist(int index);
  inline void set_csilist(int index, const ::std::string& value);
  inline void set_csilist(int index, const char* value);
  inline void set_csilist(int index, const char* value, size_t size);
  inline ::std::string* add_csilist();
  inline void add_csilist(const ::std::string& value);
  inline void add_csilist(const char* value);
  inline void add_csilist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& csilist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_csilist();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteSICSIListRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest)
 private:
  inline void set_has_siname();
  inline void clear_has_siname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* siname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> csilist_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteSICSIListRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSICSIListResponse : public ::google::protobuf::Message {
 public:
  DeleteSICSIListResponse();
  virtual ~DeleteSICSIListResponse();

  DeleteSICSIListResponse(const DeleteSICSIListResponse& from);

  inline DeleteSICSIListResponse& operator=(const DeleteSICSIListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSICSIListResponse& default_instance();

  void Swap(DeleteSICSIListResponse* other);

  // implements Message ----------------------------------------------

  DeleteSICSIListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSICSIListResponse& from);
  void MergeFrom(const DeleteSICSIListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeleteSICSIListResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static DeleteSICSIListResponse* default_instance_;
};
// -------------------------------------------------------------------

class LockNodeAssignmentRequest : public ::google::protobuf::Message {
 public:
  LockNodeAssignmentRequest();
  virtual ~LockNodeAssignmentRequest();

  LockNodeAssignmentRequest(const LockNodeAssignmentRequest& from);

  inline LockNodeAssignmentRequest& operator=(const LockNodeAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockNodeAssignmentRequest& default_instance();

  void Swap(LockNodeAssignmentRequest* other);

  // implements Message ----------------------------------------------

  LockNodeAssignmentRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockNodeAssignmentRequest& from);
  void MergeFrom(const LockNodeAssignmentRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string nodeName = 2;
  inline bool has_nodename() const;
  inline void clear_nodename();
  static const int kNodeNameFieldNumber = 2;
  inline const ::std::string& nodename() const;
  inline void set_nodename(const ::std::string& value);
  inline void set_nodename(const char* value);
  inline void set_nodename(const char* value, size_t size);
  inline ::std::string* mutable_nodename();
  inline ::std::string* release_nodename();
  inline void set_allocated_nodename(::std::string* nodename);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(LockNodeAssignmentRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest)
 private:
  inline void set_has_nodename();
  inline void clear_has_nodename();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* nodename_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static LockNodeAssignmentRequest* default_instance_;
};
// -------------------------------------------------------------------

class LockNodeAssignmentResponse : public ::google::protobuf::Message {
 public:
  LockNodeAssignmentResponse();
  virtual ~LockNodeAssignmentResponse();

  LockNodeAssignmentResponse(const LockNodeAssignmentResponse& from);

  inline LockNodeAssignmentResponse& operator=(const LockNodeAssignmentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockNodeAssignmentResponse& default_instance();

  void Swap(LockNodeAssignmentResponse* other);

  // implements Message ----------------------------------------------

  LockNodeAssignmentResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockNodeAssignmentResponse& from);
  void MergeFrom(const LockNodeAssignmentResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(LockNodeAssignmentResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static LockNodeAssignmentResponse* default_instance_;
};
// -------------------------------------------------------------------

class LockSGAssignmentRequest : public ::google::protobuf::Message {
 public:
  LockSGAssignmentRequest();
  virtual ~LockSGAssignmentRequest();

  LockSGAssignmentRequest(const LockSGAssignmentRequest& from);

  inline LockSGAssignmentRequest& operator=(const LockSGAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockSGAssignmentRequest& default_instance();

  void Swap(LockSGAssignmentRequest* other);

  // implements Message ----------------------------------------------

  LockSGAssignmentRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockSGAssignmentRequest& from);
  void MergeFrom(const LockSGAssignmentRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string sgName = 2;
  inline bool has_sgname() const;
  inline void clear_sgname();
  static const int kSgNameFieldNumber = 2;
  inline const ::std::string& sgname() const;
  inline void set_sgname(const ::std::string& value);
  inline void set_sgname(const char* value);
  inline void set_sgname(const char* value, size_t size);
  inline ::std::string* mutable_sgname();
  inline ::std::string* release_sgname();
  inline void set_allocated_sgname(::std::string* sgname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(LockSGAssignmentRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest)
 private:
  inline void set_has_sgname();
  inline void clear_has_sgname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* sgname_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static LockSGAssignmentRequest* default_instance_;
};
// -------------------------------------------------------------------

class LockSGAssignmentResponse : public ::google::protobuf::Message {
 public:
  LockSGAssignmentResponse();
  virtual ~LockSGAssignmentResponse();

  LockSGAssignmentResponse(const LockSGAssignmentResponse& from);

  inline LockSGAssignmentResponse& operator=(const LockSGAssignmentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockSGAssignmentResponse& default_instance();

  void Swap(LockSGAssignmentResponse* other);

  // implements Message ----------------------------------------------

  LockSGAssignmentResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockSGAssignmentResponse& from);
  void MergeFrom(const LockSGAssignmentResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(LockSGAssignmentResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static LockSGAssignmentResponse* default_instance_;
};
// -------------------------------------------------------------------

class LockSUAssignmentRequest : public ::google::protobuf::Message {
 public:
  LockSUAssignmentRequest();
  virtual ~LockSUAssignmentRequest();

  LockSUAssignmentRequest(const LockSUAssignmentRequest& from);

  inline LockSUAssignmentRequest& operator=(const LockSUAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockSUAssignmentRequest& default_instance();

  void Swap(LockSUAssignmentRequest* other);

  // implements Message ----------------------------------------------

  LockSUAssignmentRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockSUAssignmentRequest& from);
  void MergeFrom(const LockSUAssignmentRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string suName = 2;
  inline bool has_suname() const;
  inline void clear_suname();
  static const int kSuNameFieldNumber = 2;
  inline const ::std::string& suname() const;
  inline void set_suname(const ::std::string& value);
  inline void set_suname(const char* value);
  inline void set_suname(const char* value, size_t size);
  inline ::std::string* mutable_suname();
  inline ::std::string* release_suname();
  inline void set_allocated_suname(::std::string* suname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(LockSUAssignmentRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest)
 private:
  inline void set_has_suname();
  inline void clear_has_suname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* suname_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static LockSUAssignmentRequest* default_instance_;
};
// -------------------------------------------------------------------

class LockSUAssignmentResponse : public ::google::protobuf::Message {
 public:
  LockSUAssignmentResponse();
  virtual ~LockSUAssignmentResponse();

  LockSUAssignmentResponse(const LockSUAssignmentResponse& from);

  inline LockSUAssignmentResponse& operator=(const LockSUAssignmentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockSUAssignmentResponse& default_instance();

  void Swap(LockSUAssignmentResponse* other);

  // implements Message ----------------------------------------------

  LockSUAssignmentResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockSUAssignmentResponse& from);
  void MergeFrom(const LockSUAssignmentResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(LockSUAssignmentResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static LockSUAssignmentResponse* default_instance_;
};
// -------------------------------------------------------------------

class LockSIAssignmentRequest : public ::google::protobuf::Message {
 public:
  LockSIAssignmentRequest();
  virtual ~LockSIAssignmentRequest();

  LockSIAssignmentRequest(const LockSIAssignmentRequest& from);

  inline LockSIAssignmentRequest& operator=(const LockSIAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockSIAssignmentRequest& default_instance();

  void Swap(LockSIAssignmentRequest* other);

  // implements Message ----------------------------------------------

  LockSIAssignmentRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockSIAssignmentRequest& from);
  void MergeFrom(const LockSIAssignmentRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string siName = 2;
  inline bool has_siname() const;
  inline void clear_siname();
  static const int kSiNameFieldNumber = 2;
  inline const ::std::string& siname() const;
  inline void set_siname(const ::std::string& value);
  inline void set_siname(const char* value);
  inline void set_siname(const char* value, size_t size);
  inline ::std::string* mutable_siname();
  inline ::std::string* release_siname();
  inline void set_allocated_siname(::std::string* siname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(LockSIAssignmentRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest)
 private:
  inline void set_has_siname();
  inline void clear_has_siname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* siname_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static LockSIAssignmentRequest* default_instance_;
};
// -------------------------------------------------------------------

class LockSIAssignmentResponse : public ::google::protobuf::Message {
 public:
  LockSIAssignmentResponse();
  virtual ~LockSIAssignmentResponse();

  LockSIAssignmentResponse(const LockSIAssignmentResponse& from);

  inline LockSIAssignmentResponse& operator=(const LockSIAssignmentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockSIAssignmentResponse& default_instance();

  void Swap(LockSIAssignmentResponse* other);

  // implements Message ----------------------------------------------

  LockSIAssignmentResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockSIAssignmentResponse& from);
  void MergeFrom(const LockSIAssignmentResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(LockSIAssignmentResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static LockSIAssignmentResponse* default_instance_;
};
// -------------------------------------------------------------------

class LockNodeInstantiationRequest : public ::google::protobuf::Message {
 public:
  LockNodeInstantiationRequest();
  virtual ~LockNodeInstantiationRequest();

  LockNodeInstantiationRequest(const LockNodeInstantiationRequest& from);

  inline LockNodeInstantiationRequest& operator=(const LockNodeInstantiationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockNodeInstantiationRequest& default_instance();

  void Swap(LockNodeInstantiationRequest* other);

  // implements Message ----------------------------------------------

  LockNodeInstantiationRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockNodeInstantiationRequest& from);
  void MergeFrom(const LockNodeInstantiationRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string nodeName = 2;
  inline bool has_nodename() const;
  inline void clear_nodename();
  static const int kNodeNameFieldNumber = 2;
  inline const ::std::string& nodename() const;
  inline void set_nodename(const ::std::string& value);
  inline void set_nodename(const char* value);
  inline void set_nodename(const char* value, size_t size);
  inline ::std::string* mutable_nodename();
  inline ::std::string* release_nodename();
  inline void set_allocated_nodename(::std::string* nodename);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(LockNodeInstantiationRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest)
 private:
  inline void set_has_nodename();
  inline void clear_has_nodename();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* nodename_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static LockNodeInstantiationRequest* default_instance_;
};
// -------------------------------------------------------------------

class LockNodeInstantiationResponse : public ::google::protobuf::Message {
 public:
  LockNodeInstantiationResponse();
  virtual ~LockNodeInstantiationResponse();

  LockNodeInstantiationResponse(const LockNodeInstantiationResponse& from);

  inline LockNodeInstantiationResponse& operator=(const LockNodeInstantiationResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockNodeInstantiationResponse& default_instance();

  void Swap(LockNodeInstantiationResponse* other);

  // implements Message ----------------------------------------------

  LockNodeInstantiationResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockNodeInstantiationResponse& from);
  void MergeFrom(const LockNodeInstantiationResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(LockNodeInstantiationResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static LockNodeInstantiationResponse* default_instance_;
};
// -------------------------------------------------------------------

class LockSGInstantiationRequest : public ::google::protobuf::Message {
 public:
  LockSGInstantiationRequest();
  virtual ~LockSGInstantiationRequest();

  LockSGInstantiationRequest(const LockSGInstantiationRequest& from);

  inline LockSGInstantiationRequest& operator=(const LockSGInstantiationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockSGInstantiationRequest& default_instance();

  void Swap(LockSGInstantiationRequest* other);

  // implements Message ----------------------------------------------

  LockSGInstantiationRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockSGInstantiationRequest& from);
  void MergeFrom(const LockSGInstantiationRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string sgName = 2;
  inline bool has_sgname() const;
  inline void clear_sgname();
  static const int kSgNameFieldNumber = 2;
  inline const ::std::string& sgname() const;
  inline void set_sgname(const ::std::string& value);
  inline void set_sgname(const char* value);
  inline void set_sgname(const char* value, size_t size);
  inline ::std::string* mutable_sgname();
  inline ::std::string* release_sgname();
  inline void set_allocated_sgname(::std::string* sgname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(LockSGInstantiationRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest)
 private:
  inline void set_has_sgname();
  inline void clear_has_sgname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* sgname_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static LockSGInstantiationRequest* default_instance_;
};
// -------------------------------------------------------------------

class LockSGInstantiationResponse : public ::google::protobuf::Message {
 public:
  LockSGInstantiationResponse();
  virtual ~LockSGInstantiationResponse();

  LockSGInstantiationResponse(const LockSGInstantiationResponse& from);

  inline LockSGInstantiationResponse& operator=(const LockSGInstantiationResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockSGInstantiationResponse& default_instance();

  void Swap(LockSGInstantiationResponse* other);

  // implements Message ----------------------------------------------

  LockSGInstantiationResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockSGInstantiationResponse& from);
  void MergeFrom(const LockSGInstantiationResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(LockSGInstantiationResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static LockSGInstantiationResponse* default_instance_;
};
// -------------------------------------------------------------------

class LockSUInstantiationRequest : public ::google::protobuf::Message {
 public:
  LockSUInstantiationRequest();
  virtual ~LockSUInstantiationRequest();

  LockSUInstantiationRequest(const LockSUInstantiationRequest& from);

  inline LockSUInstantiationRequest& operator=(const LockSUInstantiationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockSUInstantiationRequest& default_instance();

  void Swap(LockSUInstantiationRequest* other);

  // implements Message ----------------------------------------------

  LockSUInstantiationRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockSUInstantiationRequest& from);
  void MergeFrom(const LockSUInstantiationRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string suName = 2;
  inline bool has_suname() const;
  inline void clear_suname();
  static const int kSuNameFieldNumber = 2;
  inline const ::std::string& suname() const;
  inline void set_suname(const ::std::string& value);
  inline void set_suname(const char* value);
  inline void set_suname(const char* value, size_t size);
  inline ::std::string* mutable_suname();
  inline ::std::string* release_suname();
  inline void set_allocated_suname(::std::string* suname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(LockSUInstantiationRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest)
 private:
  inline void set_has_suname();
  inline void clear_has_suname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* suname_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static LockSUInstantiationRequest* default_instance_;
};
// -------------------------------------------------------------------

class LockSUInstantiationResponse : public ::google::protobuf::Message {
 public:
  LockSUInstantiationResponse();
  virtual ~LockSUInstantiationResponse();

  LockSUInstantiationResponse(const LockSUInstantiationResponse& from);

  inline LockSUInstantiationResponse& operator=(const LockSUInstantiationResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockSUInstantiationResponse& default_instance();

  void Swap(LockSUInstantiationResponse* other);

  // implements Message ----------------------------------------------

  LockSUInstantiationResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockSUInstantiationResponse& from);
  void MergeFrom(const LockSUInstantiationResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(LockSUInstantiationResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static LockSUInstantiationResponse* default_instance_;
};
// -------------------------------------------------------------------

class UnlockNodeRequest : public ::google::protobuf::Message {
 public:
  UnlockNodeRequest();
  virtual ~UnlockNodeRequest();

  UnlockNodeRequest(const UnlockNodeRequest& from);

  inline UnlockNodeRequest& operator=(const UnlockNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockNodeRequest& default_instance();

  void Swap(UnlockNodeRequest* other);

  // implements Message ----------------------------------------------

  UnlockNodeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockNodeRequest& from);
  void MergeFrom(const UnlockNodeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string nodeName = 2;
  inline bool has_nodename() const;
  inline void clear_nodename();
  static const int kNodeNameFieldNumber = 2;
  inline const ::std::string& nodename() const;
  inline void set_nodename(const ::std::string& value);
  inline void set_nodename(const char* value);
  inline void set_nodename(const char* value, size_t size);
  inline ::std::string* mutable_nodename();
  inline ::std::string* release_nodename();
  inline void set_allocated_nodename(::std::string* nodename);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UnlockNodeRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest)
 private:
  inline void set_has_nodename();
  inline void clear_has_nodename();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* nodename_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UnlockNodeRequest* default_instance_;
};
// -------------------------------------------------------------------

class UnlockNodeResponse : public ::google::protobuf::Message {
 public:
  UnlockNodeResponse();
  virtual ~UnlockNodeResponse();

  UnlockNodeResponse(const UnlockNodeResponse& from);

  inline UnlockNodeResponse& operator=(const UnlockNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockNodeResponse& default_instance();

  void Swap(UnlockNodeResponse* other);

  // implements Message ----------------------------------------------

  UnlockNodeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockNodeResponse& from);
  void MergeFrom(const UnlockNodeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UnlockNodeResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UnlockNodeResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UnlockNodeResponse* default_instance_;
};
// -------------------------------------------------------------------

class UnlockSGRequest : public ::google::protobuf::Message {
 public:
  UnlockSGRequest();
  virtual ~UnlockSGRequest();

  UnlockSGRequest(const UnlockSGRequest& from);

  inline UnlockSGRequest& operator=(const UnlockSGRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockSGRequest& default_instance();

  void Swap(UnlockSGRequest* other);

  // implements Message ----------------------------------------------

  UnlockSGRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockSGRequest& from);
  void MergeFrom(const UnlockSGRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string sgName = 2;
  inline bool has_sgname() const;
  inline void clear_sgname();
  static const int kSgNameFieldNumber = 2;
  inline const ::std::string& sgname() const;
  inline void set_sgname(const ::std::string& value);
  inline void set_sgname(const char* value);
  inline void set_sgname(const char* value, size_t size);
  inline ::std::string* mutable_sgname();
  inline ::std::string* release_sgname();
  inline void set_allocated_sgname(::std::string* sgname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UnlockSGRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest)
 private:
  inline void set_has_sgname();
  inline void clear_has_sgname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* sgname_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UnlockSGRequest* default_instance_;
};
// -------------------------------------------------------------------

class UnlockSGResponse : public ::google::protobuf::Message {
 public:
  UnlockSGResponse();
  virtual ~UnlockSGResponse();

  UnlockSGResponse(const UnlockSGResponse& from);

  inline UnlockSGResponse& operator=(const UnlockSGResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockSGResponse& default_instance();

  void Swap(UnlockSGResponse* other);

  // implements Message ----------------------------------------------

  UnlockSGResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockSGResponse& from);
  void MergeFrom(const UnlockSGResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UnlockSGResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UnlockSGResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UnlockSGResponse* default_instance_;
};
// -------------------------------------------------------------------

class UnlockSURequest : public ::google::protobuf::Message {
 public:
  UnlockSURequest();
  virtual ~UnlockSURequest();

  UnlockSURequest(const UnlockSURequest& from);

  inline UnlockSURequest& operator=(const UnlockSURequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockSURequest& default_instance();

  void Swap(UnlockSURequest* other);

  // implements Message ----------------------------------------------

  UnlockSURequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockSURequest& from);
  void MergeFrom(const UnlockSURequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string suName = 2;
  inline bool has_suname() const;
  inline void clear_suname();
  static const int kSuNameFieldNumber = 2;
  inline const ::std::string& suname() const;
  inline void set_suname(const ::std::string& value);
  inline void set_suname(const char* value);
  inline void set_suname(const char* value, size_t size);
  inline ::std::string* mutable_suname();
  inline ::std::string* release_suname();
  inline void set_allocated_suname(::std::string* suname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UnlockSURequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest)
 private:
  inline void set_has_suname();
  inline void clear_has_suname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* suname_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UnlockSURequest* default_instance_;
};
// -------------------------------------------------------------------

class UnlockSUResponse : public ::google::protobuf::Message {
 public:
  UnlockSUResponse();
  virtual ~UnlockSUResponse();

  UnlockSUResponse(const UnlockSUResponse& from);

  inline UnlockSUResponse& operator=(const UnlockSUResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockSUResponse& default_instance();

  void Swap(UnlockSUResponse* other);

  // implements Message ----------------------------------------------

  UnlockSUResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockSUResponse& from);
  void MergeFrom(const UnlockSUResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UnlockSUResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UnlockSUResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UnlockSUResponse* default_instance_;
};
// -------------------------------------------------------------------

class UnlockSIRequest : public ::google::protobuf::Message {
 public:
  UnlockSIRequest();
  virtual ~UnlockSIRequest();

  UnlockSIRequest(const UnlockSIRequest& from);

  inline UnlockSIRequest& operator=(const UnlockSIRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockSIRequest& default_instance();

  void Swap(UnlockSIRequest* other);

  // implements Message ----------------------------------------------

  UnlockSIRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockSIRequest& from);
  void MergeFrom(const UnlockSIRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string siName = 2;
  inline bool has_siname() const;
  inline void clear_siname();
  static const int kSiNameFieldNumber = 2;
  inline const ::std::string& siname() const;
  inline void set_siname(const ::std::string& value);
  inline void set_siname(const char* value);
  inline void set_siname(const char* value, size_t size);
  inline ::std::string* mutable_siname();
  inline ::std::string* release_siname();
  inline void set_allocated_siname(::std::string* siname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UnlockSIRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest)
 private:
  inline void set_has_siname();
  inline void clear_has_siname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* siname_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UnlockSIRequest* default_instance_;
};
// -------------------------------------------------------------------

class UnlockSIResponse : public ::google::protobuf::Message {
 public:
  UnlockSIResponse();
  virtual ~UnlockSIResponse();

  UnlockSIResponse(const UnlockSIResponse& from);

  inline UnlockSIResponse& operator=(const UnlockSIResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockSIResponse& default_instance();

  void Swap(UnlockSIResponse* other);

  // implements Message ----------------------------------------------

  UnlockSIResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockSIResponse& from);
  void MergeFrom(const UnlockSIResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UnlockSIResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.UnlockSIResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static UnlockSIResponse* default_instance_;
};
// -------------------------------------------------------------------

class RepairNodeRequest : public ::google::protobuf::Message {
 public:
  RepairNodeRequest();
  virtual ~RepairNodeRequest();

  RepairNodeRequest(const RepairNodeRequest& from);

  inline RepairNodeRequest& operator=(const RepairNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RepairNodeRequest& default_instance();

  void Swap(RepairNodeRequest* other);

  // implements Message ----------------------------------------------

  RepairNodeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RepairNodeRequest& from);
  void MergeFrom(const RepairNodeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string nodeName = 2;
  inline bool has_nodename() const;
  inline void clear_nodename();
  static const int kNodeNameFieldNumber = 2;
  inline const ::std::string& nodename() const;
  inline void set_nodename(const ::std::string& value);
  inline void set_nodename(const char* value);
  inline void set_nodename(const char* value, size_t size);
  inline ::std::string* mutable_nodename();
  inline ::std::string* release_nodename();
  inline void set_allocated_nodename(::std::string* nodename);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(RepairNodeRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest)
 private:
  inline void set_has_nodename();
  inline void clear_has_nodename();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* nodename_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static RepairNodeRequest* default_instance_;
};
// -------------------------------------------------------------------

class RepairNodeResponse : public ::google::protobuf::Message {
 public:
  RepairNodeResponse();
  virtual ~RepairNodeResponse();

  RepairNodeResponse(const RepairNodeResponse& from);

  inline RepairNodeResponse& operator=(const RepairNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RepairNodeResponse& default_instance();

  void Swap(RepairNodeResponse* other);

  // implements Message ----------------------------------------------

  RepairNodeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RepairNodeResponse& from);
  void MergeFrom(const RepairNodeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(RepairNodeResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.RepairNodeResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static RepairNodeResponse* default_instance_;
};
// -------------------------------------------------------------------

class RepairComponentRequest : public ::google::protobuf::Message {
 public:
  RepairComponentRequest();
  virtual ~RepairComponentRequest();

  RepairComponentRequest(const RepairComponentRequest& from);

  inline RepairComponentRequest& operator=(const RepairComponentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RepairComponentRequest& default_instance();

  void Swap(RepairComponentRequest* other);

  // implements Message ----------------------------------------------

  RepairComponentRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RepairComponentRequest& from);
  void MergeFrom(const RepairComponentRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string compName = 2;
  inline bool has_compname() const;
  inline void clear_compname();
  static const int kCompNameFieldNumber = 2;
  inline const ::std::string& compname() const;
  inline void set_compname(const ::std::string& value);
  inline void set_compname(const char* value);
  inline void set_compname(const char* value, size_t size);
  inline ::std::string* mutable_compname();
  inline ::std::string* release_compname();
  inline void set_allocated_compname(::std::string* compname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(RepairComponentRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest)
 private:
  inline void set_has_compname();
  inline void clear_has_compname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* compname_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static RepairComponentRequest* default_instance_;
};
// -------------------------------------------------------------------

class RepairComponentResponse : public ::google::protobuf::Message {
 public:
  RepairComponentResponse();
  virtual ~RepairComponentResponse();

  RepairComponentResponse(const RepairComponentResponse& from);

  inline RepairComponentResponse& operator=(const RepairComponentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RepairComponentResponse& default_instance();

  void Swap(RepairComponentResponse* other);

  // implements Message ----------------------------------------------

  RepairComponentResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RepairComponentResponse& from);
  void MergeFrom(const RepairComponentResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(RepairComponentResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.RepairComponentResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static RepairComponentResponse* default_instance_;
};
// -------------------------------------------------------------------

class RepairSURequest : public ::google::protobuf::Message {
 public:
  RepairSURequest();
  virtual ~RepairSURequest();

  RepairSURequest(const RepairSURequest& from);

  inline RepairSURequest& operator=(const RepairSURequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RepairSURequest& default_instance();

  void Swap(RepairSURequest* other);

  // implements Message ----------------------------------------------

  RepairSURequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RepairSURequest& from);
  void MergeFrom(const RepairSURequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string suName = 2;
  inline bool has_suname() const;
  inline void clear_suname();
  static const int kSuNameFieldNumber = 2;
  inline const ::std::string& suname() const;
  inline void set_suname(const ::std::string& value);
  inline void set_suname(const char* value);
  inline void set_suname(const char* value, size_t size);
  inline ::std::string* mutable_suname();
  inline ::std::string* release_suname();
  inline void set_allocated_suname(::std::string* suname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(RepairSURequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.RepairSURequest)
 private:
  inline void set_has_suname();
  inline void clear_has_suname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* suname_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static RepairSURequest* default_instance_;
};
// -------------------------------------------------------------------

class RepairSUResponse : public ::google::protobuf::Message {
 public:
  RepairSUResponse();
  virtual ~RepairSUResponse();

  RepairSUResponse(const RepairSUResponse& from);

  inline RepairSUResponse& operator=(const RepairSUResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RepairSUResponse& default_instance();

  void Swap(RepairSUResponse* other);

  // implements Message ----------------------------------------------

  RepairSUResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RepairSUResponse& from);
  void MergeFrom(const RepairSUResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(RepairSUResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.RepairSUResponse)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static RepairSUResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetComponentConfigRequest : public ::google::protobuf::Message {
 public:
  GetComponentConfigRequest();
  virtual ~GetComponentConfigRequest();

  GetComponentConfigRequest(const GetComponentConfigRequest& from);

  inline GetComponentConfigRequest& operator=(const GetComponentConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetComponentConfigRequest& default_instance();

  void Swap(GetComponentConfigRequest* other);

  // implements Message ----------------------------------------------

  GetComponentConfigRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetComponentConfigRequest& from);
  void MergeFrom(const GetComponentConfigRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string compName = 2;
  inline bool has_compname() const;
  inline void clear_compname();
  static const int kCompNameFieldNumber = 2;
  inline const ::std::string& compname() const;
  inline void set_compname(const ::std::string& value);
  inline void set_compname(const char* value);
  inline void set_compname(const char* value, size_t size);
  inline ::std::string* mutable_compname();
  inline ::std::string* release_compname();
  inline void set_allocated_compname(::std::string* compname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(GetComponentConfigRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest)
 private:
  inline void set_has_compname();
  inline void clear_has_compname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* compname_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static GetComponentConfigRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetComponentConfigResponse : public ::google::protobuf::Message {
 public:
  GetComponentConfigResponse();
  virtual ~GetComponentConfigResponse();

  GetComponentConfigResponse(const GetComponentConfigResponse& from);

  inline GetComponentConfigResponse& operator=(const GetComponentConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetComponentConfigResponse& default_instance();

  void Swap(GetComponentConfigResponse* other);

  // implements Message ----------------------------------------------

  GetComponentConfigResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetComponentConfigResponse& from);
  void MergeFrom(const GetComponentConfigResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.amfMgmtRpc.ComponentConfig ComponentConfig = 1;
  inline bool has_componentconfig() const;
  inline void clear_componentconfig();
  static const int kComponentConfigFieldNumber = 1;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig& componentconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* mutable_componentconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* release_componentconfig();
  inline void set_allocated_componentconfig(::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* componentconfig);

  // optional sint32 err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(GetComponentConfigResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigResponse)
 private:
  inline void set_has_componentconfig();
  inline void clear_has_componentconfig();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* componentconfig_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static GetComponentConfigResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetNodeConfigRequest : public ::google::protobuf::Message {
 public:
  GetNodeConfigRequest();
  virtual ~GetNodeConfigRequest();

  GetNodeConfigRequest(const GetNodeConfigRequest& from);

  inline GetNodeConfigRequest& operator=(const GetNodeConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNodeConfigRequest& default_instance();

  void Swap(GetNodeConfigRequest* other);

  // implements Message ----------------------------------------------

  GetNodeConfigRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetNodeConfigRequest& from);
  void MergeFrom(const GetNodeConfigRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string nodeName = 2;
  inline bool has_nodename() const;
  inline void clear_nodename();
  static const int kNodeNameFieldNumber = 2;
  inline const ::std::string& nodename() const;
  inline void set_nodename(const ::std::string& value);
  inline void set_nodename(const char* value);
  inline void set_nodename(const char* value, size_t size);
  inline ::std::string* mutable_nodename();
  inline ::std::string* release_nodename();
  inline void set_allocated_nodename(::std::string* nodename);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(GetNodeConfigRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest)
 private:
  inline void set_has_nodename();
  inline void clear_has_nodename();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* nodename_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static GetNodeConfigRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetNodeConfigResponse : public ::google::protobuf::Message {
 public:
  GetNodeConfigResponse();
  virtual ~GetNodeConfigResponse();

  GetNodeConfigResponse(const GetNodeConfigResponse& from);

  inline GetNodeConfigResponse& operator=(const GetNodeConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNodeConfigResponse& default_instance();

  void Swap(GetNodeConfigResponse* other);

  // implements Message ----------------------------------------------

  GetNodeConfigResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetNodeConfigResponse& from);
  void MergeFrom(const GetNodeConfigResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.amfMgmtRpc.NodeConfig NodeConfig = 1;
  inline bool has_nodeconfig() const;
  inline void clear_nodeconfig();
  static const int kNodeConfigFieldNumber = 1;
  inline const ::SAFplus::Rpc::amfMgmtRpc::NodeConfig& nodeconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* mutable_nodeconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* release_nodeconfig();
  inline void set_allocated_nodeconfig(::SAFplus::Rpc::amfMgmtRpc::NodeConfig* nodeconfig);

  // optional sint32 err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(GetNodeConfigResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigResponse)
 private:
  inline void set_has_nodeconfig();
  inline void clear_has_nodeconfig();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* nodeconfig_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static GetNodeConfigResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetSUConfigRequest : public ::google::protobuf::Message {
 public:
  GetSUConfigRequest();
  virtual ~GetSUConfigRequest();

  GetSUConfigRequest(const GetSUConfigRequest& from);

  inline GetSUConfigRequest& operator=(const GetSUConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSUConfigRequest& default_instance();

  void Swap(GetSUConfigRequest* other);

  // implements Message ----------------------------------------------

  GetSUConfigRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSUConfigRequest& from);
  void MergeFrom(const GetSUConfigRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string suName = 2;
  inline bool has_suname() const;
  inline void clear_suname();
  static const int kSuNameFieldNumber = 2;
  inline const ::std::string& suname() const;
  inline void set_suname(const ::std::string& value);
  inline void set_suname(const char* value);
  inline void set_suname(const char* value, size_t size);
  inline ::std::string* mutable_suname();
  inline ::std::string* release_suname();
  inline void set_allocated_suname(::std::string* suname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(GetSUConfigRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest)
 private:
  inline void set_has_suname();
  inline void clear_has_suname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* suname_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static GetSUConfigRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetSUConfigResponse : public ::google::protobuf::Message {
 public:
  GetSUConfigResponse();
  virtual ~GetSUConfigResponse();

  GetSUConfigResponse(const GetSUConfigResponse& from);

  inline GetSUConfigResponse& operator=(const GetSUConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSUConfigResponse& default_instance();

  void Swap(GetSUConfigResponse* other);

  // implements Message ----------------------------------------------

  GetSUConfigResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSUConfigResponse& from);
  void MergeFrom(const GetSUConfigResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig ServiceUnitConfig = 1;
  inline bool has_serviceunitconfig() const;
  inline void clear_serviceunitconfig();
  static const int kServiceUnitConfigFieldNumber = 1;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig& serviceunitconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* mutable_serviceunitconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* release_serviceunitconfig();
  inline void set_allocated_serviceunitconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* serviceunitconfig);

  // optional sint32 err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(GetSUConfigResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.GetSUConfigResponse)
 private:
  inline void set_has_serviceunitconfig();
  inline void clear_has_serviceunitconfig();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* serviceunitconfig_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static GetSUConfigResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetSGConfigRequest : public ::google::protobuf::Message {
 public:
  GetSGConfigRequest();
  virtual ~GetSGConfigRequest();

  GetSGConfigRequest(const GetSGConfigRequest& from);

  inline GetSGConfigRequest& operator=(const GetSGConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSGConfigRequest& default_instance();

  void Swap(GetSGConfigRequest* other);

  // implements Message ----------------------------------------------

  GetSGConfigRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSGConfigRequest& from);
  void MergeFrom(const GetSGConfigRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string sgName = 2;
  inline bool has_sgname() const;
  inline void clear_sgname();
  static const int kSgNameFieldNumber = 2;
  inline const ::std::string& sgname() const;
  inline void set_sgname(const ::std::string& value);
  inline void set_sgname(const char* value);
  inline void set_sgname(const char* value, size_t size);
  inline ::std::string* mutable_sgname();
  inline ::std::string* release_sgname();
  inline void set_allocated_sgname(::std::string* sgname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(GetSGConfigRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest)
 private:
  inline void set_has_sgname();
  inline void clear_has_sgname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* sgname_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static GetSGConfigRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetSGConfigResponse : public ::google::protobuf::Message {
 public:
  GetSGConfigResponse();
  virtual ~GetSGConfigResponse();

  GetSGConfigResponse(const GetSGConfigResponse& from);

  inline GetSGConfigResponse& operator=(const GetSGConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSGConfigResponse& default_instance();

  void Swap(GetSGConfigResponse* other);

  // implements Message ----------------------------------------------

  GetSGConfigResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSGConfigResponse& from);
  void MergeFrom(const GetSGConfigResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig ServiceGroupConfig = 1;
  inline bool has_servicegroupconfig() const;
  inline void clear_servicegroupconfig();
  static const int kServiceGroupConfigFieldNumber = 1;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig& servicegroupconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* mutable_servicegroupconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* release_servicegroupconfig();
  inline void set_allocated_servicegroupconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* servicegroupconfig);

  // optional sint32 err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(GetSGConfigResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.GetSGConfigResponse)
 private:
  inline void set_has_servicegroupconfig();
  inline void clear_has_servicegroupconfig();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* servicegroupconfig_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static GetSGConfigResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetSIConfigRequest : public ::google::protobuf::Message {
 public:
  GetSIConfigRequest();
  virtual ~GetSIConfigRequest();

  GetSIConfigRequest(const GetSIConfigRequest& from);

  inline GetSIConfigRequest& operator=(const GetSIConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSIConfigRequest& default_instance();

  void Swap(GetSIConfigRequest* other);

  // implements Message ----------------------------------------------

  GetSIConfigRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSIConfigRequest& from);
  void MergeFrom(const GetSIConfigRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string siName = 2;
  inline bool has_siname() const;
  inline void clear_siname();
  static const int kSiNameFieldNumber = 2;
  inline const ::std::string& siname() const;
  inline void set_siname(const ::std::string& value);
  inline void set_siname(const char* value);
  inline void set_siname(const char* value, size_t size);
  inline ::std::string* mutable_siname();
  inline ::std::string* release_siname();
  inline void set_allocated_siname(::std::string* siname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(GetSIConfigRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest)
 private:
  inline void set_has_siname();
  inline void clear_has_siname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* siname_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static GetSIConfigRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetSIConfigResponse : public ::google::protobuf::Message {
 public:
  GetSIConfigResponse();
  virtual ~GetSIConfigResponse();

  GetSIConfigResponse(const GetSIConfigResponse& from);

  inline GetSIConfigResponse& operator=(const GetSIConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSIConfigResponse& default_instance();

  void Swap(GetSIConfigResponse* other);

  // implements Message ----------------------------------------------

  GetSIConfigResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSIConfigResponse& from);
  void MergeFrom(const GetSIConfigResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig ServiceInstanceConfig = 1;
  inline bool has_serviceinstanceconfig() const;
  inline void clear_serviceinstanceconfig();
  static const int kServiceInstanceConfigFieldNumber = 1;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig& serviceinstanceconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* mutable_serviceinstanceconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* release_serviceinstanceconfig();
  inline void set_allocated_serviceinstanceconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* serviceinstanceconfig);

  // optional sint32 err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(GetSIConfigResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.GetSIConfigResponse)
 private:
  inline void set_has_serviceinstanceconfig();
  inline void clear_has_serviceinstanceconfig();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* serviceinstanceconfig_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static GetSIConfigResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetCSIConfigRequest : public ::google::protobuf::Message {
 public:
  GetCSIConfigRequest();
  virtual ~GetCSIConfigRequest();

  GetCSIConfigRequest(const GetCSIConfigRequest& from);

  inline GetCSIConfigRequest& operator=(const GetCSIConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCSIConfigRequest& default_instance();

  void Swap(GetCSIConfigRequest* other);

  // implements Message ----------------------------------------------

  GetCSIConfigRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetCSIConfigRequest& from);
  void MergeFrom(const GetCSIConfigRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes amfMgmtHandle = 1;
  inline int amfmgmthandle_size() const;
  inline void clear_amfmgmthandle();
  static const int kAmfMgmtHandleFieldNumber = 1;
  inline const ::std::string& amfmgmthandle(int index) const;
  inline ::std::string* mutable_amfmgmthandle(int index);
  inline void set_amfmgmthandle(int index, const ::std::string& value);
  inline void set_amfmgmthandle(int index, const char* value);
  inline void set_amfmgmthandle(int index, const void* value, size_t size);
  inline ::std::string* add_amfmgmthandle();
  inline void add_amfmgmthandle(const ::std::string& value);
  inline void add_amfmgmthandle(const char* value);
  inline void add_amfmgmthandle(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& amfmgmthandle() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amfmgmthandle();

  // optional string csiName = 2;
  inline bool has_csiname() const;
  inline void clear_csiname();
  static const int kCsiNameFieldNumber = 2;
  inline const ::std::string& csiname() const;
  inline void set_csiname(const ::std::string& value);
  inline void set_csiname(const char* value);
  inline void set_csiname(const char* value, size_t size);
  inline ::std::string* mutable_csiname();
  inline ::std::string* release_csiname();
  inline void set_allocated_csiname(::std::string* csiname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(GetCSIConfigRequest)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest)
 private:
  inline void set_has_csiname();
  inline void clear_has_csiname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amfmgmthandle_;
  ::std::string* csiname_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static GetCSIConfigRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetCSIConfigResponse : public ::google::protobuf::Message {
 public:
  GetCSIConfigResponse();
  virtual ~GetCSIConfigResponse();

  GetCSIConfigResponse(const GetCSIConfigResponse& from);

  inline GetCSIConfigResponse& operator=(const GetCSIConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCSIConfigResponse& default_instance();

  void Swap(GetCSIConfigResponse* other);

  // implements Message ----------------------------------------------

  GetCSIConfigResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetCSIConfigResponse& from);
  void MergeFrom(const GetCSIConfigResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig ComponentServiceInstanceConfig = 1;
  inline bool has_componentserviceinstanceconfig() const;
  inline void clear_componentserviceinstanceconfig();
  static const int kComponentServiceInstanceConfigFieldNumber = 1;
  inline const ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig& componentserviceinstanceconfig() const;
  inline ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* mutable_componentserviceinstanceconfig();
  inline ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* release_componentserviceinstanceconfig();
  inline void set_allocated_componentserviceinstanceconfig(::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* componentserviceinstanceconfig);

  // optional sint32 err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(GetCSIConfigResponse)
  // @@protoc_insertion_point(class_scope:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigResponse)
 private:
  inline void set_has_componentserviceinstanceconfig();
  inline void clear_has_componentserviceinstanceconfig();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* componentserviceinstanceconfig_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_amfMgmtRpc_2eproto();
  friend void protobuf_AssignDesc_amfMgmtRpc_2eproto();
  friend void protobuf_ShutdownFile_amfMgmtRpc_2eproto();

  void InitAsDefaultInstance();
  static GetCSIConfigResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// SaTimeT

// required uint64 uint64 = 1;
inline bool SaTimeT::has_uint64() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaTimeT::set_has_uint64() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaTimeT::clear_has_uint64() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaTimeT::clear_uint64() {
  uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_uint64();
}
inline ::google::protobuf::uint64 SaTimeT::uint64() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.SaTimeT.uint64)
  return uint64_;
}
inline void SaTimeT::set_uint64(::google::protobuf::uint64 value) {
  set_has_uint64();
  uint64_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.SaTimeT.uint64)
}

// -------------------------------------------------------------------

// EscalationPolicy

// optional uint64 maximum = 1;
inline bool EscalationPolicy::has_maximum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EscalationPolicy::set_has_maximum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EscalationPolicy::clear_has_maximum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EscalationPolicy::clear_maximum() {
  maximum_ = GOOGLE_ULONGLONG(0);
  clear_has_maximum();
}
inline ::google::protobuf::uint64 EscalationPolicy::maximum() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.EscalationPolicy.maximum)
  return maximum_;
}
inline void EscalationPolicy::set_maximum(::google::protobuf::uint64 value) {
  set_has_maximum();
  maximum_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.EscalationPolicy.maximum)
}

// optional .SAFplus.Rpc.amfMgmtRpc.SaTimeT duration = 2;
inline bool EscalationPolicy::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EscalationPolicy::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EscalationPolicy::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EscalationPolicy::clear_duration() {
  if (duration_ != NULL) duration_->::SAFplus::Rpc::amfMgmtRpc::SaTimeT::Clear();
  clear_has_duration();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::SaTimeT& EscalationPolicy::duration() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.EscalationPolicy.duration)
  return duration_ != NULL ? *duration_ : *default_instance_->duration_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* EscalationPolicy::mutable_duration() {
  set_has_duration();
  if (duration_ == NULL) duration_ = new ::SAFplus::Rpc::amfMgmtRpc::SaTimeT;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.EscalationPolicy.duration)
  return duration_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* EscalationPolicy::release_duration() {
  clear_has_duration();
  ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* temp = duration_;
  duration_ = NULL;
  return temp;
}
inline void EscalationPolicy::set_allocated_duration(::SAFplus::Rpc::amfMgmtRpc::SaTimeT* duration) {
  delete duration_;
  duration_ = duration;
  if (duration) {
    set_has_duration();
  } else {
    clear_has_duration();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.EscalationPolicy.duration)
}

// -------------------------------------------------------------------

// Execution

// optional string command = 1;
inline bool Execution::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Execution::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Execution::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Execution::clear_command() {
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_->clear();
  }
  clear_has_command();
}
inline const ::std::string& Execution::command() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.Execution.command)
  return *command_;
}
inline void Execution::set_command(const ::std::string& value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_ = new ::std::string;
  }
  command_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.Execution.command)
}
inline void Execution::set_command(const char* value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_ = new ::std::string;
  }
  command_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.Execution.command)
}
inline void Execution::set_command(const char* value, size_t size) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.Execution.command)
}
inline ::std::string* Execution::mutable_command() {
  set_has_command();
  if (command_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.Execution.command)
  return command_;
}
inline ::std::string* Execution::release_command() {
  clear_has_command();
  if (command_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = command_;
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Execution::set_allocated_command(::std::string* command) {
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_;
  }
  if (command) {
    set_has_command();
    command_ = command;
  } else {
    clear_has_command();
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.Execution.command)
}

// optional uint64 timeout = 2;
inline bool Execution::has_timeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Execution::set_has_timeout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Execution::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Execution::clear_timeout() {
  timeout_ = GOOGLE_ULONGLONG(0);
  clear_has_timeout();
}
inline ::google::protobuf::uint64 Execution::timeout() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.Execution.timeout)
  return timeout_;
}
inline void Execution::set_timeout(::google::protobuf::uint64 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.Execution.timeout)
}

// -------------------------------------------------------------------

// ServiceUnitFailureEscalationPolicy

// optional .SAFplus.Rpc.amfMgmtRpc.EscalationPolicy EscalationPolicy = 1;
inline bool ServiceUnitFailureEscalationPolicy::has_escalationpolicy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceUnitFailureEscalationPolicy::set_has_escalationpolicy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceUnitFailureEscalationPolicy::clear_has_escalationpolicy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceUnitFailureEscalationPolicy::clear_escalationpolicy() {
  if (escalationpolicy_ != NULL) escalationpolicy_->::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy::Clear();
  clear_has_escalationpolicy();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy& ServiceUnitFailureEscalationPolicy::escalationpolicy() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceUnitFailureEscalationPolicy.EscalationPolicy)
  return escalationpolicy_ != NULL ? *escalationpolicy_ : *default_instance_->escalationpolicy_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* ServiceUnitFailureEscalationPolicy::mutable_escalationpolicy() {
  set_has_escalationpolicy();
  if (escalationpolicy_ == NULL) escalationpolicy_ = new ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ServiceUnitFailureEscalationPolicy.EscalationPolicy)
  return escalationpolicy_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* ServiceUnitFailureEscalationPolicy::release_escalationpolicy() {
  clear_has_escalationpolicy();
  ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* temp = escalationpolicy_;
  escalationpolicy_ = NULL;
  return temp;
}
inline void ServiceUnitFailureEscalationPolicy::set_allocated_escalationpolicy(::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* escalationpolicy) {
  delete escalationpolicy_;
  escalationpolicy_ = escalationpolicy;
  if (escalationpolicy) {
    set_has_escalationpolicy();
  } else {
    clear_has_escalationpolicy();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ServiceUnitFailureEscalationPolicy.EscalationPolicy)
}

// -------------------------------------------------------------------

// NodeConfig

// optional string name = 1;
inline bool NodeConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NodeConfig::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.NodeConfig.name)
  return *name_;
}
inline void NodeConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.NodeConfig.name)
}
inline void NodeConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.NodeConfig.name)
}
inline void NodeConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.NodeConfig.name)
}
inline ::std::string* NodeConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.NodeConfig.name)
  return name_;
}
inline ::std::string* NodeConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NodeConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.NodeConfig.name)
}

// optional .SAFplus.Rpc.amfMgmtRpc.AdministrativeState adminState = 2;
inline bool NodeConfig::has_adminstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeConfig::set_has_adminstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeConfig::clear_has_adminstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeConfig::clear_adminstate() {
  adminstate_ = 0;
  clear_has_adminstate();
}
inline ::SAFplus::Rpc::amfMgmtRpc::AdministrativeState NodeConfig::adminstate() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.NodeConfig.adminState)
  return static_cast< ::SAFplus::Rpc::amfMgmtRpc::AdministrativeState >(adminstate_);
}
inline void NodeConfig::set_adminstate(::SAFplus::Rpc::amfMgmtRpc::AdministrativeState value) {
  assert(::SAFplus::Rpc::amfMgmtRpc::AdministrativeState_IsValid(value));
  set_has_adminstate();
  adminstate_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.NodeConfig.adminState)
}

// optional .SAFplus.Rpc.amfMgmtRpc.ServiceUnitFailureEscalationPolicy serviceUnitFailureEscalationPolicy = 3;
inline bool NodeConfig::has_serviceunitfailureescalationpolicy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeConfig::set_has_serviceunitfailureescalationpolicy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeConfig::clear_has_serviceunitfailureescalationpolicy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeConfig::clear_serviceunitfailureescalationpolicy() {
  if (serviceunitfailureescalationpolicy_ != NULL) serviceunitfailureescalationpolicy_->::SAFplus::Rpc::amfMgmtRpc::ServiceUnitFailureEscalationPolicy::Clear();
  clear_has_serviceunitfailureescalationpolicy();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitFailureEscalationPolicy& NodeConfig::serviceunitfailureescalationpolicy() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.NodeConfig.serviceUnitFailureEscalationPolicy)
  return serviceunitfailureescalationpolicy_ != NULL ? *serviceunitfailureescalationpolicy_ : *default_instance_->serviceunitfailureescalationpolicy_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitFailureEscalationPolicy* NodeConfig::mutable_serviceunitfailureescalationpolicy() {
  set_has_serviceunitfailureescalationpolicy();
  if (serviceunitfailureescalationpolicy_ == NULL) serviceunitfailureescalationpolicy_ = new ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitFailureEscalationPolicy;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.NodeConfig.serviceUnitFailureEscalationPolicy)
  return serviceunitfailureescalationpolicy_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitFailureEscalationPolicy* NodeConfig::release_serviceunitfailureescalationpolicy() {
  clear_has_serviceunitfailureescalationpolicy();
  ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitFailureEscalationPolicy* temp = serviceunitfailureescalationpolicy_;
  serviceunitfailureescalationpolicy_ = NULL;
  return temp;
}
inline void NodeConfig::set_allocated_serviceunitfailureescalationpolicy(::SAFplus::Rpc::amfMgmtRpc::ServiceUnitFailureEscalationPolicy* serviceunitfailureescalationpolicy) {
  delete serviceunitfailureescalationpolicy_;
  serviceunitfailureescalationpolicy_ = serviceunitfailureescalationpolicy;
  if (serviceunitfailureescalationpolicy) {
    set_has_serviceunitfailureescalationpolicy();
  } else {
    clear_has_serviceunitfailureescalationpolicy();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.NodeConfig.serviceUnitFailureEscalationPolicy)
}

// optional bool autoRepair = 4;
inline bool NodeConfig::has_autorepair() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NodeConfig::set_has_autorepair() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NodeConfig::clear_has_autorepair() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NodeConfig::clear_autorepair() {
  autorepair_ = false;
  clear_has_autorepair();
}
inline bool NodeConfig::autorepair() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.NodeConfig.autoRepair)
  return autorepair_;
}
inline void NodeConfig::set_autorepair(bool value) {
  set_has_autorepair();
  autorepair_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.NodeConfig.autoRepair)
}

// optional bool failFastOnInstantiationFailure = 5;
inline bool NodeConfig::has_failfastoninstantiationfailure() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NodeConfig::set_has_failfastoninstantiationfailure() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NodeConfig::clear_has_failfastoninstantiationfailure() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NodeConfig::clear_failfastoninstantiationfailure() {
  failfastoninstantiationfailure_ = false;
  clear_has_failfastoninstantiationfailure();
}
inline bool NodeConfig::failfastoninstantiationfailure() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.NodeConfig.failFastOnInstantiationFailure)
  return failfastoninstantiationfailure_;
}
inline void NodeConfig::set_failfastoninstantiationfailure(bool value) {
  set_has_failfastoninstantiationfailure();
  failfastoninstantiationfailure_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.NodeConfig.failFastOnInstantiationFailure)
}

// optional bool failFastOnCleanupFailure = 6;
inline bool NodeConfig::has_failfastoncleanupfailure() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NodeConfig::set_has_failfastoncleanupfailure() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NodeConfig::clear_has_failfastoncleanupfailure() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NodeConfig::clear_failfastoncleanupfailure() {
  failfastoncleanupfailure_ = false;
  clear_has_failfastoncleanupfailure();
}
inline bool NodeConfig::failfastoncleanupfailure() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.NodeConfig.failFastOnCleanupFailure)
  return failfastoncleanupfailure_;
}
inline void NodeConfig::set_failfastoncleanupfailure(bool value) {
  set_has_failfastoncleanupfailure();
  failfastoncleanupfailure_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.NodeConfig.failFastOnCleanupFailure)
}

// repeated string serviceUnits = 7;
inline int NodeConfig::serviceunits_size() const {
  return serviceunits_.size();
}
inline void NodeConfig::clear_serviceunits() {
  serviceunits_.Clear();
}
inline const ::std::string& NodeConfig::serviceunits(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.NodeConfig.serviceUnits)
  return serviceunits_.Get(index);
}
inline ::std::string* NodeConfig::mutable_serviceunits(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.NodeConfig.serviceUnits)
  return serviceunits_.Mutable(index);
}
inline void NodeConfig::set_serviceunits(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.NodeConfig.serviceUnits)
  serviceunits_.Mutable(index)->assign(value);
}
inline void NodeConfig::set_serviceunits(int index, const char* value) {
  serviceunits_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.NodeConfig.serviceUnits)
}
inline void NodeConfig::set_serviceunits(int index, const char* value, size_t size) {
  serviceunits_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.NodeConfig.serviceUnits)
}
inline ::std::string* NodeConfig::add_serviceunits() {
  return serviceunits_.Add();
}
inline void NodeConfig::add_serviceunits(const ::std::string& value) {
  serviceunits_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.NodeConfig.serviceUnits)
}
inline void NodeConfig::add_serviceunits(const char* value) {
  serviceunits_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.NodeConfig.serviceUnits)
}
inline void NodeConfig::add_serviceunits(const char* value, size_t size) {
  serviceunits_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.NodeConfig.serviceUnits)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeConfig::serviceunits() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.NodeConfig.serviceUnits)
  return serviceunits_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeConfig::mutable_serviceunits() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.NodeConfig.serviceUnits)
  return &serviceunits_;
}

// -------------------------------------------------------------------

// ComponentRestart

// optional .SAFplus.Rpc.amfMgmtRpc.EscalationPolicy EscalationPolicy = 1;
inline bool ComponentRestart::has_escalationpolicy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComponentRestart::set_has_escalationpolicy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComponentRestart::clear_has_escalationpolicy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComponentRestart::clear_escalationpolicy() {
  if (escalationpolicy_ != NULL) escalationpolicy_->::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy::Clear();
  clear_has_escalationpolicy();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy& ComponentRestart::escalationpolicy() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentRestart.EscalationPolicy)
  return escalationpolicy_ != NULL ? *escalationpolicy_ : *default_instance_->escalationpolicy_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* ComponentRestart::mutable_escalationpolicy() {
  set_has_escalationpolicy();
  if (escalationpolicy_ == NULL) escalationpolicy_ = new ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ComponentRestart.EscalationPolicy)
  return escalationpolicy_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* ComponentRestart::release_escalationpolicy() {
  clear_has_escalationpolicy();
  ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* temp = escalationpolicy_;
  escalationpolicy_ = NULL;
  return temp;
}
inline void ComponentRestart::set_allocated_escalationpolicy(::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* escalationpolicy) {
  delete escalationpolicy_;
  escalationpolicy_ = escalationpolicy;
  if (escalationpolicy) {
    set_has_escalationpolicy();
  } else {
    clear_has_escalationpolicy();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ComponentRestart.EscalationPolicy)
}

// -------------------------------------------------------------------

// ServiceUnitRestart

// optional .SAFplus.Rpc.amfMgmtRpc.EscalationPolicy EscalationPolicy = 1;
inline bool ServiceUnitRestart::has_escalationpolicy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceUnitRestart::set_has_escalationpolicy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceUnitRestart::clear_has_escalationpolicy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceUnitRestart::clear_escalationpolicy() {
  if (escalationpolicy_ != NULL) escalationpolicy_->::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy::Clear();
  clear_has_escalationpolicy();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy& ServiceUnitRestart::escalationpolicy() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceUnitRestart.EscalationPolicy)
  return escalationpolicy_ != NULL ? *escalationpolicy_ : *default_instance_->escalationpolicy_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* ServiceUnitRestart::mutable_escalationpolicy() {
  set_has_escalationpolicy();
  if (escalationpolicy_ == NULL) escalationpolicy_ = new ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ServiceUnitRestart.EscalationPolicy)
  return escalationpolicy_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* ServiceUnitRestart::release_escalationpolicy() {
  clear_has_escalationpolicy();
  ::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* temp = escalationpolicy_;
  escalationpolicy_ = NULL;
  return temp;
}
inline void ServiceUnitRestart::set_allocated_escalationpolicy(::SAFplus::Rpc::amfMgmtRpc::EscalationPolicy* escalationpolicy) {
  delete escalationpolicy_;
  escalationpolicy_ = escalationpolicy;
  if (escalationpolicy) {
    set_has_escalationpolicy();
  } else {
    clear_has_escalationpolicy();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ServiceUnitRestart.EscalationPolicy)
}

// -------------------------------------------------------------------

// ServiceGroupConfig

// optional string name = 1;
inline bool ServiceGroupConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceGroupConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceGroupConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceGroupConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ServiceGroupConfig::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.name)
  return *name_;
}
inline void ServiceGroupConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.name)
}
inline void ServiceGroupConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.name)
}
inline void ServiceGroupConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.name)
}
inline ::std::string* ServiceGroupConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.name)
  return name_;
}
inline ::std::string* ServiceGroupConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceGroupConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.name)
}

// optional .SAFplus.Rpc.amfMgmtRpc.AdministrativeState adminState = 2;
inline bool ServiceGroupConfig::has_adminstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceGroupConfig::set_has_adminstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceGroupConfig::clear_has_adminstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceGroupConfig::clear_adminstate() {
  adminstate_ = 0;
  clear_has_adminstate();
}
inline ::SAFplus::Rpc::amfMgmtRpc::AdministrativeState ServiceGroupConfig::adminstate() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.adminState)
  return static_cast< ::SAFplus::Rpc::amfMgmtRpc::AdministrativeState >(adminstate_);
}
inline void ServiceGroupConfig::set_adminstate(::SAFplus::Rpc::amfMgmtRpc::AdministrativeState value) {
  assert(::SAFplus::Rpc::amfMgmtRpc::AdministrativeState_IsValid(value));
  set_has_adminstate();
  adminstate_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.adminState)
}

// optional bool autoRepair = 3;
inline bool ServiceGroupConfig::has_autorepair() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceGroupConfig::set_has_autorepair() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceGroupConfig::clear_has_autorepair() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceGroupConfig::clear_autorepair() {
  autorepair_ = false;
  clear_has_autorepair();
}
inline bool ServiceGroupConfig::autorepair() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.autoRepair)
  return autorepair_;
}
inline void ServiceGroupConfig::set_autorepair(bool value) {
  set_has_autorepair();
  autorepair_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.autoRepair)
}

// optional bool autoAdjust = 4;
inline bool ServiceGroupConfig::has_autoadjust() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceGroupConfig::set_has_autoadjust() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServiceGroupConfig::clear_has_autoadjust() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServiceGroupConfig::clear_autoadjust() {
  autoadjust_ = false;
  clear_has_autoadjust();
}
inline bool ServiceGroupConfig::autoadjust() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.autoAdjust)
  return autoadjust_;
}
inline void ServiceGroupConfig::set_autoadjust(bool value) {
  set_has_autoadjust();
  autoadjust_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.autoAdjust)
}

// optional .SAFplus.Rpc.amfMgmtRpc.SaTimeT autoAdjustInterval = 5;
inline bool ServiceGroupConfig::has_autoadjustinterval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServiceGroupConfig::set_has_autoadjustinterval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServiceGroupConfig::clear_has_autoadjustinterval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServiceGroupConfig::clear_autoadjustinterval() {
  if (autoadjustinterval_ != NULL) autoadjustinterval_->::SAFplus::Rpc::amfMgmtRpc::SaTimeT::Clear();
  clear_has_autoadjustinterval();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::SaTimeT& ServiceGroupConfig::autoadjustinterval() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.autoAdjustInterval)
  return autoadjustinterval_ != NULL ? *autoadjustinterval_ : *default_instance_->autoadjustinterval_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* ServiceGroupConfig::mutable_autoadjustinterval() {
  set_has_autoadjustinterval();
  if (autoadjustinterval_ == NULL) autoadjustinterval_ = new ::SAFplus::Rpc::amfMgmtRpc::SaTimeT;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.autoAdjustInterval)
  return autoadjustinterval_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* ServiceGroupConfig::release_autoadjustinterval() {
  clear_has_autoadjustinterval();
  ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* temp = autoadjustinterval_;
  autoadjustinterval_ = NULL;
  return temp;
}
inline void ServiceGroupConfig::set_allocated_autoadjustinterval(::SAFplus::Rpc::amfMgmtRpc::SaTimeT* autoadjustinterval) {
  delete autoadjustinterval_;
  autoadjustinterval_ = autoadjustinterval;
  if (autoadjustinterval) {
    set_has_autoadjustinterval();
  } else {
    clear_has_autoadjustinterval();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.autoAdjustInterval)
}

// optional fixed32 preferredNumActiveServiceUnits = 6;
inline bool ServiceGroupConfig::has_preferrednumactiveserviceunits() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServiceGroupConfig::set_has_preferrednumactiveserviceunits() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServiceGroupConfig::clear_has_preferrednumactiveserviceunits() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServiceGroupConfig::clear_preferrednumactiveserviceunits() {
  preferrednumactiveserviceunits_ = 0u;
  clear_has_preferrednumactiveserviceunits();
}
inline ::google::protobuf::uint32 ServiceGroupConfig::preferrednumactiveserviceunits() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.preferredNumActiveServiceUnits)
  return preferrednumactiveserviceunits_;
}
inline void ServiceGroupConfig::set_preferrednumactiveserviceunits(::google::protobuf::uint32 value) {
  set_has_preferrednumactiveserviceunits();
  preferrednumactiveserviceunits_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.preferredNumActiveServiceUnits)
}

// optional fixed32 preferredNumStandbyServiceUnits = 7;
inline bool ServiceGroupConfig::has_preferrednumstandbyserviceunits() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServiceGroupConfig::set_has_preferrednumstandbyserviceunits() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServiceGroupConfig::clear_has_preferrednumstandbyserviceunits() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServiceGroupConfig::clear_preferrednumstandbyserviceunits() {
  preferrednumstandbyserviceunits_ = 0u;
  clear_has_preferrednumstandbyserviceunits();
}
inline ::google::protobuf::uint32 ServiceGroupConfig::preferrednumstandbyserviceunits() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.preferredNumStandbyServiceUnits)
  return preferrednumstandbyserviceunits_;
}
inline void ServiceGroupConfig::set_preferrednumstandbyserviceunits(::google::protobuf::uint32 value) {
  set_has_preferrednumstandbyserviceunits();
  preferrednumstandbyserviceunits_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.preferredNumStandbyServiceUnits)
}

// optional fixed32 preferredNumIdleServiceUnits = 8;
inline bool ServiceGroupConfig::has_preferrednumidleserviceunits() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServiceGroupConfig::set_has_preferrednumidleserviceunits() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServiceGroupConfig::clear_has_preferrednumidleserviceunits() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServiceGroupConfig::clear_preferrednumidleserviceunits() {
  preferrednumidleserviceunits_ = 0u;
  clear_has_preferrednumidleserviceunits();
}
inline ::google::protobuf::uint32 ServiceGroupConfig::preferrednumidleserviceunits() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.preferredNumIdleServiceUnits)
  return preferrednumidleserviceunits_;
}
inline void ServiceGroupConfig::set_preferrednumidleserviceunits(::google::protobuf::uint32 value) {
  set_has_preferrednumidleserviceunits();
  preferrednumidleserviceunits_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.preferredNumIdleServiceUnits)
}

// optional fixed32 maxActiveWorkAssignments = 9;
inline bool ServiceGroupConfig::has_maxactiveworkassignments() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServiceGroupConfig::set_has_maxactiveworkassignments() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServiceGroupConfig::clear_has_maxactiveworkassignments() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServiceGroupConfig::clear_maxactiveworkassignments() {
  maxactiveworkassignments_ = 0u;
  clear_has_maxactiveworkassignments();
}
inline ::google::protobuf::uint32 ServiceGroupConfig::maxactiveworkassignments() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.maxActiveWorkAssignments)
  return maxactiveworkassignments_;
}
inline void ServiceGroupConfig::set_maxactiveworkassignments(::google::protobuf::uint32 value) {
  set_has_maxactiveworkassignments();
  maxactiveworkassignments_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.maxActiveWorkAssignments)
}

// optional fixed32 maxStandbyWorkAssignments = 10;
inline bool ServiceGroupConfig::has_maxstandbyworkassignments() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ServiceGroupConfig::set_has_maxstandbyworkassignments() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ServiceGroupConfig::clear_has_maxstandbyworkassignments() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ServiceGroupConfig::clear_maxstandbyworkassignments() {
  maxstandbyworkassignments_ = 0u;
  clear_has_maxstandbyworkassignments();
}
inline ::google::protobuf::uint32 ServiceGroupConfig::maxstandbyworkassignments() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.maxStandbyWorkAssignments)
  return maxstandbyworkassignments_;
}
inline void ServiceGroupConfig::set_maxstandbyworkassignments(::google::protobuf::uint32 value) {
  set_has_maxstandbyworkassignments();
  maxstandbyworkassignments_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.maxStandbyWorkAssignments)
}

// optional .SAFplus.Rpc.amfMgmtRpc.ComponentRestart componentRestart = 11;
inline bool ServiceGroupConfig::has_componentrestart() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ServiceGroupConfig::set_has_componentrestart() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ServiceGroupConfig::clear_has_componentrestart() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ServiceGroupConfig::clear_componentrestart() {
  if (componentrestart_ != NULL) componentrestart_->::SAFplus::Rpc::amfMgmtRpc::ComponentRestart::Clear();
  clear_has_componentrestart();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ComponentRestart& ServiceGroupConfig::componentrestart() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.componentRestart)
  return componentrestart_ != NULL ? *componentrestart_ : *default_instance_->componentrestart_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ComponentRestart* ServiceGroupConfig::mutable_componentrestart() {
  set_has_componentrestart();
  if (componentrestart_ == NULL) componentrestart_ = new ::SAFplus::Rpc::amfMgmtRpc::ComponentRestart;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.componentRestart)
  return componentrestart_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ComponentRestart* ServiceGroupConfig::release_componentrestart() {
  clear_has_componentrestart();
  ::SAFplus::Rpc::amfMgmtRpc::ComponentRestart* temp = componentrestart_;
  componentrestart_ = NULL;
  return temp;
}
inline void ServiceGroupConfig::set_allocated_componentrestart(::SAFplus::Rpc::amfMgmtRpc::ComponentRestart* componentrestart) {
  delete componentrestart_;
  componentrestart_ = componentrestart;
  if (componentrestart) {
    set_has_componentrestart();
  } else {
    clear_has_componentrestart();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.componentRestart)
}

// optional .SAFplus.Rpc.amfMgmtRpc.ServiceUnitRestart serviceUnitRestart = 12;
inline bool ServiceGroupConfig::has_serviceunitrestart() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ServiceGroupConfig::set_has_serviceunitrestart() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ServiceGroupConfig::clear_has_serviceunitrestart() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ServiceGroupConfig::clear_serviceunitrestart() {
  if (serviceunitrestart_ != NULL) serviceunitrestart_->::SAFplus::Rpc::amfMgmtRpc::ServiceUnitRestart::Clear();
  clear_has_serviceunitrestart();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitRestart& ServiceGroupConfig::serviceunitrestart() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceUnitRestart)
  return serviceunitrestart_ != NULL ? *serviceunitrestart_ : *default_instance_->serviceunitrestart_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitRestart* ServiceGroupConfig::mutable_serviceunitrestart() {
  set_has_serviceunitrestart();
  if (serviceunitrestart_ == NULL) serviceunitrestart_ = new ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitRestart;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceUnitRestart)
  return serviceunitrestart_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitRestart* ServiceGroupConfig::release_serviceunitrestart() {
  clear_has_serviceunitrestart();
  ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitRestart* temp = serviceunitrestart_;
  serviceunitrestart_ = NULL;
  return temp;
}
inline void ServiceGroupConfig::set_allocated_serviceunitrestart(::SAFplus::Rpc::amfMgmtRpc::ServiceUnitRestart* serviceunitrestart) {
  delete serviceunitrestart_;
  serviceunitrestart_ = serviceunitrestart;
  if (serviceunitrestart) {
    set_has_serviceunitrestart();
  } else {
    clear_has_serviceunitrestart();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceUnitRestart)
}

// repeated string serviceUnits = 13;
inline int ServiceGroupConfig::serviceunits_size() const {
  return serviceunits_.size();
}
inline void ServiceGroupConfig::clear_serviceunits() {
  serviceunits_.Clear();
}
inline const ::std::string& ServiceGroupConfig::serviceunits(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceUnits)
  return serviceunits_.Get(index);
}
inline ::std::string* ServiceGroupConfig::mutable_serviceunits(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceUnits)
  return serviceunits_.Mutable(index);
}
inline void ServiceGroupConfig::set_serviceunits(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceUnits)
  serviceunits_.Mutable(index)->assign(value);
}
inline void ServiceGroupConfig::set_serviceunits(int index, const char* value) {
  serviceunits_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceUnits)
}
inline void ServiceGroupConfig::set_serviceunits(int index, const char* value, size_t size) {
  serviceunits_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceUnits)
}
inline ::std::string* ServiceGroupConfig::add_serviceunits() {
  return serviceunits_.Add();
}
inline void ServiceGroupConfig::add_serviceunits(const ::std::string& value) {
  serviceunits_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceUnits)
}
inline void ServiceGroupConfig::add_serviceunits(const char* value) {
  serviceunits_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceUnits)
}
inline void ServiceGroupConfig::add_serviceunits(const char* value, size_t size) {
  serviceunits_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceUnits)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceGroupConfig::serviceunits() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceUnits)
  return serviceunits_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceGroupConfig::mutable_serviceunits() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceUnits)
  return &serviceunits_;
}

// repeated string serviceInstances = 14;
inline int ServiceGroupConfig::serviceinstances_size() const {
  return serviceinstances_.size();
}
inline void ServiceGroupConfig::clear_serviceinstances() {
  serviceinstances_.Clear();
}
inline const ::std::string& ServiceGroupConfig::serviceinstances(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceInstances)
  return serviceinstances_.Get(index);
}
inline ::std::string* ServiceGroupConfig::mutable_serviceinstances(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceInstances)
  return serviceinstances_.Mutable(index);
}
inline void ServiceGroupConfig::set_serviceinstances(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceInstances)
  serviceinstances_.Mutable(index)->assign(value);
}
inline void ServiceGroupConfig::set_serviceinstances(int index, const char* value) {
  serviceinstances_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceInstances)
}
inline void ServiceGroupConfig::set_serviceinstances(int index, const char* value, size_t size) {
  serviceinstances_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceInstances)
}
inline ::std::string* ServiceGroupConfig::add_serviceinstances() {
  return serviceinstances_.Add();
}
inline void ServiceGroupConfig::add_serviceinstances(const ::std::string& value) {
  serviceinstances_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceInstances)
}
inline void ServiceGroupConfig::add_serviceinstances(const char* value) {
  serviceinstances_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceInstances)
}
inline void ServiceGroupConfig::add_serviceinstances(const char* value, size_t size) {
  serviceinstances_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceInstances)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceGroupConfig::serviceinstances() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceInstances)
  return serviceinstances_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceGroupConfig::mutable_serviceinstances() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig.serviceInstances)
  return &serviceinstances_;
}

// -------------------------------------------------------------------

// Instantiate

// optional .SAFplus.Rpc.amfMgmtRpc.Execution Execution = 1;
inline bool Instantiate::has_execution() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Instantiate::set_has_execution() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Instantiate::clear_has_execution() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Instantiate::clear_execution() {
  if (execution_ != NULL) execution_->::SAFplus::Rpc::amfMgmtRpc::Execution::Clear();
  clear_has_execution();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::Execution& Instantiate::execution() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.Instantiate.Execution)
  return execution_ != NULL ? *execution_ : *default_instance_->execution_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::Execution* Instantiate::mutable_execution() {
  set_has_execution();
  if (execution_ == NULL) execution_ = new ::SAFplus::Rpc::amfMgmtRpc::Execution;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.Instantiate.Execution)
  return execution_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::Execution* Instantiate::release_execution() {
  clear_has_execution();
  ::SAFplus::Rpc::amfMgmtRpc::Execution* temp = execution_;
  execution_ = NULL;
  return temp;
}
inline void Instantiate::set_allocated_execution(::SAFplus::Rpc::amfMgmtRpc::Execution* execution) {
  delete execution_;
  execution_ = execution;
  if (execution) {
    set_has_execution();
  } else {
    clear_has_execution();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.Instantiate.Execution)
}

// -------------------------------------------------------------------

// Terminate

// optional .SAFplus.Rpc.amfMgmtRpc.Execution Execution = 1;
inline bool Terminate::has_execution() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Terminate::set_has_execution() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Terminate::clear_has_execution() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Terminate::clear_execution() {
  if (execution_ != NULL) execution_->::SAFplus::Rpc::amfMgmtRpc::Execution::Clear();
  clear_has_execution();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::Execution& Terminate::execution() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.Terminate.Execution)
  return execution_ != NULL ? *execution_ : *default_instance_->execution_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::Execution* Terminate::mutable_execution() {
  set_has_execution();
  if (execution_ == NULL) execution_ = new ::SAFplus::Rpc::amfMgmtRpc::Execution;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.Terminate.Execution)
  return execution_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::Execution* Terminate::release_execution() {
  clear_has_execution();
  ::SAFplus::Rpc::amfMgmtRpc::Execution* temp = execution_;
  execution_ = NULL;
  return temp;
}
inline void Terminate::set_allocated_execution(::SAFplus::Rpc::amfMgmtRpc::Execution* execution) {
  delete execution_;
  execution_ = execution;
  if (execution) {
    set_has_execution();
  } else {
    clear_has_execution();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.Terminate.Execution)
}

// -------------------------------------------------------------------

// Cleanup

// optional .SAFplus.Rpc.amfMgmtRpc.Execution Execution = 1;
inline bool Cleanup::has_execution() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Cleanup::set_has_execution() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Cleanup::clear_has_execution() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Cleanup::clear_execution() {
  if (execution_ != NULL) execution_->::SAFplus::Rpc::amfMgmtRpc::Execution::Clear();
  clear_has_execution();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::Execution& Cleanup::execution() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.Cleanup.Execution)
  return execution_ != NULL ? *execution_ : *default_instance_->execution_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::Execution* Cleanup::mutable_execution() {
  set_has_execution();
  if (execution_ == NULL) execution_ = new ::SAFplus::Rpc::amfMgmtRpc::Execution;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.Cleanup.Execution)
  return execution_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::Execution* Cleanup::release_execution() {
  clear_has_execution();
  ::SAFplus::Rpc::amfMgmtRpc::Execution* temp = execution_;
  execution_ = NULL;
  return temp;
}
inline void Cleanup::set_allocated_execution(::SAFplus::Rpc::amfMgmtRpc::Execution* execution) {
  delete execution_;
  execution_ = execution;
  if (execution) {
    set_has_execution();
  } else {
    clear_has_execution();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.Cleanup.Execution)
}

// -------------------------------------------------------------------

// Timeouts

// optional .SAFplus.Rpc.amfMgmtRpc.SaTimeT terminate = 1;
inline bool Timeouts::has_terminate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Timeouts::set_has_terminate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Timeouts::clear_has_terminate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Timeouts::clear_terminate() {
  if (terminate_ != NULL) terminate_->::SAFplus::Rpc::amfMgmtRpc::SaTimeT::Clear();
  clear_has_terminate();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::SaTimeT& Timeouts::terminate() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.Timeouts.terminate)
  return terminate_ != NULL ? *terminate_ : *default_instance_->terminate_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* Timeouts::mutable_terminate() {
  set_has_terminate();
  if (terminate_ == NULL) terminate_ = new ::SAFplus::Rpc::amfMgmtRpc::SaTimeT;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.Timeouts.terminate)
  return terminate_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* Timeouts::release_terminate() {
  clear_has_terminate();
  ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* temp = terminate_;
  terminate_ = NULL;
  return temp;
}
inline void Timeouts::set_allocated_terminate(::SAFplus::Rpc::amfMgmtRpc::SaTimeT* terminate) {
  delete terminate_;
  terminate_ = terminate;
  if (terminate) {
    set_has_terminate();
  } else {
    clear_has_terminate();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.Timeouts.terminate)
}

// optional .SAFplus.Rpc.amfMgmtRpc.SaTimeT quiescingComplete = 2;
inline bool Timeouts::has_quiescingcomplete() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Timeouts::set_has_quiescingcomplete() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Timeouts::clear_has_quiescingcomplete() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Timeouts::clear_quiescingcomplete() {
  if (quiescingcomplete_ != NULL) quiescingcomplete_->::SAFplus::Rpc::amfMgmtRpc::SaTimeT::Clear();
  clear_has_quiescingcomplete();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::SaTimeT& Timeouts::quiescingcomplete() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.Timeouts.quiescingComplete)
  return quiescingcomplete_ != NULL ? *quiescingcomplete_ : *default_instance_->quiescingcomplete_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* Timeouts::mutable_quiescingcomplete() {
  set_has_quiescingcomplete();
  if (quiescingcomplete_ == NULL) quiescingcomplete_ = new ::SAFplus::Rpc::amfMgmtRpc::SaTimeT;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.Timeouts.quiescingComplete)
  return quiescingcomplete_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* Timeouts::release_quiescingcomplete() {
  clear_has_quiescingcomplete();
  ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* temp = quiescingcomplete_;
  quiescingcomplete_ = NULL;
  return temp;
}
inline void Timeouts::set_allocated_quiescingcomplete(::SAFplus::Rpc::amfMgmtRpc::SaTimeT* quiescingcomplete) {
  delete quiescingcomplete_;
  quiescingcomplete_ = quiescingcomplete;
  if (quiescingcomplete) {
    set_has_quiescingcomplete();
  } else {
    clear_has_quiescingcomplete();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.Timeouts.quiescingComplete)
}

// optional .SAFplus.Rpc.amfMgmtRpc.SaTimeT workRemoval = 3;
inline bool Timeouts::has_workremoval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Timeouts::set_has_workremoval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Timeouts::clear_has_workremoval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Timeouts::clear_workremoval() {
  if (workremoval_ != NULL) workremoval_->::SAFplus::Rpc::amfMgmtRpc::SaTimeT::Clear();
  clear_has_workremoval();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::SaTimeT& Timeouts::workremoval() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.Timeouts.workRemoval)
  return workremoval_ != NULL ? *workremoval_ : *default_instance_->workremoval_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* Timeouts::mutable_workremoval() {
  set_has_workremoval();
  if (workremoval_ == NULL) workremoval_ = new ::SAFplus::Rpc::amfMgmtRpc::SaTimeT;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.Timeouts.workRemoval)
  return workremoval_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* Timeouts::release_workremoval() {
  clear_has_workremoval();
  ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* temp = workremoval_;
  workremoval_ = NULL;
  return temp;
}
inline void Timeouts::set_allocated_workremoval(::SAFplus::Rpc::amfMgmtRpc::SaTimeT* workremoval) {
  delete workremoval_;
  workremoval_ = workremoval;
  if (workremoval) {
    set_has_workremoval();
  } else {
    clear_has_workremoval();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.Timeouts.workRemoval)
}

// optional .SAFplus.Rpc.amfMgmtRpc.SaTimeT workAssignment = 4;
inline bool Timeouts::has_workassignment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Timeouts::set_has_workassignment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Timeouts::clear_has_workassignment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Timeouts::clear_workassignment() {
  if (workassignment_ != NULL) workassignment_->::SAFplus::Rpc::amfMgmtRpc::SaTimeT::Clear();
  clear_has_workassignment();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::SaTimeT& Timeouts::workassignment() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.Timeouts.workAssignment)
  return workassignment_ != NULL ? *workassignment_ : *default_instance_->workassignment_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* Timeouts::mutable_workassignment() {
  set_has_workassignment();
  if (workassignment_ == NULL) workassignment_ = new ::SAFplus::Rpc::amfMgmtRpc::SaTimeT;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.Timeouts.workAssignment)
  return workassignment_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* Timeouts::release_workassignment() {
  clear_has_workassignment();
  ::SAFplus::Rpc::amfMgmtRpc::SaTimeT* temp = workassignment_;
  workassignment_ = NULL;
  return temp;
}
inline void Timeouts::set_allocated_workassignment(::SAFplus::Rpc::amfMgmtRpc::SaTimeT* workassignment) {
  delete workassignment_;
  workassignment_ = workassignment;
  if (workassignment) {
    set_has_workassignment();
  } else {
    clear_has_workassignment();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.Timeouts.workAssignment)
}

// -------------------------------------------------------------------

// ComponentConfig

// optional string name = 1;
inline bool ComponentConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComponentConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComponentConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComponentConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ComponentConfig::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.name)
  return *name_;
}
inline void ComponentConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.name)
}
inline void ComponentConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.name)
}
inline void ComponentConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.name)
}
inline ::std::string* ComponentConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.name)
  return name_;
}
inline ::std::string* ComponentConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComponentConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.name)
}

// optional .SAFplus.Rpc.amfMgmtRpc.CapabilityModel capabilityModel = 2;
inline bool ComponentConfig::has_capabilitymodel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComponentConfig::set_has_capabilitymodel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComponentConfig::clear_has_capabilitymodel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComponentConfig::clear_capabilitymodel() {
  capabilitymodel_ = 0;
  clear_has_capabilitymodel();
}
inline ::SAFplus::Rpc::amfMgmtRpc::CapabilityModel ComponentConfig::capabilitymodel() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.capabilityModel)
  return static_cast< ::SAFplus::Rpc::amfMgmtRpc::CapabilityModel >(capabilitymodel_);
}
inline void ComponentConfig::set_capabilitymodel(::SAFplus::Rpc::amfMgmtRpc::CapabilityModel value) {
  assert(::SAFplus::Rpc::amfMgmtRpc::CapabilityModel_IsValid(value));
  set_has_capabilitymodel();
  capabilitymodel_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.capabilityModel)
}

// optional fixed32 maxActiveAssignments = 3;
inline bool ComponentConfig::has_maxactiveassignments() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ComponentConfig::set_has_maxactiveassignments() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ComponentConfig::clear_has_maxactiveassignments() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ComponentConfig::clear_maxactiveassignments() {
  maxactiveassignments_ = 0u;
  clear_has_maxactiveassignments();
}
inline ::google::protobuf::uint32 ComponentConfig::maxactiveassignments() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.maxActiveAssignments)
  return maxactiveassignments_;
}
inline void ComponentConfig::set_maxactiveassignments(::google::protobuf::uint32 value) {
  set_has_maxactiveassignments();
  maxactiveassignments_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.maxActiveAssignments)
}

// optional fixed32 maxStandbyAssignments = 4;
inline bool ComponentConfig::has_maxstandbyassignments() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ComponentConfig::set_has_maxstandbyassignments() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ComponentConfig::clear_has_maxstandbyassignments() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ComponentConfig::clear_maxstandbyassignments() {
  maxstandbyassignments_ = 0u;
  clear_has_maxstandbyassignments();
}
inline ::google::protobuf::uint32 ComponentConfig::maxstandbyassignments() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.maxStandbyAssignments)
  return maxstandbyassignments_;
}
inline void ComponentConfig::set_maxstandbyassignments(::google::protobuf::uint32 value) {
  set_has_maxstandbyassignments();
  maxstandbyassignments_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.maxStandbyAssignments)
}

// repeated string commandEnvironment = 5;
inline int ComponentConfig::commandenvironment_size() const {
  return commandenvironment_.size();
}
inline void ComponentConfig::clear_commandenvironment() {
  commandenvironment_.Clear();
}
inline const ::std::string& ComponentConfig::commandenvironment(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.commandEnvironment)
  return commandenvironment_.Get(index);
}
inline ::std::string* ComponentConfig::mutable_commandenvironment(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.commandEnvironment)
  return commandenvironment_.Mutable(index);
}
inline void ComponentConfig::set_commandenvironment(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.commandEnvironment)
  commandenvironment_.Mutable(index)->assign(value);
}
inline void ComponentConfig::set_commandenvironment(int index, const char* value) {
  commandenvironment_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.commandEnvironment)
}
inline void ComponentConfig::set_commandenvironment(int index, const char* value, size_t size) {
  commandenvironment_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.commandEnvironment)
}
inline ::std::string* ComponentConfig::add_commandenvironment() {
  return commandenvironment_.Add();
}
inline void ComponentConfig::add_commandenvironment(const ::std::string& value) {
  commandenvironment_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.commandEnvironment)
}
inline void ComponentConfig::add_commandenvironment(const char* value) {
  commandenvironment_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.commandEnvironment)
}
inline void ComponentConfig::add_commandenvironment(const char* value, size_t size) {
  commandenvironment_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.commandEnvironment)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ComponentConfig::commandenvironment() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.commandEnvironment)
  return commandenvironment_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ComponentConfig::mutable_commandenvironment() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.commandEnvironment)
  return &commandenvironment_;
}

// optional .SAFplus.Rpc.amfMgmtRpc.Instantiate instantiate = 6;
inline bool ComponentConfig::has_instantiate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ComponentConfig::set_has_instantiate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ComponentConfig::clear_has_instantiate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ComponentConfig::clear_instantiate() {
  if (instantiate_ != NULL) instantiate_->::SAFplus::Rpc::amfMgmtRpc::Instantiate::Clear();
  clear_has_instantiate();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::Instantiate& ComponentConfig::instantiate() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.instantiate)
  return instantiate_ != NULL ? *instantiate_ : *default_instance_->instantiate_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::Instantiate* ComponentConfig::mutable_instantiate() {
  set_has_instantiate();
  if (instantiate_ == NULL) instantiate_ = new ::SAFplus::Rpc::amfMgmtRpc::Instantiate;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.instantiate)
  return instantiate_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::Instantiate* ComponentConfig::release_instantiate() {
  clear_has_instantiate();
  ::SAFplus::Rpc::amfMgmtRpc::Instantiate* temp = instantiate_;
  instantiate_ = NULL;
  return temp;
}
inline void ComponentConfig::set_allocated_instantiate(::SAFplus::Rpc::amfMgmtRpc::Instantiate* instantiate) {
  delete instantiate_;
  instantiate_ = instantiate;
  if (instantiate) {
    set_has_instantiate();
  } else {
    clear_has_instantiate();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.instantiate)
}

// optional .SAFplus.Rpc.amfMgmtRpc.Terminate terminate = 7;
inline bool ComponentConfig::has_terminate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ComponentConfig::set_has_terminate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ComponentConfig::clear_has_terminate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ComponentConfig::clear_terminate() {
  if (terminate_ != NULL) terminate_->::SAFplus::Rpc::amfMgmtRpc::Terminate::Clear();
  clear_has_terminate();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::Terminate& ComponentConfig::terminate() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.terminate)
  return terminate_ != NULL ? *terminate_ : *default_instance_->terminate_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::Terminate* ComponentConfig::mutable_terminate() {
  set_has_terminate();
  if (terminate_ == NULL) terminate_ = new ::SAFplus::Rpc::amfMgmtRpc::Terminate;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.terminate)
  return terminate_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::Terminate* ComponentConfig::release_terminate() {
  clear_has_terminate();
  ::SAFplus::Rpc::amfMgmtRpc::Terminate* temp = terminate_;
  terminate_ = NULL;
  return temp;
}
inline void ComponentConfig::set_allocated_terminate(::SAFplus::Rpc::amfMgmtRpc::Terminate* terminate) {
  delete terminate_;
  terminate_ = terminate;
  if (terminate) {
    set_has_terminate();
  } else {
    clear_has_terminate();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.terminate)
}

// optional .SAFplus.Rpc.amfMgmtRpc.Cleanup cleanup = 8;
inline bool ComponentConfig::has_cleanup() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ComponentConfig::set_has_cleanup() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ComponentConfig::clear_has_cleanup() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ComponentConfig::clear_cleanup() {
  if (cleanup_ != NULL) cleanup_->::SAFplus::Rpc::amfMgmtRpc::Cleanup::Clear();
  clear_has_cleanup();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::Cleanup& ComponentConfig::cleanup() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.cleanup)
  return cleanup_ != NULL ? *cleanup_ : *default_instance_->cleanup_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::Cleanup* ComponentConfig::mutable_cleanup() {
  set_has_cleanup();
  if (cleanup_ == NULL) cleanup_ = new ::SAFplus::Rpc::amfMgmtRpc::Cleanup;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.cleanup)
  return cleanup_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::Cleanup* ComponentConfig::release_cleanup() {
  clear_has_cleanup();
  ::SAFplus::Rpc::amfMgmtRpc::Cleanup* temp = cleanup_;
  cleanup_ = NULL;
  return temp;
}
inline void ComponentConfig::set_allocated_cleanup(::SAFplus::Rpc::amfMgmtRpc::Cleanup* cleanup) {
  delete cleanup_;
  cleanup_ = cleanup;
  if (cleanup) {
    set_has_cleanup();
  } else {
    clear_has_cleanup();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.cleanup)
}

// optional fixed32 maxInstantInstantiations = 9;
inline bool ComponentConfig::has_maxinstantinstantiations() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ComponentConfig::set_has_maxinstantinstantiations() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ComponentConfig::clear_has_maxinstantinstantiations() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ComponentConfig::clear_maxinstantinstantiations() {
  maxinstantinstantiations_ = 0u;
  clear_has_maxinstantinstantiations();
}
inline ::google::protobuf::uint32 ComponentConfig::maxinstantinstantiations() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.maxInstantInstantiations)
  return maxinstantinstantiations_;
}
inline void ComponentConfig::set_maxinstantinstantiations(::google::protobuf::uint32 value) {
  set_has_maxinstantinstantiations();
  maxinstantinstantiations_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.maxInstantInstantiations)
}

// optional fixed32 maxDelayedInstantiations = 10;
inline bool ComponentConfig::has_maxdelayedinstantiations() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ComponentConfig::set_has_maxdelayedinstantiations() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ComponentConfig::clear_has_maxdelayedinstantiations() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ComponentConfig::clear_maxdelayedinstantiations() {
  maxdelayedinstantiations_ = 0u;
  clear_has_maxdelayedinstantiations();
}
inline ::google::protobuf::uint32 ComponentConfig::maxdelayedinstantiations() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.maxDelayedInstantiations)
  return maxdelayedinstantiations_;
}
inline void ComponentConfig::set_maxdelayedinstantiations(::google::protobuf::uint32 value) {
  set_has_maxdelayedinstantiations();
  maxdelayedinstantiations_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.maxDelayedInstantiations)
}

// optional fixed32 instantiationSuccessDuration = 11;
inline bool ComponentConfig::has_instantiationsuccessduration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ComponentConfig::set_has_instantiationsuccessduration() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ComponentConfig::clear_has_instantiationsuccessduration() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ComponentConfig::clear_instantiationsuccessduration() {
  instantiationsuccessduration_ = 0u;
  clear_has_instantiationsuccessduration();
}
inline ::google::protobuf::uint32 ComponentConfig::instantiationsuccessduration() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.instantiationSuccessDuration)
  return instantiationsuccessduration_;
}
inline void ComponentConfig::set_instantiationsuccessduration(::google::protobuf::uint32 value) {
  set_has_instantiationsuccessduration();
  instantiationsuccessduration_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.instantiationSuccessDuration)
}

// optional fixed32 delayBetweenInstantiation = 12;
inline bool ComponentConfig::has_delaybetweeninstantiation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ComponentConfig::set_has_delaybetweeninstantiation() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ComponentConfig::clear_has_delaybetweeninstantiation() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ComponentConfig::clear_delaybetweeninstantiation() {
  delaybetweeninstantiation_ = 0u;
  clear_has_delaybetweeninstantiation();
}
inline ::google::protobuf::uint32 ComponentConfig::delaybetweeninstantiation() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.delayBetweenInstantiation)
  return delaybetweeninstantiation_;
}
inline void ComponentConfig::set_delaybetweeninstantiation(::google::protobuf::uint32 value) {
  set_has_delaybetweeninstantiation();
  delaybetweeninstantiation_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.delayBetweenInstantiation)
}

// optional .SAFplus.Rpc.amfMgmtRpc.Timeouts timeouts = 13;
inline bool ComponentConfig::has_timeouts() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ComponentConfig::set_has_timeouts() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ComponentConfig::clear_has_timeouts() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ComponentConfig::clear_timeouts() {
  if (timeouts_ != NULL) timeouts_->::SAFplus::Rpc::amfMgmtRpc::Timeouts::Clear();
  clear_has_timeouts();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::Timeouts& ComponentConfig::timeouts() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.timeouts)
  return timeouts_ != NULL ? *timeouts_ : *default_instance_->timeouts_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::Timeouts* ComponentConfig::mutable_timeouts() {
  set_has_timeouts();
  if (timeouts_ == NULL) timeouts_ = new ::SAFplus::Rpc::amfMgmtRpc::Timeouts;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.timeouts)
  return timeouts_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::Timeouts* ComponentConfig::release_timeouts() {
  clear_has_timeouts();
  ::SAFplus::Rpc::amfMgmtRpc::Timeouts* temp = timeouts_;
  timeouts_ = NULL;
  return temp;
}
inline void ComponentConfig::set_allocated_timeouts(::SAFplus::Rpc::amfMgmtRpc::Timeouts* timeouts) {
  delete timeouts_;
  timeouts_ = timeouts;
  if (timeouts) {
    set_has_timeouts();
  } else {
    clear_has_timeouts();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.timeouts)
}

// optional string serviceUnit = 14;
inline bool ComponentConfig::has_serviceunit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ComponentConfig::set_has_serviceunit() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ComponentConfig::clear_has_serviceunit() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ComponentConfig::clear_serviceunit() {
  if (serviceunit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceunit_->clear();
  }
  clear_has_serviceunit();
}
inline const ::std::string& ComponentConfig::serviceunit() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.serviceUnit)
  return *serviceunit_;
}
inline void ComponentConfig::set_serviceunit(const ::std::string& value) {
  set_has_serviceunit();
  if (serviceunit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceunit_ = new ::std::string;
  }
  serviceunit_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.serviceUnit)
}
inline void ComponentConfig::set_serviceunit(const char* value) {
  set_has_serviceunit();
  if (serviceunit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceunit_ = new ::std::string;
  }
  serviceunit_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.serviceUnit)
}
inline void ComponentConfig::set_serviceunit(const char* value, size_t size) {
  set_has_serviceunit();
  if (serviceunit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceunit_ = new ::std::string;
  }
  serviceunit_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.serviceUnit)
}
inline ::std::string* ComponentConfig::mutable_serviceunit() {
  set_has_serviceunit();
  if (serviceunit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceunit_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.serviceUnit)
  return serviceunit_;
}
inline ::std::string* ComponentConfig::release_serviceunit() {
  clear_has_serviceunit();
  if (serviceunit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serviceunit_;
    serviceunit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComponentConfig::set_allocated_serviceunit(::std::string* serviceunit) {
  if (serviceunit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serviceunit_;
  }
  if (serviceunit) {
    set_has_serviceunit();
    serviceunit_ = serviceunit;
  } else {
    clear_has_serviceunit();
    serviceunit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.serviceUnit)
}

// optional .SAFplus.Rpc.amfMgmtRpc.Recovery recovery = 15;
inline bool ComponentConfig::has_recovery() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ComponentConfig::set_has_recovery() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ComponentConfig::clear_has_recovery() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ComponentConfig::clear_recovery() {
  recovery_ = 1;
  clear_has_recovery();
}
inline ::SAFplus::Rpc::amfMgmtRpc::Recovery ComponentConfig::recovery() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.recovery)
  return static_cast< ::SAFplus::Rpc::amfMgmtRpc::Recovery >(recovery_);
}
inline void ComponentConfig::set_recovery(::SAFplus::Rpc::amfMgmtRpc::Recovery value) {
  assert(::SAFplus::Rpc::amfMgmtRpc::Recovery_IsValid(value));
  set_has_recovery();
  recovery_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.recovery)
}

// optional bool restartable = 16;
inline bool ComponentConfig::has_restartable() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ComponentConfig::set_has_restartable() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ComponentConfig::clear_has_restartable() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ComponentConfig::clear_restartable() {
  restartable_ = false;
  clear_has_restartable();
}
inline bool ComponentConfig::restartable() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.restartable)
  return restartable_;
}
inline void ComponentConfig::set_restartable(bool value) {
  set_has_restartable();
  restartable_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ComponentConfig.restartable)
}

// -------------------------------------------------------------------

// Data

// optional string name = 1;
inline bool Data::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Data::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.Data.name)
  return *name_;
}
inline void Data::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.Data.name)
}
inline void Data::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.Data.name)
}
inline void Data::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.Data.name)
}
inline ::std::string* Data::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.Data.name)
  return name_;
}
inline ::std::string* Data::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.Data.name)
}

// optional string val = 2;
inline bool Data::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_val() {
  if (val_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& Data::val() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.Data.val)
  return *val_;
}
inline void Data::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    val_ = new ::std::string;
  }
  val_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.Data.val)
}
inline void Data::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    val_ = new ::std::string;
  }
  val_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.Data.val)
}
inline void Data::set_val(const char* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.Data.val)
}
inline ::std::string* Data::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    val_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.Data.val)
  return val_;
}
inline ::std::string* Data::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data::set_allocated_val(::std::string* val) {
  if (val_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete val_;
  }
  if (val) {
    set_has_val();
    val_ = val;
  } else {
    clear_has_val();
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.Data.val)
}

// -------------------------------------------------------------------

// ComponentServiceInstanceConfig

// optional string name = 1;
inline bool ComponentServiceInstanceConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComponentServiceInstanceConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComponentServiceInstanceConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComponentServiceInstanceConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ComponentServiceInstanceConfig::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.name)
  return *name_;
}
inline void ComponentServiceInstanceConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.name)
}
inline void ComponentServiceInstanceConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.name)
}
inline void ComponentServiceInstanceConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.name)
}
inline ::std::string* ComponentServiceInstanceConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.name)
  return name_;
}
inline ::std::string* ComponentServiceInstanceConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComponentServiceInstanceConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.name)
}

// repeated string dependencies = 2;
inline int ComponentServiceInstanceConfig::dependencies_size() const {
  return dependencies_.size();
}
inline void ComponentServiceInstanceConfig::clear_dependencies() {
  dependencies_.Clear();
}
inline const ::std::string& ComponentServiceInstanceConfig::dependencies(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.dependencies)
  return dependencies_.Get(index);
}
inline ::std::string* ComponentServiceInstanceConfig::mutable_dependencies(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.dependencies)
  return dependencies_.Mutable(index);
}
inline void ComponentServiceInstanceConfig::set_dependencies(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.dependencies)
  dependencies_.Mutable(index)->assign(value);
}
inline void ComponentServiceInstanceConfig::set_dependencies(int index, const char* value) {
  dependencies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.dependencies)
}
inline void ComponentServiceInstanceConfig::set_dependencies(int index, const char* value, size_t size) {
  dependencies_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.dependencies)
}
inline ::std::string* ComponentServiceInstanceConfig::add_dependencies() {
  return dependencies_.Add();
}
inline void ComponentServiceInstanceConfig::add_dependencies(const ::std::string& value) {
  dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.dependencies)
}
inline void ComponentServiceInstanceConfig::add_dependencies(const char* value) {
  dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.dependencies)
}
inline void ComponentServiceInstanceConfig::add_dependencies(const char* value, size_t size) {
  dependencies_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.dependencies)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ComponentServiceInstanceConfig::dependencies() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.dependencies)
  return dependencies_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ComponentServiceInstanceConfig::mutable_dependencies() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.dependencies)
  return &dependencies_;
}

// repeated .SAFplus.Rpc.amfMgmtRpc.Data data = 3;
inline int ComponentServiceInstanceConfig::data_size() const {
  return data_.size();
}
inline void ComponentServiceInstanceConfig::clear_data() {
  data_.Clear();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::Data& ComponentServiceInstanceConfig::data(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.data)
  return data_.Get(index);
}
inline ::SAFplus::Rpc::amfMgmtRpc::Data* ComponentServiceInstanceConfig::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.data)
  return data_.Mutable(index);
}
inline ::SAFplus::Rpc::amfMgmtRpc::Data* ComponentServiceInstanceConfig::add_data() {
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SAFplus::Rpc::amfMgmtRpc::Data >&
ComponentServiceInstanceConfig::data() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SAFplus::Rpc::amfMgmtRpc::Data >*
ComponentServiceInstanceConfig::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.data)
  return &data_;
}

// optional string serviceInstance = 4;
inline bool ComponentServiceInstanceConfig::has_serviceinstance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ComponentServiceInstanceConfig::set_has_serviceinstance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ComponentServiceInstanceConfig::clear_has_serviceinstance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ComponentServiceInstanceConfig::clear_serviceinstance() {
  if (serviceinstance_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceinstance_->clear();
  }
  clear_has_serviceinstance();
}
inline const ::std::string& ComponentServiceInstanceConfig::serviceinstance() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.serviceInstance)
  return *serviceinstance_;
}
inline void ComponentServiceInstanceConfig::set_serviceinstance(const ::std::string& value) {
  set_has_serviceinstance();
  if (serviceinstance_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceinstance_ = new ::std::string;
  }
  serviceinstance_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.serviceInstance)
}
inline void ComponentServiceInstanceConfig::set_serviceinstance(const char* value) {
  set_has_serviceinstance();
  if (serviceinstance_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceinstance_ = new ::std::string;
  }
  serviceinstance_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.serviceInstance)
}
inline void ComponentServiceInstanceConfig::set_serviceinstance(const char* value, size_t size) {
  set_has_serviceinstance();
  if (serviceinstance_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceinstance_ = new ::std::string;
  }
  serviceinstance_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.serviceInstance)
}
inline ::std::string* ComponentServiceInstanceConfig::mutable_serviceinstance() {
  set_has_serviceinstance();
  if (serviceinstance_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceinstance_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.serviceInstance)
  return serviceinstance_;
}
inline ::std::string* ComponentServiceInstanceConfig::release_serviceinstance() {
  clear_has_serviceinstance();
  if (serviceinstance_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serviceinstance_;
    serviceinstance_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComponentServiceInstanceConfig::set_allocated_serviceinstance(::std::string* serviceinstance) {
  if (serviceinstance_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serviceinstance_;
  }
  if (serviceinstance) {
    set_has_serviceinstance();
    serviceinstance_ = serviceinstance;
  } else {
    clear_has_serviceinstance();
    serviceinstance_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig.serviceInstance)
}

// -------------------------------------------------------------------

// ServiceInstanceConfig

// optional string name = 1;
inline bool ServiceInstanceConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceInstanceConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceInstanceConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceInstanceConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ServiceInstanceConfig::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.name)
  return *name_;
}
inline void ServiceInstanceConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.name)
}
inline void ServiceInstanceConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.name)
}
inline void ServiceInstanceConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.name)
}
inline ::std::string* ServiceInstanceConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.name)
  return name_;
}
inline ::std::string* ServiceInstanceConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceInstanceConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.name)
}

// optional .SAFplus.Rpc.amfMgmtRpc.AdministrativeState adminState = 2;
inline bool ServiceInstanceConfig::has_adminstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceInstanceConfig::set_has_adminstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceInstanceConfig::clear_has_adminstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceInstanceConfig::clear_adminstate() {
  adminstate_ = 0;
  clear_has_adminstate();
}
inline ::SAFplus::Rpc::amfMgmtRpc::AdministrativeState ServiceInstanceConfig::adminstate() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.adminState)
  return static_cast< ::SAFplus::Rpc::amfMgmtRpc::AdministrativeState >(adminstate_);
}
inline void ServiceInstanceConfig::set_adminstate(::SAFplus::Rpc::amfMgmtRpc::AdministrativeState value) {
  assert(::SAFplus::Rpc::amfMgmtRpc::AdministrativeState_IsValid(value));
  set_has_adminstate();
  adminstate_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.adminState)
}

// optional fixed32 preferredActiveAssignments = 3;
inline bool ServiceInstanceConfig::has_preferredactiveassignments() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceInstanceConfig::set_has_preferredactiveassignments() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceInstanceConfig::clear_has_preferredactiveassignments() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceInstanceConfig::clear_preferredactiveassignments() {
  preferredactiveassignments_ = 0u;
  clear_has_preferredactiveassignments();
}
inline ::google::protobuf::uint32 ServiceInstanceConfig::preferredactiveassignments() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.preferredActiveAssignments)
  return preferredactiveassignments_;
}
inline void ServiceInstanceConfig::set_preferredactiveassignments(::google::protobuf::uint32 value) {
  set_has_preferredactiveassignments();
  preferredactiveassignments_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.preferredActiveAssignments)
}

// optional fixed32 preferredStandbyAssignments = 4;
inline bool ServiceInstanceConfig::has_preferredstandbyassignments() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceInstanceConfig::set_has_preferredstandbyassignments() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServiceInstanceConfig::clear_has_preferredstandbyassignments() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServiceInstanceConfig::clear_preferredstandbyassignments() {
  preferredstandbyassignments_ = 0u;
  clear_has_preferredstandbyassignments();
}
inline ::google::protobuf::uint32 ServiceInstanceConfig::preferredstandbyassignments() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.preferredStandbyAssignments)
  return preferredstandbyassignments_;
}
inline void ServiceInstanceConfig::set_preferredstandbyassignments(::google::protobuf::uint32 value) {
  set_has_preferredstandbyassignments();
  preferredstandbyassignments_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.preferredStandbyAssignments)
}

// optional fixed32 rank = 5;
inline bool ServiceInstanceConfig::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServiceInstanceConfig::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServiceInstanceConfig::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServiceInstanceConfig::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 ServiceInstanceConfig::rank() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.rank)
  return rank_;
}
inline void ServiceInstanceConfig::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.rank)
}

// repeated string componentServiceInstances = 6;
inline int ServiceInstanceConfig::componentserviceinstances_size() const {
  return componentserviceinstances_.size();
}
inline void ServiceInstanceConfig::clear_componentserviceinstances() {
  componentserviceinstances_.Clear();
}
inline const ::std::string& ServiceInstanceConfig::componentserviceinstances(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.componentServiceInstances)
  return componentserviceinstances_.Get(index);
}
inline ::std::string* ServiceInstanceConfig::mutable_componentserviceinstances(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.componentServiceInstances)
  return componentserviceinstances_.Mutable(index);
}
inline void ServiceInstanceConfig::set_componentserviceinstances(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.componentServiceInstances)
  componentserviceinstances_.Mutable(index)->assign(value);
}
inline void ServiceInstanceConfig::set_componentserviceinstances(int index, const char* value) {
  componentserviceinstances_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.componentServiceInstances)
}
inline void ServiceInstanceConfig::set_componentserviceinstances(int index, const char* value, size_t size) {
  componentserviceinstances_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.componentServiceInstances)
}
inline ::std::string* ServiceInstanceConfig::add_componentserviceinstances() {
  return componentserviceinstances_.Add();
}
inline void ServiceInstanceConfig::add_componentserviceinstances(const ::std::string& value) {
  componentserviceinstances_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.componentServiceInstances)
}
inline void ServiceInstanceConfig::add_componentserviceinstances(const char* value) {
  componentserviceinstances_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.componentServiceInstances)
}
inline void ServiceInstanceConfig::add_componentserviceinstances(const char* value, size_t size) {
  componentserviceinstances_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.componentServiceInstances)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceInstanceConfig::componentserviceinstances() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.componentServiceInstances)
  return componentserviceinstances_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceInstanceConfig::mutable_componentserviceinstances() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.componentServiceInstances)
  return &componentserviceinstances_;
}

// optional string serviceGroup = 7;
inline bool ServiceInstanceConfig::has_servicegroup() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServiceInstanceConfig::set_has_servicegroup() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServiceInstanceConfig::clear_has_servicegroup() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServiceInstanceConfig::clear_servicegroup() {
  if (servicegroup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicegroup_->clear();
  }
  clear_has_servicegroup();
}
inline const ::std::string& ServiceInstanceConfig::servicegroup() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.serviceGroup)
  return *servicegroup_;
}
inline void ServiceInstanceConfig::set_servicegroup(const ::std::string& value) {
  set_has_servicegroup();
  if (servicegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicegroup_ = new ::std::string;
  }
  servicegroup_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.serviceGroup)
}
inline void ServiceInstanceConfig::set_servicegroup(const char* value) {
  set_has_servicegroup();
  if (servicegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicegroup_ = new ::std::string;
  }
  servicegroup_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.serviceGroup)
}
inline void ServiceInstanceConfig::set_servicegroup(const char* value, size_t size) {
  set_has_servicegroup();
  if (servicegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicegroup_ = new ::std::string;
  }
  servicegroup_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.serviceGroup)
}
inline ::std::string* ServiceInstanceConfig::mutable_servicegroup() {
  set_has_servicegroup();
  if (servicegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicegroup_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.serviceGroup)
  return servicegroup_;
}
inline ::std::string* ServiceInstanceConfig::release_servicegroup() {
  clear_has_servicegroup();
  if (servicegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servicegroup_;
    servicegroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceInstanceConfig::set_allocated_servicegroup(::std::string* servicegroup) {
  if (servicegroup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicegroup_;
  }
  if (servicegroup) {
    set_has_servicegroup();
    servicegroup_ = servicegroup;
  } else {
    clear_has_servicegroup();
    servicegroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig.serviceGroup)
}

// -------------------------------------------------------------------

// ServiceUnitConfig

// optional string name = 1;
inline bool ServiceUnitConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceUnitConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceUnitConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceUnitConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ServiceUnitConfig::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.name)
  return *name_;
}
inline void ServiceUnitConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.name)
}
inline void ServiceUnitConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.name)
}
inline void ServiceUnitConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.name)
}
inline ::std::string* ServiceUnitConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.name)
  return name_;
}
inline ::std::string* ServiceUnitConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceUnitConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.name)
}

// optional .SAFplus.Rpc.amfMgmtRpc.AdministrativeState adminState = 2;
inline bool ServiceUnitConfig::has_adminstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceUnitConfig::set_has_adminstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceUnitConfig::clear_has_adminstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceUnitConfig::clear_adminstate() {
  adminstate_ = 0;
  clear_has_adminstate();
}
inline ::SAFplus::Rpc::amfMgmtRpc::AdministrativeState ServiceUnitConfig::adminstate() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.adminState)
  return static_cast< ::SAFplus::Rpc::amfMgmtRpc::AdministrativeState >(adminstate_);
}
inline void ServiceUnitConfig::set_adminstate(::SAFplus::Rpc::amfMgmtRpc::AdministrativeState value) {
  assert(::SAFplus::Rpc::amfMgmtRpc::AdministrativeState_IsValid(value));
  set_has_adminstate();
  adminstate_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.adminState)
}

// optional fixed32 rank = 3;
inline bool ServiceUnitConfig::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceUnitConfig::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceUnitConfig::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceUnitConfig::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 ServiceUnitConfig::rank() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.rank)
  return rank_;
}
inline void ServiceUnitConfig::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.rank)
}

// optional bool failover = 4;
inline bool ServiceUnitConfig::has_failover() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceUnitConfig::set_has_failover() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServiceUnitConfig::clear_has_failover() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServiceUnitConfig::clear_failover() {
  failover_ = false;
  clear_has_failover();
}
inline bool ServiceUnitConfig::failover() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.failover)
  return failover_;
}
inline void ServiceUnitConfig::set_failover(bool value) {
  set_has_failover();
  failover_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.failover)
}

// repeated string components = 5;
inline int ServiceUnitConfig::components_size() const {
  return components_.size();
}
inline void ServiceUnitConfig::clear_components() {
  components_.Clear();
}
inline const ::std::string& ServiceUnitConfig::components(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.components)
  return components_.Get(index);
}
inline ::std::string* ServiceUnitConfig::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.components)
  return components_.Mutable(index);
}
inline void ServiceUnitConfig::set_components(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.components)
  components_.Mutable(index)->assign(value);
}
inline void ServiceUnitConfig::set_components(int index, const char* value) {
  components_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.components)
}
inline void ServiceUnitConfig::set_components(int index, const char* value, size_t size) {
  components_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.components)
}
inline ::std::string* ServiceUnitConfig::add_components() {
  return components_.Add();
}
inline void ServiceUnitConfig::add_components(const ::std::string& value) {
  components_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.components)
}
inline void ServiceUnitConfig::add_components(const char* value) {
  components_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.components)
}
inline void ServiceUnitConfig::add_components(const char* value, size_t size) {
  components_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.components)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceUnitConfig::components() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.components)
  return components_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceUnitConfig::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.components)
  return &components_;
}

// optional string node = 6;
inline bool ServiceUnitConfig::has_node() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServiceUnitConfig::set_has_node() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServiceUnitConfig::clear_has_node() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServiceUnitConfig::clear_node() {
  if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    node_->clear();
  }
  clear_has_node();
}
inline const ::std::string& ServiceUnitConfig::node() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.node)
  return *node_;
}
inline void ServiceUnitConfig::set_node(const ::std::string& value) {
  set_has_node();
  if (node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    node_ = new ::std::string;
  }
  node_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.node)
}
inline void ServiceUnitConfig::set_node(const char* value) {
  set_has_node();
  if (node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    node_ = new ::std::string;
  }
  node_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.node)
}
inline void ServiceUnitConfig::set_node(const char* value, size_t size) {
  set_has_node();
  if (node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    node_ = new ::std::string;
  }
  node_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.node)
}
inline ::std::string* ServiceUnitConfig::mutable_node() {
  set_has_node();
  if (node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    node_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.node)
  return node_;
}
inline ::std::string* ServiceUnitConfig::release_node() {
  clear_has_node();
  if (node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = node_;
    node_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceUnitConfig::set_allocated_node(::std::string* node) {
  if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_;
  }
  if (node) {
    set_has_node();
    node_ = node;
  } else {
    clear_has_node();
    node_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.node)
}

// optional string serviceGroup = 7;
inline bool ServiceUnitConfig::has_servicegroup() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServiceUnitConfig::set_has_servicegroup() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServiceUnitConfig::clear_has_servicegroup() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServiceUnitConfig::clear_servicegroup() {
  if (servicegroup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicegroup_->clear();
  }
  clear_has_servicegroup();
}
inline const ::std::string& ServiceUnitConfig::servicegroup() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.serviceGroup)
  return *servicegroup_;
}
inline void ServiceUnitConfig::set_servicegroup(const ::std::string& value) {
  set_has_servicegroup();
  if (servicegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicegroup_ = new ::std::string;
  }
  servicegroup_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.serviceGroup)
}
inline void ServiceUnitConfig::set_servicegroup(const char* value) {
  set_has_servicegroup();
  if (servicegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicegroup_ = new ::std::string;
  }
  servicegroup_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.serviceGroup)
}
inline void ServiceUnitConfig::set_servicegroup(const char* value, size_t size) {
  set_has_servicegroup();
  if (servicegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicegroup_ = new ::std::string;
  }
  servicegroup_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.serviceGroup)
}
inline ::std::string* ServiceUnitConfig::mutable_servicegroup() {
  set_has_servicegroup();
  if (servicegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicegroup_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.serviceGroup)
  return servicegroup_;
}
inline ::std::string* ServiceUnitConfig::release_servicegroup() {
  clear_has_servicegroup();
  if (servicegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servicegroup_;
    servicegroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceUnitConfig::set_allocated_servicegroup(::std::string* servicegroup) {
  if (servicegroup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicegroup_;
  }
  if (servicegroup) {
    set_has_servicegroup();
    servicegroup_ = servicegroup;
  } else {
    clear_has_servicegroup();
    servicegroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.serviceGroup)
}

// optional fixed32 probationTime = 8;
inline bool ServiceUnitConfig::has_probationtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServiceUnitConfig::set_has_probationtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServiceUnitConfig::clear_has_probationtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServiceUnitConfig::clear_probationtime() {
  probationtime_ = 0u;
  clear_has_probationtime();
}
inline ::google::protobuf::uint32 ServiceUnitConfig::probationtime() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.probationTime)
  return probationtime_;
}
inline void ServiceUnitConfig::set_probationtime(::google::protobuf::uint32 value) {
  set_has_probationtime();
  probationtime_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig.probationTime)
}

// -------------------------------------------------------------------

// InitializeRequest

// repeated bytes amfMgmtHandle = 1;
inline int InitializeRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void InitializeRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& InitializeRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.InitializeRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* InitializeRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.InitializeRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void InitializeRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.InitializeRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void InitializeRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.InitializeRequest.amfMgmtHandle)
}
inline void InitializeRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.InitializeRequest.amfMgmtHandle)
}
inline ::std::string* InitializeRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void InitializeRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.InitializeRequest.amfMgmtHandle)
}
inline void InitializeRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.InitializeRequest.amfMgmtHandle)
}
inline void InitializeRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.InitializeRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
InitializeRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.InitializeRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
InitializeRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.InitializeRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// -------------------------------------------------------------------

// InitializeResponse

// optional sint32 err = 1;
inline bool InitializeResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitializeResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitializeResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitializeResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 InitializeResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.InitializeResponse.err)
  return err_;
}
inline void InitializeResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.InitializeResponse.err)
}

// -------------------------------------------------------------------

// FinalizeRequest

// repeated bytes amfMgmtHandle = 1;
inline int FinalizeRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void FinalizeRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& FinalizeRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.FinalizeRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* FinalizeRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.FinalizeRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void FinalizeRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.FinalizeRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void FinalizeRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.FinalizeRequest.amfMgmtHandle)
}
inline void FinalizeRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.FinalizeRequest.amfMgmtHandle)
}
inline ::std::string* FinalizeRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void FinalizeRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.FinalizeRequest.amfMgmtHandle)
}
inline void FinalizeRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.FinalizeRequest.amfMgmtHandle)
}
inline void FinalizeRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.FinalizeRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FinalizeRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.FinalizeRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FinalizeRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.FinalizeRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// -------------------------------------------------------------------

// FinalizeResponse

// optional sint32 err = 1;
inline bool FinalizeResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FinalizeResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FinalizeResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FinalizeResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 FinalizeResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.FinalizeResponse.err)
  return err_;
}
inline void FinalizeResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.FinalizeResponse.err)
}

// -------------------------------------------------------------------

// CommitRequest

// repeated bytes amfMgmtHandle = 1;
inline int CommitRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void CommitRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& CommitRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CommitRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* CommitRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.CommitRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void CommitRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.CommitRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void CommitRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.CommitRequest.amfMgmtHandle)
}
inline void CommitRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.CommitRequest.amfMgmtHandle)
}
inline ::std::string* CommitRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void CommitRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.CommitRequest.amfMgmtHandle)
}
inline void CommitRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.CommitRequest.amfMgmtHandle)
}
inline void CommitRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.CommitRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommitRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.CommitRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommitRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.CommitRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// -------------------------------------------------------------------

// CommitResponse

// optional sint32 err = 1;
inline bool CommitResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommitResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommitResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommitResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 CommitResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CommitResponse.err)
  return err_;
}
inline void CommitResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.CommitResponse.err)
}

// -------------------------------------------------------------------

// CreateComponentRequest

// repeated bytes amfMgmtHandle = 1;
inline int CreateComponentRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void CreateComponentRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& CreateComponentRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateComponentRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* CreateComponentRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.CreateComponentRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void CreateComponentRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.CreateComponentRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void CreateComponentRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.CreateComponentRequest.amfMgmtHandle)
}
inline void CreateComponentRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.CreateComponentRequest.amfMgmtHandle)
}
inline ::std::string* CreateComponentRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void CreateComponentRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.CreateComponentRequest.amfMgmtHandle)
}
inline void CreateComponentRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.CreateComponentRequest.amfMgmtHandle)
}
inline void CreateComponentRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.CreateComponentRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateComponentRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.CreateComponentRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateComponentRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.CreateComponentRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional .SAFplus.Rpc.amfMgmtRpc.ComponentConfig ComponentConfig = 2;
inline bool CreateComponentRequest::has_componentconfig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateComponentRequest::set_has_componentconfig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateComponentRequest::clear_has_componentconfig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateComponentRequest::clear_componentconfig() {
  if (componentconfig_ != NULL) componentconfig_->::SAFplus::Rpc::amfMgmtRpc::ComponentConfig::Clear();
  clear_has_componentconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig& CreateComponentRequest::componentconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateComponentRequest.ComponentConfig)
  return componentconfig_ != NULL ? *componentconfig_ : *default_instance_->componentconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* CreateComponentRequest::mutable_componentconfig() {
  set_has_componentconfig();
  if (componentconfig_ == NULL) componentconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.CreateComponentRequest.ComponentConfig)
  return componentconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* CreateComponentRequest::release_componentconfig() {
  clear_has_componentconfig();
  ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* temp = componentconfig_;
  componentconfig_ = NULL;
  return temp;
}
inline void CreateComponentRequest::set_allocated_componentconfig(::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* componentconfig) {
  delete componentconfig_;
  componentconfig_ = componentconfig;
  if (componentconfig) {
    set_has_componentconfig();
  } else {
    clear_has_componentconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.CreateComponentRequest.ComponentConfig)
}

// -------------------------------------------------------------------

// CreateComponentResponse

// optional sint32 err = 1;
inline bool CreateComponentResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateComponentResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateComponentResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateComponentResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 CreateComponentResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateComponentResponse.err)
  return err_;
}
inline void CreateComponentResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.CreateComponentResponse.err)
}

// -------------------------------------------------------------------

// UpdateComponentRequest

// repeated bytes amfMgmtHandle = 1;
inline int UpdateComponentRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void UpdateComponentRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& UpdateComponentRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateComponentRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* UpdateComponentRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UpdateComponentRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void UpdateComponentRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UpdateComponentRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void UpdateComponentRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.UpdateComponentRequest.amfMgmtHandle)
}
inline void UpdateComponentRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.UpdateComponentRequest.amfMgmtHandle)
}
inline ::std::string* UpdateComponentRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void UpdateComponentRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.UpdateComponentRequest.amfMgmtHandle)
}
inline void UpdateComponentRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.UpdateComponentRequest.amfMgmtHandle)
}
inline void UpdateComponentRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.UpdateComponentRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpdateComponentRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.UpdateComponentRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UpdateComponentRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.UpdateComponentRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional .SAFplus.Rpc.amfMgmtRpc.ComponentConfig ComponentConfig = 2;
inline bool UpdateComponentRequest::has_componentconfig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateComponentRequest::set_has_componentconfig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateComponentRequest::clear_has_componentconfig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateComponentRequest::clear_componentconfig() {
  if (componentconfig_ != NULL) componentconfig_->::SAFplus::Rpc::amfMgmtRpc::ComponentConfig::Clear();
  clear_has_componentconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig& UpdateComponentRequest::componentconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateComponentRequest.ComponentConfig)
  return componentconfig_ != NULL ? *componentconfig_ : *default_instance_->componentconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* UpdateComponentRequest::mutable_componentconfig() {
  set_has_componentconfig();
  if (componentconfig_ == NULL) componentconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UpdateComponentRequest.ComponentConfig)
  return componentconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* UpdateComponentRequest::release_componentconfig() {
  clear_has_componentconfig();
  ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* temp = componentconfig_;
  componentconfig_ = NULL;
  return temp;
}
inline void UpdateComponentRequest::set_allocated_componentconfig(::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* componentconfig) {
  delete componentconfig_;
  componentconfig_ = componentconfig;
  if (componentconfig) {
    set_has_componentconfig();
  } else {
    clear_has_componentconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.UpdateComponentRequest.ComponentConfig)
}

// -------------------------------------------------------------------

// UpdateComponentResponse

// optional sint32 err = 1;
inline bool UpdateComponentResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateComponentResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateComponentResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateComponentResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 UpdateComponentResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateComponentResponse.err)
  return err_;
}
inline void UpdateComponentResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UpdateComponentResponse.err)
}

// -------------------------------------------------------------------

// DeleteComponentRequest

// repeated bytes amfMgmtHandle = 1;
inline int DeleteComponentRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void DeleteComponentRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& DeleteComponentRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* DeleteComponentRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void DeleteComponentRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void DeleteComponentRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest.amfMgmtHandle)
}
inline void DeleteComponentRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest.amfMgmtHandle)
}
inline ::std::string* DeleteComponentRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void DeleteComponentRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest.amfMgmtHandle)
}
inline void DeleteComponentRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest.amfMgmtHandle)
}
inline void DeleteComponentRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteComponentRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteComponentRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string name = 2;
inline bool DeleteComponentRequest::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteComponentRequest::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteComponentRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteComponentRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DeleteComponentRequest::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest.name)
  return *name_;
}
inline void DeleteComponentRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest.name)
}
inline void DeleteComponentRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest.name)
}
inline void DeleteComponentRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest.name)
}
inline ::std::string* DeleteComponentRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest.name)
  return name_;
}
inline ::std::string* DeleteComponentRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteComponentRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.DeleteComponentRequest.name)
}

// -------------------------------------------------------------------

// DeleteComponentResponse

// optional sint32 err = 1;
inline bool DeleteComponentResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteComponentResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteComponentResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteComponentResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 DeleteComponentResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteComponentResponse.err)
  return err_;
}
inline void DeleteComponentResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteComponentResponse.err)
}

// -------------------------------------------------------------------

// CreateSGRequest

// repeated bytes amfMgmtHandle = 1;
inline int CreateSGRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void CreateSGRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& CreateSGRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateSGRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* CreateSGRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.CreateSGRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void CreateSGRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.CreateSGRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void CreateSGRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.CreateSGRequest.amfMgmtHandle)
}
inline void CreateSGRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.CreateSGRequest.amfMgmtHandle)
}
inline ::std::string* CreateSGRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void CreateSGRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.CreateSGRequest.amfMgmtHandle)
}
inline void CreateSGRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.CreateSGRequest.amfMgmtHandle)
}
inline void CreateSGRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.CreateSGRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateSGRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.CreateSGRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateSGRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.CreateSGRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional .SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig ServiceGroupConfig = 2;
inline bool CreateSGRequest::has_servicegroupconfig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateSGRequest::set_has_servicegroupconfig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateSGRequest::clear_has_servicegroupconfig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateSGRequest::clear_servicegroupconfig() {
  if (servicegroupconfig_ != NULL) servicegroupconfig_->::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig::Clear();
  clear_has_servicegroupconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig& CreateSGRequest::servicegroupconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateSGRequest.ServiceGroupConfig)
  return servicegroupconfig_ != NULL ? *servicegroupconfig_ : *default_instance_->servicegroupconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* CreateSGRequest::mutable_servicegroupconfig() {
  set_has_servicegroupconfig();
  if (servicegroupconfig_ == NULL) servicegroupconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.CreateSGRequest.ServiceGroupConfig)
  return servicegroupconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* CreateSGRequest::release_servicegroupconfig() {
  clear_has_servicegroupconfig();
  ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* temp = servicegroupconfig_;
  servicegroupconfig_ = NULL;
  return temp;
}
inline void CreateSGRequest::set_allocated_servicegroupconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* servicegroupconfig) {
  delete servicegroupconfig_;
  servicegroupconfig_ = servicegroupconfig;
  if (servicegroupconfig) {
    set_has_servicegroupconfig();
  } else {
    clear_has_servicegroupconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.CreateSGRequest.ServiceGroupConfig)
}

// -------------------------------------------------------------------

// CreateSGResponse

// optional sint32 err = 1;
inline bool CreateSGResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateSGResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateSGResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateSGResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 CreateSGResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateSGResponse.err)
  return err_;
}
inline void CreateSGResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.CreateSGResponse.err)
}

// -------------------------------------------------------------------

// UpdateSGRequest

// repeated bytes amfMgmtHandle = 1;
inline int UpdateSGRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void UpdateSGRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& UpdateSGRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateSGRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* UpdateSGRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UpdateSGRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void UpdateSGRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UpdateSGRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void UpdateSGRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.UpdateSGRequest.amfMgmtHandle)
}
inline void UpdateSGRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.UpdateSGRequest.amfMgmtHandle)
}
inline ::std::string* UpdateSGRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void UpdateSGRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.UpdateSGRequest.amfMgmtHandle)
}
inline void UpdateSGRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.UpdateSGRequest.amfMgmtHandle)
}
inline void UpdateSGRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.UpdateSGRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpdateSGRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.UpdateSGRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UpdateSGRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.UpdateSGRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional .SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig ServiceGroupConfig = 2;
inline bool UpdateSGRequest::has_servicegroupconfig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateSGRequest::set_has_servicegroupconfig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateSGRequest::clear_has_servicegroupconfig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateSGRequest::clear_servicegroupconfig() {
  if (servicegroupconfig_ != NULL) servicegroupconfig_->::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig::Clear();
  clear_has_servicegroupconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig& UpdateSGRequest::servicegroupconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateSGRequest.ServiceGroupConfig)
  return servicegroupconfig_ != NULL ? *servicegroupconfig_ : *default_instance_->servicegroupconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* UpdateSGRequest::mutable_servicegroupconfig() {
  set_has_servicegroupconfig();
  if (servicegroupconfig_ == NULL) servicegroupconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UpdateSGRequest.ServiceGroupConfig)
  return servicegroupconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* UpdateSGRequest::release_servicegroupconfig() {
  clear_has_servicegroupconfig();
  ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* temp = servicegroupconfig_;
  servicegroupconfig_ = NULL;
  return temp;
}
inline void UpdateSGRequest::set_allocated_servicegroupconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* servicegroupconfig) {
  delete servicegroupconfig_;
  servicegroupconfig_ = servicegroupconfig;
  if (servicegroupconfig) {
    set_has_servicegroupconfig();
  } else {
    clear_has_servicegroupconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.UpdateSGRequest.ServiceGroupConfig)
}

// -------------------------------------------------------------------

// UpdateSGResponse

// optional sint32 err = 1;
inline bool UpdateSGResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateSGResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateSGResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateSGResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 UpdateSGResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateSGResponse.err)
  return err_;
}
inline void UpdateSGResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UpdateSGResponse.err)
}

// -------------------------------------------------------------------

// DeleteSGRequest

// repeated bytes amfMgmtHandle = 1;
inline int DeleteSGRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void DeleteSGRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& DeleteSGRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* DeleteSGRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void DeleteSGRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void DeleteSGRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest.amfMgmtHandle)
}
inline void DeleteSGRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest.amfMgmtHandle)
}
inline ::std::string* DeleteSGRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void DeleteSGRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest.amfMgmtHandle)
}
inline void DeleteSGRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest.amfMgmtHandle)
}
inline void DeleteSGRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteSGRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteSGRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string name = 2;
inline bool DeleteSGRequest::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteSGRequest::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteSGRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteSGRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DeleteSGRequest::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest.name)
  return *name_;
}
inline void DeleteSGRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest.name)
}
inline void DeleteSGRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest.name)
}
inline void DeleteSGRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest.name)
}
inline ::std::string* DeleteSGRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest.name)
  return name_;
}
inline ::std::string* DeleteSGRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteSGRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.DeleteSGRequest.name)
}

// -------------------------------------------------------------------

// DeleteSGResponse

// optional sint32 err = 1;
inline bool DeleteSGResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteSGResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteSGResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteSGResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 DeleteSGResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSGResponse.err)
  return err_;
}
inline void DeleteSGResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSGResponse.err)
}

// -------------------------------------------------------------------

// CreateNodeRequest

// repeated bytes amfMgmtHandle = 1;
inline int CreateNodeRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void CreateNodeRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& CreateNodeRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateNodeRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* CreateNodeRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.CreateNodeRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void CreateNodeRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.CreateNodeRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void CreateNodeRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.CreateNodeRequest.amfMgmtHandle)
}
inline void CreateNodeRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.CreateNodeRequest.amfMgmtHandle)
}
inline ::std::string* CreateNodeRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void CreateNodeRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.CreateNodeRequest.amfMgmtHandle)
}
inline void CreateNodeRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.CreateNodeRequest.amfMgmtHandle)
}
inline void CreateNodeRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.CreateNodeRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateNodeRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.CreateNodeRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateNodeRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.CreateNodeRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional .SAFplus.Rpc.amfMgmtRpc.NodeConfig NodeConfig = 2;
inline bool CreateNodeRequest::has_nodeconfig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateNodeRequest::set_has_nodeconfig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateNodeRequest::clear_has_nodeconfig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateNodeRequest::clear_nodeconfig() {
  if (nodeconfig_ != NULL) nodeconfig_->::SAFplus::Rpc::amfMgmtRpc::NodeConfig::Clear();
  clear_has_nodeconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::NodeConfig& CreateNodeRequest::nodeconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateNodeRequest.NodeConfig)
  return nodeconfig_ != NULL ? *nodeconfig_ : *default_instance_->nodeconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* CreateNodeRequest::mutable_nodeconfig() {
  set_has_nodeconfig();
  if (nodeconfig_ == NULL) nodeconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::NodeConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.CreateNodeRequest.NodeConfig)
  return nodeconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* CreateNodeRequest::release_nodeconfig() {
  clear_has_nodeconfig();
  ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* temp = nodeconfig_;
  nodeconfig_ = NULL;
  return temp;
}
inline void CreateNodeRequest::set_allocated_nodeconfig(::SAFplus::Rpc::amfMgmtRpc::NodeConfig* nodeconfig) {
  delete nodeconfig_;
  nodeconfig_ = nodeconfig;
  if (nodeconfig) {
    set_has_nodeconfig();
  } else {
    clear_has_nodeconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.CreateNodeRequest.NodeConfig)
}

// -------------------------------------------------------------------

// CreateNodeResponse

// optional sint32 err = 1;
inline bool CreateNodeResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateNodeResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateNodeResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateNodeResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 CreateNodeResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateNodeResponse.err)
  return err_;
}
inline void CreateNodeResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.CreateNodeResponse.err)
}

// -------------------------------------------------------------------

// UpdateNodeRequest

// repeated bytes amfMgmtHandle = 1;
inline int UpdateNodeRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void UpdateNodeRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& UpdateNodeRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateNodeRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* UpdateNodeRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UpdateNodeRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void UpdateNodeRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UpdateNodeRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void UpdateNodeRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.UpdateNodeRequest.amfMgmtHandle)
}
inline void UpdateNodeRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.UpdateNodeRequest.amfMgmtHandle)
}
inline ::std::string* UpdateNodeRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void UpdateNodeRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.UpdateNodeRequest.amfMgmtHandle)
}
inline void UpdateNodeRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.UpdateNodeRequest.amfMgmtHandle)
}
inline void UpdateNodeRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.UpdateNodeRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpdateNodeRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.UpdateNodeRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UpdateNodeRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.UpdateNodeRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional .SAFplus.Rpc.amfMgmtRpc.NodeConfig NodeConfig = 2;
inline bool UpdateNodeRequest::has_nodeconfig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateNodeRequest::set_has_nodeconfig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateNodeRequest::clear_has_nodeconfig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateNodeRequest::clear_nodeconfig() {
  if (nodeconfig_ != NULL) nodeconfig_->::SAFplus::Rpc::amfMgmtRpc::NodeConfig::Clear();
  clear_has_nodeconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::NodeConfig& UpdateNodeRequest::nodeconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateNodeRequest.NodeConfig)
  return nodeconfig_ != NULL ? *nodeconfig_ : *default_instance_->nodeconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* UpdateNodeRequest::mutable_nodeconfig() {
  set_has_nodeconfig();
  if (nodeconfig_ == NULL) nodeconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::NodeConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UpdateNodeRequest.NodeConfig)
  return nodeconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* UpdateNodeRequest::release_nodeconfig() {
  clear_has_nodeconfig();
  ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* temp = nodeconfig_;
  nodeconfig_ = NULL;
  return temp;
}
inline void UpdateNodeRequest::set_allocated_nodeconfig(::SAFplus::Rpc::amfMgmtRpc::NodeConfig* nodeconfig) {
  delete nodeconfig_;
  nodeconfig_ = nodeconfig;
  if (nodeconfig) {
    set_has_nodeconfig();
  } else {
    clear_has_nodeconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.UpdateNodeRequest.NodeConfig)
}

// -------------------------------------------------------------------

// UpdateNodeResponse

// optional sint32 err = 1;
inline bool UpdateNodeResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateNodeResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateNodeResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateNodeResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 UpdateNodeResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateNodeResponse.err)
  return err_;
}
inline void UpdateNodeResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UpdateNodeResponse.err)
}

// -------------------------------------------------------------------

// DeleteNodeRequest

// repeated bytes amfMgmtHandle = 1;
inline int DeleteNodeRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void DeleteNodeRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& DeleteNodeRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* DeleteNodeRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void DeleteNodeRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void DeleteNodeRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest.amfMgmtHandle)
}
inline void DeleteNodeRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest.amfMgmtHandle)
}
inline ::std::string* DeleteNodeRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void DeleteNodeRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest.amfMgmtHandle)
}
inline void DeleteNodeRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest.amfMgmtHandle)
}
inline void DeleteNodeRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteNodeRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteNodeRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string name = 2;
inline bool DeleteNodeRequest::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteNodeRequest::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteNodeRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteNodeRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DeleteNodeRequest::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest.name)
  return *name_;
}
inline void DeleteNodeRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest.name)
}
inline void DeleteNodeRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest.name)
}
inline void DeleteNodeRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest.name)
}
inline ::std::string* DeleteNodeRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest.name)
  return name_;
}
inline ::std::string* DeleteNodeRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteNodeRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.DeleteNodeRequest.name)
}

// -------------------------------------------------------------------

// DeleteNodeResponse

// optional sint32 err = 1;
inline bool DeleteNodeResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteNodeResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteNodeResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteNodeResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 DeleteNodeResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteNodeResponse.err)
  return err_;
}
inline void DeleteNodeResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteNodeResponse.err)
}

// -------------------------------------------------------------------

// CreateSURequest

// repeated bytes amfMgmtHandle = 1;
inline int CreateSURequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void CreateSURequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& CreateSURequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateSURequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* CreateSURequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.CreateSURequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void CreateSURequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.CreateSURequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void CreateSURequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.CreateSURequest.amfMgmtHandle)
}
inline void CreateSURequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.CreateSURequest.amfMgmtHandle)
}
inline ::std::string* CreateSURequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void CreateSURequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.CreateSURequest.amfMgmtHandle)
}
inline void CreateSURequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.CreateSURequest.amfMgmtHandle)
}
inline void CreateSURequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.CreateSURequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateSURequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.CreateSURequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateSURequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.CreateSURequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional .SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig ServiceUnitConfig = 2;
inline bool CreateSURequest::has_serviceunitconfig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateSURequest::set_has_serviceunitconfig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateSURequest::clear_has_serviceunitconfig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateSURequest::clear_serviceunitconfig() {
  if (serviceunitconfig_ != NULL) serviceunitconfig_->::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig::Clear();
  clear_has_serviceunitconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig& CreateSURequest::serviceunitconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateSURequest.ServiceUnitConfig)
  return serviceunitconfig_ != NULL ? *serviceunitconfig_ : *default_instance_->serviceunitconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* CreateSURequest::mutable_serviceunitconfig() {
  set_has_serviceunitconfig();
  if (serviceunitconfig_ == NULL) serviceunitconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.CreateSURequest.ServiceUnitConfig)
  return serviceunitconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* CreateSURequest::release_serviceunitconfig() {
  clear_has_serviceunitconfig();
  ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* temp = serviceunitconfig_;
  serviceunitconfig_ = NULL;
  return temp;
}
inline void CreateSURequest::set_allocated_serviceunitconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* serviceunitconfig) {
  delete serviceunitconfig_;
  serviceunitconfig_ = serviceunitconfig;
  if (serviceunitconfig) {
    set_has_serviceunitconfig();
  } else {
    clear_has_serviceunitconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.CreateSURequest.ServiceUnitConfig)
}

// -------------------------------------------------------------------

// CreateSUResponse

// optional sint32 err = 1;
inline bool CreateSUResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateSUResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateSUResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateSUResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 CreateSUResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateSUResponse.err)
  return err_;
}
inline void CreateSUResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.CreateSUResponse.err)
}

// -------------------------------------------------------------------

// UpdateSURequest

// repeated bytes amfMgmtHandle = 1;
inline int UpdateSURequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void UpdateSURequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& UpdateSURequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateSURequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* UpdateSURequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UpdateSURequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void UpdateSURequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UpdateSURequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void UpdateSURequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.UpdateSURequest.amfMgmtHandle)
}
inline void UpdateSURequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.UpdateSURequest.amfMgmtHandle)
}
inline ::std::string* UpdateSURequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void UpdateSURequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.UpdateSURequest.amfMgmtHandle)
}
inline void UpdateSURequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.UpdateSURequest.amfMgmtHandle)
}
inline void UpdateSURequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.UpdateSURequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpdateSURequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.UpdateSURequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UpdateSURequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.UpdateSURequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional .SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig ServiceUnitConfig = 2;
inline bool UpdateSURequest::has_serviceunitconfig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateSURequest::set_has_serviceunitconfig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateSURequest::clear_has_serviceunitconfig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateSURequest::clear_serviceunitconfig() {
  if (serviceunitconfig_ != NULL) serviceunitconfig_->::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig::Clear();
  clear_has_serviceunitconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig& UpdateSURequest::serviceunitconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateSURequest.ServiceUnitConfig)
  return serviceunitconfig_ != NULL ? *serviceunitconfig_ : *default_instance_->serviceunitconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* UpdateSURequest::mutable_serviceunitconfig() {
  set_has_serviceunitconfig();
  if (serviceunitconfig_ == NULL) serviceunitconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UpdateSURequest.ServiceUnitConfig)
  return serviceunitconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* UpdateSURequest::release_serviceunitconfig() {
  clear_has_serviceunitconfig();
  ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* temp = serviceunitconfig_;
  serviceunitconfig_ = NULL;
  return temp;
}
inline void UpdateSURequest::set_allocated_serviceunitconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* serviceunitconfig) {
  delete serviceunitconfig_;
  serviceunitconfig_ = serviceunitconfig;
  if (serviceunitconfig) {
    set_has_serviceunitconfig();
  } else {
    clear_has_serviceunitconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.UpdateSURequest.ServiceUnitConfig)
}

// -------------------------------------------------------------------

// UpdateSUResponse

// optional sint32 err = 1;
inline bool UpdateSUResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateSUResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateSUResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateSUResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 UpdateSUResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateSUResponse.err)
  return err_;
}
inline void UpdateSUResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UpdateSUResponse.err)
}

// -------------------------------------------------------------------

// DeleteSURequest

// repeated bytes amfMgmtHandle = 1;
inline int DeleteSURequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void DeleteSURequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& DeleteSURequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* DeleteSURequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void DeleteSURequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void DeleteSURequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest.amfMgmtHandle)
}
inline void DeleteSURequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest.amfMgmtHandle)
}
inline ::std::string* DeleteSURequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void DeleteSURequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest.amfMgmtHandle)
}
inline void DeleteSURequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest.amfMgmtHandle)
}
inline void DeleteSURequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteSURequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteSURequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string name = 2;
inline bool DeleteSURequest::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteSURequest::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteSURequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteSURequest::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DeleteSURequest::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest.name)
  return *name_;
}
inline void DeleteSURequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest.name)
}
inline void DeleteSURequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest.name)
}
inline void DeleteSURequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest.name)
}
inline ::std::string* DeleteSURequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest.name)
  return name_;
}
inline ::std::string* DeleteSURequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteSURequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.DeleteSURequest.name)
}

// -------------------------------------------------------------------

// DeleteSUResponse

// optional sint32 err = 1;
inline bool DeleteSUResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteSUResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteSUResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteSUResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 DeleteSUResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSUResponse.err)
  return err_;
}
inline void DeleteSUResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSUResponse.err)
}

// -------------------------------------------------------------------

// CreateSIRequest

// repeated bytes amfMgmtHandle = 1;
inline int CreateSIRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void CreateSIRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& CreateSIRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateSIRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* CreateSIRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.CreateSIRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void CreateSIRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.CreateSIRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void CreateSIRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.CreateSIRequest.amfMgmtHandle)
}
inline void CreateSIRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.CreateSIRequest.amfMgmtHandle)
}
inline ::std::string* CreateSIRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void CreateSIRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.CreateSIRequest.amfMgmtHandle)
}
inline void CreateSIRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.CreateSIRequest.amfMgmtHandle)
}
inline void CreateSIRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.CreateSIRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateSIRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.CreateSIRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateSIRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.CreateSIRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional .SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig ServiceInstanceConfig = 2;
inline bool CreateSIRequest::has_serviceinstanceconfig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateSIRequest::set_has_serviceinstanceconfig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateSIRequest::clear_has_serviceinstanceconfig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateSIRequest::clear_serviceinstanceconfig() {
  if (serviceinstanceconfig_ != NULL) serviceinstanceconfig_->::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig::Clear();
  clear_has_serviceinstanceconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig& CreateSIRequest::serviceinstanceconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateSIRequest.ServiceInstanceConfig)
  return serviceinstanceconfig_ != NULL ? *serviceinstanceconfig_ : *default_instance_->serviceinstanceconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* CreateSIRequest::mutable_serviceinstanceconfig() {
  set_has_serviceinstanceconfig();
  if (serviceinstanceconfig_ == NULL) serviceinstanceconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.CreateSIRequest.ServiceInstanceConfig)
  return serviceinstanceconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* CreateSIRequest::release_serviceinstanceconfig() {
  clear_has_serviceinstanceconfig();
  ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* temp = serviceinstanceconfig_;
  serviceinstanceconfig_ = NULL;
  return temp;
}
inline void CreateSIRequest::set_allocated_serviceinstanceconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* serviceinstanceconfig) {
  delete serviceinstanceconfig_;
  serviceinstanceconfig_ = serviceinstanceconfig;
  if (serviceinstanceconfig) {
    set_has_serviceinstanceconfig();
  } else {
    clear_has_serviceinstanceconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.CreateSIRequest.ServiceInstanceConfig)
}

// -------------------------------------------------------------------

// CreateSIResponse

// optional sint32 err = 1;
inline bool CreateSIResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateSIResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateSIResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateSIResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 CreateSIResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateSIResponse.err)
  return err_;
}
inline void CreateSIResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.CreateSIResponse.err)
}

// -------------------------------------------------------------------

// UpdateSIRequest

// repeated bytes amfMgmtHandle = 1;
inline int UpdateSIRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void UpdateSIRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& UpdateSIRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateSIRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* UpdateSIRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UpdateSIRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void UpdateSIRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UpdateSIRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void UpdateSIRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.UpdateSIRequest.amfMgmtHandle)
}
inline void UpdateSIRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.UpdateSIRequest.amfMgmtHandle)
}
inline ::std::string* UpdateSIRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void UpdateSIRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.UpdateSIRequest.amfMgmtHandle)
}
inline void UpdateSIRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.UpdateSIRequest.amfMgmtHandle)
}
inline void UpdateSIRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.UpdateSIRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpdateSIRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.UpdateSIRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UpdateSIRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.UpdateSIRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional .SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig ServiceInstanceConfig = 2;
inline bool UpdateSIRequest::has_serviceinstanceconfig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateSIRequest::set_has_serviceinstanceconfig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateSIRequest::clear_has_serviceinstanceconfig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateSIRequest::clear_serviceinstanceconfig() {
  if (serviceinstanceconfig_ != NULL) serviceinstanceconfig_->::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig::Clear();
  clear_has_serviceinstanceconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig& UpdateSIRequest::serviceinstanceconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateSIRequest.ServiceInstanceConfig)
  return serviceinstanceconfig_ != NULL ? *serviceinstanceconfig_ : *default_instance_->serviceinstanceconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* UpdateSIRequest::mutable_serviceinstanceconfig() {
  set_has_serviceinstanceconfig();
  if (serviceinstanceconfig_ == NULL) serviceinstanceconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UpdateSIRequest.ServiceInstanceConfig)
  return serviceinstanceconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* UpdateSIRequest::release_serviceinstanceconfig() {
  clear_has_serviceinstanceconfig();
  ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* temp = serviceinstanceconfig_;
  serviceinstanceconfig_ = NULL;
  return temp;
}
inline void UpdateSIRequest::set_allocated_serviceinstanceconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* serviceinstanceconfig) {
  delete serviceinstanceconfig_;
  serviceinstanceconfig_ = serviceinstanceconfig;
  if (serviceinstanceconfig) {
    set_has_serviceinstanceconfig();
  } else {
    clear_has_serviceinstanceconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.UpdateSIRequest.ServiceInstanceConfig)
}

// -------------------------------------------------------------------

// UpdateSIResponse

// optional sint32 err = 1;
inline bool UpdateSIResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateSIResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateSIResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateSIResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 UpdateSIResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateSIResponse.err)
  return err_;
}
inline void UpdateSIResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UpdateSIResponse.err)
}

// -------------------------------------------------------------------

// DeleteSIRequest

// repeated bytes amfMgmtHandle = 1;
inline int DeleteSIRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void DeleteSIRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& DeleteSIRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* DeleteSIRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void DeleteSIRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void DeleteSIRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest.amfMgmtHandle)
}
inline void DeleteSIRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest.amfMgmtHandle)
}
inline ::std::string* DeleteSIRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void DeleteSIRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest.amfMgmtHandle)
}
inline void DeleteSIRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest.amfMgmtHandle)
}
inline void DeleteSIRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteSIRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteSIRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string name = 2;
inline bool DeleteSIRequest::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteSIRequest::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteSIRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteSIRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DeleteSIRequest::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest.name)
  return *name_;
}
inline void DeleteSIRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest.name)
}
inline void DeleteSIRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest.name)
}
inline void DeleteSIRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest.name)
}
inline ::std::string* DeleteSIRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest.name)
  return name_;
}
inline ::std::string* DeleteSIRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteSIRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.DeleteSIRequest.name)
}

// -------------------------------------------------------------------

// DeleteSIResponse

// optional sint32 err = 1;
inline bool DeleteSIResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteSIResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteSIResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteSIResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 DeleteSIResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSIResponse.err)
  return err_;
}
inline void DeleteSIResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSIResponse.err)
}

// -------------------------------------------------------------------

// CreateCSIRequest

// repeated bytes amfMgmtHandle = 1;
inline int CreateCSIRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void CreateCSIRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& CreateCSIRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateCSIRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* CreateCSIRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.CreateCSIRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void CreateCSIRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.CreateCSIRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void CreateCSIRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.CreateCSIRequest.amfMgmtHandle)
}
inline void CreateCSIRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.CreateCSIRequest.amfMgmtHandle)
}
inline ::std::string* CreateCSIRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void CreateCSIRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.CreateCSIRequest.amfMgmtHandle)
}
inline void CreateCSIRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.CreateCSIRequest.amfMgmtHandle)
}
inline void CreateCSIRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.CreateCSIRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateCSIRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.CreateCSIRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateCSIRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.CreateCSIRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional .SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig ComponentServiceInstanceConfig = 2;
inline bool CreateCSIRequest::has_componentserviceinstanceconfig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateCSIRequest::set_has_componentserviceinstanceconfig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateCSIRequest::clear_has_componentserviceinstanceconfig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateCSIRequest::clear_componentserviceinstanceconfig() {
  if (componentserviceinstanceconfig_ != NULL) componentserviceinstanceconfig_->::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig::Clear();
  clear_has_componentserviceinstanceconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig& CreateCSIRequest::componentserviceinstanceconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateCSIRequest.ComponentServiceInstanceConfig)
  return componentserviceinstanceconfig_ != NULL ? *componentserviceinstanceconfig_ : *default_instance_->componentserviceinstanceconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* CreateCSIRequest::mutable_componentserviceinstanceconfig() {
  set_has_componentserviceinstanceconfig();
  if (componentserviceinstanceconfig_ == NULL) componentserviceinstanceconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.CreateCSIRequest.ComponentServiceInstanceConfig)
  return componentserviceinstanceconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* CreateCSIRequest::release_componentserviceinstanceconfig() {
  clear_has_componentserviceinstanceconfig();
  ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* temp = componentserviceinstanceconfig_;
  componentserviceinstanceconfig_ = NULL;
  return temp;
}
inline void CreateCSIRequest::set_allocated_componentserviceinstanceconfig(::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* componentserviceinstanceconfig) {
  delete componentserviceinstanceconfig_;
  componentserviceinstanceconfig_ = componentserviceinstanceconfig;
  if (componentserviceinstanceconfig) {
    set_has_componentserviceinstanceconfig();
  } else {
    clear_has_componentserviceinstanceconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.CreateCSIRequest.ComponentServiceInstanceConfig)
}

// -------------------------------------------------------------------

// CreateCSIResponse

// optional sint32 err = 1;
inline bool CreateCSIResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateCSIResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateCSIResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateCSIResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 CreateCSIResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.CreateCSIResponse.err)
  return err_;
}
inline void CreateCSIResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.CreateCSIResponse.err)
}

// -------------------------------------------------------------------

// UpdateCSIRequest

// repeated bytes amfMgmtHandle = 1;
inline int UpdateCSIRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void UpdateCSIRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& UpdateCSIRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateCSIRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* UpdateCSIRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UpdateCSIRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void UpdateCSIRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UpdateCSIRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void UpdateCSIRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.UpdateCSIRequest.amfMgmtHandle)
}
inline void UpdateCSIRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.UpdateCSIRequest.amfMgmtHandle)
}
inline ::std::string* UpdateCSIRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void UpdateCSIRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.UpdateCSIRequest.amfMgmtHandle)
}
inline void UpdateCSIRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.UpdateCSIRequest.amfMgmtHandle)
}
inline void UpdateCSIRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.UpdateCSIRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpdateCSIRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.UpdateCSIRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UpdateCSIRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.UpdateCSIRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional .SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig ComponentServiceInstanceConfig = 2;
inline bool UpdateCSIRequest::has_componentserviceinstanceconfig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateCSIRequest::set_has_componentserviceinstanceconfig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateCSIRequest::clear_has_componentserviceinstanceconfig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateCSIRequest::clear_componentserviceinstanceconfig() {
  if (componentserviceinstanceconfig_ != NULL) componentserviceinstanceconfig_->::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig::Clear();
  clear_has_componentserviceinstanceconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig& UpdateCSIRequest::componentserviceinstanceconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateCSIRequest.ComponentServiceInstanceConfig)
  return componentserviceinstanceconfig_ != NULL ? *componentserviceinstanceconfig_ : *default_instance_->componentserviceinstanceconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* UpdateCSIRequest::mutable_componentserviceinstanceconfig() {
  set_has_componentserviceinstanceconfig();
  if (componentserviceinstanceconfig_ == NULL) componentserviceinstanceconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UpdateCSIRequest.ComponentServiceInstanceConfig)
  return componentserviceinstanceconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* UpdateCSIRequest::release_componentserviceinstanceconfig() {
  clear_has_componentserviceinstanceconfig();
  ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* temp = componentserviceinstanceconfig_;
  componentserviceinstanceconfig_ = NULL;
  return temp;
}
inline void UpdateCSIRequest::set_allocated_componentserviceinstanceconfig(::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* componentserviceinstanceconfig) {
  delete componentserviceinstanceconfig_;
  componentserviceinstanceconfig_ = componentserviceinstanceconfig;
  if (componentserviceinstanceconfig) {
    set_has_componentserviceinstanceconfig();
  } else {
    clear_has_componentserviceinstanceconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.UpdateCSIRequest.ComponentServiceInstanceConfig)
}

// -------------------------------------------------------------------

// UpdateCSIResponse

// optional sint32 err = 1;
inline bool UpdateCSIResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateCSIResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateCSIResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateCSIResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 UpdateCSIResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UpdateCSIResponse.err)
  return err_;
}
inline void UpdateCSIResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UpdateCSIResponse.err)
}

// -------------------------------------------------------------------

// DeleteCSIRequest

// repeated bytes amfMgmtHandle = 1;
inline int DeleteCSIRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void DeleteCSIRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& DeleteCSIRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* DeleteCSIRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void DeleteCSIRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void DeleteCSIRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest.amfMgmtHandle)
}
inline void DeleteCSIRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest.amfMgmtHandle)
}
inline ::std::string* DeleteCSIRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void DeleteCSIRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest.amfMgmtHandle)
}
inline void DeleteCSIRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest.amfMgmtHandle)
}
inline void DeleteCSIRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteCSIRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteCSIRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string name = 2;
inline bool DeleteCSIRequest::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteCSIRequest::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteCSIRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteCSIRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DeleteCSIRequest::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest.name)
  return *name_;
}
inline void DeleteCSIRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest.name)
}
inline void DeleteCSIRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest.name)
}
inline void DeleteCSIRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest.name)
}
inline ::std::string* DeleteCSIRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest.name)
  return name_;
}
inline ::std::string* DeleteCSIRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteCSIRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.DeleteCSIRequest.name)
}

// -------------------------------------------------------------------

// DeleteCSIResponse

// optional sint32 err = 1;
inline bool DeleteCSIResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteCSIResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteCSIResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteCSIResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 DeleteCSIResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteCSIResponse.err)
  return err_;
}
inline void DeleteCSIResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteCSIResponse.err)
}

// -------------------------------------------------------------------

// DeleteCSINVPRequest

// repeated bytes amfMgmtHandle = 1;
inline int DeleteCSINVPRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void DeleteCSINVPRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& DeleteCSINVPRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* DeleteCSINVPRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void DeleteCSINVPRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void DeleteCSINVPRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.amfMgmtHandle)
}
inline void DeleteCSINVPRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.amfMgmtHandle)
}
inline ::std::string* DeleteCSINVPRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void DeleteCSINVPRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.amfMgmtHandle)
}
inline void DeleteCSINVPRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.amfMgmtHandle)
}
inline void DeleteCSINVPRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteCSINVPRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteCSINVPRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string name = 2;
inline bool DeleteCSINVPRequest::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteCSINVPRequest::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteCSINVPRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteCSINVPRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DeleteCSINVPRequest::name() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.name)
  return *name_;
}
inline void DeleteCSINVPRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.name)
}
inline void DeleteCSINVPRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.name)
}
inline void DeleteCSINVPRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.name)
}
inline ::std::string* DeleteCSINVPRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.name)
  return name_;
}
inline ::std::string* DeleteCSINVPRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteCSINVPRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.name)
}

// repeated .SAFplus.Rpc.amfMgmtRpc.Data data = 3;
inline int DeleteCSINVPRequest::data_size() const {
  return data_.size();
}
inline void DeleteCSINVPRequest::clear_data() {
  data_.Clear();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::Data& DeleteCSINVPRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.data)
  return data_.Get(index);
}
inline ::SAFplus::Rpc::amfMgmtRpc::Data* DeleteCSINVPRequest::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.data)
  return data_.Mutable(index);
}
inline ::SAFplus::Rpc::amfMgmtRpc::Data* DeleteCSINVPRequest::add_data() {
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SAFplus::Rpc::amfMgmtRpc::Data >&
DeleteCSINVPRequest::data() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SAFplus::Rpc::amfMgmtRpc::Data >*
DeleteCSINVPRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPRequest.data)
  return &data_;
}

// -------------------------------------------------------------------

// DeleteCSINVPResponse

// optional sint32 err = 1;
inline bool DeleteCSINVPResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteCSINVPResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteCSINVPResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteCSINVPResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 DeleteCSINVPResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPResponse.err)
  return err_;
}
inline void DeleteCSINVPResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteCSINVPResponse.err)
}

// -------------------------------------------------------------------

// DeleteNodeSUListRequest

// repeated bytes amfMgmtHandle = 1;
inline int DeleteNodeSUListRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void DeleteNodeSUListRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& DeleteNodeSUListRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* DeleteNodeSUListRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void DeleteNodeSUListRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void DeleteNodeSUListRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.amfMgmtHandle)
}
inline void DeleteNodeSUListRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.amfMgmtHandle)
}
inline ::std::string* DeleteNodeSUListRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void DeleteNodeSUListRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.amfMgmtHandle)
}
inline void DeleteNodeSUListRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.amfMgmtHandle)
}
inline void DeleteNodeSUListRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteNodeSUListRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteNodeSUListRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string nodeName = 2;
inline bool DeleteNodeSUListRequest::has_nodename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteNodeSUListRequest::set_has_nodename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteNodeSUListRequest::clear_has_nodename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteNodeSUListRequest::clear_nodename() {
  if (nodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_->clear();
  }
  clear_has_nodename();
}
inline const ::std::string& DeleteNodeSUListRequest::nodename() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.nodeName)
  return *nodename_;
}
inline void DeleteNodeSUListRequest::set_nodename(const ::std::string& value) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.nodeName)
}
inline void DeleteNodeSUListRequest::set_nodename(const char* value) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.nodeName)
}
inline void DeleteNodeSUListRequest::set_nodename(const char* value, size_t size) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.nodeName)
}
inline ::std::string* DeleteNodeSUListRequest::mutable_nodename() {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.nodeName)
  return nodename_;
}
inline ::std::string* DeleteNodeSUListRequest::release_nodename() {
  clear_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nodename_;
    nodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteNodeSUListRequest::set_allocated_nodename(::std::string* nodename) {
  if (nodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nodename_;
  }
  if (nodename) {
    set_has_nodename();
    nodename_ = nodename;
  } else {
    clear_has_nodename();
    nodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.nodeName)
}

// repeated string suList = 3;
inline int DeleteNodeSUListRequest::sulist_size() const {
  return sulist_.size();
}
inline void DeleteNodeSUListRequest::clear_sulist() {
  sulist_.Clear();
}
inline const ::std::string& DeleteNodeSUListRequest::sulist(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.suList)
  return sulist_.Get(index);
}
inline ::std::string* DeleteNodeSUListRequest::mutable_sulist(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.suList)
  return sulist_.Mutable(index);
}
inline void DeleteNodeSUListRequest::set_sulist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.suList)
  sulist_.Mutable(index)->assign(value);
}
inline void DeleteNodeSUListRequest::set_sulist(int index, const char* value) {
  sulist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.suList)
}
inline void DeleteNodeSUListRequest::set_sulist(int index, const char* value, size_t size) {
  sulist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.suList)
}
inline ::std::string* DeleteNodeSUListRequest::add_sulist() {
  return sulist_.Add();
}
inline void DeleteNodeSUListRequest::add_sulist(const ::std::string& value) {
  sulist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.suList)
}
inline void DeleteNodeSUListRequest::add_sulist(const char* value) {
  sulist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.suList)
}
inline void DeleteNodeSUListRequest::add_sulist(const char* value, size_t size) {
  sulist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.suList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteNodeSUListRequest::sulist() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.suList)
  return sulist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteNodeSUListRequest::mutable_sulist() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListRequest.suList)
  return &sulist_;
}

// -------------------------------------------------------------------

// DeleteNodeSUListResponse

// optional sint32 err = 1;
inline bool DeleteNodeSUListResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteNodeSUListResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteNodeSUListResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteNodeSUListResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 DeleteNodeSUListResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListResponse.err)
  return err_;
}
inline void DeleteNodeSUListResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteNodeSUListResponse.err)
}

// -------------------------------------------------------------------

// DeleteSGSUListRequest

// repeated bytes amfMgmtHandle = 1;
inline int DeleteSGSUListRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void DeleteSGSUListRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& DeleteSGSUListRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* DeleteSGSUListRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void DeleteSGSUListRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void DeleteSGSUListRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.amfMgmtHandle)
}
inline void DeleteSGSUListRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.amfMgmtHandle)
}
inline ::std::string* DeleteSGSUListRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void DeleteSGSUListRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.amfMgmtHandle)
}
inline void DeleteSGSUListRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.amfMgmtHandle)
}
inline void DeleteSGSUListRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteSGSUListRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteSGSUListRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string sgName = 2;
inline bool DeleteSGSUListRequest::has_sgname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteSGSUListRequest::set_has_sgname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteSGSUListRequest::clear_has_sgname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteSGSUListRequest::clear_sgname() {
  if (sgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_->clear();
  }
  clear_has_sgname();
}
inline const ::std::string& DeleteSGSUListRequest::sgname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.sgName)
  return *sgname_;
}
inline void DeleteSGSUListRequest::set_sgname(const ::std::string& value) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.sgName)
}
inline void DeleteSGSUListRequest::set_sgname(const char* value) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.sgName)
}
inline void DeleteSGSUListRequest::set_sgname(const char* value, size_t size) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.sgName)
}
inline ::std::string* DeleteSGSUListRequest::mutable_sgname() {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.sgName)
  return sgname_;
}
inline ::std::string* DeleteSGSUListRequest::release_sgname() {
  clear_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sgname_;
    sgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteSGSUListRequest::set_allocated_sgname(::std::string* sgname) {
  if (sgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sgname_;
  }
  if (sgname) {
    set_has_sgname();
    sgname_ = sgname;
  } else {
    clear_has_sgname();
    sgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.sgName)
}

// repeated string suList = 3;
inline int DeleteSGSUListRequest::sulist_size() const {
  return sulist_.size();
}
inline void DeleteSGSUListRequest::clear_sulist() {
  sulist_.Clear();
}
inline const ::std::string& DeleteSGSUListRequest::sulist(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.suList)
  return sulist_.Get(index);
}
inline ::std::string* DeleteSGSUListRequest::mutable_sulist(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.suList)
  return sulist_.Mutable(index);
}
inline void DeleteSGSUListRequest::set_sulist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.suList)
  sulist_.Mutable(index)->assign(value);
}
inline void DeleteSGSUListRequest::set_sulist(int index, const char* value) {
  sulist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.suList)
}
inline void DeleteSGSUListRequest::set_sulist(int index, const char* value, size_t size) {
  sulist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.suList)
}
inline ::std::string* DeleteSGSUListRequest::add_sulist() {
  return sulist_.Add();
}
inline void DeleteSGSUListRequest::add_sulist(const ::std::string& value) {
  sulist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.suList)
}
inline void DeleteSGSUListRequest::add_sulist(const char* value) {
  sulist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.suList)
}
inline void DeleteSGSUListRequest::add_sulist(const char* value, size_t size) {
  sulist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.suList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteSGSUListRequest::sulist() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.suList)
  return sulist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteSGSUListRequest::mutable_sulist() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListRequest.suList)
  return &sulist_;
}

// -------------------------------------------------------------------

// DeleteSGSUListResponse

// optional sint32 err = 1;
inline bool DeleteSGSUListResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteSGSUListResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteSGSUListResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteSGSUListResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 DeleteSGSUListResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListResponse.err)
  return err_;
}
inline void DeleteSGSUListResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSGSUListResponse.err)
}

// -------------------------------------------------------------------

// DeleteSGSIListRequest

// repeated bytes amfMgmtHandle = 1;
inline int DeleteSGSIListRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void DeleteSGSIListRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& DeleteSGSIListRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* DeleteSGSIListRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void DeleteSGSIListRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void DeleteSGSIListRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.amfMgmtHandle)
}
inline void DeleteSGSIListRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.amfMgmtHandle)
}
inline ::std::string* DeleteSGSIListRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void DeleteSGSIListRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.amfMgmtHandle)
}
inline void DeleteSGSIListRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.amfMgmtHandle)
}
inline void DeleteSGSIListRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteSGSIListRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteSGSIListRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string sgName = 2;
inline bool DeleteSGSIListRequest::has_sgname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteSGSIListRequest::set_has_sgname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteSGSIListRequest::clear_has_sgname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteSGSIListRequest::clear_sgname() {
  if (sgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_->clear();
  }
  clear_has_sgname();
}
inline const ::std::string& DeleteSGSIListRequest::sgname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.sgName)
  return *sgname_;
}
inline void DeleteSGSIListRequest::set_sgname(const ::std::string& value) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.sgName)
}
inline void DeleteSGSIListRequest::set_sgname(const char* value) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.sgName)
}
inline void DeleteSGSIListRequest::set_sgname(const char* value, size_t size) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.sgName)
}
inline ::std::string* DeleteSGSIListRequest::mutable_sgname() {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.sgName)
  return sgname_;
}
inline ::std::string* DeleteSGSIListRequest::release_sgname() {
  clear_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sgname_;
    sgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteSGSIListRequest::set_allocated_sgname(::std::string* sgname) {
  if (sgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sgname_;
  }
  if (sgname) {
    set_has_sgname();
    sgname_ = sgname;
  } else {
    clear_has_sgname();
    sgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.sgName)
}

// repeated string siList = 3;
inline int DeleteSGSIListRequest::silist_size() const {
  return silist_.size();
}
inline void DeleteSGSIListRequest::clear_silist() {
  silist_.Clear();
}
inline const ::std::string& DeleteSGSIListRequest::silist(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.siList)
  return silist_.Get(index);
}
inline ::std::string* DeleteSGSIListRequest::mutable_silist(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.siList)
  return silist_.Mutable(index);
}
inline void DeleteSGSIListRequest::set_silist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.siList)
  silist_.Mutable(index)->assign(value);
}
inline void DeleteSGSIListRequest::set_silist(int index, const char* value) {
  silist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.siList)
}
inline void DeleteSGSIListRequest::set_silist(int index, const char* value, size_t size) {
  silist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.siList)
}
inline ::std::string* DeleteSGSIListRequest::add_silist() {
  return silist_.Add();
}
inline void DeleteSGSIListRequest::add_silist(const ::std::string& value) {
  silist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.siList)
}
inline void DeleteSGSIListRequest::add_silist(const char* value) {
  silist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.siList)
}
inline void DeleteSGSIListRequest::add_silist(const char* value, size_t size) {
  silist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.siList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteSGSIListRequest::silist() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.siList)
  return silist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteSGSIListRequest::mutable_silist() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListRequest.siList)
  return &silist_;
}

// -------------------------------------------------------------------

// DeleteSGSIListResponse

// optional sint32 err = 1;
inline bool DeleteSGSIListResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteSGSIListResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteSGSIListResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteSGSIListResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 DeleteSGSIListResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListResponse.err)
  return err_;
}
inline void DeleteSGSIListResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSGSIListResponse.err)
}

// -------------------------------------------------------------------

// DeleteSUCompListRequest

// repeated bytes amfMgmtHandle = 1;
inline int DeleteSUCompListRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void DeleteSUCompListRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& DeleteSUCompListRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* DeleteSUCompListRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void DeleteSUCompListRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void DeleteSUCompListRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.amfMgmtHandle)
}
inline void DeleteSUCompListRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.amfMgmtHandle)
}
inline ::std::string* DeleteSUCompListRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void DeleteSUCompListRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.amfMgmtHandle)
}
inline void DeleteSUCompListRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.amfMgmtHandle)
}
inline void DeleteSUCompListRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteSUCompListRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteSUCompListRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string suName = 2;
inline bool DeleteSUCompListRequest::has_suname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteSUCompListRequest::set_has_suname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteSUCompListRequest::clear_has_suname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteSUCompListRequest::clear_suname() {
  if (suname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_->clear();
  }
  clear_has_suname();
}
inline const ::std::string& DeleteSUCompListRequest::suname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.suName)
  return *suname_;
}
inline void DeleteSUCompListRequest::set_suname(const ::std::string& value) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.suName)
}
inline void DeleteSUCompListRequest::set_suname(const char* value) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.suName)
}
inline void DeleteSUCompListRequest::set_suname(const char* value, size_t size) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.suName)
}
inline ::std::string* DeleteSUCompListRequest::mutable_suname() {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.suName)
  return suname_;
}
inline ::std::string* DeleteSUCompListRequest::release_suname() {
  clear_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = suname_;
    suname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteSUCompListRequest::set_allocated_suname(::std::string* suname) {
  if (suname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suname_;
  }
  if (suname) {
    set_has_suname();
    suname_ = suname;
  } else {
    clear_has_suname();
    suname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.suName)
}

// repeated string compList = 3;
inline int DeleteSUCompListRequest::complist_size() const {
  return complist_.size();
}
inline void DeleteSUCompListRequest::clear_complist() {
  complist_.Clear();
}
inline const ::std::string& DeleteSUCompListRequest::complist(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.compList)
  return complist_.Get(index);
}
inline ::std::string* DeleteSUCompListRequest::mutable_complist(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.compList)
  return complist_.Mutable(index);
}
inline void DeleteSUCompListRequest::set_complist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.compList)
  complist_.Mutable(index)->assign(value);
}
inline void DeleteSUCompListRequest::set_complist(int index, const char* value) {
  complist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.compList)
}
inline void DeleteSUCompListRequest::set_complist(int index, const char* value, size_t size) {
  complist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.compList)
}
inline ::std::string* DeleteSUCompListRequest::add_complist() {
  return complist_.Add();
}
inline void DeleteSUCompListRequest::add_complist(const ::std::string& value) {
  complist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.compList)
}
inline void DeleteSUCompListRequest::add_complist(const char* value) {
  complist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.compList)
}
inline void DeleteSUCompListRequest::add_complist(const char* value, size_t size) {
  complist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.compList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteSUCompListRequest::complist() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.compList)
  return complist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteSUCompListRequest::mutable_complist() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListRequest.compList)
  return &complist_;
}

// -------------------------------------------------------------------

// DeleteSUCompListResponse

// optional sint32 err = 1;
inline bool DeleteSUCompListResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteSUCompListResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteSUCompListResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteSUCompListResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 DeleteSUCompListResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListResponse.err)
  return err_;
}
inline void DeleteSUCompListResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSUCompListResponse.err)
}

// -------------------------------------------------------------------

// DeleteSICSIListRequest

// repeated bytes amfMgmtHandle = 1;
inline int DeleteSICSIListRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void DeleteSICSIListRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& DeleteSICSIListRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* DeleteSICSIListRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void DeleteSICSIListRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void DeleteSICSIListRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.amfMgmtHandle)
}
inline void DeleteSICSIListRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.amfMgmtHandle)
}
inline ::std::string* DeleteSICSIListRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void DeleteSICSIListRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.amfMgmtHandle)
}
inline void DeleteSICSIListRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.amfMgmtHandle)
}
inline void DeleteSICSIListRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteSICSIListRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteSICSIListRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string siName = 2;
inline bool DeleteSICSIListRequest::has_siname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteSICSIListRequest::set_has_siname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteSICSIListRequest::clear_has_siname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteSICSIListRequest::clear_siname() {
  if (siname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_->clear();
  }
  clear_has_siname();
}
inline const ::std::string& DeleteSICSIListRequest::siname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.siName)
  return *siname_;
}
inline void DeleteSICSIListRequest::set_siname(const ::std::string& value) {
  set_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_ = new ::std::string;
  }
  siname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.siName)
}
inline void DeleteSICSIListRequest::set_siname(const char* value) {
  set_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_ = new ::std::string;
  }
  siname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.siName)
}
inline void DeleteSICSIListRequest::set_siname(const char* value, size_t size) {
  set_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_ = new ::std::string;
  }
  siname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.siName)
}
inline ::std::string* DeleteSICSIListRequest::mutable_siname() {
  set_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.siName)
  return siname_;
}
inline ::std::string* DeleteSICSIListRequest::release_siname() {
  clear_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = siname_;
    siname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteSICSIListRequest::set_allocated_siname(::std::string* siname) {
  if (siname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete siname_;
  }
  if (siname) {
    set_has_siname();
    siname_ = siname;
  } else {
    clear_has_siname();
    siname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.siName)
}

// repeated string csiList = 3;
inline int DeleteSICSIListRequest::csilist_size() const {
  return csilist_.size();
}
inline void DeleteSICSIListRequest::clear_csilist() {
  csilist_.Clear();
}
inline const ::std::string& DeleteSICSIListRequest::csilist(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.csiList)
  return csilist_.Get(index);
}
inline ::std::string* DeleteSICSIListRequest::mutable_csilist(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.csiList)
  return csilist_.Mutable(index);
}
inline void DeleteSICSIListRequest::set_csilist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.csiList)
  csilist_.Mutable(index)->assign(value);
}
inline void DeleteSICSIListRequest::set_csilist(int index, const char* value) {
  csilist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.csiList)
}
inline void DeleteSICSIListRequest::set_csilist(int index, const char* value, size_t size) {
  csilist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.csiList)
}
inline ::std::string* DeleteSICSIListRequest::add_csilist() {
  return csilist_.Add();
}
inline void DeleteSICSIListRequest::add_csilist(const ::std::string& value) {
  csilist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.csiList)
}
inline void DeleteSICSIListRequest::add_csilist(const char* value) {
  csilist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.csiList)
}
inline void DeleteSICSIListRequest::add_csilist(const char* value, size_t size) {
  csilist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.csiList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteSICSIListRequest::csilist() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.csiList)
  return csilist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteSICSIListRequest::mutable_csilist() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListRequest.csiList)
  return &csilist_;
}

// -------------------------------------------------------------------

// DeleteSICSIListResponse

// optional sint32 err = 1;
inline bool DeleteSICSIListResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteSICSIListResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteSICSIListResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteSICSIListResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 DeleteSICSIListResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListResponse.err)
  return err_;
}
inline void DeleteSICSIListResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.DeleteSICSIListResponse.err)
}

// -------------------------------------------------------------------

// LockNodeAssignmentRequest

// repeated bytes amfMgmtHandle = 1;
inline int LockNodeAssignmentRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void LockNodeAssignmentRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& LockNodeAssignmentRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* LockNodeAssignmentRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void LockNodeAssignmentRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void LockNodeAssignmentRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest.amfMgmtHandle)
}
inline void LockNodeAssignmentRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest.amfMgmtHandle)
}
inline ::std::string* LockNodeAssignmentRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void LockNodeAssignmentRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest.amfMgmtHandle)
}
inline void LockNodeAssignmentRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest.amfMgmtHandle)
}
inline void LockNodeAssignmentRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LockNodeAssignmentRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LockNodeAssignmentRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string nodeName = 2;
inline bool LockNodeAssignmentRequest::has_nodename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LockNodeAssignmentRequest::set_has_nodename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LockNodeAssignmentRequest::clear_has_nodename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LockNodeAssignmentRequest::clear_nodename() {
  if (nodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_->clear();
  }
  clear_has_nodename();
}
inline const ::std::string& LockNodeAssignmentRequest::nodename() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest.nodeName)
  return *nodename_;
}
inline void LockNodeAssignmentRequest::set_nodename(const ::std::string& value) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest.nodeName)
}
inline void LockNodeAssignmentRequest::set_nodename(const char* value) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest.nodeName)
}
inline void LockNodeAssignmentRequest::set_nodename(const char* value, size_t size) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest.nodeName)
}
inline ::std::string* LockNodeAssignmentRequest::mutable_nodename() {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest.nodeName)
  return nodename_;
}
inline ::std::string* LockNodeAssignmentRequest::release_nodename() {
  clear_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nodename_;
    nodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LockNodeAssignmentRequest::set_allocated_nodename(::std::string* nodename) {
  if (nodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nodename_;
  }
  if (nodename) {
    set_has_nodename();
    nodename_ = nodename;
  } else {
    clear_has_nodename();
    nodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentRequest.nodeName)
}

// -------------------------------------------------------------------

// LockNodeAssignmentResponse

// optional sint32 err = 1;
inline bool LockNodeAssignmentResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LockNodeAssignmentResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LockNodeAssignmentResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LockNodeAssignmentResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 LockNodeAssignmentResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentResponse.err)
  return err_;
}
inline void LockNodeAssignmentResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockNodeAssignmentResponse.err)
}

// -------------------------------------------------------------------

// LockSGAssignmentRequest

// repeated bytes amfMgmtHandle = 1;
inline int LockSGAssignmentRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void LockSGAssignmentRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& LockSGAssignmentRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* LockSGAssignmentRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void LockSGAssignmentRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void LockSGAssignmentRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest.amfMgmtHandle)
}
inline void LockSGAssignmentRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest.amfMgmtHandle)
}
inline ::std::string* LockSGAssignmentRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void LockSGAssignmentRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest.amfMgmtHandle)
}
inline void LockSGAssignmentRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest.amfMgmtHandle)
}
inline void LockSGAssignmentRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LockSGAssignmentRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LockSGAssignmentRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string sgName = 2;
inline bool LockSGAssignmentRequest::has_sgname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LockSGAssignmentRequest::set_has_sgname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LockSGAssignmentRequest::clear_has_sgname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LockSGAssignmentRequest::clear_sgname() {
  if (sgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_->clear();
  }
  clear_has_sgname();
}
inline const ::std::string& LockSGAssignmentRequest::sgname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest.sgName)
  return *sgname_;
}
inline void LockSGAssignmentRequest::set_sgname(const ::std::string& value) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest.sgName)
}
inline void LockSGAssignmentRequest::set_sgname(const char* value) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest.sgName)
}
inline void LockSGAssignmentRequest::set_sgname(const char* value, size_t size) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest.sgName)
}
inline ::std::string* LockSGAssignmentRequest::mutable_sgname() {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest.sgName)
  return sgname_;
}
inline ::std::string* LockSGAssignmentRequest::release_sgname() {
  clear_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sgname_;
    sgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LockSGAssignmentRequest::set_allocated_sgname(::std::string* sgname) {
  if (sgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sgname_;
  }
  if (sgname) {
    set_has_sgname();
    sgname_ = sgname;
  } else {
    clear_has_sgname();
    sgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentRequest.sgName)
}

// -------------------------------------------------------------------

// LockSGAssignmentResponse

// optional sint32 err = 1;
inline bool LockSGAssignmentResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LockSGAssignmentResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LockSGAssignmentResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LockSGAssignmentResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 LockSGAssignmentResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentResponse.err)
  return err_;
}
inline void LockSGAssignmentResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockSGAssignmentResponse.err)
}

// -------------------------------------------------------------------

// LockSUAssignmentRequest

// repeated bytes amfMgmtHandle = 1;
inline int LockSUAssignmentRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void LockSUAssignmentRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& LockSUAssignmentRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* LockSUAssignmentRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void LockSUAssignmentRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void LockSUAssignmentRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest.amfMgmtHandle)
}
inline void LockSUAssignmentRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest.amfMgmtHandle)
}
inline ::std::string* LockSUAssignmentRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void LockSUAssignmentRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest.amfMgmtHandle)
}
inline void LockSUAssignmentRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest.amfMgmtHandle)
}
inline void LockSUAssignmentRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LockSUAssignmentRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LockSUAssignmentRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string suName = 2;
inline bool LockSUAssignmentRequest::has_suname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LockSUAssignmentRequest::set_has_suname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LockSUAssignmentRequest::clear_has_suname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LockSUAssignmentRequest::clear_suname() {
  if (suname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_->clear();
  }
  clear_has_suname();
}
inline const ::std::string& LockSUAssignmentRequest::suname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest.suName)
  return *suname_;
}
inline void LockSUAssignmentRequest::set_suname(const ::std::string& value) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest.suName)
}
inline void LockSUAssignmentRequest::set_suname(const char* value) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest.suName)
}
inline void LockSUAssignmentRequest::set_suname(const char* value, size_t size) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest.suName)
}
inline ::std::string* LockSUAssignmentRequest::mutable_suname() {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest.suName)
  return suname_;
}
inline ::std::string* LockSUAssignmentRequest::release_suname() {
  clear_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = suname_;
    suname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LockSUAssignmentRequest::set_allocated_suname(::std::string* suname) {
  if (suname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suname_;
  }
  if (suname) {
    set_has_suname();
    suname_ = suname;
  } else {
    clear_has_suname();
    suname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentRequest.suName)
}

// -------------------------------------------------------------------

// LockSUAssignmentResponse

// optional sint32 err = 1;
inline bool LockSUAssignmentResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LockSUAssignmentResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LockSUAssignmentResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LockSUAssignmentResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 LockSUAssignmentResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentResponse.err)
  return err_;
}
inline void LockSUAssignmentResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockSUAssignmentResponse.err)
}

// -------------------------------------------------------------------

// LockSIAssignmentRequest

// repeated bytes amfMgmtHandle = 1;
inline int LockSIAssignmentRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void LockSIAssignmentRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& LockSIAssignmentRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* LockSIAssignmentRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void LockSIAssignmentRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void LockSIAssignmentRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest.amfMgmtHandle)
}
inline void LockSIAssignmentRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest.amfMgmtHandle)
}
inline ::std::string* LockSIAssignmentRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void LockSIAssignmentRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest.amfMgmtHandle)
}
inline void LockSIAssignmentRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest.amfMgmtHandle)
}
inline void LockSIAssignmentRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LockSIAssignmentRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LockSIAssignmentRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string siName = 2;
inline bool LockSIAssignmentRequest::has_siname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LockSIAssignmentRequest::set_has_siname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LockSIAssignmentRequest::clear_has_siname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LockSIAssignmentRequest::clear_siname() {
  if (siname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_->clear();
  }
  clear_has_siname();
}
inline const ::std::string& LockSIAssignmentRequest::siname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest.siName)
  return *siname_;
}
inline void LockSIAssignmentRequest::set_siname(const ::std::string& value) {
  set_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_ = new ::std::string;
  }
  siname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest.siName)
}
inline void LockSIAssignmentRequest::set_siname(const char* value) {
  set_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_ = new ::std::string;
  }
  siname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest.siName)
}
inline void LockSIAssignmentRequest::set_siname(const char* value, size_t size) {
  set_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_ = new ::std::string;
  }
  siname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest.siName)
}
inline ::std::string* LockSIAssignmentRequest::mutable_siname() {
  set_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest.siName)
  return siname_;
}
inline ::std::string* LockSIAssignmentRequest::release_siname() {
  clear_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = siname_;
    siname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LockSIAssignmentRequest::set_allocated_siname(::std::string* siname) {
  if (siname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete siname_;
  }
  if (siname) {
    set_has_siname();
    siname_ = siname;
  } else {
    clear_has_siname();
    siname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentRequest.siName)
}

// -------------------------------------------------------------------

// LockSIAssignmentResponse

// optional sint32 err = 1;
inline bool LockSIAssignmentResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LockSIAssignmentResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LockSIAssignmentResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LockSIAssignmentResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 LockSIAssignmentResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentResponse.err)
  return err_;
}
inline void LockSIAssignmentResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockSIAssignmentResponse.err)
}

// -------------------------------------------------------------------

// LockNodeInstantiationRequest

// repeated bytes amfMgmtHandle = 1;
inline int LockNodeInstantiationRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void LockNodeInstantiationRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& LockNodeInstantiationRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* LockNodeInstantiationRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void LockNodeInstantiationRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void LockNodeInstantiationRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest.amfMgmtHandle)
}
inline void LockNodeInstantiationRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest.amfMgmtHandle)
}
inline ::std::string* LockNodeInstantiationRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void LockNodeInstantiationRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest.amfMgmtHandle)
}
inline void LockNodeInstantiationRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest.amfMgmtHandle)
}
inline void LockNodeInstantiationRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LockNodeInstantiationRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LockNodeInstantiationRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string nodeName = 2;
inline bool LockNodeInstantiationRequest::has_nodename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LockNodeInstantiationRequest::set_has_nodename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LockNodeInstantiationRequest::clear_has_nodename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LockNodeInstantiationRequest::clear_nodename() {
  if (nodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_->clear();
  }
  clear_has_nodename();
}
inline const ::std::string& LockNodeInstantiationRequest::nodename() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest.nodeName)
  return *nodename_;
}
inline void LockNodeInstantiationRequest::set_nodename(const ::std::string& value) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest.nodeName)
}
inline void LockNodeInstantiationRequest::set_nodename(const char* value) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest.nodeName)
}
inline void LockNodeInstantiationRequest::set_nodename(const char* value, size_t size) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest.nodeName)
}
inline ::std::string* LockNodeInstantiationRequest::mutable_nodename() {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest.nodeName)
  return nodename_;
}
inline ::std::string* LockNodeInstantiationRequest::release_nodename() {
  clear_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nodename_;
    nodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LockNodeInstantiationRequest::set_allocated_nodename(::std::string* nodename) {
  if (nodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nodename_;
  }
  if (nodename) {
    set_has_nodename();
    nodename_ = nodename;
  } else {
    clear_has_nodename();
    nodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationRequest.nodeName)
}

// -------------------------------------------------------------------

// LockNodeInstantiationResponse

// optional sint32 err = 1;
inline bool LockNodeInstantiationResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LockNodeInstantiationResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LockNodeInstantiationResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LockNodeInstantiationResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 LockNodeInstantiationResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationResponse.err)
  return err_;
}
inline void LockNodeInstantiationResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockNodeInstantiationResponse.err)
}

// -------------------------------------------------------------------

// LockSGInstantiationRequest

// repeated bytes amfMgmtHandle = 1;
inline int LockSGInstantiationRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void LockSGInstantiationRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& LockSGInstantiationRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* LockSGInstantiationRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void LockSGInstantiationRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void LockSGInstantiationRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest.amfMgmtHandle)
}
inline void LockSGInstantiationRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest.amfMgmtHandle)
}
inline ::std::string* LockSGInstantiationRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void LockSGInstantiationRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest.amfMgmtHandle)
}
inline void LockSGInstantiationRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest.amfMgmtHandle)
}
inline void LockSGInstantiationRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LockSGInstantiationRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LockSGInstantiationRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string sgName = 2;
inline bool LockSGInstantiationRequest::has_sgname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LockSGInstantiationRequest::set_has_sgname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LockSGInstantiationRequest::clear_has_sgname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LockSGInstantiationRequest::clear_sgname() {
  if (sgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_->clear();
  }
  clear_has_sgname();
}
inline const ::std::string& LockSGInstantiationRequest::sgname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest.sgName)
  return *sgname_;
}
inline void LockSGInstantiationRequest::set_sgname(const ::std::string& value) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest.sgName)
}
inline void LockSGInstantiationRequest::set_sgname(const char* value) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest.sgName)
}
inline void LockSGInstantiationRequest::set_sgname(const char* value, size_t size) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest.sgName)
}
inline ::std::string* LockSGInstantiationRequest::mutable_sgname() {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest.sgName)
  return sgname_;
}
inline ::std::string* LockSGInstantiationRequest::release_sgname() {
  clear_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sgname_;
    sgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LockSGInstantiationRequest::set_allocated_sgname(::std::string* sgname) {
  if (sgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sgname_;
  }
  if (sgname) {
    set_has_sgname();
    sgname_ = sgname;
  } else {
    clear_has_sgname();
    sgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationRequest.sgName)
}

// -------------------------------------------------------------------

// LockSGInstantiationResponse

// optional sint32 err = 1;
inline bool LockSGInstantiationResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LockSGInstantiationResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LockSGInstantiationResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LockSGInstantiationResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 LockSGInstantiationResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationResponse.err)
  return err_;
}
inline void LockSGInstantiationResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockSGInstantiationResponse.err)
}

// -------------------------------------------------------------------

// LockSUInstantiationRequest

// repeated bytes amfMgmtHandle = 1;
inline int LockSUInstantiationRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void LockSUInstantiationRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& LockSUInstantiationRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* LockSUInstantiationRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void LockSUInstantiationRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void LockSUInstantiationRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest.amfMgmtHandle)
}
inline void LockSUInstantiationRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest.amfMgmtHandle)
}
inline ::std::string* LockSUInstantiationRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void LockSUInstantiationRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest.amfMgmtHandle)
}
inline void LockSUInstantiationRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest.amfMgmtHandle)
}
inline void LockSUInstantiationRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LockSUInstantiationRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LockSUInstantiationRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string suName = 2;
inline bool LockSUInstantiationRequest::has_suname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LockSUInstantiationRequest::set_has_suname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LockSUInstantiationRequest::clear_has_suname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LockSUInstantiationRequest::clear_suname() {
  if (suname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_->clear();
  }
  clear_has_suname();
}
inline const ::std::string& LockSUInstantiationRequest::suname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest.suName)
  return *suname_;
}
inline void LockSUInstantiationRequest::set_suname(const ::std::string& value) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest.suName)
}
inline void LockSUInstantiationRequest::set_suname(const char* value) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest.suName)
}
inline void LockSUInstantiationRequest::set_suname(const char* value, size_t size) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest.suName)
}
inline ::std::string* LockSUInstantiationRequest::mutable_suname() {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest.suName)
  return suname_;
}
inline ::std::string* LockSUInstantiationRequest::release_suname() {
  clear_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = suname_;
    suname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LockSUInstantiationRequest::set_allocated_suname(::std::string* suname) {
  if (suname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suname_;
  }
  if (suname) {
    set_has_suname();
    suname_ = suname;
  } else {
    clear_has_suname();
    suname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationRequest.suName)
}

// -------------------------------------------------------------------

// LockSUInstantiationResponse

// optional sint32 err = 1;
inline bool LockSUInstantiationResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LockSUInstantiationResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LockSUInstantiationResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LockSUInstantiationResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 LockSUInstantiationResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationResponse.err)
  return err_;
}
inline void LockSUInstantiationResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.LockSUInstantiationResponse.err)
}

// -------------------------------------------------------------------

// UnlockNodeRequest

// repeated bytes amfMgmtHandle = 1;
inline int UnlockNodeRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void UnlockNodeRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& UnlockNodeRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* UnlockNodeRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void UnlockNodeRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void UnlockNodeRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest.amfMgmtHandle)
}
inline void UnlockNodeRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest.amfMgmtHandle)
}
inline ::std::string* UnlockNodeRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void UnlockNodeRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest.amfMgmtHandle)
}
inline void UnlockNodeRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest.amfMgmtHandle)
}
inline void UnlockNodeRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UnlockNodeRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UnlockNodeRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string nodeName = 2;
inline bool UnlockNodeRequest::has_nodename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnlockNodeRequest::set_has_nodename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnlockNodeRequest::clear_has_nodename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnlockNodeRequest::clear_nodename() {
  if (nodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_->clear();
  }
  clear_has_nodename();
}
inline const ::std::string& UnlockNodeRequest::nodename() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest.nodeName)
  return *nodename_;
}
inline void UnlockNodeRequest::set_nodename(const ::std::string& value) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest.nodeName)
}
inline void UnlockNodeRequest::set_nodename(const char* value) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest.nodeName)
}
inline void UnlockNodeRequest::set_nodename(const char* value, size_t size) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest.nodeName)
}
inline ::std::string* UnlockNodeRequest::mutable_nodename() {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest.nodeName)
  return nodename_;
}
inline ::std::string* UnlockNodeRequest::release_nodename() {
  clear_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nodename_;
    nodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UnlockNodeRequest::set_allocated_nodename(::std::string* nodename) {
  if (nodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nodename_;
  }
  if (nodename) {
    set_has_nodename();
    nodename_ = nodename;
  } else {
    clear_has_nodename();
    nodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.UnlockNodeRequest.nodeName)
}

// -------------------------------------------------------------------

// UnlockNodeResponse

// optional sint32 err = 1;
inline bool UnlockNodeResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnlockNodeResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnlockNodeResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnlockNodeResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 UnlockNodeResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UnlockNodeResponse.err)
  return err_;
}
inline void UnlockNodeResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UnlockNodeResponse.err)
}

// -------------------------------------------------------------------

// UnlockSGRequest

// repeated bytes amfMgmtHandle = 1;
inline int UnlockSGRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void UnlockSGRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& UnlockSGRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* UnlockSGRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void UnlockSGRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void UnlockSGRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest.amfMgmtHandle)
}
inline void UnlockSGRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest.amfMgmtHandle)
}
inline ::std::string* UnlockSGRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void UnlockSGRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest.amfMgmtHandle)
}
inline void UnlockSGRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest.amfMgmtHandle)
}
inline void UnlockSGRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UnlockSGRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UnlockSGRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string sgName = 2;
inline bool UnlockSGRequest::has_sgname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnlockSGRequest::set_has_sgname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnlockSGRequest::clear_has_sgname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnlockSGRequest::clear_sgname() {
  if (sgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_->clear();
  }
  clear_has_sgname();
}
inline const ::std::string& UnlockSGRequest::sgname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest.sgName)
  return *sgname_;
}
inline void UnlockSGRequest::set_sgname(const ::std::string& value) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest.sgName)
}
inline void UnlockSGRequest::set_sgname(const char* value) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest.sgName)
}
inline void UnlockSGRequest::set_sgname(const char* value, size_t size) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest.sgName)
}
inline ::std::string* UnlockSGRequest::mutable_sgname() {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest.sgName)
  return sgname_;
}
inline ::std::string* UnlockSGRequest::release_sgname() {
  clear_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sgname_;
    sgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UnlockSGRequest::set_allocated_sgname(::std::string* sgname) {
  if (sgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sgname_;
  }
  if (sgname) {
    set_has_sgname();
    sgname_ = sgname;
  } else {
    clear_has_sgname();
    sgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.UnlockSGRequest.sgName)
}

// -------------------------------------------------------------------

// UnlockSGResponse

// optional sint32 err = 1;
inline bool UnlockSGResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnlockSGResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnlockSGResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnlockSGResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 UnlockSGResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UnlockSGResponse.err)
  return err_;
}
inline void UnlockSGResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UnlockSGResponse.err)
}

// -------------------------------------------------------------------

// UnlockSURequest

// repeated bytes amfMgmtHandle = 1;
inline int UnlockSURequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void UnlockSURequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& UnlockSURequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* UnlockSURequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void UnlockSURequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void UnlockSURequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest.amfMgmtHandle)
}
inline void UnlockSURequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest.amfMgmtHandle)
}
inline ::std::string* UnlockSURequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void UnlockSURequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest.amfMgmtHandle)
}
inline void UnlockSURequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest.amfMgmtHandle)
}
inline void UnlockSURequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UnlockSURequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UnlockSURequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string suName = 2;
inline bool UnlockSURequest::has_suname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnlockSURequest::set_has_suname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnlockSURequest::clear_has_suname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnlockSURequest::clear_suname() {
  if (suname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_->clear();
  }
  clear_has_suname();
}
inline const ::std::string& UnlockSURequest::suname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest.suName)
  return *suname_;
}
inline void UnlockSURequest::set_suname(const ::std::string& value) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest.suName)
}
inline void UnlockSURequest::set_suname(const char* value) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest.suName)
}
inline void UnlockSURequest::set_suname(const char* value, size_t size) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest.suName)
}
inline ::std::string* UnlockSURequest::mutable_suname() {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest.suName)
  return suname_;
}
inline ::std::string* UnlockSURequest::release_suname() {
  clear_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = suname_;
    suname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UnlockSURequest::set_allocated_suname(::std::string* suname) {
  if (suname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suname_;
  }
  if (suname) {
    set_has_suname();
    suname_ = suname;
  } else {
    clear_has_suname();
    suname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.UnlockSURequest.suName)
}

// -------------------------------------------------------------------

// UnlockSUResponse

// optional sint32 err = 1;
inline bool UnlockSUResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnlockSUResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnlockSUResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnlockSUResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 UnlockSUResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UnlockSUResponse.err)
  return err_;
}
inline void UnlockSUResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UnlockSUResponse.err)
}

// -------------------------------------------------------------------

// UnlockSIRequest

// repeated bytes amfMgmtHandle = 1;
inline int UnlockSIRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void UnlockSIRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& UnlockSIRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* UnlockSIRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void UnlockSIRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void UnlockSIRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest.amfMgmtHandle)
}
inline void UnlockSIRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest.amfMgmtHandle)
}
inline ::std::string* UnlockSIRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void UnlockSIRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest.amfMgmtHandle)
}
inline void UnlockSIRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest.amfMgmtHandle)
}
inline void UnlockSIRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UnlockSIRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UnlockSIRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string siName = 2;
inline bool UnlockSIRequest::has_siname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnlockSIRequest::set_has_siname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnlockSIRequest::clear_has_siname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnlockSIRequest::clear_siname() {
  if (siname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_->clear();
  }
  clear_has_siname();
}
inline const ::std::string& UnlockSIRequest::siname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest.siName)
  return *siname_;
}
inline void UnlockSIRequest::set_siname(const ::std::string& value) {
  set_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_ = new ::std::string;
  }
  siname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest.siName)
}
inline void UnlockSIRequest::set_siname(const char* value) {
  set_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_ = new ::std::string;
  }
  siname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest.siName)
}
inline void UnlockSIRequest::set_siname(const char* value, size_t size) {
  set_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_ = new ::std::string;
  }
  siname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest.siName)
}
inline ::std::string* UnlockSIRequest::mutable_siname() {
  set_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest.siName)
  return siname_;
}
inline ::std::string* UnlockSIRequest::release_siname() {
  clear_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = siname_;
    siname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UnlockSIRequest::set_allocated_siname(::std::string* siname) {
  if (siname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete siname_;
  }
  if (siname) {
    set_has_siname();
    siname_ = siname;
  } else {
    clear_has_siname();
    siname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.UnlockSIRequest.siName)
}

// -------------------------------------------------------------------

// UnlockSIResponse

// optional sint32 err = 1;
inline bool UnlockSIResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnlockSIResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnlockSIResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnlockSIResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 UnlockSIResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.UnlockSIResponse.err)
  return err_;
}
inline void UnlockSIResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.UnlockSIResponse.err)
}

// -------------------------------------------------------------------

// RepairNodeRequest

// repeated bytes amfMgmtHandle = 1;
inline int RepairNodeRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void RepairNodeRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& RepairNodeRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* RepairNodeRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void RepairNodeRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void RepairNodeRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest.amfMgmtHandle)
}
inline void RepairNodeRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest.amfMgmtHandle)
}
inline ::std::string* RepairNodeRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void RepairNodeRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest.amfMgmtHandle)
}
inline void RepairNodeRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest.amfMgmtHandle)
}
inline void RepairNodeRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RepairNodeRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RepairNodeRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string nodeName = 2;
inline bool RepairNodeRequest::has_nodename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RepairNodeRequest::set_has_nodename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RepairNodeRequest::clear_has_nodename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RepairNodeRequest::clear_nodename() {
  if (nodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_->clear();
  }
  clear_has_nodename();
}
inline const ::std::string& RepairNodeRequest::nodename() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest.nodeName)
  return *nodename_;
}
inline void RepairNodeRequest::set_nodename(const ::std::string& value) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest.nodeName)
}
inline void RepairNodeRequest::set_nodename(const char* value) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest.nodeName)
}
inline void RepairNodeRequest::set_nodename(const char* value, size_t size) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest.nodeName)
}
inline ::std::string* RepairNodeRequest::mutable_nodename() {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest.nodeName)
  return nodename_;
}
inline ::std::string* RepairNodeRequest::release_nodename() {
  clear_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nodename_;
    nodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RepairNodeRequest::set_allocated_nodename(::std::string* nodename) {
  if (nodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nodename_;
  }
  if (nodename) {
    set_has_nodename();
    nodename_ = nodename;
  } else {
    clear_has_nodename();
    nodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.RepairNodeRequest.nodeName)
}

// -------------------------------------------------------------------

// RepairNodeResponse

// optional sint32 err = 1;
inline bool RepairNodeResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RepairNodeResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RepairNodeResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RepairNodeResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 RepairNodeResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.RepairNodeResponse.err)
  return err_;
}
inline void RepairNodeResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.RepairNodeResponse.err)
}

// -------------------------------------------------------------------

// RepairComponentRequest

// repeated bytes amfMgmtHandle = 1;
inline int RepairComponentRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void RepairComponentRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& RepairComponentRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* RepairComponentRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void RepairComponentRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void RepairComponentRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest.amfMgmtHandle)
}
inline void RepairComponentRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest.amfMgmtHandle)
}
inline ::std::string* RepairComponentRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void RepairComponentRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest.amfMgmtHandle)
}
inline void RepairComponentRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest.amfMgmtHandle)
}
inline void RepairComponentRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RepairComponentRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RepairComponentRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string compName = 2;
inline bool RepairComponentRequest::has_compname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RepairComponentRequest::set_has_compname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RepairComponentRequest::clear_has_compname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RepairComponentRequest::clear_compname() {
  if (compname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compname_->clear();
  }
  clear_has_compname();
}
inline const ::std::string& RepairComponentRequest::compname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest.compName)
  return *compname_;
}
inline void RepairComponentRequest::set_compname(const ::std::string& value) {
  set_has_compname();
  if (compname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compname_ = new ::std::string;
  }
  compname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest.compName)
}
inline void RepairComponentRequest::set_compname(const char* value) {
  set_has_compname();
  if (compname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compname_ = new ::std::string;
  }
  compname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest.compName)
}
inline void RepairComponentRequest::set_compname(const char* value, size_t size) {
  set_has_compname();
  if (compname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compname_ = new ::std::string;
  }
  compname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest.compName)
}
inline ::std::string* RepairComponentRequest::mutable_compname() {
  set_has_compname();
  if (compname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest.compName)
  return compname_;
}
inline ::std::string* RepairComponentRequest::release_compname() {
  clear_has_compname();
  if (compname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = compname_;
    compname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RepairComponentRequest::set_allocated_compname(::std::string* compname) {
  if (compname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compname_;
  }
  if (compname) {
    set_has_compname();
    compname_ = compname;
  } else {
    clear_has_compname();
    compname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.RepairComponentRequest.compName)
}

// -------------------------------------------------------------------

// RepairComponentResponse

// optional sint32 err = 1;
inline bool RepairComponentResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RepairComponentResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RepairComponentResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RepairComponentResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 RepairComponentResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.RepairComponentResponse.err)
  return err_;
}
inline void RepairComponentResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.RepairComponentResponse.err)
}

// -------------------------------------------------------------------

// RepairSURequest

// repeated bytes amfMgmtHandle = 1;
inline int RepairSURequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void RepairSURequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& RepairSURequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.RepairSURequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* RepairSURequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.RepairSURequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void RepairSURequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.RepairSURequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void RepairSURequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.RepairSURequest.amfMgmtHandle)
}
inline void RepairSURequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.RepairSURequest.amfMgmtHandle)
}
inline ::std::string* RepairSURequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void RepairSURequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.RepairSURequest.amfMgmtHandle)
}
inline void RepairSURequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.RepairSURequest.amfMgmtHandle)
}
inline void RepairSURequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.RepairSURequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RepairSURequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.RepairSURequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RepairSURequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.RepairSURequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string suName = 2;
inline bool RepairSURequest::has_suname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RepairSURequest::set_has_suname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RepairSURequest::clear_has_suname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RepairSURequest::clear_suname() {
  if (suname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_->clear();
  }
  clear_has_suname();
}
inline const ::std::string& RepairSURequest::suname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.RepairSURequest.suName)
  return *suname_;
}
inline void RepairSURequest::set_suname(const ::std::string& value) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.RepairSURequest.suName)
}
inline void RepairSURequest::set_suname(const char* value) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.RepairSURequest.suName)
}
inline void RepairSURequest::set_suname(const char* value, size_t size) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.RepairSURequest.suName)
}
inline ::std::string* RepairSURequest::mutable_suname() {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.RepairSURequest.suName)
  return suname_;
}
inline ::std::string* RepairSURequest::release_suname() {
  clear_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = suname_;
    suname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RepairSURequest::set_allocated_suname(::std::string* suname) {
  if (suname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suname_;
  }
  if (suname) {
    set_has_suname();
    suname_ = suname;
  } else {
    clear_has_suname();
    suname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.RepairSURequest.suName)
}

// -------------------------------------------------------------------

// RepairSUResponse

// optional sint32 err = 1;
inline bool RepairSUResponse::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RepairSUResponse::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RepairSUResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RepairSUResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 RepairSUResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.RepairSUResponse.err)
  return err_;
}
inline void RepairSUResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.RepairSUResponse.err)
}

// -------------------------------------------------------------------

// GetComponentConfigRequest

// repeated bytes amfMgmtHandle = 1;
inline int GetComponentConfigRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void GetComponentConfigRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& GetComponentConfigRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* GetComponentConfigRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void GetComponentConfigRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void GetComponentConfigRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest.amfMgmtHandle)
}
inline void GetComponentConfigRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest.amfMgmtHandle)
}
inline ::std::string* GetComponentConfigRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void GetComponentConfigRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest.amfMgmtHandle)
}
inline void GetComponentConfigRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest.amfMgmtHandle)
}
inline void GetComponentConfigRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetComponentConfigRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetComponentConfigRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string compName = 2;
inline bool GetComponentConfigRequest::has_compname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetComponentConfigRequest::set_has_compname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetComponentConfigRequest::clear_has_compname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetComponentConfigRequest::clear_compname() {
  if (compname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compname_->clear();
  }
  clear_has_compname();
}
inline const ::std::string& GetComponentConfigRequest::compname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest.compName)
  return *compname_;
}
inline void GetComponentConfigRequest::set_compname(const ::std::string& value) {
  set_has_compname();
  if (compname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compname_ = new ::std::string;
  }
  compname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest.compName)
}
inline void GetComponentConfigRequest::set_compname(const char* value) {
  set_has_compname();
  if (compname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compname_ = new ::std::string;
  }
  compname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest.compName)
}
inline void GetComponentConfigRequest::set_compname(const char* value, size_t size) {
  set_has_compname();
  if (compname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compname_ = new ::std::string;
  }
  compname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest.compName)
}
inline ::std::string* GetComponentConfigRequest::mutable_compname() {
  set_has_compname();
  if (compname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest.compName)
  return compname_;
}
inline ::std::string* GetComponentConfigRequest::release_compname() {
  clear_has_compname();
  if (compname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = compname_;
    compname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetComponentConfigRequest::set_allocated_compname(::std::string* compname) {
  if (compname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compname_;
  }
  if (compname) {
    set_has_compname();
    compname_ = compname;
  } else {
    clear_has_compname();
    compname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigRequest.compName)
}

// -------------------------------------------------------------------

// GetComponentConfigResponse

// optional .SAFplus.Rpc.amfMgmtRpc.ComponentConfig ComponentConfig = 1;
inline bool GetComponentConfigResponse::has_componentconfig() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetComponentConfigResponse::set_has_componentconfig() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetComponentConfigResponse::clear_has_componentconfig() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetComponentConfigResponse::clear_componentconfig() {
  if (componentconfig_ != NULL) componentconfig_->::SAFplus::Rpc::amfMgmtRpc::ComponentConfig::Clear();
  clear_has_componentconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig& GetComponentConfigResponse::componentconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigResponse.ComponentConfig)
  return componentconfig_ != NULL ? *componentconfig_ : *default_instance_->componentconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* GetComponentConfigResponse::mutable_componentconfig() {
  set_has_componentconfig();
  if (componentconfig_ == NULL) componentconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigResponse.ComponentConfig)
  return componentconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* GetComponentConfigResponse::release_componentconfig() {
  clear_has_componentconfig();
  ::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* temp = componentconfig_;
  componentconfig_ = NULL;
  return temp;
}
inline void GetComponentConfigResponse::set_allocated_componentconfig(::SAFplus::Rpc::amfMgmtRpc::ComponentConfig* componentconfig) {
  delete componentconfig_;
  componentconfig_ = componentconfig;
  if (componentconfig) {
    set_has_componentconfig();
  } else {
    clear_has_componentconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigResponse.ComponentConfig)
}

// optional sint32 err = 2;
inline bool GetComponentConfigResponse::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetComponentConfigResponse::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetComponentConfigResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetComponentConfigResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 GetComponentConfigResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigResponse.err)
  return err_;
}
inline void GetComponentConfigResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetComponentConfigResponse.err)
}

// -------------------------------------------------------------------

// GetNodeConfigRequest

// repeated bytes amfMgmtHandle = 1;
inline int GetNodeConfigRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void GetNodeConfigRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& GetNodeConfigRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* GetNodeConfigRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void GetNodeConfigRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void GetNodeConfigRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest.amfMgmtHandle)
}
inline void GetNodeConfigRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest.amfMgmtHandle)
}
inline ::std::string* GetNodeConfigRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void GetNodeConfigRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest.amfMgmtHandle)
}
inline void GetNodeConfigRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest.amfMgmtHandle)
}
inline void GetNodeConfigRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetNodeConfigRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetNodeConfigRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string nodeName = 2;
inline bool GetNodeConfigRequest::has_nodename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetNodeConfigRequest::set_has_nodename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetNodeConfigRequest::clear_has_nodename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetNodeConfigRequest::clear_nodename() {
  if (nodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_->clear();
  }
  clear_has_nodename();
}
inline const ::std::string& GetNodeConfigRequest::nodename() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest.nodeName)
  return *nodename_;
}
inline void GetNodeConfigRequest::set_nodename(const ::std::string& value) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest.nodeName)
}
inline void GetNodeConfigRequest::set_nodename(const char* value) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest.nodeName)
}
inline void GetNodeConfigRequest::set_nodename(const char* value, size_t size) {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  nodename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest.nodeName)
}
inline ::std::string* GetNodeConfigRequest::mutable_nodename() {
  set_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nodename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest.nodeName)
  return nodename_;
}
inline ::std::string* GetNodeConfigRequest::release_nodename() {
  clear_has_nodename();
  if (nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nodename_;
    nodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetNodeConfigRequest::set_allocated_nodename(::std::string* nodename) {
  if (nodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nodename_;
  }
  if (nodename) {
    set_has_nodename();
    nodename_ = nodename;
  } else {
    clear_has_nodename();
    nodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigRequest.nodeName)
}

// -------------------------------------------------------------------

// GetNodeConfigResponse

// optional .SAFplus.Rpc.amfMgmtRpc.NodeConfig NodeConfig = 1;
inline bool GetNodeConfigResponse::has_nodeconfig() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetNodeConfigResponse::set_has_nodeconfig() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetNodeConfigResponse::clear_has_nodeconfig() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetNodeConfigResponse::clear_nodeconfig() {
  if (nodeconfig_ != NULL) nodeconfig_->::SAFplus::Rpc::amfMgmtRpc::NodeConfig::Clear();
  clear_has_nodeconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::NodeConfig& GetNodeConfigResponse::nodeconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigResponse.NodeConfig)
  return nodeconfig_ != NULL ? *nodeconfig_ : *default_instance_->nodeconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* GetNodeConfigResponse::mutable_nodeconfig() {
  set_has_nodeconfig();
  if (nodeconfig_ == NULL) nodeconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::NodeConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigResponse.NodeConfig)
  return nodeconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* GetNodeConfigResponse::release_nodeconfig() {
  clear_has_nodeconfig();
  ::SAFplus::Rpc::amfMgmtRpc::NodeConfig* temp = nodeconfig_;
  nodeconfig_ = NULL;
  return temp;
}
inline void GetNodeConfigResponse::set_allocated_nodeconfig(::SAFplus::Rpc::amfMgmtRpc::NodeConfig* nodeconfig) {
  delete nodeconfig_;
  nodeconfig_ = nodeconfig;
  if (nodeconfig) {
    set_has_nodeconfig();
  } else {
    clear_has_nodeconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigResponse.NodeConfig)
}

// optional sint32 err = 2;
inline bool GetNodeConfigResponse::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetNodeConfigResponse::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetNodeConfigResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetNodeConfigResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 GetNodeConfigResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigResponse.err)
  return err_;
}
inline void GetNodeConfigResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetNodeConfigResponse.err)
}

// -------------------------------------------------------------------

// GetSUConfigRequest

// repeated bytes amfMgmtHandle = 1;
inline int GetSUConfigRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void GetSUConfigRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& GetSUConfigRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* GetSUConfigRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void GetSUConfigRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void GetSUConfigRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest.amfMgmtHandle)
}
inline void GetSUConfigRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest.amfMgmtHandle)
}
inline ::std::string* GetSUConfigRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void GetSUConfigRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest.amfMgmtHandle)
}
inline void GetSUConfigRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest.amfMgmtHandle)
}
inline void GetSUConfigRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetSUConfigRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetSUConfigRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string suName = 2;
inline bool GetSUConfigRequest::has_suname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetSUConfigRequest::set_has_suname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetSUConfigRequest::clear_has_suname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetSUConfigRequest::clear_suname() {
  if (suname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_->clear();
  }
  clear_has_suname();
}
inline const ::std::string& GetSUConfigRequest::suname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest.suName)
  return *suname_;
}
inline void GetSUConfigRequest::set_suname(const ::std::string& value) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest.suName)
}
inline void GetSUConfigRequest::set_suname(const char* value) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest.suName)
}
inline void GetSUConfigRequest::set_suname(const char* value, size_t size) {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  suname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest.suName)
}
inline ::std::string* GetSUConfigRequest::mutable_suname() {
  set_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest.suName)
  return suname_;
}
inline ::std::string* GetSUConfigRequest::release_suname() {
  clear_has_suname();
  if (suname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = suname_;
    suname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetSUConfigRequest::set_allocated_suname(::std::string* suname) {
  if (suname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suname_;
  }
  if (suname) {
    set_has_suname();
    suname_ = suname;
  } else {
    clear_has_suname();
    suname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.GetSUConfigRequest.suName)
}

// -------------------------------------------------------------------

// GetSUConfigResponse

// optional .SAFplus.Rpc.amfMgmtRpc.ServiceUnitConfig ServiceUnitConfig = 1;
inline bool GetSUConfigResponse::has_serviceunitconfig() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSUConfigResponse::set_has_serviceunitconfig() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSUConfigResponse::clear_has_serviceunitconfig() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSUConfigResponse::clear_serviceunitconfig() {
  if (serviceunitconfig_ != NULL) serviceunitconfig_->::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig::Clear();
  clear_has_serviceunitconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig& GetSUConfigResponse::serviceunitconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetSUConfigResponse.ServiceUnitConfig)
  return serviceunitconfig_ != NULL ? *serviceunitconfig_ : *default_instance_->serviceunitconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* GetSUConfigResponse::mutable_serviceunitconfig() {
  set_has_serviceunitconfig();
  if (serviceunitconfig_ == NULL) serviceunitconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetSUConfigResponse.ServiceUnitConfig)
  return serviceunitconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* GetSUConfigResponse::release_serviceunitconfig() {
  clear_has_serviceunitconfig();
  ::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* temp = serviceunitconfig_;
  serviceunitconfig_ = NULL;
  return temp;
}
inline void GetSUConfigResponse::set_allocated_serviceunitconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceUnitConfig* serviceunitconfig) {
  delete serviceunitconfig_;
  serviceunitconfig_ = serviceunitconfig;
  if (serviceunitconfig) {
    set_has_serviceunitconfig();
  } else {
    clear_has_serviceunitconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.GetSUConfigResponse.ServiceUnitConfig)
}

// optional sint32 err = 2;
inline bool GetSUConfigResponse::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetSUConfigResponse::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetSUConfigResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetSUConfigResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 GetSUConfigResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetSUConfigResponse.err)
  return err_;
}
inline void GetSUConfigResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetSUConfigResponse.err)
}

// -------------------------------------------------------------------

// GetSGConfigRequest

// repeated bytes amfMgmtHandle = 1;
inline int GetSGConfigRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void GetSGConfigRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& GetSGConfigRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* GetSGConfigRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void GetSGConfigRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void GetSGConfigRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest.amfMgmtHandle)
}
inline void GetSGConfigRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest.amfMgmtHandle)
}
inline ::std::string* GetSGConfigRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void GetSGConfigRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest.amfMgmtHandle)
}
inline void GetSGConfigRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest.amfMgmtHandle)
}
inline void GetSGConfigRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetSGConfigRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetSGConfigRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string sgName = 2;
inline bool GetSGConfigRequest::has_sgname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetSGConfigRequest::set_has_sgname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetSGConfigRequest::clear_has_sgname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetSGConfigRequest::clear_sgname() {
  if (sgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_->clear();
  }
  clear_has_sgname();
}
inline const ::std::string& GetSGConfigRequest::sgname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest.sgName)
  return *sgname_;
}
inline void GetSGConfigRequest::set_sgname(const ::std::string& value) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest.sgName)
}
inline void GetSGConfigRequest::set_sgname(const char* value) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest.sgName)
}
inline void GetSGConfigRequest::set_sgname(const char* value, size_t size) {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  sgname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest.sgName)
}
inline ::std::string* GetSGConfigRequest::mutable_sgname() {
  set_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sgname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest.sgName)
  return sgname_;
}
inline ::std::string* GetSGConfigRequest::release_sgname() {
  clear_has_sgname();
  if (sgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sgname_;
    sgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetSGConfigRequest::set_allocated_sgname(::std::string* sgname) {
  if (sgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sgname_;
  }
  if (sgname) {
    set_has_sgname();
    sgname_ = sgname;
  } else {
    clear_has_sgname();
    sgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.GetSGConfigRequest.sgName)
}

// -------------------------------------------------------------------

// GetSGConfigResponse

// optional .SAFplus.Rpc.amfMgmtRpc.ServiceGroupConfig ServiceGroupConfig = 1;
inline bool GetSGConfigResponse::has_servicegroupconfig() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSGConfigResponse::set_has_servicegroupconfig() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSGConfigResponse::clear_has_servicegroupconfig() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSGConfigResponse::clear_servicegroupconfig() {
  if (servicegroupconfig_ != NULL) servicegroupconfig_->::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig::Clear();
  clear_has_servicegroupconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig& GetSGConfigResponse::servicegroupconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetSGConfigResponse.ServiceGroupConfig)
  return servicegroupconfig_ != NULL ? *servicegroupconfig_ : *default_instance_->servicegroupconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* GetSGConfigResponse::mutable_servicegroupconfig() {
  set_has_servicegroupconfig();
  if (servicegroupconfig_ == NULL) servicegroupconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetSGConfigResponse.ServiceGroupConfig)
  return servicegroupconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* GetSGConfigResponse::release_servicegroupconfig() {
  clear_has_servicegroupconfig();
  ::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* temp = servicegroupconfig_;
  servicegroupconfig_ = NULL;
  return temp;
}
inline void GetSGConfigResponse::set_allocated_servicegroupconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceGroupConfig* servicegroupconfig) {
  delete servicegroupconfig_;
  servicegroupconfig_ = servicegroupconfig;
  if (servicegroupconfig) {
    set_has_servicegroupconfig();
  } else {
    clear_has_servicegroupconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.GetSGConfigResponse.ServiceGroupConfig)
}

// optional sint32 err = 2;
inline bool GetSGConfigResponse::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetSGConfigResponse::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetSGConfigResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetSGConfigResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 GetSGConfigResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetSGConfigResponse.err)
  return err_;
}
inline void GetSGConfigResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetSGConfigResponse.err)
}

// -------------------------------------------------------------------

// GetSIConfigRequest

// repeated bytes amfMgmtHandle = 1;
inline int GetSIConfigRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void GetSIConfigRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& GetSIConfigRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* GetSIConfigRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void GetSIConfigRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void GetSIConfigRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest.amfMgmtHandle)
}
inline void GetSIConfigRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest.amfMgmtHandle)
}
inline ::std::string* GetSIConfigRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void GetSIConfigRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest.amfMgmtHandle)
}
inline void GetSIConfigRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest.amfMgmtHandle)
}
inline void GetSIConfigRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetSIConfigRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetSIConfigRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string siName = 2;
inline bool GetSIConfigRequest::has_siname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetSIConfigRequest::set_has_siname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetSIConfigRequest::clear_has_siname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetSIConfigRequest::clear_siname() {
  if (siname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_->clear();
  }
  clear_has_siname();
}
inline const ::std::string& GetSIConfigRequest::siname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest.siName)
  return *siname_;
}
inline void GetSIConfigRequest::set_siname(const ::std::string& value) {
  set_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_ = new ::std::string;
  }
  siname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest.siName)
}
inline void GetSIConfigRequest::set_siname(const char* value) {
  set_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_ = new ::std::string;
  }
  siname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest.siName)
}
inline void GetSIConfigRequest::set_siname(const char* value, size_t size) {
  set_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_ = new ::std::string;
  }
  siname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest.siName)
}
inline ::std::string* GetSIConfigRequest::mutable_siname() {
  set_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    siname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest.siName)
  return siname_;
}
inline ::std::string* GetSIConfigRequest::release_siname() {
  clear_has_siname();
  if (siname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = siname_;
    siname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetSIConfigRequest::set_allocated_siname(::std::string* siname) {
  if (siname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete siname_;
  }
  if (siname) {
    set_has_siname();
    siname_ = siname;
  } else {
    clear_has_siname();
    siname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.GetSIConfigRequest.siName)
}

// -------------------------------------------------------------------

// GetSIConfigResponse

// optional .SAFplus.Rpc.amfMgmtRpc.ServiceInstanceConfig ServiceInstanceConfig = 1;
inline bool GetSIConfigResponse::has_serviceinstanceconfig() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSIConfigResponse::set_has_serviceinstanceconfig() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSIConfigResponse::clear_has_serviceinstanceconfig() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSIConfigResponse::clear_serviceinstanceconfig() {
  if (serviceinstanceconfig_ != NULL) serviceinstanceconfig_->::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig::Clear();
  clear_has_serviceinstanceconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig& GetSIConfigResponse::serviceinstanceconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetSIConfigResponse.ServiceInstanceConfig)
  return serviceinstanceconfig_ != NULL ? *serviceinstanceconfig_ : *default_instance_->serviceinstanceconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* GetSIConfigResponse::mutable_serviceinstanceconfig() {
  set_has_serviceinstanceconfig();
  if (serviceinstanceconfig_ == NULL) serviceinstanceconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetSIConfigResponse.ServiceInstanceConfig)
  return serviceinstanceconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* GetSIConfigResponse::release_serviceinstanceconfig() {
  clear_has_serviceinstanceconfig();
  ::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* temp = serviceinstanceconfig_;
  serviceinstanceconfig_ = NULL;
  return temp;
}
inline void GetSIConfigResponse::set_allocated_serviceinstanceconfig(::SAFplus::Rpc::amfMgmtRpc::ServiceInstanceConfig* serviceinstanceconfig) {
  delete serviceinstanceconfig_;
  serviceinstanceconfig_ = serviceinstanceconfig;
  if (serviceinstanceconfig) {
    set_has_serviceinstanceconfig();
  } else {
    clear_has_serviceinstanceconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.GetSIConfigResponse.ServiceInstanceConfig)
}

// optional sint32 err = 2;
inline bool GetSIConfigResponse::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetSIConfigResponse::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetSIConfigResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetSIConfigResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 GetSIConfigResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetSIConfigResponse.err)
  return err_;
}
inline void GetSIConfigResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetSIConfigResponse.err)
}

// -------------------------------------------------------------------

// GetCSIConfigRequest

// repeated bytes amfMgmtHandle = 1;
inline int GetCSIConfigRequest::amfmgmthandle_size() const {
  return amfmgmthandle_.size();
}
inline void GetCSIConfigRequest::clear_amfmgmthandle() {
  amfmgmthandle_.Clear();
}
inline const ::std::string& GetCSIConfigRequest::amfmgmthandle(int index) const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest.amfMgmtHandle)
  return amfmgmthandle_.Get(index);
}
inline ::std::string* GetCSIConfigRequest::mutable_amfmgmthandle(int index) {
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest.amfMgmtHandle)
  return amfmgmthandle_.Mutable(index);
}
inline void GetCSIConfigRequest::set_amfmgmthandle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest.amfMgmtHandle)
  amfmgmthandle_.Mutable(index)->assign(value);
}
inline void GetCSIConfigRequest::set_amfmgmthandle(int index, const char* value) {
  amfmgmthandle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest.amfMgmtHandle)
}
inline void GetCSIConfigRequest::set_amfmgmthandle(int index, const void* value, size_t size) {
  amfmgmthandle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest.amfMgmtHandle)
}
inline ::std::string* GetCSIConfigRequest::add_amfmgmthandle() {
  return amfmgmthandle_.Add();
}
inline void GetCSIConfigRequest::add_amfmgmthandle(const ::std::string& value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest.amfMgmtHandle)
}
inline void GetCSIConfigRequest::add_amfmgmthandle(const char* value) {
  amfmgmthandle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest.amfMgmtHandle)
}
inline void GetCSIConfigRequest::add_amfmgmthandle(const void* value, size_t size) {
  amfmgmthandle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest.amfMgmtHandle)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetCSIConfigRequest::amfmgmthandle() const {
  // @@protoc_insertion_point(field_list:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest.amfMgmtHandle)
  return amfmgmthandle_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetCSIConfigRequest::mutable_amfmgmthandle() {
  // @@protoc_insertion_point(field_mutable_list:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest.amfMgmtHandle)
  return &amfmgmthandle_;
}

// optional string csiName = 2;
inline bool GetCSIConfigRequest::has_csiname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetCSIConfigRequest::set_has_csiname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetCSIConfigRequest::clear_has_csiname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetCSIConfigRequest::clear_csiname() {
  if (csiname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csiname_->clear();
  }
  clear_has_csiname();
}
inline const ::std::string& GetCSIConfigRequest::csiname() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest.csiName)
  return *csiname_;
}
inline void GetCSIConfigRequest::set_csiname(const ::std::string& value) {
  set_has_csiname();
  if (csiname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csiname_ = new ::std::string;
  }
  csiname_->assign(value);
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest.csiName)
}
inline void GetCSIConfigRequest::set_csiname(const char* value) {
  set_has_csiname();
  if (csiname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csiname_ = new ::std::string;
  }
  csiname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest.csiName)
}
inline void GetCSIConfigRequest::set_csiname(const char* value, size_t size) {
  set_has_csiname();
  if (csiname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csiname_ = new ::std::string;
  }
  csiname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest.csiName)
}
inline ::std::string* GetCSIConfigRequest::mutable_csiname() {
  set_has_csiname();
  if (csiname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csiname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest.csiName)
  return csiname_;
}
inline ::std::string* GetCSIConfigRequest::release_csiname() {
  clear_has_csiname();
  if (csiname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = csiname_;
    csiname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetCSIConfigRequest::set_allocated_csiname(::std::string* csiname) {
  if (csiname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete csiname_;
  }
  if (csiname) {
    set_has_csiname();
    csiname_ = csiname;
  } else {
    clear_has_csiname();
    csiname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigRequest.csiName)
}

// -------------------------------------------------------------------

// GetCSIConfigResponse

// optional .SAFplus.Rpc.amfMgmtRpc.ComponentServiceInstanceConfig ComponentServiceInstanceConfig = 1;
inline bool GetCSIConfigResponse::has_componentserviceinstanceconfig() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCSIConfigResponse::set_has_componentserviceinstanceconfig() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetCSIConfigResponse::clear_has_componentserviceinstanceconfig() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetCSIConfigResponse::clear_componentserviceinstanceconfig() {
  if (componentserviceinstanceconfig_ != NULL) componentserviceinstanceconfig_->::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig::Clear();
  clear_has_componentserviceinstanceconfig();
}
inline const ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig& GetCSIConfigResponse::componentserviceinstanceconfig() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigResponse.ComponentServiceInstanceConfig)
  return componentserviceinstanceconfig_ != NULL ? *componentserviceinstanceconfig_ : *default_instance_->componentserviceinstanceconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* GetCSIConfigResponse::mutable_componentserviceinstanceconfig() {
  set_has_componentserviceinstanceconfig();
  if (componentserviceinstanceconfig_ == NULL) componentserviceinstanceconfig_ = new ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig;
  // @@protoc_insertion_point(field_mutable:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigResponse.ComponentServiceInstanceConfig)
  return componentserviceinstanceconfig_;
}
inline ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* GetCSIConfigResponse::release_componentserviceinstanceconfig() {
  clear_has_componentserviceinstanceconfig();
  ::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* temp = componentserviceinstanceconfig_;
  componentserviceinstanceconfig_ = NULL;
  return temp;
}
inline void GetCSIConfigResponse::set_allocated_componentserviceinstanceconfig(::SAFplus::Rpc::amfMgmtRpc::ComponentServiceInstanceConfig* componentserviceinstanceconfig) {
  delete componentserviceinstanceconfig_;
  componentserviceinstanceconfig_ = componentserviceinstanceconfig;
  if (componentserviceinstanceconfig) {
    set_has_componentserviceinstanceconfig();
  } else {
    clear_has_componentserviceinstanceconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigResponse.ComponentServiceInstanceConfig)
}

// optional sint32 err = 2;
inline bool GetCSIConfigResponse::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetCSIConfigResponse::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetCSIConfigResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetCSIConfigResponse::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 GetCSIConfigResponse::err() const {
  // @@protoc_insertion_point(field_get:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigResponse.err)
  return err_;
}
inline void GetCSIConfigResponse::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:SAFplus.Rpc.amfMgmtRpc.GetCSIConfigResponse.err)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace amfMgmtRpc
}  // namespace Rpc
}  // namespace SAFplus

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SAFplus::Rpc::amfMgmtRpc::AdministrativeState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SAFplus::Rpc::amfMgmtRpc::AdministrativeState>() {
  return ::SAFplus::Rpc::amfMgmtRpc::AdministrativeState_descriptor();
}
template <> struct is_proto_enum< ::SAFplus::Rpc::amfMgmtRpc::CapabilityModel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SAFplus::Rpc::amfMgmtRpc::CapabilityModel>() {
  return ::SAFplus::Rpc::amfMgmtRpc::CapabilityModel_descriptor();
}
template <> struct is_proto_enum< ::SAFplus::Rpc::amfMgmtRpc::Recovery> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SAFplus::Rpc::amfMgmtRpc::Recovery>() {
  return ::SAFplus::Rpc::amfMgmtRpc::Recovery_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_amfMgmtRpc_2eproto__INCLUDED
