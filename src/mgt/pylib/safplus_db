#!/usr/bin/env python3
"""
@namespace DBAL 

This module provides interfaces to access the DBAL provided by SAFplus library.
"""
import pdb, traceback
import os, sys, os.path
import re

try:
  import pyDbal
  import microdom
  from common import *
except ImportError as e:
  print ("Unable to import SAFplus libraries.  Is your PATH and PYTHONPATH set up properly?")
  print ("Error was:", str(e))
  exit(1)

from xml.etree import ElementPath
from xml.etree import ElementTree as ET
from xml.dom import minidom

from safplusMgtDb import *


def main(argv):
  if len(argv) < 3:
    print ("Usage:\n '%s -x <xml file> [output file]': Encode xml file to database file\n" % argv[0])
    print (" '%s -d <database file (no extension)> [output file]': Write database file into xml file of the same name\n" % argv[0])
    print ("If [output file] is not specified, a file is created with the same name as the input file.\n")
    return -1

  inFile = argv[2]

  outFile = None
  if len(argv) > 3:
    outFile = argv[3]
  else:
    outFile = os.path.splitext(os.path.split(inFile)[1])[0]  # remove both the directory and the extension from the input file to form the output file

  print ("Writing to: %s" % outFile)

  # Store into binary database
  if argv[1] == '-x':
    try:
      print ("Reading from %s" %inFile)
      data = PyDBAL(outFile)
      data.LoadXML(inFile);
      data.Finalize()
    except:
      traceback.print_exc()
      return

  # Export to XML from binary database
  if argv[1] == '-d':
    try:
      data = PyDBAL(argv[2])
      data.ExportXML(outFile + ".xml");
      data.Finalize()
    except:
      traceback.print_exc()
      return

# Test SAFplusAmf service import/export-ing
def Test():
    test = PyDBAL("SAFplusAmf.xml") # Root of SAFplusAmf service start from / ->  docRoot= None
    test.LoadXML("SAFplusAmf.xml")

    # Iterators
    for key in test.Iterators():
       try:
           data = test.Read(key)
           print ("[%s] -> [%s]" %(key, data))
       except Exception as e:
           print (getErrorString(e))

    # Export to XML
    test.ExportXML("SAFplusAmf_New.xml")
    test.Finalize()

# Test IDE's model import/export-ing
def Test2():
    test = PyDBAL("test.xml") # Root of IDE's model start from /instances ->  docRoot= "instances"
    test.LoadXML("test.xml")

    # Iterators
    for key in test.Iterators():
       try:
           data = test.Read(key)
           print ("[%s] -> [%s]" %(key, data))
       except Exception as e:
           print (getErrorString(e))

    #Export to XML
    test.ExportXML("test_New.xml")
    test.Finalize()

if __name__ == '__main__':
  main(sys.argv)
