################################################################################
# ModuleName  : Demo
# $File$
# $Author$
# $Date$
################################################################################
# Description :
# usage: python alarm.py <args>
###################################################################

import sys
import string
import xml.dom.minidom
from string import Template
import time
import getpass

headerTemplate = Template("""
/******************************************************************************
* This file is auto-generated by ClovisWorks
* clASPCfg.c
* Date: ${DateTime}
* User: ${User} 
* 
*
 *****************************************************************************/
/*INCLUDES*/

#include <clCommon.h>
#include <clCorMetaData.h>
""")

corHeaderTemplate = Template("""\

/* COR configuration */

ClUint32T gClCorSaveType=${savetype};
""")


iocHeaderTemplate = Template("""\

/* IOC configuration */

ClUint32T gClIocMaxPriorityQSize=${maxpriorityQsize};
ClUint32T gClIocMaxNumOfPriorities=${maxpriorities};
ClUint32T gClIocReassemblyTimeout=${reassemblytimeout};
ClUint32T gClIocTLMaxEntries=${tlmaxentries};
ClUint32T gClIocHeartbeatTimeInterval=${hearbeatinterval};


""")

nsHeaderTemplate = Template("""\
 
/* NS configuration */
 
ClUint32T gClnsMaxNoEntries=${maxentries}; /* Max no. of entries per context */
ClUint32T gClnsMaxNoGlobalContexts=${maxglobalcontexts};   /* Max no. of user defined global contexts */
ClUint32T gClnsMaxNoLocalContexts=${maxlocalcontexts};   /* Max no. of node local user contexts */

""")
rmdHeaderTemplate = Template("""\

/* RMD configuration */

ClUint16T gClRmdMaxRetries=${maxretries};
""")

timerHeaderTemplate = Template("""\

/* TIMER configuration */

ClUint32T gClTimerResolution=${timerresolution};
ClUint32T gClTaskPriority=${taskpriority};

""")
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def createCORHeader(cor):
	map = dict();
	map['DateTime'] = unicode(time.strftime("%D at %H:%M:%S", time.localtime()))
	map['Author'] = getpass.getuser()
	map["savetype"] = cor.attributes["savetype"].value
		
	result = corHeaderTemplate.safe_substitute(map)
	return result
#------------------------------------------------------------------------------	
#------------------------------------------------------------------------------
def createIOCHeader(ioc):
	map = dict();
	map['DateTime'] = unicode(time.strftime("%D at %H:%M:%S", time.localtime()))
	map['Author'] = getpass.getuser()
	map["maxpriorityQsize"] = ioc.attributes["maxpriorityQsize"].value
	map["maxpriorities"] = ioc.attributes["maxpriorities"].value
	map["reassemblytimeout"] = ioc.attributes["reassemblytimeout"].value
	map["tlmaxentries"] = ioc.attributes["tlmaxentries"].value
	map["hearbeatinterval"] = ioc.attributes["hearbeatinterval"].value
	
	result = iocHeaderTemplate.safe_substitute(map)
	return result
#------------------------------------------------------------------------------	
#------------------------------------------------------------------------------
def createNSHeader(ns):
	map = dict();
	map['DateTime'] = unicode(time.strftime("%D at %H:%M:%S", time.localtime()))
	map['Author'] = getpass.getuser()	
	map["maxentries"] = ns.attributes["maxentries"].value
	map["maxglobalcontexts"] = ns.attributes["maxglobalcontexts"].value
	map["maxlocalcontexts"] = ns.attributes["maxlocalcontexts"].value
	
	result = nsHeaderTemplate.safe_substitute(map)
	return result
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
def createRMDHeader(rmd):
	map = dict();
	map['DateTime'] = unicode(time.strftime("%D at %H:%M:%S", time.localtime()))
	map['Author'] = getpass.getuser()	
	map["maxretries"] = rmd.attributes["maxretries"].value
		
	result = rmdHeaderTemplate.safe_substitute(map)
	return result
	
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def createTIMERHeader(timer):
	map = dict();
	map['DateTime'] = unicode(time.strftime("%D at %H:%M:%S", time.localtime()))
	map['Author'] = getpass.getuser()	
	map["timerresolution"] = timer.attributes["timerresolution"].value
	map["taskpriority"] = timer.attributes["taskpriority"].value
	
	result = timerHeaderTemplate.safe_substitute(map)
	return result
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#Script Execution Starts Here.
date = unicode(time.strftime("%D at %H:%M:%S", time.localtime()))
user = getpass.getuser()

buildConfigsXmi = sys.argv[1];
buildConfigsDoc = xml.dom.minidom.parse(buildConfigsXmi)
buildConfigs = buildConfigsDoc.getElementsByTagName("CompileConfigs:ComponentsInfo")
cor = buildConfigs[0].getElementsByTagName("COR")
result=createCORHeader(cor[0])
ioc = buildConfigsDoc.getElementsByTagName("IOC")
result += createIOCHeader(ioc[0])
ns = buildConfigsDoc.getElementsByTagName("NS")
result+=createNSHeader(ns[0])
rmd = buildConfigsDoc.getElementsByTagName("RMD")
result+=createRMDHeader(rmd[0])
timer = buildConfigsDoc.getElementsByTagName("Timer")
result+=createTIMERHeader(timer[0])

out_file = open("clASPCfg.c", "w")
out_file.write(headerTemplate.safe_substitute(DateTime = date, User = user))
out_file.write(result)
out_file.close()

