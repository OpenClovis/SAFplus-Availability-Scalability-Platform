################################################################################
# ModuleName  : SampleModel
# $File$
# $Author$
# $Date$
################################################################################
# Description :
# usage: python fm.py <args>
# create clfmlCfg.c
################################################################################
import sys
import string
import xml.dom.minidom
from string import Template
import time
import getpass

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
headerTemplate = Template("""\
/******************************************************************************
 *
 * clFault${scope}Cfg.c
 *
 ******************************************************************************
 * This code is auto-generated by OpenClovis IDE Version 2.2.0
 *
 ***************************** Description ************************************
 *
 * This file contains application specific FML
 * configuration data and callouts.
 * Date : $DateTime 
 * User : $Author 
 *
 *****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <clEoApi.h>
#include <clFaultDefinitions.h>
#include <clFaultApi.h>
#include <clFaultErrorId.h>
#include <clDebugApi.h>
#define SIMULATION_VERSION
/**@#-*/
#ifndef COMP_DEBUG_VAR
#define COMP_DEBUG_VAR CL_DEBUG_TRACE
#endif

${externList}
ClUint32T ${probPeriodVar} = ${period};
""")


localExternListTemplate = Template("""

extern ClRcT ClFaultCompRestartRequest(ClFaultRecordPtr hRec);
extern ClRcT clFaultEscalate(ClFaultRecordPtr hRec);

""")

globalExternListTemplate = Template("""

extern ClRcT ClFaultNodeRestartRequest(ClFaultRecordPtr hRec);
""")


#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
handlerHeaderTemplate = Template("""\
/******************************************************************************
 *
 * clFault${scope}RepairHandlers.c
 *
 ******************************************************************************
 * This code is auto-generated by OpenClovis IDE  Version 2.2.0
 *
 ***************************** Description ************************************
 *
 * 
 * Date : $DateTime 
 * User : $Author 
 *
 *****************************************************************************/

#include <stdio.h>
#include <clEoApi.h>
#include <clFaultDefinitions.h>
#include <clFaultErrorId.h>
#include <clDebugApi.h>

""")


#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
methodExternTemplate = Template("""\

extern ClRcT ${methodName}(ClFaultRecordPtr hRec);
""")

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
methodTemplate = Template("""\

ClRcT ${methodName}(ClFaultRecordPtr hRec)
{
    return CL_OK;
}
""")
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
oneDSeqTableTemplate = Template("""\

ClFaultSeqTblT	${cat}${sev}_${scope}SeqTbl[] = { ${fn1}, ${fn2}, ${fn3}, ${fn4}, ${fn5}};
""")

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
twoDSeqTableTemplate = Template("""\

ClFaultSeqTblT	*${category}_${scope}2DSeqTbls[] =
{
	${category}CR_${scope}SeqTbl,
	${category}MJ_${scope}SeqTbl,
	${category}MN_${scope}SeqTbl,
	${category}WR_${scope}SeqTbl,
	${category}IN_${scope}SeqTbl,
	${category}CL_${scope}SeqTbl
};
""")

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
threeDSeqTableTemplate = Template("""\

ClFaultSeqTblT	**${category}_${scope}3DSeqTbls[] =
{
	${category}_${scope}2DSeqTbls, 
	${category}_${scope}2DSeqTbls, 
	${category}_${scope}2DSeqTbls, 
	${category}_${scope}2DSeqTbls, 
	${category}_${scope}2DSeqTbls, 
	${category}_${scope}2DSeqTbls, 
	${category}_${scope}2DSeqTbls, 
	${category}_${scope}2DSeqTbls 
};
""")

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
localFourDSeqTableTemplate = Template("""\

ClFaultSeqTblT  **fmSeqTbls[] =
{
    com_2DSeqTbls,
    qos_2DSeqTbls,
    proc_2DSeqTbls,
    equip_2DSeqTbls,
    env_2DSeqTbls
};
""")

globalFourDSeqTableTemplate = Template("""\

ClFaultSeqTblT  ***fmgSeqTbls[] =
{
    com_g3DSeqTbls,
    qos_g3DSeqTbls,
    proc_g3DSeqTbls,
    equip_g3DSeqTbls,
    env_g3DSeqTbls
};
""")


#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def getFunction(cat, sev, level, type):
	global tableEntries
	global methodSkeletons
	global methodExterns
	
	for entry in tableEntries:
		category = entry.attributes["Category"].value
		severity = entry.attributes["Severity"].value
		escLevel = entry.attributes["EscalationLevel"].value
		function = entry.attributes["Function"].value
		isExtern = entry.attributes["IsExtern"].value
		if cat == category and sev == severity and level == escLevel :
			if isExtern == "false":
				methodSkeletons += methodTemplate.safe_substitute(methodName = function)
			methodExterns += methodExternTemplate.safe_substitute(methodName = function)
			return function
	
	if cat == "proc" and (sev == "CR" or sev == "MJ"):
		if type == "local":
			if level == "Level5":
				return "clFaultEscalate"

			else:
				return "ClFaultCompRestartRequest"
		else:
			if level == "Level1":
				return "ClFaultNodeRestartRequest"
			
	return "NULL"


#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def populateOneDTables(cat, sev, type):
	global oneDSeqTables

	symbolMap['cat'] = cat
	symbolMap['sev'] = sev
	if type == "local":
		symbolMap['scope'] = ""
	
	else:
		symbolMap['scope'] = "g"
	
	symbolMap['fn1'] = getFunction(cat, sev, "Level1", type)
	symbolMap['fn2'] = getFunction(cat, sev, "Level2", type)
	symbolMap['fn3'] = getFunction(cat, sev, "Level3", type)
	symbolMap['fn4'] = getFunction(cat, sev, "Level4", type)
	symbolMap['fn5'] = getFunction(cat, sev, "Level5", type)
	
	oneDSeqTables += oneDSeqTableTemplate.safe_substitute(symbolMap)


#------------------------------------------------------------------------------
#Script Execution Starts Here.

date = unicode(time.strftime("%D at %H:%M:%S", time.localtime()))
user = getpass.getuser()
symbolMap = dict()
categoryList = ["com", "qos", "proc", "equip", "env"]
severityList = ["CR", "MJ", "MN", "WR", "IN", "CL"]

buildConfigsDoc = xml.dom.minidom.parse(sys.argv[1])
buildConfigs = buildConfigsDoc.getElementsByTagName("CompileConfigs:ComponentsInfo")
fm = buildConfigsDoc.getElementsByTagName("FM")
fmElement = None
tableEntries = None
localProbPeriod = ""

if len(fm) > 0:
	fmElement=fm[0]

#----------------- Local FM data ----------------------------------------------
if fmElement != None:
	tableEntries = fmElement.getElementsByTagName("localSeqTableEntry")
	localProbPeriod = fmElement.attributes["localProbationPeriod"].value

fileContents = ""
oneDSeqTables = ""
twoDSeqTables = ""
methodSkeletons = handlerHeaderTemplate.safe_substitute(scope = "Local", DateTime = date, Author = user)
methodExterns = ""
fourDSeqTable = localFourDSeqTableTemplate.safe_substitute()
for cat in categoryList:
	symbolMap['category']=cat;
	symbolMap['scope']="";
	twoDSeqTables += twoDSeqTableTemplate.safe_substitute(symbolMap)
	for sev in severityList:
		populateOneDTables(cat, sev, "local")


out_file = open("clFaultCfg.c","w")
fileContents += headerTemplate.safe_substitute(externList = localExternListTemplate.safe_substitute(), scope = "Local", probPeriodVar = "clFaultLocalProbationPeriod", period = localProbPeriod, DateTime = date, Author = user)
fileContents += " /*************************/ "
fileContents += methodExterns
fileContents += " /*************************/ "
fileContents += oneDSeqTables
fileContents += " /*************************/ "
fileContents += twoDSeqTables
fileContents += " /*************************/ "
fileContents += fourDSeqTable
out_file.write(fileContents)
out_file.close()

if(methodSkeletons != ""):	
	out_file = open ("clFaultReportHandlers.c", "w")
	out_file.write(methodSkeletons)
	out_file.close()



