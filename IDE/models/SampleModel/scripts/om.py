################################################################################
# ModuleName  : SampleModel
# $File$
# $Author$
# $Date$
################################################################################
# Description :
# usage: python alarmprofiles.py <args>
# Creates source and header files for components 
################################################################################
import sys
import string
import os
import xml.dom.minidom
from string import Template
import time
import getpass

mopathTemplate = Template("""\
"$path"
""")


doEnumEntryTemplate = Template("""\
	CL_${doEnumName},	
""")

halConfHeaderFileTemplate = Template("""\
/******************************************************************************
 *
 * cl${compName}HalConf.h
 *
 ******************************************************************************
 * This code is auto-generated by OpenClovis IDE Version 2.2.0
 *
 ***************************** Description ************************************
 *
 * This is a header for hal library configuration. 
 *
 * Date : $DateTime 
 * User : $Author 
 *
 *****************************************************************************/

#ifndef _CL_${capCompName}_HAL_CONF_H_
#define _CL_${capCompName}_HAL_CONF_H_

#include <clCommon.h>
#include <clHalApi.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * The Device Id of the Ethernet Device Object , the name space of device Id is the
 * process.This implies that device Id needs to be unique in a process context but
 * same device ID could be used to address two different devices provided they are 
 * managed by different components/processes. 
 */

typedef enum ClDeviceId
{
	CL_DEVICE_ID_START = 0,
    ${deviceIDEnums}	
}ClDeviceIdT;    

#define CL_HAL_DEV_NUM_OPERATIONS  CL_HAL_DEV_NUM_STD_OPERATIONS
""")

halConfHeaderFileFooterTemplate = Template("""\
#ifdef __cplusplus
}
#endif

#endif /* _CL_${capCompName}_HAL_CONF_H_ */
""")


halConfSrcFileHeaderTemplate = Template("""\
/******************************************************************************
 *
 * cl${compName}HalConf.c
 *
 ******************************************************************************
 * This code is auto-generated by OpenClovis IDE Version 2.2.0
 *
 ***************************** Description ************************************
 *
 * This file contains the configuration part for the Clovis HAL layer
 * This is a sample C file for hal library configuration. In this file the
 * sample configuration is provided for a process which will manage a gigE port.
 *
 * Date : $DateTime 
 * User : $Author 
 *
 *****************************************************************************/
                                                                                                                                                                                    
#include <clHalApi.h>
#include <clHalObjectApi.h>
#include <clOmClassId.h>
#include <cl${compName}HalConf.h>
                                                                                                                                                                                    
/******************************************
 * Device Object Configuration
 ******************************************/

""")

devicOperationTableTemplate = Template("""\

ClfpDevOperationT g${resName}${doName}DevOperations[] =
{
    ${init},            /* HAL_DEV_INIT             */
    ${open},            /* HAL_DEV_OPEN             */
    ${close},           /* HAL_DEV_CLOSE            */
    ${read},            /* HAL_DEV_READ             */
    ${write},           /* HAL_DEV_WRITE            */
    ${cold_boot},       /* HAL_DEV_COLD_BOOT        */
    ${warm_boot},       /* HAL_DEV_WARM_BOOT        */
    ${pwr_off},         /* HAL_DEV_PWR_OFF          */
    ${image_download},  /* HAL_DEV_IMAGE_DN_LOAD    */
    ${direct_access}    /* HAL_DEV_DIRECT_ACCESS    */
};
""")

deviceObjectTableTemplate = Template("""\
ClHalDevObjectT g${compName}DevObjectTable[]=
{
${deviceObjectTableEntries}
};
""")

deviceObjectTableEntryTemplate = Template("""\
    {
       CL_${deviceID},  			/* deviceId          */
       ${deviceCapability},     /* pdevCapability    */
       ${deviceCapabilityLen},     /* devCapLen         */
       ${maxResponseTime},      /* Max Response Time */
       ${bootPriority},         /* Boot Up Priority  */
       ${doOperationTable} 		/* DO Operations table referance */
    },
""")

halDevObjInfoTableTemplate = Template("""\
ClHalDevObjectInfoT g${resName}${svc}HalDevObjInfo[]=
{
${associatedDOTableEntries}	
};
""")

associatedDOTableEntryTemplate = Template("""\
    {
        CL_${deviceID},  			/* deviceId */
        ${accessPriority}      /* Device Access Priority   */
    },
""")

halObjConfTableTemplate = Template("""\
ClHalObjectConfT g${compName}HalObjConf[]=
{
${halObjConfTableEntries}
};
""")

halObjConfTableEntryTemplate = Template("""\
    {
        ${omClassId}, /* OM ClassId */
        ${mopath},    /* Mo Path in string */
        g${resName}${svc}HalDevObjInfo, /* Information about the Devices */
        (sizeof(g${resName}${svc}HalDevObjInfo))/(sizeof(ClHalDevObjectInfoT))   /*Num of DevObjects */
    },
""")

halConfigTemplate = Template("""\
/* Please Do Not Modify the Init of this structure */
ClHalConfT halConfig=
{
 	CL_HAL_DEV_NUM_OPERATIONS, /* From halConf.h */
	 (sizeof(g${compName}DevObjectTable))/(sizeof(ClHalDevObjectT)), /* halNumDevObject */
	 g${compName}DevObjectTable, /* DevObject Table */
	 sizeof(g${compName}HalObjConf)/sizeof(ClHalObjectConfT),    /* halNumHalObject */
	 g${compName}HalObjConf /* Hal Object Table */
 
};
""")


deviceOperationsHeadertemplate = Template("""\
/******************************************************************************
 *
 * cl${compName}DO.c
 *
 ******************************************************************************
 * This code is auto-generated by OpenClovis IDE Version 2.2.0
 *
 ***************************** Description ************************************
 *
 * This is a source file for DO configuration
 *
 * Date : $DateTime 
 * User : $Author 
 *
 *****************************************************************************/
 
#include <clHalApi.h>
#include <clHalObjectApi.h>
                                                                                
/**
 * The declaration of functions below will come from Application Header File , for
 * the purpose of compilation they have been declared here.
 */
""")

deviceOperationMethodTemplate = Template("""\
ClRcT cl${resName}${deviceID}${methodName}(ClUint32T omId, ClCorMOIdPtrT moId, ClUint32T subOperation,
	    void *pUserData, ClUint32T usrDataLen)
{
    ClRcT   rc = CL_OK;
                                                                                
    /* */
                                                                                
    return rc;
}

""")

deviceOperationMethodProtoTypeTemplate = Template("""\
ClRcT cl${resName}${deviceID}${methodName}(ClUint32T omId, ClCorMOIdPtrT   moId,
        ClUint32T subOperation,  void *pUserData, ClUint32T usrDataLen);
        
""")


oampConfigFooterTemplate = Template("""\
#ifdef __cplusplus
}
#endif                                                                                                                                                                           
                                                                                                                                                                                    
#endif /* _CL_${capCompName}_OAMP_CONFIG_H_ */
""")


#------------------------templates for cl<compName>OAMPConfig.h------------------
#------------------------------------------------------------------------------
oampConfigHeaderTemplate = Template("""\
/******************************************************************************
 *
 * cl${compName}OAMPConfig.h
 *
 ******************************************************************************
 * This code is auto-generated by OpenClovis IDE Version 2.2.0
 *
 ***************************** Description ************************************
 *
 * This is a header file for oamp configuration. 
 *
 * Date : $DateTime 
 * User : $Author 
 *
 *****************************************************************************/
 
#ifndef _CL_${capCompName}_OAMP_CONFIG_H_
#define _CL_${capCompName}_OAMP_CONFIG_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <clOmApi.h>
#include <clCorApi.h>
#include <clProvOmApi.h>
#include <clProvApi.h>
#include <clAlarmOM.h>
#include <clHalApi.h>
#include <clHalObjectApi.h>

""") 

omClassTemplate = Template("""\

CL_OM_BEGIN_CLASS(CL_OM_${svcid}_CLASS,  CL_OM_${svcid}_${res}_CLASS)
${halObj}
CL_OM_END
""")

constDestPrototypeTemplate = Template("""\

ClRcT cl${compName}${res}${svc}Constructor( CL_OM_${svcid}_CLASS *pThis, void *pUsrData, ClUint32T usrDataLen );
ClRcT cl${compName}${res}${svc}Destructor ( CL_OM_${svcid}_CLASS *pThis , void  *pUsrData, ClUint32T usrDataLen );
""")

provFunctionPrototypesTemplate = Template("""\

ClRcT cl${compName}${res}ProvValidate(CL_OM_PROV_CLASS* pThis, ClProvTxnDataT* pProvTxnData);

ClRcT cl${compName}${res}ProvUpdate(CL_OM_PROV_CLASS* pThis, ClProvTxnDataT* pProvTxnData);

ClRcT cl${compName}${res}ProvRollback(CL_OM_PROV_CLASS* pThis, ClProvTxnDataT* pProvTxnData);

""")

alarmFunctionPrototypesTemplate = Template("""\
ClRcT cl${compName}${res}AlarmPoll( CL_OM_ALARM_CLASS*   objPtr, ClCorMOIdPtrT hMoId, ClAlarmPollInfoT alarmsToPoll[] );

""")


#------------------------templates for cl<compName>OAMPConfig.c------------------
#------------------------------------------------------------------------------
oampConfigSourceHeaderTemplate = Template("""\

/******************************************************************************
 *
 * cl${compName}OAMPConfig.c
 *
 ******************************************************************************
 * This code is auto-generated by OpenClovis IDE Version 2.2.0
 *
 ***************************** Description ************************************
 *
 * This is a source file for oamp configuration. 
 *
 * Date : $DateTime 
 * User : $Author 
 *
 *****************************************************************************/
 
#include <clOmClassId.h>
#include <cl${compName}OAMPConfig.h>
#define CL_MAX_OBJ 256
""")

oampConfigSourceHashDefineTemplate = Template("""\

#define ${capCompName}_${res}_${svcid}_CLASS_NAME 	"${compName}_${res}_${svcid}_CLASS_NAME"
#define ${capCompName}_${res}_${svcid}_CLASS_VERSION 	0x1
#define ${capCompName}_${res}_${svcid}_MAX_SLOTS	1   
""")

omClassTableTemplate = Template("""\

ClOmClassControlBlockT pAppOmClassTbl[] =
{
	${omClassTableEntries}
};

ClUint32T appOmClassCnt = sizeof(pAppOmClassTbl)/sizeof(ClOmClassControlBlockT);
""")

omClassTableEntryTemplate = Template("""\
{  
 	 ${capCompName}_${res}_${svcid}_CLASS_NAME,
	 sizeof(CL_OM_${svcid}_${res}_CLASS),
	 CL_OM_${svcid}_CLASS_TYPE,
	 cl${compName}${res}${svc}Constructor, 
	 cl${compName}${res}${svc}Destructor,
	 NULL,
	 ${capCompName}_${res}_${svcid}_CLASS_VERSION,
	 0,
	 CL_MAX_OBJ,
	 0,
	 ${capCompName}_${res}_${svcid}_MAX_SLOTS,
	 CL_OM_${svcid}_${res}_CLASS_TYPE
},

""")


#------------------------templates for <compName>_<Res>_.c------------------
#------------------------------------------------------------------------------
provConstructorHalBlobTemplate = Template("""\

    rc = clOmOmHandleByObjectReferenceGet(pThis, &omHandle);
    if(CL_OK != rc)
    {
        CL_DEBUG_PRINT(CL_DEBUG_ERROR, ("Error while getting the OM handle from referance : [%x]\\r\\n",rc));
        return rc;
    }                                                                              
    rc = clHalObjectCreate((ClUint32T)omHandle, (ClCorMOIdPtrT)pUsrData, &((CL_OM_PROV_${res}_CLASS*)pThis)->halObj);
    if(CL_OK != rc)
    {
        CL_DEBUG_PRINT(CL_DEBUG_ERROR, ("Error while creating HAL object : [%x]\\r\\n",rc));
        return rc;
    }
""")        

alarmConstructorHalBlobTemplate = Template("""\

    rc = clOmOmHandleByObjectReferenceGet(pThis, &omHandle);
    if(CL_OK != rc)
    {
        CL_DEBUG_PRINT(CL_DEBUG_ERROR, ("Error while getting the OM handle from referance : [%x]\\r\\n",rc));
        return rc;
    }                                                                              
    rc = clHalObjectCreate((ClUint32T)omHandle, (ClCorMOIdPtrT)pUsrData, &((CL_OM_ALARM_${res}_CLASS*)pThis)->halObj);
    if(CL_OK != rc)
    {
        CL_DEBUG_PRINT(CL_DEBUG_ERROR, ("Error while creating HAL object : [%x]\\r\\n",rc));
        return rc;
    }
""")        

alarmDestructorHalBlobTemplate = Template("""\
	rc = clHalObjectDelete(((CL_OM_ALARM_${res}_CLASS*)pThis)->halObj);
    if(CL_OK != rc)
    {
        CL_DEBUG_PRINT(CL_DEBUG_ERROR, ("Error while deleting HAL object : [%x]\\r\\n",rc));
        return rc;
    }
""")        


provDestructorHalBlobTemplate = Template("""\
rc = clHalObjectDelete(((CL_OM_PROV_${res}_CLASS*)pThis)->halObj);
    if(CL_OK != rc)
    {
        CL_DEBUG_PRINT(CL_DEBUG_ERROR, ("Error while deleting HAL object : [%x]\\r\\n",rc));
        return rc;
    }
""")        

provUpdateHalBlobTemplate = Template("""\
rc = clHalObjectOperate(((CL_OM_PROV_${res}_CLASS*)pThis)->halObj, CL_HAL_DEV_WRITE, 0, CL_HAL_ACCESS_ORDER_INCR, pProvTxnData->pProvData, pProvTxnData->size, 0, 0);
    if(CL_OK != rc)
    {
        CL_DEBUG_PRINT(CL_DEBUG_ERROR, ("Error writing into DO : [%x]\\r\\n",rc));
        return rc;
    }
""")

provFnDefsHeaderTemplate = Template("""\
/******************************************************************************
 *
 * cl${compName}${resName}.c
 *
 ******************************************************************************
 * This code is auto-generated by OpenClovis IDE Version 2.2.0
 *
 ***************************** Description ************************************
 *
 * 
 * Date : $DateTime 
 * User : $Author 
 *
 *****************************************************************************/

#include <cl${compName}OAMPConfig.h>
#include <clDebugApi.h>
""")

provFnDefsTemplate = Template("""\

/**** Prov functions */
ClRcT cl${compName}${res}ProvConstructor( CL_OM_PROV_CLASS *pThis, void *pUsrData, ClUint32T usrDataLen )
{
    ClRcT rc = CL_OK;
    ${omHandle}
    /* Override "semantic check" virtual method in provClass*/
    ((CL_OM_PROV_CLASS*)pThis)->clProvValidate = (ifp)cl${compName}${res}ProvValidate;
    ((CL_OM_PROV_CLASS*)pThis)->clProvUpdate = (ifp)cl${compName}${res}ProvUpdate;
    ((CL_OM_PROV_CLASS*)pThis)->clProvRollback = (ifp)cl${compName}${res}ProvRollback;
    ${provConstructorHalBlob}
	
    return rc;
}

ClRcT cl${compName}${res}ProvDestructor ( CL_OM_PROV_CLASS *pThis , void  *pUsrData, ClUint32T usrDataLen )
{
    ClRcT rc = CL_OK;
    ${provDestructorHalBlob}
    return rc;	
}

ClRcT cl${compName}${res}ProvValidate(CL_OM_PROV_CLASS* pThis, ClProvTxnDataT* pProvTxnData)
{
	ClRcT rc = CL_OK;
	return rc;
}

ClRcT cl${compName}${res}ProvUpdate(CL_OM_PROV_CLASS* pThis, ClProvTxnDataT* pProvTxnData)
{
    ClRcT rc = CL_OK;    
    ${provUpdateHalBlob}
    return rc;
}


ClRcT cl${compName}${res}ProvRollback(CL_OM_PROV_CLASS* pThis, ClProvTxnDataT* pProvTxnData)
{
	ClRcT rc = CL_OK;
	return rc;
}
""")

alarmFnDefsTemplate = Template("""\

/************** Alarm functions ************/
ClRcT cl${compName}${res}AlarmPoll( CL_OM_ALARM_CLASS*   objPtr, ClCorMOIdPtrT hMoId, ClAlarmPollInfoT alarmsToPoll[] )
{
	ClRcT rc = CL_OK;
	return rc;
}

ClRcT cl${compName}${res}AlarmConstructor( CL_OM_ALARM_CLASS *pThis, void *pUsrData, ClUint32T usrDataLen )
{
	ClRcT rc = CL_OK;
    ${omHandle}
	/* Override "semantic check" virtual method in CL_OM_ALARM_CLASS*/
	((CL_OM_ALARM_CLASS*)pThis)->fpAlarmObjectPoll = cl${compName}${res}AlarmPoll;
	${alarmConstructorHalBlob}
	return rc;
}

ClRcT cl${compName}${res}AlarmDestructor ( CL_OM_ALARM_CLASS *pThis , void  *pUsrData, ClUint32T usrDataLen )
{
	ClRcT rc = CL_OK;
	${alarmDestructorHalBlob}
	return rc;
}
""")



#-----------------------------------------------------------------------------
#------------------------------------------------------------------------------
def processComponentList(compList, resMap, codeGenMode):
	for comp in compList:
		map = dict();
		map['DateTime'] = unicode(time.strftime("%D at %H:%M:%S", time.localtime()))
		map['Author'] = getpass.getuser()
		compName = comp.attributes["Name"].value		
		realizes = comp.getElementsByTagName("Realizes")
		map['compName'] = compName
		map['capCompName'] = string.upper(compName)
		if os.path.exists(compName) == False:			
			os.mkdir(compName)
		
		omClasses = ""
		oampConfigSourceHashDefines = ""
		omClassDefinitions = ""
		consDestPrototypes = ""
		provFnPrototypes = ""
		alarmFnPrototypes = ""
		deviceObjectEnums = ""
		deviceOperationMethods = ""
		deviceOperationMethodProtoTypes = ""
		deviceOperationsTables = ""				
		halDeviceObjectInfoTables = ""
		deviceObjectTableToBegenerated = "false"
		halObjConfTableEntries = ""
		deviceObjectTableEntries = ""
		
		doMethodsFileContents = deviceOperationsHeadertemplate.safe_substitute(map)		
		
		if len(realizes) > 0:			
			for resource in realizes:												
				alarmHalDevInfoTableToBegenerated = "false"
				provHalDevInfoTableToBegenerated = "false"
				comp_res_File_To_Be_Generated = "false"
				provFnDefinitions = ""
				alarmFnDefinitions = ""
				res = resMap[resource.firstChild.data]
				resName = res.attributes["Name"].value
				map['resName'] = resName
				map['mopath'] = getMOPath(resName)
				map['halObj'] = ""
				map['provConstructorHalBlob'] = ""
				map['provDestructorHalBlob'] = ""
				map['omHandle'] = ""				
				
				dos = res.getElementsByTagName("DeviceObject")				
				if len(dos) > 0:
					deviceObjectTableToBegenerated = "true"					
					for do in dos:
						deviceOps = do.getElementsByTagName("DeviceOperations")		
						deviceID = do.attributes["DeviceID"].value
						deviceIDEnumName = string.upper(resName) + "_" + string.upper(deviceID)
						deviceObjectEnums += doEnumEntryTemplate.safe_substitute(doEnumName = deviceIDEnumName )
						deviceObjectTableEntries += getDeviceObjectTableEntry(resName, do)						
						if len(deviceOps) > 0:
							deviceOp = deviceOps[0]									
							deviceOperationMethods = getDeviceOperationMethodsAndProtoTypes(deviceOp, resName, deviceID)[0]
							deviceOperationMethodProtoTypes += getDeviceOperationMethodsAndProtoTypes(deviceOp, resName, deviceID)[1]
							deviceOperationsTables += getDeviceOperationsTable(deviceOp, resName, deviceID)							
							doMethodsFileContents += deviceOperationMethods
				
				alarm = res.getElementsByTagName("AlarmManagement")
				if len(alarm) > 0 and alarm[0].attributes["isEnabled"].value == "true":
					comp_res_File_To_Be_Generated = "true"
					map['svc'] = "Alarm"
					map['svcid'] = "ALARM"
					map['res'] = resName.upper()	
					map['alarmConstructorHalBlob'] = ""
					map['alarmDestructorHalBlob'] = ""				
					alarmAssociatedDOTableEntries = ""
					associatedDOs = alarm[0].getElementsByTagName("AssociatedDO")
					if len(associatedDOs) > 0:
						map['halObj'] = "ClHalObjectHandleT halObj;"
						map['omHandle'] = "ClHandleT omHandle;"
						map['alarmConstructorHalBlob'] = alarmConstructorHalBlobTemplate.safe_substitute(map)						
						map['alarmDestructorHalBlob'] = alarmDestructorHalBlobTemplate.safe_substitute(map)						
						alarmHalDevInfoTableToBegenerated = "true"
						for associatedDO in associatedDOs:
							map['deviceID'] = resName.upper() + "_" + string.upper(associatedDO.attributes["DeviceID"].value)
							map['accessPriority'] = associatedDO.attributes["AccessPriority"].value
							alarmAssociatedDOTableEntries += associatedDOTableEntryTemplate.safe_substitute(map)
					
						map['associatedDOTableEntries']	= alarmAssociatedDOTableEntries
						halDeviceObjectInfoTables += halDevObjInfoTableTemplate.safe_substitute(map)											
						map['omClassId'] = "CL_OM_ALARM_"+ resName.upper() +"_CLASS_TYPE"
						halObjConfTableEntries += halObjConfTableEntryTemplate.safe_substitute(map)				 				
					
					omClasses += omClassTemplate.safe_substitute(map)
					oampConfigSourceHashDefines += oampConfigSourceHashDefineTemplate.safe_substitute(map)
					omClassDefinitions += omClassTableEntryTemplate.safe_substitute(map)
					consDestPrototypes += constDestPrototypeTemplate.safe_substitute(map)
					alarmFnPrototypes += alarmFunctionPrototypesTemplate.safe_substitute(map)
					alarmFnDefinitions += alarmFnDefsTemplate.safe_substitute(map)
					map['halObj'] = ""
										
					
				prov = res.getElementsByTagName("Provisioning")
				if len(prov) > 0 and prov[0].attributes["isEnabled"].value == "true":
					comp_res_File_To_Be_Generated = "true"
					map['svc'] = "Prov"
					map['svcid'] = "PROV"
					map['res'] = resName.upper()
					map['provConstructorHalBlob'] = ""
					map['provDestructorHalBlob'] = ""									
					map['provUpdateHalBlob'] = ""
					provAssociatedDOTableEntries = ""
					associatedDOs = prov[0].getElementsByTagName("AssociatedDO")
					if len(associatedDOs) > 0:
						map['halObj'] = "ClHalObjectHandleT halObj;"						
						map['omHandle'] = "ClHandleT omHandle;"
						map['provConstructorHalBlob'] = provConstructorHalBlobTemplate.safe_substitute(map)						
						map['provDestructorHalBlob'] = provDestructorHalBlobTemplate.safe_substitute(map)
						map['provUpdateHalBlob'] = provUpdateHalBlobTemplate.safe_substitute(map)
						provHalDevInfoTableToBegenerated = "true"					
						for associatedDO in associatedDOs:
							map['deviceID'] = resName.upper() + "_" + string.upper(associatedDO.attributes["DeviceID"].value)
							map['accessPriority'] = associatedDO.attributes["AccessPriority"].value
							provAssociatedDOTableEntries += associatedDOTableEntryTemplate.safe_substitute(map)
							
						map['associatedDOTableEntries']	= provAssociatedDOTableEntries
						halDeviceObjectInfoTables += halDevObjInfoTableTemplate.safe_substitute(map)					
						map['omClassId'] = "CL_OM_PROV_"+ resName.upper() +"_CLASS_TYPE"
						halObjConfTableEntries += halObjConfTableEntryTemplate.safe_substitute(map)				
				
					omClasses += omClassTemplate.safe_substitute(map)
					oampConfigSourceHashDefines += oampConfigSourceHashDefineTemplate.safe_substitute(map)
					omClassDefinitions += omClassTableEntryTemplate.safe_substitute(map)
					consDestPrototypes += constDestPrototypeTemplate.safe_substitute(map)
					provFnPrototypes += provFunctionPrototypesTemplate.safe_substitute(map)
					provFnDefinitions += provFnDefsTemplate.safe_substitute(map)
					map['halObj'] = ""							
					
				omFnDefsFileContents = ""
				omFnDefsFileContents += provFnDefsHeaderTemplate.safe_substitute(map)
				omFnDefsFileContents += provFnDefinitions 
				omFnDefsFileContents += alarmFnDefinitions 	
									
				if comp_res_File_To_Be_Generated == "true":
					file = compName + "/" + "cl" + compName + resName+ ".c"
					if (codeGenMode == "true") or not (os.path.isfile(file)):
						omFnDefsFile = open(file, "w")				
						omFnDefsFile.write(omFnDefsFileContents)
						omFnDefsFile.close()
# fix for bug 4317 - remove old cl<Comp><Res>.c if it exists and comp_res_File is not to be generated this time
				else:
					file = compName + "/" + "cl" + compName + resName+ ".c"
					if( os.path.isfile(file) ):
						try:
							os.remove(file)
						except os.error:
							pass
					

			if deviceObjectTableEntries != "":
				file = compName + "/" + "cl" + compName + "DO.c"
				if (codeGenMode == "true") or not (os.path.isfile(file)):
					doMethodsFile = open(file, "w")
					doMethodsFile.write(doMethodsFileContents)
					doMethodsFile.close()
				
				map['deviceIDEnums'] = deviceObjectEnums
				halConfHeaderFileContents = halConfHeaderFileTemplate.safe_substitute(map)		
				halConfHeaderFileContents += deviceOperationMethodProtoTypes
				halConfHeaderFileContents += halConfHeaderFileFooterTemplate.safe_substitute(map)
				file = compName + "/" + "cl" + compName + "HalConf.h"
				halConfHeaderFile = open(file, "w")
				halConfHeaderFile.write(halConfHeaderFileContents)
				halConfHeaderFile.close()				
					
			if halObjConfTableEntries != "" and  deviceObjectTableEntries != "":
								
				halConfSrcFileContents = halConfSrcFileHeaderTemplate.safe_substitute(map)
				halConfSrcFileContents += deviceOperationsTables			
				map['deviceObjectTableEntries'] = deviceObjectTableEntries
				halConfSrcFileContents += deviceObjectTableTemplate.safe_substitute(map)				
				halConfSrcFileContents += halDeviceObjectInfoTables			
				map['halObjConfTableEntries'] = halObjConfTableEntries
				halConfSrcFileContents += halObjConfTableTemplate.safe_substitute(map)								
				halConfSrcFileContents += halConfigTemplate.safe_substitute(map)			
				file = compName + "/" + "cl" + compName + "HalConf.c"
				halConfSrcFile = open(file, "w")
				halConfSrcFile.write(halConfSrcFileContents)
				halConfSrcFile.close()				
# fix for bug 4317 - remove old cl<Comp>HalConf.c if it exists and there are no hal/do entries			
			else:
				file = compName + "/" + "cl" + compName + "HalConf.c"
				if( os.path.isfile(file) ):
					try:
						os.remove(file)
					except os.error:
						pass

			oampConfigHeaderFile = ""
			oampConfigHeaderFile += oampConfigHeaderTemplate.safe_substitute(map)    # replace compName = compName with map by Abhay
			oampConfigHeaderFile += omClasses
			oampConfigHeaderFile +=	consDestPrototypes
			oampConfigHeaderFile += provFnPrototypes
			oampConfigHeaderFile += alarmFnPrototypes
			oampConfigHeaderFile += oampConfigFooterTemplate.safe_substitute(compName = compName)
			file = compName + "/" + "cl" + compName + "OAMPConfig.h"
			out_file = open(file, "w")
			out_file.write(oampConfigHeaderFile)		
			out_file.close()
			
			oampConfigSourceFile = ""
			oampConfigSourceFile += oampConfigSourceHeaderTemplate.safe_substitute(map)
			oampConfigSourceFile += oampConfigSourceHashDefines
			if omClassDefinitions != "":
				oampConfigSourceFile += omClassTableTemplate.safe_substitute(omClassTableEntries = omClassDefinitions )
			file = compName + "/" + "cl" + compName + "OAMPConfig.c"
			out_file = open(file, "w")
			out_file.write(oampConfigSourceFile)		
			out_file.close()

		
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def processResourceList(resList):
	resMap = dict();
	for res in resList:
		resKey = res.attributes["CWKEY"].value
		resMap[resKey] = res;	
	return resMap


#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def getDeviceObjectTableEntry(resName, do):
	map = dict();
	map['resName'] = resName
	map['deviceID'] = string.upper(resName) + "_" + string.upper(do.attributes["DeviceID"].value)
	map['deviceCapability'] = "0"
	map['deviceCapabilityLen'] = "0"
	map['maxResponseTime'] = do.attributes["MaxResponseTime"].value
	map['bootPriority'] = do.attributes["BootPriority"].value
	map['doOperationTable'] = "g" + resName + do.attributes["DeviceID"].value + "DevOperations"
	
	return deviceObjectTableEntryTemplate.safe_substitute(map) 	


#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def getDeviceOperationsTable(deviceOp, resName, deviceID):
	map = dict();	
	map ['resName'] = resName	
	map ['doName'] = deviceID
	map['init'] = "NULL"
	map['close'] = "NULL"
	map['read'] = "NULL"
	map['write'] = "NULL"
	map['open'] ="NULL"
	map['warm_boot'] ="NULL"
	map['cold_boot'] = "NULL"
	map['pwr_off'] = "NULL"
	map['image_download'] = "NULL"
	map['direct_access'] = "NULL"
	
	if deviceOp.attributes["HAL_DEV_INIT"].value == "true":
		map['init'] = "cl" + resName + deviceID + "Init"

	if deviceOp.attributes["HAL_DEV_OPEN"].value == "true":
		map['open'] = "cl" + resName + deviceID + "Open"

	if deviceOp.attributes["HAL_DEV_CLOSE"].value == "true":
		map['close'] = "cl" + resName + deviceID  + "Close"
								
	if deviceOp.attributes["HAL_DEV_READ"].value == "true":
		map['read'] = "cl" + resName + deviceID + "Read"
						
	if deviceOp.attributes["HAL_DEV_WRITE"].value == "true":
		map['write'] = "cl" + resName + deviceID + "Write"
	
	if deviceOp.attributes["HAL_DEV_COLD_BOOT"].value == "true":
		map['cold_boot'] = "cl" + resName + deviceID + "ColdBoot"
						
	if deviceOp.attributes["HAL_DEV_WARM_BOOT"].value == "true":
		map['warm_boot'] = "cl" + resName + deviceID + "WarmBoot"
							
	if deviceOp.attributes["HAL_DEV_PWR_OFF"].value == "true":
		map['pwr_off'] = "cl" + resName + deviceID + "PwrOff"
								
	if deviceOp.attributes["HAL_DEV_IMAGE_DN_LOAD"].value == "true":
		map['image_download'] = "cl" + resName + deviceID + "ImageDownload"
								
	if deviceOp.attributes["HAL_DEV_DIRECT_ACCESS"].value == "true":
		map['direct_access'] = "cl" + resName + deviceID + "DirectAccess"

	return devicOperationTableTemplate.safe_substitute(map)



#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def getDeviceOperationMethodsAndProtoTypes(deviceOp, resName, deviceID):
	map = dict();
	map ['resName'] = resName	
	map ['deviceID'] = deviceID
	methods = ""
	protoTypes = ""
	
	if deviceOp.attributes["HAL_DEV_INIT"].value == "true":
		map['methodName'] = "Init"								
		methods += deviceOperationMethodTemplate.safe_substitute(map)
		protoTypes += deviceOperationMethodProtoTypeTemplate.safe_substitute(map)
		
	if deviceOp.attributes["HAL_DEV_OPEN"].value == "true":
		map['methodName'] = "Open"								
		methods += deviceOperationMethodTemplate.safe_substitute(map)								
		protoTypes += deviceOperationMethodProtoTypeTemplate.safe_substitute(map)
		
	if deviceOp.attributes["HAL_DEV_CLOSE"].value == "true":
		map['methodName'] = "Close"								
		methods += deviceOperationMethodTemplate.safe_substitute(map)
		protoTypes += deviceOperationMethodProtoTypeTemplate.safe_substitute(map)
								
	if deviceOp.attributes["HAL_DEV_READ"].value == "true":
		map['methodName'] = "Read"								
		methods += deviceOperationMethodTemplate.safe_substitute(map)	
		protoTypes += deviceOperationMethodProtoTypeTemplate.safe_substitute(map)
						
	if deviceOp.attributes["HAL_DEV_WRITE"].value == "true":
		map['methodName'] = "Write"								
		methods += deviceOperationMethodTemplate.safe_substitute(map)
		protoTypes += deviceOperationMethodProtoTypeTemplate.safe_substitute(map)
	
	if deviceOp.attributes["HAL_DEV_COLD_BOOT"].value == "true":
		map['methodName'] = "ColdBoot"								
		methods += deviceOperationMethodTemplate.safe_substitute(map)
		protoTypes += deviceOperationMethodProtoTypeTemplate.safe_substitute(map)				
		
	if deviceOp.attributes["HAL_DEV_WARM_BOOT"].value == "true":
		map['methodName'] = "WarmBoot"								
		methods += deviceOperationMethodTemplate.safe_substitute(map)
		protoTypes += deviceOperationMethodProtoTypeTemplate.safe_substitute(map)
							
	if deviceOp.attributes["HAL_DEV_PWR_OFF"].value == "true":
		map['methodName'] = "PwrOff"								
		methods += deviceOperationMethodTemplate.safe_substitute(map)
		protoTypes += deviceOperationMethodProtoTypeTemplate.safe_substitute(map)						
		
	if deviceOp.attributes["HAL_DEV_IMAGE_DN_LOAD"].value == "true":
		map['methodName'] = "ImageDownload"								
		methods += deviceOperationMethodTemplate.safe_substitute(map)
		protoTypes += deviceOperationMethodProtoTypeTemplate.safe_substitute(map)
								
	if deviceOp.attributes["HAL_DEV_DIRECT_ACCESS"].value == "true":
		map['methodName'] = "DirectAccess"								
		methods += deviceOperationMethodTemplate.safe_substitute(map)
		protoTypes += deviceOperationMethodProtoTypeTemplate.safe_substitute(map)
		
	methodsAndProtoTypes = []
	methodsAndProtoTypes.append(methods)
	methodsAndProtoTypes.append(protoTypes)
	return methodsAndProtoTypes
	
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------	
def getMOPath(resName):
	moPath = "\\\\"
	resource = getResourceFromName(resName)
	bottomToTopPath=[resource.attributes["Name"].value + ":*"]   
	parents = getParents(resource)
	while len(parents) > 0:
		resource = parents[0]
		bottomToTopPath.append(resource.attributes["Name"].value + ":*")        		 
		parents = getParents(resource)        		
          
	index = len(bottomToTopPath)-1    
	while index >= 0:
		moPath += bottomToTopPath[index]
		if index > 0:
			moPath += "\\\\"
		index -= 1
	
	return mopathTemplate.safe_substitute(path = moPath)
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def getResourceFromName(resName):
	for resource in resourceList:
		if resource.attributes["Name"].value == resName:
			return resource
	
	return None
	


#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def getParents(resource):	
	resKey = resource.attributes["CWKEY"].value;		
	parents = []
	for composition in compositionList:
		targetKey = composition.attributes["target"].value		
		if targetKey == resKey:			
			parents.append(getResourceFromKey(composition.attributes["source"].value))			
		
	return parents
	
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def getResourceFromKey(key):
	for res in resourceList:				
		resKey = res.attributes["CWKEY"].value;		
		if resKey == key:
			return res
			
	return None	

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#Script Execution Starts Here.
componentXmi = sys.argv[1];
resourceXmi = sys.argv[2];
cgMode = sys.argv[3];

componentDoc = xml.dom.minidom.parse(componentXmi) 
resourceDoc = xml.dom.minidom.parse(resourceXmi)

componentList = componentDoc.getElementsByTagName("component:Component") + componentDoc.getElementsByTagName("component:SAFComponent")
resourceList = resourceDoc.getElementsByTagName("resource:SoftwareResource")+resourceDoc.getElementsByTagName("resource:HardwareResource")+resourceDoc.getElementsByTagName("resource:NodeHardwareResource")+resourceDoc.getElementsByTagName("resource:SystemController")+resourceDoc.getElementsByTagName("resource:ChassisResource")
compositionList = resourceDoc.getElementsByTagName("resource:Composition")

resourceMap = processResourceList(resourceList)
result  = processComponentList(componentList, resourceMap, cgMode)



