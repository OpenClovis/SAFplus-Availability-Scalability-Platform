################################################################################
# ModuleName  : SampleModel
# $File$
# $Author$
# $Date$
################################################################################
# Description :
# usage: python alarmprofiles.py <args>
# Alarm Profiles Definition for components
################################################################################
import sys
import string
import os
import xml.dom.minidom
from string import Template
import time
import getpass

mainTemplate = Template("""\
/******************************************************************************
 *
 * cl${compName}alarmMetaStruct.c
 *
 ******************************************************************************
 * This code is auto-generated by OpenClovis IDE @Version 2.2.0
 *
 ***************************** Description ************************************
 *
 * 
 * Date : $DateTime 
 * User : $Author 
 *
 *****************************************************************************/
#include <clAlarmDefinitions.h>
#include <clCorMetaData.h>
#include <clCorMetaStruct.h>

${alarmRulesTables}
${alarmProfilesTables}
ClAlarmComponentResAlarmsT appAlarms [] = 
{
${compAlarms}
	{0,0,0}
};

""")

compAlarmTemplate = Template("""\
	{${className}, ${pollingInterval}, Cl${profileTableName}},	
""")

alarmProfileTableTemplate = Template("""\
ClAlarmProfileT Cl${profileTableName} [] =
{
${alarmProfiles}
	{0,0,0,0,0,0,0,0}	
};
""")

alarmProfileTemplate = Template("""\
	{
		${category},
		${probableCauseName},
		${severity},
		${polled},
		${assertSoakingTime},
		${clearSoakingTime},
		${genRuleTableName},
		${suppressRuleTableName}	
	},
""")

generationRuleTableTemplate = Template("""\
ClAlarmRuleInfoT Cl${genRuleTableName} [] =
{
${genRules}
	{0, 0}
};
""")

generationRuleTemplate = Template("""\
	{${genRuleRelationName}, Cl${ruleIDsTableName}},
""")

ruleIDTableTemplate = Template("""\
ClAlarmProbableCauseT Cl${ruleIDsTableName} [] =
{
${ruleIDs}
};
""")

ruleIDTemplate = Template("""\
	${ruleID},
""")

#-----------------------------------------------------------------------------
#------------------------------------------------------------------------------
def processComponentList(compList, resMap, alarmMap):
	# This method needs to be cleaned
	pollingTime = 100
	for comp in compList:
		result = ""
		compName = comp.attributes["Name"].value
		compAlarms = ""
		alarmRulesTables =""
		alarmProfilesTables=""
		realizes = comp.getElementsByTagName("Realizes")
		if len(realizes) > 0:
			tempAlarmMap = dict();
			for resource in realizes:
				res = resMap[resource.firstChild.data]
				resName = res.attributes["Name"].value
				alarm = res.getElementsByTagName("AlarmManagement")
				alarmProfiles = ""
				if len(alarm) > 0 and alarm[0].attributes["isEnabled"].value=="true":
					pollingTime = alarm[0].attributes["PollingInterval"].value
					alarmids = alarm[0].getElementsByTagName("AlarmIDs")
					if len(alarmids) > 0:
						for alarmid in alarmids:
							alarmProfile = alarmMap[alarmid.firstChild.data]
							d = dict();
							alarmProfileName = alarmProfile.attributes["ProbableCause"].value
							genRule = alarmProfile.getElementsByTagName("GenerationRule")
							ruleIDs = ""
							if len(genRule) > 0 and len(genRule[0].getElementsByTagName("AlarmIDs")) > 0:
								alarmRulesTables += createGenRuleTable(genRule[0], resName + alarmProfileName, alarmMap)
	
		   	  	        	        suppRule = alarmProfile.getElementsByTagName("SuppressionRule")
							ruleIDs = ""				
							if len(suppRule) > 0 and len(suppRule[0].getElementsByTagName("AlarmIDs")) > 0:
								alarmRulesTables += createSuppRuleTable(suppRule[0], resName +alarmProfileName, alarmMap)
							
							alarmProfiles += createAlarmProfileDef(alarmProfile, resName, genRule, suppRule)
				alarmProfilesTables += createAlarmProfileTable(alarmProfiles, resName)
				
				className = "CLASS_" + resName.upper() + "_MO"
				m = dict();
				m["className"] = className
				m["pollingInterval"] = pollingTime
				m["profileTableName"] = resName + "AlmProfile"
				compAlarms += compAlarmTemplate.safe_substitute(m)
		result += createComponentAlarmTable(compAlarms, alarmProfilesTables, alarmRulesTables, compName)
		if os.path.exists(compName) == False:
			os.mkdir(compName)
	
		file = compName + "/" + "cl" + compName + "alarmMetaStruct.c"	
		out_file = open(file, "w")
		out_file.write(result)
		out_file.close()
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def createRuleIDsTable(ids, alarmMap):
	#This method needs to be cleaned
	result = ""
        if len(ids) > 0:
		for id in ids:
                	idMap = dict();
                	alarmProfile = alarmMap[id.firstChild.data]
                	probCause = alarmProfile.attributes["ProbableCause"].value
                	idMap["ruleID"] = probCause
                	result += ruleIDTemplate.safe_substitute(idMap)
	for n in range((4-len(ids))):
		idMap = dict();
		idMap["ruleID"] = "CL_ALARM_ID_INVALID"
		result += ruleIDTemplate.safe_substitute(idMap)
	return result
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def createGenRuleTable(genRule, name, alarmMap):
	result = ""
	ids = genRule.getElementsByTagName("AlarmIDs")
        ruleIDs = createRuleIDsTable(ids, alarmMap)
        ruleMap = dict();
        ruleMap["ruleIDsTableName"] = name + "GenRuleAlarmIds"
        ruleMap["genRuleRelationName"] = genRule.attributes["Relation"].value
        ruleMap["ruleIDs"] = ruleIDs
        result += ruleIDTableTemplate.safe_substitute(ruleMap)
        ruleMap["genRules"] = generationRuleTemplate.safe_substitute(ruleMap)
        ruleMap["genRuleTableName"] = name + "GenRule"
        result += generationRuleTableTemplate.safe_substitute(ruleMap)

	return result
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def createSuppRuleTable(suppRule, name, alarmMap):
	result = ""
        ids = suppRule.getElementsByTagName("AlarmIDs")
        ruleIDs = createRuleIDsTable(ids, alarmMap)
        ruleMap = dict();
        ruleMap["ruleIDsTableName"] = name + "SuppressRuleAlarmIds"
        ruleMap["genRuleRelationName"] = suppRule.attributes["Relation"].value
        ruleMap["ruleIDs"] = ruleIDs
        result += ruleIDTableTemplate.safe_substitute(ruleMap)
        ruleMap["genRules"] = generationRuleTemplate.safe_substitute(ruleMap)
        ruleMap["genRuleTableName"] = name +"SuppressRule"
        result += generationRuleTableTemplate.safe_substitute(ruleMap)
	
	return result
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def createComponentAlarmTable(compAlarms, alarmProfilesTables, alarmRules, name):
	map = dict();
	map['DateTime'] = unicode(time.strftime("%D at %H:%M:%S", time.localtime()))
	map['Author'] = getpass.getuser()	
	map["compAlarms"] = compAlarms
	map["alarmRulesTables"] = alarmRules
	map["alarmProfilesTables"] = alarmProfilesTables
	map["compName"] = name
	result = mainTemplate.safe_substitute(map)
	return result 
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def createAlarmProfileTable(alarmProfiles, tableName):
	tableMap = dict();
	tableMap["alarmProfiles"] = alarmProfiles
	tableMap["profileTableName"] = tableName + "AlmProfile"
	result = alarmProfileTableTemplate.safe_substitute(tableMap)
	return result
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def createAlarmProfileDef(alarmProfile, resName, genRule, suppRule):
	alarmMap = dict();
	alarmMap["category"] = alarmProfile.attributes["Category"].value
	alarmMap["severity"] = alarmProfile.attributes["Severity"].value
	polled = alarmProfile.attributes["IsAlarmPolled"].value
	if polled == "true":
		alarmMap["polled"] = "1"
	else:
		alarmMap["polled"] = "0"
	alarmMap["assertSoakingTime"] = alarmProfile.attributes["AssertSoakingTime"].value
	alarmMap["clearSoakingTime"] = alarmProfile.attributes["ClearSoakingTime"].value
	probableCauseName = alarmProfile.attributes["ProbableCause"].value
	alarmMap["probableCauseName"] = probableCauseName.upper()
	if len(genRule) > 0 and len(genRule[0].getElementsByTagName("AlarmIDs")) > 0:
		alarmMap["genRuleTableName"] = "Cl" + resName + alarmProfile.attributes["ProbableCause"].value + "GenRule"
	else:
		alarmMap["genRuleTableName"] = "NULL"
	if len(suppRule) > 0 and len(suppRule[0].getElementsByTagName("AlarmIDs")) > 0:
		alarmMap["suppressRuleTableName"] = "Cl" + resName + alarmProfile.attributes["ProbableCause"].value +"SuppressRule" 
	else:
		alarmMap["suppressRuleTableName"] = "NULL"
	result = alarmProfileTemplate.safe_substitute(alarmMap)

	return result	
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def processResourceList(resList):
	resMap = dict();
	for res in resList:
		resKey = res.attributes["CWKEY"].value
		resMap[resKey] = res;
	return resMap
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def processAlarmProfileList(alarmList):
	alarmMap = dict();
        for alarm in alarmList:
		uniqueName = alarm.attributes["CWKEY"].value
		alarmMap[uniqueName] = alarm;
	return alarmMap
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

#Script Execution Starts Here.
componentXmi = sys.argv[1];
resourceXmi = sys.argv[2];
alarmProfileXmi = sys.argv[3];

if os.path.exists(alarmProfileXmi):
	componentDoc = xml.dom.minidom.parse(componentXmi) 
	resourceDoc = xml.dom.minidom.parse(resourceXmi)
	alarmProfileDoc = xml.dom.minidom.parse(alarmProfileXmi)

	componentList = componentDoc.getElementsByTagName("component:Component") + componentDoc.getElementsByTagName("component:SAFComponent")
	resourceList = resourceDoc.getElementsByTagName("resource:SoftwareResource")+resourceDoc.getElementsByTagName("resource:HardwareResource")+resourceDoc.getElementsByTagName(			"resource:NodeHardwareResource")+resourceDoc.getElementsByTagName("resource:SystemController")+resourceDoc.getElementsByTagName("resource:ChassisResource")
	alarmProfileList = alarmProfileDoc.getElementsByTagName("alarm:AlarmProfile")
	
	resourceMap = processResourceList(resourceList)
	alarmProfileMap = processAlarmProfileList(alarmProfileList)
	result  = processComponentList(componentList, resourceMap, alarmProfileMap)	
	



