################################################################################
# ModuleName  : SampleModel
# $File$
# $Author$
# $Date$
################################################################################
# Description :
# usage: python generatemoid.py <args>
# create moId.h
################################################################################
import sys
import string
import os
import xml.dom.minidom
from string import Template
import time
import getpass

mainTemplate = Template("""\
/******************************************************************************
 *
 * MOID.h
 *
 ******************************************************************************
 * This code is auto-generated by OpenClovis IDE Version 2.2.0
 *
 ***************************** Description ************************************
 *
 * 
 * Date : $DateTime 
 * User : $Author 
 *
 *****************************************************************************/
#ifndef _CL_MOID__H_
#define _CL_MOID_H_
#ifdef __cplusplus
extern "C"
{
#endif

${moIDs}

#ifdef __cplusplus
}
#endif
#endif /* _CL_MOID_H_*/

""")

moIdTemplate = Template("""\
#define ${moIdString} "${moId}"
""")

def generateMoIds(nodeInstanceList):
	out_file = open("MOID.h","w")
	moIDs = ""
	map = dict()
	map['DateTime'] = unicode(time.strftime("%D at %H:%M:%S", time.localtime()))
	map['Author'] = getpass.getuser()
	for nodeInst in nodeInstanceList:
		nodeName = nodeInst.attributes["name"].value
		nodeMoId = nodeInst.attributes["nodeMoId"].value	
		node_rtfile = configDir + filePathSeparator + nodeName + "_rt.xml"
		if os.path.exists(node_rtfile):
			rtDoc = xml.dom.minidom.parse(node_rtfile) 
			resMoIdList = rtDoc.getElementsByTagName("resource")
			for resMoId in resMoIdList:
				map1 = dict();
				moId = nodeMoId + resMoId.attributes["moID"].value
				moIdString_ = moId.replace(":","_")
				moIdString = moIdString_.replace("\\","_")
				moIdString = moIdString.lstrip("_")
				map1['moId'] = moId
				map1['moIdString'] = moIdString
				moIDs += moIdTemplate.safe_substitute(map1)
	map['moIDs'] = moIDs			
	out_file.write(mainTemplate.safe_substitute(map))
	out_file.close()

#Script execution starts here
configDir = sys.argv[1];
filePathSeparator = '/'
amfConfigXml = configDir + filePathSeparator + "amfConfig.xml"
if os.path.exists(amfConfigXml):
	amfDoc = xml.dom.minidom.parse(amfConfigXml) 
	nodeInstanceList = amfDoc.getElementsByTagName("nodeInstance")
	generateMoIds(nodeInstanceList)
