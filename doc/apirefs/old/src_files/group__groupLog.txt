\hypertarget{group__group26}{
\chapter{Functional Overview}
\label{group__group26}
\index{Log Service@{Log Service}}
}


\begin{flushleft}

Computer programs record various events during their execution for further analysis. ASP Log Service facilitates recording information about these events. Any application/ASP component in the cluster can use the Log Service to record information.
Log Service persists the information recorded by its clients so that it is available for consumption. The consumer can be an offline consumer or an 
online consumer. An online consumer consumes the information when it is generated. An offline consumer consumes the after it is generated. 
Log Service does not interpret the information recorded by its clients. It treats the information as octet stream and does not apply any semantic meaning
to it.
\pat
Information related to an event is stored as one unit. This unit is called a Log Record. Log Records are grouped together based on a theme defined by
the client. This group is called a Log Stream. Log Streams can be shared by various components of a single application or of different applications.
The theme and the users of a Log Stream are defined by the application. These Log Streams flow into Handlers. There are two types of handlers.
\begin{itemize}
\item
File handler - persists the Log Records into the Log File. 
\item
Online Viewer - used to view the Log Records as they are generated. 
\end{itemize}
An archiving utility must siphon off Log Records from the Log File to other storage unit. 
\par
Log Service provides interfaces for:
\begin{itemize}
\item
Creating a Log Stream.
\item
Opening an existing Log Stream.
\item
Recording an event into an opened Log Stream.
\item
Closing a Log Stream. 
\item
Changing the properties of Log Streams.
\item
Setting filters on the Log Stream to filter events at the generation side. 
\item
Registering interest in receiving certain Log Streams.
\item
Receiving these streams.
\end{itemize}



\chapter{Service Model}
\section{Usage Model}
\index{Usage Model@{Usage Model}}
The usage model of the Log Service is a Producer-Consumer model. Loggers are the producers of the Log Records and Log Stream Handlers are consumers of 
these records. 
Multiple Loggers can log into a single Log Stream. Similarly, a single record can be consumed by many Log Stream Handlers simultaneously. 
The usage model can also be considered as a publisher-subscriber model as Loggers and Log Stream Handlers are unaware of each other and each Log Stream
Handler receives all the logged records. One of the Log Stream Handler is Log File Handler that persists the Log Records in the Log File. Certain other 
applications like offline Log Viewer and Archiver work with Log File Handler.

\includegraphics{Log1.jpg}
Usage Model of Log Service


\section{Functional Description}
\index{Functional Description@{Functional Description}}
The purpose of the Log Service is to record the information provided by the Logger for future use. This information is provided in the form of Log
Records. Log Records flow through a Log Stream and are persisted by the Log Service in the Log File.
\par
The Logger uses clLogWriteAsync() API to pour a Log Record into a Log Stream. Before using the services of Log Service, the Logger has to initialize 
the Log Service by invoking clLogInitialize(). clLogInitialize() returns a logServiceHandle that can be used in the subsequent operations on the Log 
\par
Service to identify the initialization. When this handle is no more required, the association can be closed by invoking clLogFinalize(). 
After initializing the Log Service, the Logger gains access to the Log Stream by invoking clLogStreamOpen(). clLogStreamOpen() returns a 
logStreamHandle that can be used in clLogWriteAsync() API to identify the Log Stream. When a Log Stream is no more required by a Logger, it can 
close the stream by invoking clLogStreamClose(). 
A Log Client can change the filter of a Log Stream by invoking clLogStreamFilterSet().


Consumers can access the Log Records in the following ways:
\begin{itemize}
\item
On-line through Log Service.
\item
Off-line through Log Service.
\item
Read the Log File directly.
\end{itemize}


The on-line consumers are called Log Stream Handlers as they retrieve records in a push mode. They continuously wait for records and process them as 
they get it. For example, Log File Handler and on-line viewer. These handlers initialize the Log Service by invoking clLogInitialize() and register 
their interest in a particular Log Stream by invoking clLogHandlerRegister(). After registration, the handler starts receiving the records through a 
callback ClLogRecordsDeliverCallbackT, registered during clLogInitialize(). When the handler is no more interested in receiving the Log Records for a 
particular Log Stream, it can deregister itself by invoking clLogHandlerDeregister().
\par
The second kind of consumers is off-line consumer. These consumers operate in the pull mode and they explicitly ask the Log Service for more Log Records,
if they are available. Another important difference is these consumers work on the Log File instead of the Log Stream. For example, the Log Reader and
Archiver. These consumers initialize the Log Service by invoking clLogInitialize() and open a Log File by invoking clLogFileOpen(). When they need more 
records, they invoke clLogFileGetRecords(). After completion they close the file by invoking clLogFileClose().
\apr
The third kind of consumer is the off-line consumer who may not be present in the cluster itself. These consumers are out of scope of Log Service. 
They operate directly on the Log File. For example, Off-line viewer. 

\begin{Desc}
\item[At-most Once Guarantee]
\end{Desc}
Log Service ensures At-most Once guarantee. Log Records can be lost due to many reasons. Some of the reasons are: \par
Log Files have limited space and if the Archiver is not configured correctly, the Log File can become full even before the Archiver can remove certain
Log Records to create space for more. The Log Service overwrites the oldest records and these overwritten records are lost. 
\par
If a node fails before moving recently generated Log Records to the Log File Handler for persistence. Similarly, if the speed of flushing of new Log 
Records is slower than the rate of generation of Log Records, then the local memory of the Log Service Element may become full and overwrite oldest Log 
Records. The overwritten Log Records are lost.


\begin{Desc}
\item[Log Stream Attributes]
\end{Desc}

Each Log Stream is characterized by a set of attributes. These attributes are specified when the Stream is created and cannot be modified during the
lifetime of the Stream. These attributes are specified through ClLogStreamAttributesT structure.
The attributes of a log stream are: 
\begin{itemize}
\item
Name of the file.
\item
Location of the Log file where the Log Stream is to be persisted.
\item
Size of each record in the Log Stream.
\item
Maximum number of records that can be stored in one physical file.
\item
Action to be taken when the Log file size reaches the maximum limit.
\item
Backup copy for the Log file.
\item
Frequency at which the Log Records must be cleared. 
\end{itemize}
Multiple Log Streams can be persisted into a single Log File. Local and Global streams can be mixed together in one Log File. In such a case, all the 
stream attributes other than flushFreq and flushInterval must be same.



\begin{Desc}
\item[Log File]
\end{Desc}

Log File is a logical concept and a collection of physical files. Each physical file is called a Log File Unit. 
A Log File can contain only one Log File Unit if the action to be taken when the Log File 
reaches its maximum limit is set to CL\_\-LOG\_\-FILE\_\-FULL\_\-ACTION\_\-HALT or CL\_\-LOG\_\-FILE\_\-FULL\_\-ACTION\_\-WRAP.
A Log File can contain multiple Log File Units if the action to be taken when the Log File 
reaches its maximum limit is set to CL\_\-LOG\_\-FILE\_\-FULL\_\-ACTION\_\-ROTATE.
\par
The size of a Log File Unit is specified in maxFileSize. Maximum number of Log File Units in a Log File is governed by maxFilesRotated attribute of
Log Stream. The Log File Unit names follow the following pattern: \par
\tt{fileName_<creationTime>}
\par
where fileName is a stream attribute and <creationTime> is the
wall clock time when this Log File Unit is created. A file called \tt{fileName.cfg} is generated for every Log File that stores the configuration 
information of the Log File. This file contains the attributes of the Log Streams contained in that Log file and streamId to streamName mapping.






\chapter{Service APIs}

\section{Type Definitions}
\index{Type Definitions@{Type Definitions}}

\subsubsection{ClLogHandleT}
\index{ClLogHandleT@{ClLogHandleT}}
\textit{typedef ClHandleT ClLogHandleT;}
\newline
\newline
The type of the handle that Log Service provides to a process when the Log Service library is initialized. 
A process uses this handle when it invokes Log service functions so that the Log Service can recognize the process.


\subsubsection{ClLogStreamHandleT}
\index{ClLogStreamHandleT@{ClLogStreamHandleT}}
\textit{typedef ClHandleT ClLogStreamHandleT;}
\newline
\newline
The type of handle of a Log Stream that the Log Service provides to a process that has opened a stream for Logging or registered itself as a Handler for
a stream. A process uses this handle while invoking functions of Log Service API on a Log Stream.


\subsubsection{ClLogFileHandleT}
\index{ClLogFileHandleT@{ClLogFileHandleT}}
\textit{typedef ClHandleT ClLogFileHandleT;}
\newline
\newline
The type of handle of a Log File that the Log Service provides to a process that has opened a Log File for consuming Log Records.
A process uses this handle while invoking functions of Log Service API on a Log File.



\subsubsection{ClLogCallbacksT}
\index{ClLogCallbacksT@{ClLogCallbacksT}}
\begin{tabbing}
xx\=xx\=xx\=xx\=xx\=xx\=xx\=xx\=xx\=\kill
\textit{typedef struct \{}\\
\>\>\>\>\textit{ClLogStreamOpenCallbackT    clLogStreamOpenCallback;}\\
\>\>\>\>\textit{ClLogFilterSetCallbackT          clLogFilterSetCallback;}\\
\>\>\>\>\textit{ClLogWriteLogCallbackT         clLogStreamOpenCallback;}\\
\>\>\>\>\textit{ClLogRecordDeliverCallbackT	clLogRecordDeliverCallback;}\\
\textit{\} ClLogCallbacksT;}\end{tabbing}

The callback structure that the process provides to the Log Service. Currently, 
\textit{clLogWriteCallback} is not supported and setting this field does not 
make any difference.


\subsubsection{ClLogStreamScopeT}
\index{ClLogStreamScopeT@{ClLogStreamScopeT}}
\begin{tabbing}
xx\=xx\=xx\=xx\=xx\=xx\=xx\=xx\=xx\=\kill
\textit{typedef enum \{}\\
\>\>\>\>\textit{CL\_LOG\_STREAM\_GLOBAL = 0,}\\
\>\>\>\>\textit{CL\_LOG\_STREAM\_LOCAL = 1,}\\
\textit{\} ClLogStreamScopeT;}\end{tabbing}
The enumeration \textit{ClLogStreamScopeT} contains the scope of the Log Stream. You can specify the scope of a Log Stream using this enumeration.
Log Stream can be local to a node (Local Log Stream) or global to the cluster (Global Log Stream).


\subsubsection{ClLogFileFullActionT}
\index{ClLogFileFullActionT@{ClLogFileFullActionT}}
\begin{tabbing}
xx\=xx\=xx\=xx\=xx\=xx\=xx\=xx\=xx\=\kill
\textit{typedef enum\{}\\
\>\>\>\>\textit{CL\_LOG\_FILE\_FULL\_ACTION\_ROTATE = 0,}\\
\>\>\>\>\textit{CL\_LOG\_FILE\_FULL\_ACTION\_WRAP = 1,}\\
\>\>\>\>\textit{CL\_LOG\_FILE\_FULL\_ACTION\_HALT = 2,}\\
\textit{\} ClLogFileFullActionT;}\end{tabbing}
You can specify the action Log Service must take when the Log File becomes full using this enumeration. 
\begin{itemize}
\item \textit{CL\_\-LOG\_\-FILE\_\-FULL\_\-ACTION\_\-ROTATE} - Creates a new Log File Unit when the current Log File Unit 
becomes full. The maxFilesRotated attribute of the Log Stream specifies the number of maximum Log File Units that can simultaneously exist.
The Log service deletes the oldest Log File Unit and creates a new Log File Unit.
\item
\textit{CL\_\-LOG\_\-FILE\_\-FULL\_\-ACTION\_\-WRAP} - Treats the Log File as a circular buffer. Log Service starts overwriting the oldest records
when the Log File becomes full.
\item	\textit{CL\_\-LOG\_\-FILE\_\-FULL\_\-ACTION\_\-HALT} - Log Service stops inserting records into the
Log File.
\end{itemize}




\subsubsection{ClLogStreamAttributesT}
\index{ClLogStreamAttributesT@{ClLogStreamAttributesT}}
\begin{tabbing}
xx\=xx\=xx\=xx\=xx\=xx\=xx\=xx\=xx\=\kill
\textit{typedef struct\{}\\
\>\>\>\>\textit{ClCharT		*fileName;}\\
\>\>\>\>\textit{ClCharT		*filePath;}\\
\>\>\>\>\textit{ClUint32T		maxFileSize;}\\
\>\>\>\>\textit{ClUint32T		recordSize;}\\
\>\>\>\>\textit{ClBoolT		haProperty;}\\
\>\>\>\>\textit{ClFileFullActionT	fileFullAction;}\\
\>\>\>\>\textit{ClUint32T		maxFilesRotated;}\\
\>\>\>\>\textit{ClUint32T		flushFreq;}\\
\>\>\>\>\textit{ClTimeT		flushInterval;}\\
\>\>\>\>\textit{ClWatermarkT	highWatermark;}\\
\textit{\} ClLogStreamAttributesT;}\end{tabbing}} 
The structure \textit{ClLogStreamAttributesT}contains the attributes of a Log Stream. The fields of this structure have the following interpretation.
\begin{itemize}
\item
\textit{fileName} - Prefix for the names of the Log File Units to be created. The name of a Log File Unit is \tt{fileName_<creationTime>} where creation
time is the wall clock time when the File Unit is created. This name is also used to create the configuration file name fileName.cfg.
\item
\textit{filePath} - Path where Log File Units and configuration files are stored. This is a string with a pattern \tt{<nodeName>:<absolutePath>}, where
the <nodeName> is the logical node name in the cluster where the file is stored and <absolutePath> is the absolute path on that node. This path must
be pre-created. Log Service does not create any missing directories.
\item
\textit{maxFileSize} - Size of each Log File Unit for this Log Stream in bytes. If it is set to zero, there is no previously defined limit on 
Log File Unit size.
\item
\textit{recordSize} - Size of each Log Record in this Log Stream in bytes.
\item
\textit{haProperty} - If this attribute is set to \tt{CL\_\-TRUE}, the Log File where this Log Stream is persistent and must always be available. 
If it is set to \tt{CL\_\-FALSE} and if the node hosting this Log File fails, the Log File is not retained.
\item
\textit{fileFullAction} - Action that the Log Service should take when the Log File Unit becomes full. Refer to the enumeration 
\textit{ClLogFileFullActionT} for details on this field.
\item
\textit{maxFileRotated} - Indicates the number of Log File Units in a Log File if the fileFullAction is set to 
CL\_\-LOG\_\-FILE\_\-FULL\_\-ACTION\_\-ROTATE. If fileFullAction is set to any other value, this field is ignored. 
A value of zero indicates no previously defined upper limit on the number of Log File Units in the Log File.
\item
\textit{flushFreq} - Number of Log Records after which the Log Stream must be flushed. This is the maximum number of records on a node which are still
not persisted at any given point in time. Log Service guarantees that no more than flushFreq number of records will be lost if a node fails. A value of 
zero indicates that this field is ignored and Log Records are flushed based on flushInterval. At least one of flushFreq and flushInterval must be 
non-zero for a Log Stream.
\item
\textit{flushInterval} - Time in nanoseconds after which the Log Stream must be flushed. This is the maximum duration of time a Log Record can stay 
in a Log Stream without being persisted. Log Service guarantees that Log Records generated in \textit{flushInterval} time are not lost on a node failure. 
A value of zero indicates that this field is ignored and Log Records are flushed based on flushFreq. 
Either flushFreq or flushInterval must be non-zero for a Log Stream.
\item
\textit{highWatermark} - If the Log File size reaches the higher value of this limit, an event is published and an alarm is issued. The Archiver 
combines the oldest Log Records into an archive to free up space in Log File before it becomes full. No new event is generated until the 
Log File utilization goes below lower value of this limit. Both the values are specified in terms of percentage of Log File size.




\subsubsection{ClLogStreamOpenFlagsT}
\index{ClLogStreamOpenFlagsT@{ClLogStreamOpenFlagsT}}
\textit{typedef ClUint8T ClLogStreamOpenFlagsT;}
\newline
\newline
\textit{ClLogStreamOpenFlagsT} specifies the open attributes used in clLogStreamOpen() and clLogStreamOpenAsync() while opening a Log Stream for Logging.
\newline 
\newline
\textit{\#define CL\_\-LOG\_\-STREAM\_\-CREATE 0x1} - A value or parameter of type ClLogStreamOpenFlagsT. It is either zero or bitwise OR of the following: 
\begin{itemize}
\item
\textit{CL\_\-LOG\_\-STREAM\_\-CREATE} - This flag requests the creation of a Log Stream if the identified Log Stream does not exist.
\end{itemize}
	


\subsubsection{ClLogStreamInfoT}
\index{ClLogStreamInfoT@{ClLogStreamInfoT}}
\begin{tabbing}
xx\=xx\=xx\=xx\=xx\=xx\=xx\=xx\=xx\=\kill
\textit{typedef struct\{}\\
\>\>\>\>\textit{ClNameT			streamName;}\\
\>\>\>\>\textit{ClLogStreamScopeT		streamSope;}\\
\>\>\>\>\textit{ClCharT			*pNodeName;}\\
\>\>\>\>\textit{ClStreamAttributesT	streamAttributes;}\\
\textit{\} ClLogStreamInfoT;}\end{tabbing}} 
The structure \textit{ClLogStreamInfoT} contains information about a Log Stream. The fields of this structure have the following interpretation:
\begin{itemize}
\item
\textit{streamName} - Name of the Log Stream that is unique within its namespace.
\item
\textit{streamScope} -Scope of the stream. It can take the values specified in \textit{ClLogStreamScopeT}.
\item
\textit{pNodeName} - Name of the node on which the Log Stream exists. This is valid if the streamScope is set to CL\_\-LOG\_\-STREAM\_\-LOCAL. If 
streamScope is set to CL\_\-LOG\_\-STREAM\_\-GLOBAL, this field is ignored. It is a string that terminates with NULL.
\item
\textit{streamAttributes} - Attributes of the Log Stream identified by 3-tuple streamName, streamScope and pNodeName.
\end{itemize}


\subsubsection{ClLogStreamHandlerFlagsT}
\index{ClLogStreamHandlerFlagsT@{ClLogStreamHandlerFlagsT}}
\textit{typedef ClUint8T ClLogStreamHandlerFlagsT;}
\newline
\newline
The following values specify the Log Handler options used in clLogStreamregister() while registering as a handler for a Log Stream.
\newline 
\newline
\textit{#define CL\_\-LOG\_\-HANDLER\_\-WILL\_\-ACK	0x1} - A value or parameter of type ClLogStreamHandlerFlagsT. It is either zero or bitwise OR of
the following: 
\begin{itemize}
\item
\textit{CL\_\-LOG\_\-HANDLER\_\-WILL\_\-ACK} - This flag informs the Log Service that this handler acknowledges all the Log Records receives.
\end{itemize}




\subsubsection{ClLogSeverityT}
\index{ClLogSeverityT@{ClLogSeverityT}}
\textit{typedef ClUint8T ClLogSeverityT;}
\newline
\newline
\textit{ClLogSeverityT} specifies the log severity levels supported by the Log Service. It can take one of the following values:
\begin{itemize}
\item \textit{CL\_\-LOG\_\-SEV\_\-EMERGENCY 0x1}
	\item\textit{#define CL\_\-LOG\_\-SEV\_\-ALERT 0x2}
	\item\textit{#define CL\_\-LOG\_\-SEV\_\-CRITICAL 0x3}
	\item\textit{#define CL\_\-LOG\_\-SEV\_\-ERROR 0x4}
	\item\textit{#define CL\_\-LOG\_\-SEV\_\-WARNING 0x5}
	\item\textit{#define CL\_\-LOG\_\-SEV\_\-NOTICE 0x6}
	\item\textit{#define CL\_\-LOG\_\-SEV\_\-INFO 0x7}
	\item\textit{#define CL\_\-LOG\_\-SEV\_\-DEBUG 0x8}
	\item\textit{#define CL\_\-LOG\_\-SEV\_\-MAX 0x15}
\end{itemize}	


\subsubsection{ClLogSeverityFilterT}
\index{ClLogSeverityFilterT@{ClLogSeverityFilterT}}
\textit{typedef ClUint16T ClLogSeverityFilterT;}
\newline
\newline
A variable of this type is used as a bitmap. Values from ClLogSeverityT are used to set individual bits in this bitmap.




\subsubsection{ClLogFilterFlagsT}
\index{ClLogFilterFlagsT@{ClLogFilterFlagsT}}
\textit{typedef ClUint8T ClLogFilterFlagsT;}
\newline
\newline
\textit{ClLogFilterFlagsT} is used to determine if the new filter set is used to overwrite old filter or to
modify the old filter. It can take one of the following values:
\begin{itemize}
\item
\textit{#define CL\_\-LOG\_\-FILTER\_\-ASSIGN 0x1} - Discards the old filter settings and uses the new settings.
\item
\textit{#define CL\_\-LOG\_\-FILTER\_\-MERGE\_\-ADD	0x2} - Adds to the old filter settings as per filter settings provided. This is achieved by ORing 
the new filter with old filter.
\item
\textit{#define CL\_\-LOG\_\-FILTER\_\-MERGE\_\-DELETE 0x3} - Deletes the old filter settings as per filter settings provided. This is achieved by 
clearing the 
new filter bits from old filter.
\end{itemize}	


\subsubsection{ClLogFilterT}
\index{ClLogFilterT@{ClLogFilterT}}
\begin{tabbing}
xx\=xx\=xx\=xx\=xx\=xx\=xx\=xx\=xx\=\kill
\textit{typedef struct \{}\\
\>\>\>\>\textit{ClLogSeverityFilterT	logSeverityFilter;}\\
\>\>\>\>\textit{ClUint16T			logMsgIdSetLength;}\\
\>\>\>\>\textit{ClUint8T			*pLogMsgIdSet;}\\
\>\>\>\>\textit{ClUint16T			logCompIdSetLength;}\\
\>\>\>\>\textit{ClUint8T			*pLogCompIdSet;}\\
\textit{\} ClLogFilterT;}\end{tabbing}
The structure contains the filter settings. The members of this structure have the following interpretation:
\begin{itemize}
\item
\textit{logSeverityFilter} - This field identifies the severity levels to be masked. Each severity level has a bit identified in this
bitmap. These bits identify the severity levels which must be masked or prevented from entering the Log Stream.
\item
\textit{logMsgIdSetLength} - Number of octets in the memory chunk pointed by pLogMsgIdSet field.
\item
\textit{pLogMsgIdSet} - Pointer to the memory chunk which is treated as a bitmap and set bits identify the message IDs to be masked. Bit numbers
in this bitmap are same as the message ID.
\item
\textit{logCompIdSetLength} - Number of octets in the memory chunk pointed by pLogCompIdSet field.
\item
\textit{pLogCompIdSet} - Pointer to a memory chunk which is treated as a bitmap. The bits that are set identify the component IDs to be masked. 
The lower octet of the component ID identifies the class of the component and higher octet identifies the node on which 
it is running. Log Service sets the filter on the class of the component and so, only the lower octet is used. The bit number maps to the lower
octet. This implies that the Log Records from a class of components are turned on or off.
\end{itemize}	







\newpage
\section{Library Life Cycle Functions}
\subsubsection{clLogInitialize}
\index{clLogInitialize@{clLogInitialize}}
\hypertarget{pagelog101}{}\paragraph{cl\-Log\-Initialize}\label{pagelog101}
\begin{Desc}
\item[Synopsis:]Initializes the Log Service and ensures version compatibility.\end{Desc}
\begin{Desc}
\item[Header File:] clLogApi.h \end{Desc}
\begin{Desc}
\item[Syntax:]

\footnotesize\begin{verbatim}       
				ClRcT clLogInitialize(
					CL_OUT	ClLogHandleT	*phLog,
					CL_IN const ClLogCallbacksT	*pLogCallbacks,
					CL_INOUT	ClVersionT		*pVersion
						     );
\end{verbatim}
\normalsize
\end{Desc}
\begin{Desc}
\item[Parameters:] \begin{description}
\item[{\em phLog}]:(out) Handle returned by the Log Service. This handle is used by the calling process for subsequent invocation of Log Service APIs
so that Log Service can recognize the process.
\item[{\em plogCallbacks}]:(in) 
Pointer to ClLogCallbacksT structure containing the callback functions that Log Service can invoke on this process. If pLogCallbacks is set to 
NULL, no callback is registered. 
\item[{\em pVersion}]:(in/out) As an input parameter, it points to the required Log Service version. 
If used as an input parameter, the minor version field should not be filled and is ignored by the Log Service. As an output parameter, it is the version 
supported by the Log. For details on this datatype, refer to the chapter, Common Type Definitions in the \textit{OpenClovis\_\-ApiRef\_\-Overview-2.3.pdf}.

\end{description}
\end{Desc}
\begin{Desc}
\item[Return values:]
\begin{description}
\item[{\em CL\_\-OK}]: Function completed successfully.
\item[{\em CL\_\-ERR\_\-VERSION\_\-MISMATCH}]: The version parameter is not compatible with the version of the Log Service implementation.
\item[{\em CL\_\-ERR\_\-TIMEOUT}]: Timeout occurred before the call could complete.
\item[{\em CL\_\-ERR\_\-TRY\_\-AGAIN}]: The service cannot be provided at this time. The process can try later.
\item[{\em CL\_\-ERR\_\-NO\_\-MEMORY}]: Out of memory. Unable to provide the service.
\item[{\em CL\_\-ERR\_\-NO\_\-RESOURCE}]: Insufficient resources (other than memory) to provide the service.
\item[{\em CL\_\-ERR\_\-NULL\_\-POINTER}]: Expecting pointer to valid memory space.
\end{description}
\end{Desc}
\begin{Desc}
\item[Description:] This function initializes the Log Service, performs version compatibility, checks and registers various 
callbacks. This function must be invoked before any other function of Log Service API can be used. The handle phLog is returned as the reference to
association of the process with the Log Service. The process uses this handle in subsequent interactions with the Log Service.
\par
If the implementation supports the required releaseCode (a member of pVersion) and its majorVersion is greater than or equal to the required 
majorVersion, the functions returns CL\_\-OK and pVersion is set to:
\begin{itemize}
\item
releaseCode = required releaseCode.
\item
majorVersion = highest major version supported for required releaseCode.
\item
minorVersion = highest minor version supported for the returned releaseCode and majorVersion.
\end{itemize}
If this condition is not met, the function returns CL\_\-ERR\_\-VERSION\_\-MISMATCH and pVersion is set to:
\begin{itemize}
\item
releaseCode:
	\begin{itemize}
	\item
	required releaseCode, if it is supported.
	\item
	Lowest releaseCode higher than required releaseCode, if the required releaseCode is lower than any supported releaseCode.
	\item
	Highest releaseCode lower than required releaseCode, if the required releaseCode is higher than any supported releaseCode.
	\end{itemize}
\item
majorVersion = highest major version supported for returned releaseCode.
\item
minorVersion = highest minor version supported for returned releaseCode and majorVersion.
\end{itemize}
\end{Desc}
\begin{Desc}
\item[Library File:] libClLog.so
\newline
libClLog.a
\end{Desc}
\begin{Desc}
\item[Related Function(s):]\hyperlink{pagelog104}{clLogFinalize()}\end{Desc}
\newpage



\subsubsection{clLogFinalize}
\index{clLogFinalize@{clLogFinalize}}
\hypertarget{pagelog102}{}\paragraph{cl\-Log\-Finalize}\label{pagelog102}
\begin{Desc}
\item[Synopsis:]Finalizes the Log Service and releases all the acquired resources.\end{Desc}
\begin{Desc}
\item[Header File:] clLogApi.h \end{Desc}
\begin{Desc}
\item[Syntax:]
\footnotesize\begin{verbatim}        	
						ClRcT clLogFinalize(
           						CL_IN    ClLogHandleT        hLog
								   )
\end{verbatim}
\normalsize
\end{Desc}
\begin{Desc}
\item[Parameters:] \begin{description}
\item[{\em hLog}]:(in) Handle obtained through a previous call to clLogInitialize. This handle identifies the association to be closed between the 
calling process and the Log Service.
\end{description}
\end{Desc}
\begin{Desc}
\item[Return values:]
\begin{description}
\item[{\em CL\_\-OK}]: Function completed successfully.
\item[{\em CL\_\-ERR\_\-INVALID\_\-HANDLE}]: hLog is not a valid handle obtained through a previous invocation to 
clLogInitialize() or the association has already been closed by another invocation to clLogFinalize().
\item[{\em CL\_\-ERR\_\-TRY\_\-AGAIN}]: The service cannot be provided at this time. The process can try later.
\item[{\em CL\_\-ERR\_\-NO\_\-MEMORY}]: The Log Service library or some other module of Log Service is out of memory. The service cannot 
be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NO\_\-RESOURCE}]:  The Log Service library or some other module of Log Service is out of resources 
(other than memory). The service cannot be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-TIMEOUT}]: An implementation defined timeout occurred before the call could complete.
\end{description}
\end{Desc}
\begin{Desc}
\item[Description:] This function closes the association between the Log Service and the invoking process (identified by the handle hLog) and frees up
the resources acquired by this association. Functions of Log Service API function must not be invoked after a successful invocation to this 
function. For each successful invocation to clLogInitialize(), the process must invoke clLogFinalize() before shutting down gracefully. 
On successful completion, this function frees up all the resources acquired by this association. Opened Log Stream handles are closed, 
registrations for Log Stream Handling are de-registered, and opened Log File handles are closed. After a call to this function, the selection object 
becomes invalid.
\par
If a thread of this process has invoked clLogDispatch() on the association with CL\_\-DISPATCH\_\-BLOCKING flag and this function executes successfully,
clLogDispatch() function returns CL\_\-OK. 
\par
On successful completion of this function, all pending callbacks referring to this hLog are canceled. Since the invocation of callbacks is an 
asynchronous operation, some callbacks may still be delivered after this invocation returns successfully.
If a process terminates without finalizing its association with Log Service, Log Service will implicitly finalize all such associations.
\end{Desc}
\begin{Desc}
\item[Library File:] libClLog.so
\newline
libClLog.a
\end{Desc}
\begin{Desc}
\item[Related Function(s):]\hyperlink{pagelog101}{clLogInitialize()}, \hyperlink{pagelog103}{clLogSelectionObjectGet()}, \hyperlink{pagelog104}{clLogDispatch()}\end{Desc}
\newpage





\subsubsection{clLogSelectionObjectGet}
\index{clLogSelectionObjectGet@{clLogSelectionObjectGet}}
\hypertarget{pagelog103}{}\paragraph{cl\-Log\-Selection\-Object\-Get}\label{pagelog103}
\begin{Desc}
\item[Synopsis:] Returns an operating system object to wait for callbacks.\end{Desc}
\begin{Desc}
\item[Header File:] clLogApi.h \end{Desc}
\begin{Desc}
\item[Syntax:]

\footnotesize\begin{verbatim}        	ClRcT clLogSelectionObjectGet(
           						CL_IN		ClLogHandleT		hLog,
							CL_OUT	ClSelectionObjectT*	pSelectionObject
							);

\end{verbatim}
\normalsize
\end{Desc}
\begin{Desc}
\item[Parameters:] \begin{description}
\item[{\em hLog}]:(in) Handle obtained through a previous call to clLogInitialize(). This handle identifies the association between the calling process 
and the Log Service for which Selection Object is to be returned.
\item[{\em pselectionObject}]:(out) Pointer to operating system object, Selection Object. This object can be used to detect any pending callback.
\end{description}
\end{Desc}
\begin{Desc}
\item[Return values:]
\begin{description}
\item[{\em CL\_\-OK}]: Selection Object executed successfully.
\item[{\em CL\_\-ERR\_\-INVALID\_\-HANDLE}]: hLog is not a valid handle obtained through a previous invocation to 
clLogInitialize() or the association has already been closed by another invocation to clLogFinalize().
\item[{\em CL\_\-ERR\_\-TRY\_\-AGAIN}]: The service cannot be provided at this time. The process can try later.
\item[{\em CL\_\-ERR\_\-NO\_\-MEMORY}]: The Log Service library or some other module of Log Service is out of memory. The service cannot 
be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NO\_\-RESOURCE}]: The Log Service library or some other module of Log Service is out of resources 
(other than memory). The service cannot be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NULL\_\-POINTER}]: pSelectionObject is NULL.
\end{description}
\end{Desc}
\begin{Desc}
\item[Description:] This function returns an operating system object which can be used to detect any pending callbacks. When a pending callback is
detected, it is dispatched through an invocation to clLogDispatch(). This Selection Object is specific to the association identified by hLog. Returned
Selection Object is valid until association identified by hLog is closed through invocation to clLogFinalize().
\end{Desc}
\begin{Desc}
\item[Library File:] libClLog.so 
\newline
libClLog.a
\end{Desc}
\begin{Desc}
\item[Related Function(s):]\hyperlink{pagelog101}{clLogInitialize()}, \hyperlink{pagelog104}{clLogDispatch()}, \hyperlink{pagelog102}{clLogFinalize()}\end{Desc}
\newpage


\subsubsection{clLogDispatch}
\index{clLogDispatch@{clLogDispatch}}
\hypertarget{pagelog104}{}\paragraph{cl\-Log\-Dispatch}\label{pagelog104}
\begin{Desc}
\item[Synopsis:] Dispatches pending callbacks on the specified association.\end{Desc}
\begin{Desc}
\item[Header File:] clLogApi.h \end{Desc}
\begin{Desc}
\item[Syntax:]
\footnotesize\begin{verbatim}        	ClRcT clLogDispatch(
           					CL_IN    ClLogHandleT        hLog,
           					CL_IN    ClDispatchFlagsT    dispatchFlags
							   )
\end{verbatim}
\normalsize
\end{Desc}
\begin{Desc}
\item[Parameters:] \begin{description}
\item[{\em hLog}]:(in) Handle obtained through a previous call to clLogInitialize(). It identifies the association between the calling process and 
the Log Service for which pending callbacks are to be dispatched.
\item[{\em dispatchFlags}]:(in) Flags specifying the callback execution behavior of the \textit{clLogDispatch()} function. It can take the
following values: 
\begin{itemize}
\item
\textit{CL\_\-DISPATCH\_\-ONE}
\item
\textit{CL\_\-DISPATCH\_\-ALL} or 
\item
\textit{CL\_\-DISPATCH\_\-BLOCKING}
\end{itemize}
\end{description}
\end{Desc}
\begin{Desc}
\item[Return values:]
\begin{description}
\item[{\em CL\_\-OK}]: The callbacks dispatched successfully. When the dispatchFlags is set to CL\_\-DISPATCH\_\-BLOCKING, and a subsequent
clLogFinalize() is called, this function returns CL\_\-OK.
\item[{\em CL\_\-ERR\_\-INVALID\_\-HANDLE}]: hLog is not a valid handle obtained through a previous invocation to 
clLogInitialize() or the association has already been closed by another invocation to clLogFinalize().
\item[{\em CL\_\-ERR\_\-TRY\_\-AGAIN}]: The service cannot be provided at this time. The process can try later.
\item[{\em CL\_\-ERR\_\-INVALID\_\-PARAM}]: dispatchFlags is set to a value other than CL\_\-DISPATCH\_\-ONE, CL\_\-DISPATCH\_\-ALL and 
CL\_\-DISPATCH\_\-BLOCKING.
\item[{\em CL\_\-ERR\_\-NO\_\-MEMORY}]: The Log Service library or some other module of Log Service is out of memory. The service cannot 
be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NO\_\-RESOURCE}]: The Log Service library or some other module of Log Service is out of resources 
(other than memory). The service cannot be provided at this time and this may be a transient problem.
\end{description}
\end{Desc}
\begin{Desc}
\item[Description:] This function invokes any pending callback on the association specified by hLog. It is executed in the context of a calling thread.
If dispatchFlags is set to CL\_\-DISPATCH\_\-ONE, the first pending callback is executed and the function returns. If CL\_\-DISPATCH\_\-ALL is specified, 
all the
pending callbacks are executed one after another. If CL\_\-DISPATCH\_\-BLOCKING is specified, the thread calls all the pending callbacks one after
another,
 waits for other callbacks, and calls them when they become pending. In this case, the function does not return until the association is 
closed using clLogFinalize().
\end{Desc}
\begin{Desc}
\item[Library File:] libClLog.so
\newline
libClLog.a\end{Desc}
\begin{Desc}
\item[Related Function(s):]\hyperlink{pagelog101}{clLogInitialize()}, \hyperlink{pagelog103}{clLogSelectionObjectGet()}, 
\hyperlink{pagelog102}{clLogFinalize()}\end{Desc}
\newpage




\subsubsection{clLogStreamListGet}
\index{clLogStreamListGet@{clLogStreamListGet}}
\hypertarget{pagelog105}{}\paragraph{cl\-Log\-Stream\-List\-Get}\label{pagelog105}
\begin{Desc}
\item[Synopsis:] Retrieves the list of all Log Streams currently available in the cluster.\end{Desc}
\begin{Desc}
\item[Header File:] clLogApi.h \end{Desc}
\begin{Desc}
\item[Syntax:]
\footnotesize\begin{verbatim}        	ClRcT clLogStreamListGet(
						CL_IN		ClLogHandleT	hLog,
						CL_OUT	ClUint32T		*pNumStreams,
						CL_OUT	ClLogStreamInfoT	**ppLogStreams
					);

\end{verbatim}
\normalsize
\end{Desc}
\begin{Desc}
\item[Parameters:] \begin{description}
\item[{\em hLog}]:(in) Handle obtained through a previous call to clLogInitialize(). It identifies the association between the calling process and 
the Log Service for which pending callbacks are to be dispatched.
\item[{\em *pNumStreams}]:(out) Number of streams that are currently open in the cluster. This indicates the number of entries in ppLogStreams. Memory 
for pNumStreams is allocated and freed by the calling process.
\item[{\em **ppLogStreams}]:(out) Pointer to a memory area where pointer to array of Log Stream information is stored. Each entry in this array 
corresponds to a Log Stream in the cluster. Memory for ppLogStreams is allocated and freed by the calling process. Memory for *ppLogStreams 
is allocated by the Log Service and freed by the calling process.
\end{description}
\end{Desc}
\begin{Desc}
\item[Return values:]
\begin{description}
\item[{\em CL\_\-OK}]: The callbacks dispatched successfully. When the dispatchFlags is set to CL\_\-DISPATCH\_\-BLOCKING, and a subsequent
clLogFinalize() is called, this function returns CL\_\-OK.
\item[{\em CL\_\-ERR\_\-INVALID\_\-HANDLE}]: hLog is not a valid handle obtained through a previous invocation to 
clLogInitialize() or the association has already been closed by another invocation to clLogFinalize().
\item[{\em CL\_\-ERR\_\-TIMEOUT}]: An implementation defined timeout occurred before the call could complete.
\item[{\em CL\_\-ERR\_\-TRY\_\-AGAIN}]: The service cannot be provided at this time. The process can try later.
\item[{\em CL\_\-ERR\_\-NO\_\-MEMORY}]: The Log Service library or some other module of Log Service is out of memory. The service cannot 
be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NO\_\-RESOURCE}]: The Log Service library or some other module of Log Service is out of resources 
(other than memory). The service cannot be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NULL\_\-POINTER}]: Either pNumStreams or ppLogStreams are passed as NULL.
\end{description}
\end{Desc}
\begin{Desc}
\item[Description:] The function returns information about the Log Streams in the cluster. It is used by Log Handlers to find out Log Streams 
they are interested in.
\end{Desc}
\begin{Desc}
\item[Library File:] libClLog.so
\newline
libClLog.a\end{Desc}
\begin{Desc}
\item[Related Function(s):]\hyperlink{pagelog101}{clLogInitialize()}, \hyperlink{pagelog112}{clLogStreamRegister()}, 
\hyperlink{pagelog102}{clLogFinalize()}\end{Desc}
\newpage





\section{Functional APIs}
\subsubsection{clLogStreamOpen and clLogStreamOpenAsync}
\index{clLogStreamOpen, clLogStreamOpenAsync@{clLogStreamOpen, clLogStreamOpenAsync}}
\hypertarget{pagelog106}{}\paragraph{cl\-Log\-Stream\-Open}\label{pagelog106}
\begin{Desc}
\item[Synopsis:] Opens a Log Stream for logging.  \end{Desc}
\begin{Desc}
\item[Header File:] clLogApi.h \end{Desc}
\begin{Desc}
\item[Syntax:]
\footnotesize\begin{verbatim}        	
					ClRcT clLogStreamOpen(
						CL_IN		ClLogHandleT		hLog,
						CL_IN		ClNameT			streamName,
						CL_IN 		ClLogStreamScopeT		streamScope,
						CL_IN		ClLogStreamAttributesT	*pStreamAttributes,
						CL_IN		ClLogStreamOpenFlagsT	streamOpenFlags,
						CL_IN		ClTimeT			timeout,
						CL_OUT		ClLogStreamHandleT	*phStream
					);
					
					
					ClRcT clLogStreamOpenAsync(
						CL_IN		ClLogHandleT		hLog,
						CL_IN		ClNameT			streamName,
						CL_IN 		ClLogStreamScopeT		streamScope,
						CL_IN		ClLogStreamAttributesT	*pStreamAttributes,
						CL_IN		ClLogStreamOpenFlagsT	streamOpenFlags,
						CL_IN		ClInvocationT		invocation
					);

\end{verbatim}
\normalsize
\end{Desc}
\begin{Desc}
\item[Parameters:] \begin{description}
\item[{\em hLog}]:(in) Handle obtained through a previous call to clLogInitialize(). It identifies the association between the calling process and 
the Log Service for which pending callbacks are to be dispatched.
\item[{\em streamName}]:(in) Name of the Log Stream to be opened for logging. It can be a pre-defined (modeled) Log Streams or a Log Stream that is being 
dynamically created.
\item[{\em streamScope}]:(in) Scope of the Log Stream.
\item[{\em pStreamAttributes}]:(in) Attributes of the Log Stream to be opened. Refer to ClLogStreamAttributesT in the Type Definitions section for details on this parameter. 
If a pre-defined Log Stream is being opened, then 
this must be NULL. If the intent is only to open an existing Log Stream (identified by streamName and streamScope) this value must be NULL. If the 
intent is to open and create a non-existing Log Stream, then this parameter must have the attributes of the new Stream and streamOpenFlags must
be ORed with CL_LOG_STREAM_CREATE. If the intent is to open and possibly create (if not already created) a Stream, this parameter must have 
the attributes of the new Stream. These attributes must match the attributes of the Stream if a stream exists.
\item[{\em streamOpenFlags}]:(in) It is the bitwise ORed value of flags defined in ClLogStreamHandlerFlagsT. 
CL\_\-LOG\_\-STREAM\_\-CREATE must be specified if the 
intention is to open and create a non-existent Stream or to open and possibly create (if not already created) a Stream. In case of pre-defined Streams, 
CL\_\-LOG\_\-STREAM\_\-CREATE must not be specified.
\item[{\em timeout}]:(in) This is applicable only for clLogStreamOpen(). If the call does not complete in this time, the call is considered to have
failed. The Log Stream is either opened and/or created, but the outcome cannot be determined. A value of zero indicates no timeout.
\item[{\em phStream}]:(out) Pointer to retrieve the Log Service generated handle for the Log Stream. This handle must be used for subsequent operations on 
the Log Stream.
\item[{\em invocation}]:(in) This is applicable only for clLogStreamOpenAsync() and is used to co-relate the response received through 
ClLogStreamOpenCallbackT.
\end{description}
\end{Desc}
\begin{Desc}
\item[Return values:]
\begin{description}
\item[{\em CL\_\-OK}]: The Log Stream opened successfully.
\item[{\em CL\_\-ERR\_\-INVALID\_\-HANDLE}]: hLog is not a valid handle obtained through a previous invocation to 
clLogInitialize() or the association has already been closed by another invocation to clLogFinalize().
\item[{\em CL\_\-ERR\_\-TIMEOUT}]: Log Stream could not be opened in the timeout period. This is applicable for clLogStreamOpen() only.
\item[{\em CL\_\-ERR\_\-TRY\_\-AGAIN}]: The service cannot be provided at this time. The process can try later.
\item[{\em CL\_\-ERR\_\-INVALID\_\-PARAM}]: Some of the parameters are not valid. The conditions can be one of the following:
\begin{itemize}
\item
The streamOpenFlags does not have CL\_\-LOG\_\-STREAM\_\-CREATE set and pStreamAttributes is not NULL.
\item
The streamOpenFlags has CL\_\-LOG\_\-STREAM\_\-CREATE set and pStreamAttributes is NULL.
\item
Length field of streamName is set to zero.
\item
filePath member of pStreamAttributes does not follow the pattern defined in ClLogStreamAttributesT.
\item
maxFileSize member of pStreamAttributes is not a multiple of recordSize member of the same.
\item
fileFullAction member of pStreamAttributes does not have a value defined in ClLogFileFullActionT.
\item
Both flushFreq and flushInterval members of pStreamAttributes are set to zero.
\item
highWatermark member of pStreamAttributes have values outside 0-100 range.
\item
streamScope does not have a value defined in ClLogStreamScopeT.
\item
timeout is specified as a negative value.
\end{itemize}

\item[{\em CL\_\-ERR\_\-NO\_\-MEMORY}]: The Log Service library or some other module of Log Service is out of memory. The service cannot 
be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NO\_\-RESOURCE}]: The Log Service library or some other module of Log Service is out of resources 
(other than memory). The service cannot be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NOT\_\-EXIST}]: CL\_\-LOG\_\-STREAM\_\-CREATE flag is not set in streamOpenFlags and the Stream does not exist.
\item[{\em CL\_\-ERR\_\-ALREADY\_\-EXIST]: CL\_\-LOG\_\-STREAM\_\-CREATE flag is set in streamOpenFlags but the Stream already exists. The stream is not created 
with attributes specified by pStreamAttributes.
\item[{\em CL\_\-ERR\_\-BAD\_\-FLAGS]: streamOpenFlags does not have bits set as defined in ClLogStreamHandlerFlagsT.
\item[{\em CL\_\-ERR\_\-NO\_\-CALLBACK]: This is applicable for clLogStreamOpenAsync() only. pLogCallbacks or clLogStreamOpenCallback (member of
pLogCallbacks) is NULL in the previous invocation to clLogInitialize() through which hLog is obtained.
\end{description}
\end{Desc}
\begin{Desc}
\item[Description:] This function opens a Log Stream for logging. If the Log Stream is not a pre-defined Stream and if the application has to create it,
pStreamAttributes must be specified and CL\_\-LOG\_\-STREAM\_\-CREATE must be set in streamOpenFlags. If pStreamAttributes is non-NULL, 
flushFreq or flushInterval (members of pStreamAttributes) must be non-zero.
\par
Invocation to clLogStreamOpen() is blocking. If the Log Stream is successfully opened, the function returns a handle to the newly opened stream. 
If the Log Stream is not successfully opened, it returns an error.
\par
Call to the clLogStreamOpenAsync() is non-blocking.  
ClLogStreamOpenCallbackT (registered during clLogInitialize()) is invoked when this function completes execution. This callback returns an Invocation 
value to the calling process. This invocation is used to correlate this invocation of clLogStreamOpenAsync() with the invocation of 
ClLogStreamOpenCallbackT().
\par
The handle obtained through an invocation to these functions should be used for Logging only. It cannot be used as a consumer of Log Records.
An application can open a single stream for logging multiple times and it obtains a new handle every time. A separate invocation to 
clLogStreamClose() should be made for each successful invocation of these functions to avoid any leakage of resources.

\end{Desc}
\begin{Desc}
\item[Library File:] libClLog.so\newline
libClLog.a\end{Desc}
\begin{Desc}
\item[Related Function(s):]\hyperlink{pagelog108}{clLogStreamClose()}, \hyperlink{pagelog109}{ClLogStreamWriteAsync()},
\hyperlink{pagelog107}{ClLogStreamOpenCallbackT()}\end{Desc}
\newpage




\subsubsection{ClLogStreamOpenCallbackT}
\index{ClLogStreamOpenCallbackT@{ClLogStreamOpenCallbackT}}
\hypertarget{pagelog107}{}\paragraph{cl\-Log\-Stream\-Open\-CallbackT}\label{pagelog107}
\begin{Desc}
\item[Synopsis:]Response to an earlier asynchronous request for opening a Log Stream for logging.\end{Desc}
\begin{Desc}
\item[Header File:] clLogApi.h \end{Desc}
\begin{Desc}
\item[Syntax:]
\footnotesize\begin{verbatim}        	
					typedef void (*ClLogStreamOpenCallbackT)(
						CL_IN	ClInvocationT		invocation,
						CL_IN	ClLogStreamHandleT	hStream,
						CL_IN	ClRcT			rc
					);

\end{verbatim}
\normalsize
\end{Desc}
\begin{Desc}
\item[Parameters:] \begin{description}
\item[{\em invocation}]:(in) Parameter passed by the process during a previous invocation to clLogStreamOpenAsync() and returned by Log Service.
This is used for correlating this response with the invocation of clLogStreamOpenAsync().
\item[{\em hStream}]:(in) Handle to the Log Stream opened. This handle is valid only if the value of rc parameter is CL\_\-OK. This handle must be used 
for subsequent operations on this Log Stream.
\item[{\em rc}]:(in) Return code of the open operation initiated by clLogStreamOpenAsync(). Following are the return codes:
\begin{description}
\item[{\em CL\_\-OK}]: The Log Stream opened successfully.
\item[{\em CL\_\-ERR\_\-BAD\_\-FLAGS]: streamOpenFlags does not have bits set as defined in ClLogStreamHandlerFlagsT.
\item[{\em CL\_\-ERR\_\-TRY\_\-AGAIN}]: The service cannot be provided at this time. The process can try later.
\item[{\em CL\_\-ERR\_\-TIMEOUT}]: Log Stream could not be opened within the timeout period.
\item[{\em CL\_\-ERR\_\-NO\_\-MEMORY}]: The Log Service library or some other module of Log Service is out of memory. The service cannot 
be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NO\_\-RESOURCE}]: The Log Service library or some other module of Log Service is out of resources 
(other than memory). The service cannot be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NOT\_\-EXISTS}]: CL\_\-LOG\_\-STREAM\_\-CREATE flag is not set in streamOpenFlags and the Stream does not exist
\item[{\em CL\_\-ERR\_\-ALREADY\_\-EXIST}]: CL\_\-LOG\_\-STREAM\_\-CREATE flag is set in streamOpenFlags but the Stream already exists. The stream is
not created with attributes specified by pStreamAttributes.
\end{description}

\end{description}
\end{Desc}
\begin{Desc}
\item[Return values:] 
This callback does not return anything.
\end{Desc}
\begin{Desc}
\item[Description:] The Log Service invokes this function when the operation initiated by the invocation of clLogStreamOpenAsync() is completed.
If successful, rc is set to CL\_\-OK and a valid stream handle is passed in hStream. Otherwise, rc is set to the appropriate error code.
\end{Desc}
\begin{Desc}
\item[Library File:] libClLog.so\newlinelibClLog.a\end{Desc}
\begin{Desc}
\item[Related Function(s):]\hyperlink{pagelog106}{clLogStreamOpenAsync()}, \hyperlink{pagelog108}{clLogStreamClose()}, 
\hyperlink{pagelog109}{clLogStreamWriteAsync()}\end{Desc}	
\newpage



\subsubsection{clLogStreamClose}
\index{clLogStreamClose@{clLogStreamClose}}
\hypertarget{pagelog108}{}\paragraph{cl\-Log\-Stream\-Close}\label{pagelog108}
\begin{Desc}
\item[Synopsis:]Closes an opened Log Stream. \end{Desc}
\begin{Desc}
\item[Header File:] clLogApi.h \end{Desc}
\begin{Desc}
\item[Syntax:]
\footnotesize\begin{verbatim}        	
				ClRcT clLogStreamClose(
					CL_IN	ClLogStreamHandleT		hStream
						      );

\end{verbatim}
\normalsize
\end{Desc}
\begin{Desc}
\item[Parameters:] \begin{description}
\item[{\em hStream}]:(in) Handle obtained through a previous invocation to clLogStreamOpen(). This handle identifies the Log Stream that is required 
to be closed.
\end{description}
\end{Desc}
\begin{Desc}
\item[Return values:]
\begin{description}
\item[{\em CL\_\-OK}]: The Log Stream closed successfully.
\item[{\em CL\_\-ERR\_\-INVALID\_\-HANDLE}]: The Log Stream handle is not valid. It was not received through a previous invocation to 
clLogStreamOpen() or it is closed through an invocation to clLogStreamClose(), or hLog supplied to clLogStreamOpen() or 
clLogStreamOpenAsync() during opening of this stream is finalized.
\item[{\em CL\_\-ERR\_\-TRY\_\-AGAIN}]: The service cannot be provided at this time. The process can try later.
\item[{\em CL\_\-ERR\_\-NO\_\-MEMORY}]: The Log Service library or some other module of Log Service is out of memory. The service cannot 
be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NO\_\-RESOURCE}]: The Log Service library or some other module of Log Service is out of resources 
(other than memory). The service cannot be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-TIMEOUT}]: An implementation specific timeout occurred before the call could be completed. Cannot determine if
the Log Stream is closed.
\end{description}
\end{Desc}
\begin{Desc}
\item[Description:] This function closes a Log Stream identified by hStream received through a previous invocation of  
clLogStreamOpen() or clLogStreamOpenAsync(). After a successful completion or a failure of this function, hStream is no 
longer valid and must not be used for any other stream related operations. If hStream represents a Log Stream which is not pre-defined and that 
Log Stream is not opened by any process in the cluster, that Log Stream is deleted. When all persistent Log Streams in a Log File are
deleted, the Log File is closed.
\par
Closing a Log Stream releases all the resources allocated by Log Service to this instance of opening. If a process terminates without closing Log Streams
opened by it, Log Service implicitly closes all such Log Streams.
\par
On successful completion of this call, all pending callbacks referring to this hStream are canceled. Since the invocation of callbacks is an 
asynchronous operation, some callbacks are delivered after this call returns successfully.

\end{Desc}
\begin{Desc}
\item[Library File:] libClLog.so\newlinelibClLog.a\end{Desc}
\begin{Desc}
\item[Related Function(s):]\hyperlink{pagelog106}{clLogStreamOpen()}, \hyperlink{pagelog106}{ClLogStreamOpenAsync()}, 
\hyperlink{pagelog107}{ClLogStreamOpenCallbackT()}, \hyperlink{pagelog109}{clLogStreamWriteAsync()}
\end{Desc}
\newpage



\subsubsection{clLogStreamWriteAsync and clLogStreamVWriteAsync}
\index{clLogStreamWriteAsync, clLogStreamVWriteAsync@{clLogStreamWriteAsync, clLogStreamVWriteAsync}}
\hypertarget{pagelog109}{}\paragraph{cl\-Log\-Stream\-Write\-Async}\label{pagelog109}
\begin{Desc}
\item[Synopsis:] Logs a Log Record in the specified Log Stream.\end{Desc}
\begin{Desc}
\item[Header File:] clLogApi.h \end{Desc}
\begin{Desc}
\item[Syntax:]
\footnotesize\begin{verbatim}        	
					ClRcT clLogStreamWriteAsync(
						CL_IN	ClLogStreamHandleT	hStream, 
						CL_IN	ClLogSeverityT		severity,
						CL_IN	ClUint16T			serviceId,
						CL_IN	ClUint32T			msgId,
						...
					);
					
					ClRcT clLogStreamWriteAsync(
						CL_IN	ClLogStreamHandleT	hStream, 
						CL_IN	ClLogSeverityT		severity,
						CL_IN	ClUint16T			serviceId,
						CL_IN	ClUint32T			msgId,
						CL_IN va_list			list
					);
\end{verbatim}
\normalsize
\end{Desc}
\begin{Desc}
\item[Parameters:] \begin{description}
\item[{\em hStream}]:(in) Handle obtained through a previous invocation to clLogStreamOpen(). This handle identifies the Log Stream in which the
Log Record is to be placed.
\item[{\em severity}]:(in) This field must be set to one of the values defined in ClLogSeverityT. ClLogSeverityT defines the severity level of the 
Log Record.
\item[{\em serviceId}]:(in) Identifies the message to be Logged. This is an identifier for a string message which the viewer is aware of through any 
off-line mechanism. The arguments of this function are interpreted by the viewer based on this identifier. For application Log Streams, the values and 
scope of each value is defined by the application developer. Following are the pre-defined values:
\begin{itemize}
\item
\textit{#define CL\_\-LOG\_\-MSGID\_\-BUFFER		0x0}
\item
\textit{#define CL\_\-LOG\_\-MSGID\_\-PRINTF\_\-FMT	     0x1}
\end{itemize}
If msgId is passed as CL\_\-LOG\_\-MSGID\_\-BUFFER, it is followed by two parameters:
\begin{itemize}
\item
The First parameter is of type ClUint32T. It is the number of bytes in the buffer pointed by the second parameter.
\item
The second parameter is a pointer of type ClPtrT to the buffer. The buffer can contain binary or ASCII data. The number of bytes of useful data is 
indicated by the previous parameter. If the buffer contains ASCII data and if the buffer is terminated  with NULL, the length must include the NULL 
termination byte. This buffer is not freed by the Log Service.
\end{itemize}
If msgId is passed as CL\_\-LOG\_\-MSGID\_\-PRINTF\_\-FMT, the next argument is treated as a format string of printf(3). The arguments are interpreted 
according to this format string.
\par
For other values of msgId, the arguments are treated as a set of 3-tuples. Each tuple is of the form \tt{<Tag, Length, Value Pointer>}. A tuple of three
arguments is interpreted as follows:
\begin{enumerate}
\item
Tag is of type ClUint16T. It is a tag that identifies the contents of the third argument in this tuple.
\item
Length is of type ClUint16T. It is the number of bytes in the buffer pointed by the third argument.
\item
Value Pointer is of type ClPtrT. The buffer may contain binary or ASCII data defined by tag (first argument in this tuple). Only the Log Consumer 
interprets this buffer and must be aware of the semantic meaning of its contents. It copies this buffer in the Log Record. If the buffer contains ASCII
data and if the buffer is terminated with NULL, the length must include the NULL termination byte. This buffer is not freed by the Log Service.
\end{enumerate}
The end of this set of tuple is indicated by a special tag called CL\_\-LOG\_\-TAG\_\-TERMINATE. Thus, the variable part of this argument list will always have 
3*n + 1, where n is the number of parameters to be logged. Following tag values are defined by the Log Service and the remaining tags are defined by the
application.
\begin{itemize}
\item
#define CL\_\-LOG\_\-TAG\_\-TERMINATE		0x0
\item
#define CL\_\-LOG\_\-TAG\_\-BASIC\_\-SIGNED		0x1
\item
#define CL\_\-LOG\_\-TAG\_\-BASIC\_\-UNSIGNED	0x2
\item
#define CL\_\-LOG\_\-TAG\_\-STRING		0x3
\end{itemize}

Log Service also defines following macros for using this function.
\textit{#define CL\_\-LOG\_\-TLV\_\-UINT8(var)				\\
\newline
CL\_\-LOG\_\-TAG\_\-BASIC\_\-UNSIGNED, sizeof( var ), &(var)
\newline
#define CL\_\-LOG\_\-TLV\_\-INT8(var)				\\
\newline
CL\_\-LOG\_\-TAG\_\-BASIC\_\-SIGNED, sizeof( var ), &(var)
\newline
#define CL\_\-LOG\_\-TLV\_\-UINT16(var)				\\
\newline
CL\_\-LOG\_\-TAG\_\-BASIC\_\-UNSIGNED, sizeof( var ), &(var)
\newline
#define CL\_\-LOG\_\-TLV\_\-INT16(var)				\\
\newline
CL\_\-LOG\_\-TAG\_\-BASIC\_\-SIGNED, sizeof( var ), &(var)
\newline
#define CL\_\-LOG\_\-TLV\_\-UINT32(var)				\\
\newline
CL\_\-LOG\_\-TAG\_\-BASIC\_\-UNSIGNED, sizeof( var ), &(var)
\newline
#define CL\_\-LOG\_\-TLV\_\-INT32(var)				\\
\newline
CL\_\-LOG\_\-TAG\_\-BASIC\_\-SIGNED, sizeof( var ), &(var)
\newline
#define CL\_\-LOG\_\-TLV\_\-UINT64(var)				\\
\newline
CL\_\-LOG\_\-TAG\_\-BASIC\_\-UNSIGNED, sizeof( var ), &(var)
\newline
#define CL\_\-LOG\_\-TLV\_\-INT64(var)				\\
\newline
CL\_\-LOG\_\-TAG\_\-BASIC\_\-SIGNED, sizeof( var ), &(var)
\newline
#define CL\_\-LOG\_\-TLV\_\-STRING(var)				\\
\newline
CL\_\-LOG\_\-TAG\_\-STRING, (strlen( var ) + 1), var}

\item[{\em list}]:(in) This parameter is a replacement of variable length argument and valid only for clLogStreamVWriteAsync().
\end{description}
\end{Desc}
\begin{Desc}
\item[Return values:]
\begin{description}
\item[{\em CL\_\-OK}]: The Log Record is recorded successfully and does not imply that the record is persisted in the Log File.
\item[{\em CL\_\-ERR\_\-INVALID\_\-HANDLE}]: The Log Stream handle is not valid. It was not received through a previous invocation to 
clLogStreamOpen() or it is closed through an invocation to clLogStreamClose(), or hLog is finalized.
\item[{\em CL\_\-ERR\_\-TIMEOUT}]: An implementation specific timeout occurred before the call could complete. Cannot determine if
the Log Record is recorded.
\item[{\em CL\_\-ERR\_\-TRY\_\-AGAIN}]: The service cannot be provided at this time. The process can try later.
\item[{\em CL\_\-ERR\_\-INVALID\_\-PARAM}]: Some of parameters are invalid. The conditions are:
\begin{itemize}
\\item
Severity does not have a value defined in ClLogSeverityT.
\item
CL\_\-LOG\_\-ERR\_\-FILE\_\-FULL: Log Stream identified by hStream is created with fileFullAction attribute set to 
CL\_\-LOG\_\-FILE\_\-FULL\_\-ACTION\_\-HALT and the Log File
has become full. Thus, no Log Records can be logged into this stream and the Stream must be closed.
\end{itemize}
\item[{\em CL\_\-ERR\_\-NO\_\-MEMORY}]: The Log Service library or some other module of Log Service is out of memory. The service cannot 
be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NO\_\-RESOURCE}]: The Log Service library or some other module of Log Service is out of resources 
(other than memory). The service cannot be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NULL\_\-POINTER}]: One of the pointers is NULL.

\end{description}
\end{Desc}
\begin{Desc}
\item[Description:] This function writes a Log Record in the Log Stream identified by hStream. An invocation to this function is non-blocking. This 
function guarantees that the record is recorded into Log Stream, but the record may not be persisted in the Log File. Timing of 
persistence of Log Records in the Log File depends on the flushFreq and flushInterval attributes of the Log Stream.
\par

This function accepts variable number of arguments. The number of arguments and their types depend on the msgId parameter. If the value of msgId is 
CL\_\-LOG\_\-MSGID\_\-BUFFER, then two arguments are required:
\begin{itemize}
\item
length of buffer 
\item
pointer to the buffer
\end{itemize}
If the value of msgId is CL\_\-LOG\_\-MSGID\_\-PRINTF\_\-FMT, the next argument is treated as a C printf style format string and remaining arguments are 
interpreted as per the format string. For all other values, the variable number of arguments are treated as a set of 3-tuples. They should be 3*n+1,
where n is the number of parameters to be logged along with msgId. For each such parameter the following are passed:
\begin{itemize}
\item
Tag identifying the type of the parameter
\item
Length denoting number of bytes in the parameter and 
\item
Pointer to the parameter are passed. 
\end{itemize}
The last argument must be a special tag CL\_\-LOG\_\-TAG\_\-TERMINATE. Values of msgId and tags, 
other than those defined by Log Service are not interpreted and the data is just copied into the Log Record. It is the responsibility of Log Consumer 
to get the semantic meaning of these and interpret the Log Record.
\par
Other information such as Log Timestamp and Component Id are also recorded in the Log Record by the Log Service. Log Timestamp is the wall clock 
time when this function is invoked on the host where the Logger is running. Component Id is the unique identifier identifying this 
instance of the application. This is issued by Component Manager and remains unchanged through a process restart or cluster restart.
The Log Record is written in the Log Stream in an atomic manner. Thus, the Log service handles concurrent recording by multiple threads of the
same process or multiple processes in the cluster.
\par
The buffers passed to this function are freed by the Logger and not by this function.
Pointers to stack variables can also be passed as pointers to this function without causing any fallouts.

\end{Desc}
\begin{Desc}
\item[Library File:] libClLog.so\newline
libClLog.a\end{Desc}
\begin{Desc}
\item[Related Function(s):]\hyperlink{pagelog106}{clLogStreamOpen()}, \hyperlink{pagelog106}{clLogStreamOpenAsync()},
\hyperlink{pagelog108}{clLogStreamClose()}\end{Desc}
\newpage	






\subsubsection{clLogFilterSet}
\index{clLogFilterSet@{clLogFilterSet}}
\hypertarget{pagelog110}{}\paragraph{cl\-Log\-Filter\-Set}\label{pagelog110}
\begin{Desc}
\item[Synopsis:]Changes the filter settings of a Log Stream.\end{Desc}
\begin{Desc}
\item[Header File:] clLogApi.h \end{Desc}
\begin{Desc}
\item[Syntax:]
\footnotesize\begin{verbatim}        	
			ClRcT clLogFilterSet(
				CL_IN	ClLogStreamHandleT	hStream,
				CL_IN	ClLogFilterFlagsT	logFilterFlags,
				CL_IN	ClLogFilterT		filter
					    );
\end{verbatim}
\normalsize
\end{Desc}
\begin{Desc}
\item[Parameters:] \begin{description}
\item[{\em hStream}]:(in) Handle obtained through a previous invocation to clLogStreamOpen(). This handle identifies the Log Stream whose filter 
settings have to be changed.
\item[{\em logFilterFlags}]:(in) Specifies how the filter parameter should be used. This filter can overwrite any previous
filter set or it can be used to modify a previous filter. To clear a previous filter, this field should be set to CL\_\-LOG\_\-FILTER\_\-ASSIGN and all other 
fields should be set to zero.
\item[{\em filter}]:(in) Filter settings to be applied.
\end{description}
\end{Desc}
\begin{Desc}
\item[Return values:]
\begin{description}
\item[{\em CL\_\-OK}]: The filter is set successfully.
\item[{\em CL\_\-ERR\_\-INVALID\_\-HANDLE}]: The Log Stream handle is not valid. It is not received through a previous invocation to 
clLogStreamOpen() or it is closed through an invocation to clLogStreamClose() or hLog is finalized, or 
clLogStreamOpenAsync() is finalized during opening of this stream.
\item[{\em CL\_\-ERR\_\-TIMEOUT}]: An implementation specific timeout occurred before the call could complete. Cannot determine if
the Log Filter is set.
\item[{\em CL\_\-ERR\_\-TRY\_\-AGAIN}]: The service cannot be provided at this time. The process can try later.
\item[{\em CL\_\-ERR\_\-INVALID\_\-PARAM}]: The filter has an invalid configuration:
	\begin{itemize}
	\item
	logFilterFlags does not contain values specified in ClLogFilterFlagsT.
	\item
	logSeverityFilter does not contain bits specified in ClLogSeverityT.
	\end{itemize}
\item[{\em CL\_\-ERR\_\-NO\_\-MEMORY}]: The Log Service library or some other module of Log Service is out of memory. The service cannot 
be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NO\_\-RESOURCE}]: The Log Service library or some other module of Log Service is out of resources 
(other than memory). The service cannot be provided at this time and this may be a transient problem.
\end{description}
\end{Desc}
\begin{Desc}
\item[Description:] This function sets the filter on the stream identified by hStream. This filter can be used to overwrite, clear, or modify a
previously set filter. The logFilterFlags parameter is used to identify the correct operation. The logSeverityFilter (field of filter parameter) is used
to set filter setting based on severity of the Log Record. All Log Records with severity bits set in the filter and maintained by Log Service on a per Log
Stream basis are masked and do not enter the Log Stream. Similarly, pLogMsgIdSet and pLogCompIdSet is used to specify filter based on message ID and 
component ID respectively.
\par
To clear a previously set filter, all the fields of filter should be set to zero and logFilterFlags should be set to CL_LOG_FILTER_ASSIGN.
\end{Desc}
\begin{Desc}
\item[Library File:] libClLog.so\newlinelibClLog.a\end{Desc}
\begin{Desc}
\item[Related Function(s):]\hyperlink{pagelog106}{clLogStreamOpen()}, \hyperlink{pagelog109}{clLogStreamWriteAsync()},
\hyperlink{pagelog108}{clLogStreamClose()}, \hyperlink{pagelog111}{ClLogFilterSetCallbackT()}\end{Desc}
\newpage



\subsubsection{ClLogFilterSetCallbackT}
\index{ClLogFilterSetCallbackT@{ClLogFilterSetCallbackT}}
\hypertarget{pagelog111}{}\paragraph{cl\-Log\-Filter\-Set\-CallbackT}\label{pagelog111}
\begin{Desc}
\item[Synopsis:] Informs the Logger about the change in filter settings of a Log Stream opened by this Logger..\end{Desc}
\begin{Desc}
\item[Header File:] clLogApi.h \end{Desc}
\begin{Desc}
\item[Syntax:]
\footnotesize\begin{verbatim}        	
			typedef void (*ClLogFilterSetCallbackT)(
					CL_IN	ClLogStreamHandleT	hStream,
					CL_IN	ClLogFilterT		filter
								);

\end{verbatim}
\normalsize
\end{Desc}
\begin{Desc}
\item[Parameters:] \begin{description}
\item[{\em hStream}]:(in) Handle obtained through a previous invocation to clLogStreamOpen(). This handle identifies the Log Stream whose filter 
settings have to be changed.
\item[{\em filter}]:(in) Indicates the Filter settings required to be applied. This is a consolidated filter maintained by Log Service and not 
a change in filter as with clLogFilterSet().
\end{description}
\end{Desc}
\begin{Desc}
\item[Return values:]
This callback does not return anything.
\end{Desc}
\begin{Desc}
\item[Description:] The Log Service invokes this function when the filter associated with a Log Stream changes. The change can be made by a
Logger (Logger must open the Log Stream to make any changes) or north-bound interface. 
\par
The Logger is not informed about changes in filter settings if 
pLogCallbacks is set to NULL during clLogInitialize() 
or is clLogFilterSetCallback is NULL. 
\end{Desc}
\begin{Desc}
\item[Library File:] libClLog.so\newlinelibClLog.a\end{Desc}
\begin{Desc}
\item[Related Function(s):]\hyperlink{pagelog101}{clLogInitialize()}, \hyperlink{pagelog111}{clLogFilterSet()},
\hyperlink{pagelog106}{clLogStreamOpen()}
\end{Desc}
\newpage



\section{Log Handler APIs}
\subsubsection{clLogStreamRegister}
\index{clLogStreamRegister@{clLogStreamRegister}}
\hypertarget{pagelog112}{}\paragraph{cl\-Log\-Stream\-Register}\label{pagelog112}
\begin{Desc}
\item[Synopsis:] Registers the calling process as handler for the specified stream.\end{Desc}
\begin{Desc}
\item[Header File:] clLogApi.h \end{Desc}
\begin{Desc}
\item[Syntax:]
\footnotesize\begin{verbatim}        	
			ClRcT clLogStreamRegister(
				CL_IN		ClLogHandleT			hLog,
				CL_IN		ClNameT				streamName,
				CL_IN		ClLogStreamScopeT		streamScope,
				CL_IN		ClCharT				*pNodeName,
				CL_IN		ClLogStreamHandlerFlagsT	handlerFlags,
				CL_OUT		ClLogStreamHandleT		*phStream
						);
\end{verbatim}
\normalsize
\end{Desc}
\begin{Desc}
\item[Parameters:] \begin{description}
\item[{\em hLog}]:(in) Handle obtained through a previous invocation to clLogInitialize(). This handle identifies the association between the calling
process and Log Service.
\item[{\em streamName}]:(in) Name of the stream for which this process wants to become a handler.
\item[{\em streamScope}]:(in) Scope of the stream identified by streamName.
\item[{\em *pNodeName}]:(in) Name of the node where the Log Stream exists. This parameter is a string that terminates with NULL. It is valid only if 
streamScope is set to CL\_\-LOG\_\-SCOPE\_\-LOCAL. If streamScope is set to CL\_\-LOG\_\-SCOPE\_\-GLOBAL, this parameter must be NULL.
\item[{\em handlerFlags}]:(in) It is the bitwise ORed value of flags defined in ClLogStreamHandlerFlagsT. CL\_\-LOG\_\-HANDLER\_\-WILL\_\-ACK must 
be specified if the handler wants to explicitly acknowledge the receipt of Log Records. The Log File Handler, which is part of Log Service
uses this flag. Other handlers must set the value of this parameter to zero.
\item[{\em *phStream}]:(out) Pointer to the memory area where the handle to the Log Stream is returned. This handle must be used for further operations 
on this stream.
\end{description}
\end{Desc}
\begin{Desc}
\item[Return values:]
\item[{\em CL\_\-OK}]: The calling process is registered as a handler for the specified Stream.
\item[{\em CL\_\-ERR\_\-INVALID\_\-HANDLE}]: The Log Service handle is not valid. It is not received through a previous invocation to
clLogInitialize() or it is finalized through an invocation to clLogFinalize().
\item[{\em CL\_\-ERR\_\-TIMEOUT}]: An implementation specific timeout occurred before the call could be completed. Cannot determine if 
the handler is registered or not.
\item[{\em CL\_\-ERR\_\-TRY\_\-AGAIN}]: The service cannot be provided at this time. The process can try later.
\item[{\em CL\_\-ERR\_\-NO\_\-MEMORY}]: The Log Service library or some other module of Log Service is out of memory. The service cannot 
be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NO\_\-RESOURCE}]: The Log Service library or some other module of Log Service is out of resources 
(other than memory). The service cannot be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NULL\_\-POINTER}]: pNodeName or phStream parameter is NULL.
\item[{\em CL\_\-ERR\_\-NOT\_\-EXISTS}]: The Log Stream identified by 3-tuple of streamName, streamScope and pNodeName does not exist.
\item[{\em CL\_\-ERR\_\-BAD\_\-FLAG]: handlerFlags is not set as described in ClLogStreamHandlerFlagsT or streamScope is not set as described 
in ClLogStreamScopeT.
\item[{\em CL\_\-ERR\_\-NO\_\-CALLBACK}]: pLogCallbacks or clLogRecordDeliverCallback (member of pLogCallbacks) is NULL in the 
previous invocation to clLogInitialize().
\item[{\em CL\_\-ERR\_\-INVALID\_\-PARAM}]: Some of the parameters contain invalid values. One of the possible reasons is:
Size field in streamName is zero.
\end{Desc}
\begin{Desc}
\item[Description:] This function registers an interest of the calling process in handling the Log Stream. The 
calling process starts receiving clLogRecordDeliverCallback when the interest is registered. Memory for pNodeName 
and phStream is allocated and freed by the calling process.
\par
If this function is called multiple times on the same stream with the same Log Service handle hLog, a new Log Stream handle hStream 
is issued. During the delivery of Log Records, the callback is called once for every handle issued.
\end{Desc}
\begin{Desc}
\item[Library File:] libClLog.so\newlinelibClLog.a\end{Desc}
\begin{Desc}
\item[Related Function(s):]\hyperlink{pagelog101}{clLogInitialize()}, \hyperlink{pagelog113}{ClLogRecordDeliverCallbackT()},
\hyperlink{pagelog115}{clLogStreamDeregister()}
\end{Desc}
\newpage



\subsubsection{ClLogRecordDeliverCallbackT}
\index{ClLogRecordDeliverCallbackT@{ClLogRecordDeliverCallbackT}}
\hypertarget{pagelog113}{}\paragraph{cl\-Log\-Record\-Deliver\-CallbackT}\label{pagelog113}
\begin{Desc}
\item[Synopsis:] Callback function to receive Log Records from Log Streams of interest.\end{Desc}
\begin{Desc}
\item[Header File:] clLogApi.h \end{Desc}
\begin{Desc}
\item[Syntax:]
\footnotesize\begin{verbatim}        	
			void (*ClLogRecordDeliverCallbackT)(
				CL_IN ClLogStreamHandleT hStream,
				CL_IN ClUint32T sequenceNumber,
				CL_IN ClUint32T numRecords,
				CL_IN ClPtrT logRecords
				);

\end{verbatim}
\normalsize
\end{Desc}
\begin{Desc}
\item[Parameters:] 
\begin{description}
\item[{\em hStream}]:(in) Handle obtained through a previous invocation to clLogStreamRegister(). This handle identifies the registration of handler 
for a stream for which the Log Records are being delivered.
\item[{\em sequenceNumber}]:(in) A monotonically increasing no to detect the duplicate delivery of a set of Log Records.
\item[{\em numRecords}]:(in) Number of records in the buffer pointer by logRecords.
\item[{\em *logRecords}]:(in) Pointer to a buffer that contains numRecords number of Log Records from a stream identified by hStream.
\end{description}
\end{Desc}
\begin{Desc}
\item[Return values:]
This callback does not return anything.
\end{Desc}
\begin{Desc}
\item[Description:] This callback delivers a set of new Log Records to the handlers. These records will no more be available in the Log Stream.
\par
This callback may be invoked multiple times for the same set of records, which can be detected by the same sequenceNumber.
\par
Memory for logRecords is allocated by the Log Service and must be freed by the Handler.
\end{Desc}
\begin{Desc}
\item[Library File:] libClLog.so\newlinelibClLog.a\end{Desc}
\begin{Desc}
\item[Related Function(s):]\hyperlink{pagelog101}{clLogInitialize()}, \hyperlink{pagelog112}{clLogStreamRegister()},
\hyperlink{pagelog102}{clLogFinalize()}, \hyperlink{pagelog115}{clLogStreamDeregister()}
\end{Desc}
\newpage




\subsubsection{clLogStreamRecordAck}
\index{clLogStreamRecordAck@{clLogStreamRecordAck}}
\hypertarget{pagelog114}{}\paragraph{cl\-Log\-Stream\-Record\-Ack}\label{pagelog114}
\begin{Desc}
\item[Synopsis:] Acknowledges a set of records received via ClLogRecordDeliverCallbackT. \end{Desc}
\begin{Desc}
\item[Header File:] clLogApi.h \end{Desc}
\begin{Desc}
\item[Syntax:]
\footnotesize\begin{verbatim}        	
			ClRcT clLogStreamRecordAck(
					CL_IN	ClLogStreamHandleT	hStream,
					CL_IN	ClUint32T		sequenceNumber
						);


\end{verbatim}
\normalsize
\end{Desc}
\begin{Desc}
\item[Parameters:] 
\begin{description}
\item[{\em hStream}]:(in) Handle obtained through a previous invocation to clLogStreamRegister(). This handle identifies the registration of handler 
for a stream for which the records are being acknowledged.
\item[{\em sequenceNumber}]:(in) The number identifying the set of Log Records to be acknowledged. This is received during a previous invocation of
callback ClLogRecordDeliverCallbackT.
\end{description}
\end{Desc}
\begin{Desc}
\item[Return values:]
\item[{\em CL\_\-OK}]: The acknowledgement was sent successfully.
\item[{\em CL\_\-ERR\_\-INVALID\_\-HANDLE}]: The passed Log Stream handle is not valid. Either it is not received through a previous invocation to
clLogStreamRegister() or it has already been deregistered through an invocation to clLogStreamDeregister() or hLog supplied to clLogStreamRegister() 
during registration of the handler has been finalized.
\item[{\em CL\_\-ERR\_\-TRY\_\-AGAIN}]: The service cannot be provided at this time. The process can try later.
\item[{\em CL\_\-ERR\_\-NO\_\-MEMORY}]: The Log Service library or some other module of Log Service is out of memory. The service cannot 
be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NO\_\-RESOURCE}]: The Log Service library or some other module of Log Service is out of resources 
(other than memory). The service cannot be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-INVALID\_\-PARAM}]: This handler has not registered itself for the Log Stream identified by hStream as an acknowledging handler.
This can be done by setting the handlerFlags to CL\_\-LOG\_\-HANDLER\_\-WILL\_\-ACK during the invocation of clLogStreamRegister().
\end{Desc}
\begin{Desc}
\item[Description:] This function acknowledges the receipt of a set of Log Records for the Log Stream identified by hStream. The set of Log Records are 
identified by sequenceNumber. This function just dispatches the acknowledgement. Thus, it is not possible to validate the sequence number supplied.
\end{Desc}
\begin{Desc}
\item[Library File:] libClLog.so\newlinelibClLog.a\end{Desc}
\begin{Desc}
\item[Related Function(s):]\hyperlink{pagelog101}{clLogInitialize()}, \hyperlink{pagelog112}{clLogStreamRegister()},
\hyperlink{pagelog102}{clLogFinalize()}, \hyperlink{pagelog115}{clLogStreamDeregister()}, \hyperlink{pagelog113}{ClLogRecordDeliverCallbackT()}
\end{Desc}
\newpage


\subsubsection{clLogStreamDeregister}
\index{clLogStreamDeregister@{clLogStreamDeregister}}
\hypertarget{pagelog115}{}\paragraph{cl\-Log\-Stream\-Deregister}\label{pagelog115}
\begin{Desc}
\item[Synopsis:] Deregisters the calling process as handler for the specified stream.\end{Desc}
\begin{Desc}
\item[Header File:] clLogApi.h \end{Desc}
\begin{Desc}
\item[Syntax:]
\footnotesize\begin{verbatim}        	
			ClRcT clLogStreamDeregister(
				CL_IN	ClLogStreamHandleT	hStream
			);

\end{verbatim}
\normalsize
\end{Desc}
\begin{Desc}
\item[Parameters:] \begin{description}
\item[{\em hStream}]:(in) Handle obtained through a previous invocation to clLogStreamRegister(). This handle identifies the registration of handler
for a stream which is being deregistered.
\end{description}
\end{Desc}
\begin{Desc}
\item[Return values:]
\item[{\em CL\_\-OK}]: The calling process has been deregistered as handler for the specified Stream.
\item[{\em CL\_\-ERR\_\-INVALID\_\-HANDLE}]: The passed Log Stream handle is not valid. Either it is not received through a previous invocation to 
clLogStreamRegister() or it has already been deregistered through an invocation to clLogStreamDeregister() or hLog supplied to clLogStreamRegister() 
during registration of the handler has been finalized.
\item[{\em CL\_\-ERR\_\-TIMEOUT}]: An implementation specific timeout occurred before the call could be completed. It can not be determined whether the
handler is registered or not.
\item[{\em CL\_\-ERR\_\-TRY\_\-AGAIN}]: The service cannot be provided at this time. The process can try later.
\item[{\em CL\_\-ERR\_\-NO\_\-MEMORY}]: The Log Service library or some other module of Log Service is out of memory. The service cannot 
be provided at this time and this may be a transient problem.
\item[{\em CL\_\-ERR\_\-NO\_\-RESOURCE}]: The Log Service library or some other module of Log Service is out of resources 
(other than memory). The service cannot be provided at this time and this may be a transient problem.

\end{Desc}
\begin{Desc}
\item[Description:] This function deregisters interest of the calling process in handling the Log Stream. Once the interest has been deregistered, 
the calling process will stop getting clLogRecordDeliverCallback. This call cancels all the pending clLogRecordDeliverCallback callbacks. Since 
callback invocation is asynchronous, the process may still get some pending callbacks. After this invocation, hStream is no longer valid. If the 
handler process terminates without deregistering its interest, Log Service will implicitly deregisters the process. If the Log Service handle hLog used 
during clLogStreamRegister invocation is finalized without explicitly deregistering the interest in handling the stream, Log Service will implicitly
deregisters the process.
\end{Desc}
\begin{Desc}
\item[Library File:] libClLog.so\newlinelibClLog.a\end{Desc}
\begin{Desc}
\item[Related Function(s):]\hyperlink{pagelog101}{clLogInitialize()}, \hyperlink{pagelog113}{ClLogRecordDeliverCallbackT()},
\hyperlink{pagelog112}{clLogStreamRegister()}, \hyperlink{pagelog102}{clLogFinalize()}
\end{Desc}
\newpage


\section{File Handler APIs}
\subsubsection{clLogFileOpen}
\index{clLogFileOpen@{clLogFileOpen}}


\chapter{Service Management Information Model}
Log Service controls two types of objects maintained by OpenClovis COR service. First type of object is the Log Stream Object used for
exposing all Log Streams in the cluster to the North Bound Interface. Second type of object is the Log Stream Object used for configuring certain
Log Streams in the system. An application is not required to create these streams. They are available and can be 
opened with specifying creation attributes or without having to locate them.



\section{Log Stream Object}
\subsubsection{Run-time Attributes}

\subsubsection{clLogStreamName}
\index{clLogStreamName@{clLogStreamName}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamName: clNameT [1] {RUNTIME, CACHED}}
\begin{Desc}
\item[Description:]
\end{Desc}
Name of the Log Stream.



\subsubsection{clLogStreamScope}
\index{clLogStreamScope@{clLogStreamScope}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamScope: clLogStreamScopeT [1] {RUNTIME, CACHED}}
\begin{Desc}
\item[Description:]
\end{Desc}
Scope of the Log Stream. Refer section clLogStreamScopeT.



\subsubsection{clLogStreamNodeName}
\index{clLogStreamNodeName@{clLogStreamNodeName}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamNodeName: clStringT [1] {RUNTIME, CACHED}}
\begin{Desc}
\item[Description:]
\end{Desc}
Name of the node where the Log Stream is available. It is empty if clLogStreamScope is set to CL\_\-LOG\_\-STREAM\_\-GLOBAL.


\subsubsection{clLogStreamFileName}
\index{clLogStreamFileName@{clLogStreamFileName}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamFileName: clStringT [1] {RUNTIME, CACHED}}
\begin{Desc}
\item[Description:]
\end{Desc}
Name of the Log File where this Log Stream is persisted. This is the prefix for the OS file names.


\subsubsection{clLogStreamFilePath}
\index{clLogStreamFilePath@{clLogStreamFilePath}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamFilePath: clStringT [1] {RUNTIME, CACHED}}
\begin{Desc}
\item[Description:]
\end{Desc}
Path of the Log File where this Log Stream is persisted. The path can be specified as
\newline
\tt{<nodeName>:<absolutePath>}
\newline
where the <nodeName> is the logical node name in the cluster and <absolutePath> is the absolute path where the file should be stored on that node.


\subsubsection{clLogStreamMaxFileSize}
\index{clLogStreamMaxFileSize@{clLogStreamMaxFileSize}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamMaxFileSize: clUint32T [1] {RUNTIME, CACHED}}
\begin{Desc}
\item[Description:]
\end{Desc}
Maximum size of a Log File Unit measured in bytes. There is no pre-defined limit on
Log File Unit size if this attribute is set to zero.


\subsubsection{clLogStreamRecordSize}
\index{clLogStreamRecordSize@{clLogStreamRecordSize}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamRecordSize: clUint32T [1] {RUNTIME, CACHED}}
\begin{Desc}
\item[Description:]
\end{Desc}
Size of a Log Record in this Log Stream measured in bytes.


\subsubsection{clLogStreamHaProperty}
\index{clLogStreamHaProperty@{clLogStreamHaProperty}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamHaProperty: clBoolT [1] {RUNTIME, CACHED}}
\begin{Desc}
\item[Description:]
\end{Desc}
If set to CL\_\-TRUE, the Log Stream is persisted in the Log File. It ensures Log File replication.



\subsubsection{clLogStreamFileFullAction}
\index{clLogStreamFileFullAction@{clLogStreamFileFullAction}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamFileFullAction: clLogFileFullActionT [1] {RUNTIME, CACHED}}
 \begin{Desc}
 \item[Description:]
\end{Desc}
Action that the Log Service should take when the Log File Unit becomes full.


\subsubsection{clLogStreamMaxFilesRotated}
\index{clLogStreamMaxFilesRotated@{clLogStreamMaxFilesRotated}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamMaxFilesRotated: clUint32T [1] {RUNTIME, CACHED}}
 \begin{Desc}
 \item[Description:]
\end{Desc}
Number of Log File Unit in the Log File where this Log Stream is persisted.



\subsubsection{clLogStreamFlushFreq}
\index{clLogStreamFlushFreq@{clLogStreamFlushFreq}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamFlushFreq: clUint32T [1] {RUNTIME, CACHED}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Number of Log Records after which the Log Stream must be cleared. This indicates the maximum number of records on a node which are not persisted at any 
given point of time.



\subsubsection{clLogStreamFlushInterval}
\index{clLogStreamFlushInterval@{clLogStreamFlushInterval}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamFlushInterval: clTimeT [1] {RUNTIME, CACHED}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Time in nanoseconds after which the Log Stream must be flushed. This is the maximum time for which Log Records can remain in the local memory
before it is persisted.



\subsubsection{clLogStreamHighWatermark}
\index{clLogStreamHighWatermark@{clLogStreamHighWatermark}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamHighWatermark: clUint8T [1] {RUNTIME, CACHED}}
\begin{Desc}
 \item[Description:]
\end{Desc}
High limit of the watermark measured in percentage of Log File size. An event is published and an alarm is issued when this limit is reached.



\subsubsection{clLogStreamLowWatermark}
\index{clLogStreamLowWatermark@{clLogStreamLowWatermark}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamLowWatermark: clUint8T [1] {RUNTIME, CACHED}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Low limit of the watermark measured in percentage of Log File size. No event
is published or alarm is issued until this low limit is reached and high limit is reached again.



\subsubsection{clLogStreamCreationTimestamp}
\index{clLogStreamCreationTimestamp@{clLogStreamCreationTimestamp}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamCreationTimestamp: clTimeT [1] {RUNTIME, CACHED}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Creation time of this Log Stream.



\subsubsection{clLogStreamSeverityFilter}
\index{clLogStreamSeverityFilter@{clLogStreamSeverityFilter}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamSeverityFilter: clLogSeverityT [1] {RUNTIME, CACHED}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Current filter settings of this Log Stream.


\subsubsection{clLogStreamNumOpeners}
\index{clLogStreamNumOpeners@{clLogStreamNumOpeners}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamNumOpeners: clUint32T [1] {RUNTIME, CACHED}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Number of Loggers who have currently opened this Log Stream.


\subsubsection{Management Interfaces}

\subsubsection{CL\_\-LOG\_\-ADMIN\_\-CHANGE\_\-FILTER}
\index{CL\_\-LOG\_\-ADMIN\_\-CHANGE\_\-FILTER@{CL\_\-LOG\_\-ADMIN\_\-CHANGE\_\-FILTER}}
\begin{Desc}
\item[Parameters:] 
\begin{description}
\item[{\em operationId}]:(in) CL\_\-LOG\_\-ADMIN\_\-CHANGE\_\-FILTER
\item[{\em objectName}]:(in) A 3-tuple consisting of <streamName>, <streamScope> and <streamNodeName>. This should be set to clLogStreamName, 
clLogStreamScope and clLogStreamNodeName runtime attributes of this object.
\item[{\em param}]:(in) A structure of clLogFilterT indicating new filter settings.
\end{description}
\end{Desc}
\begin{Desc}
 \item[Description:]
\end{Desc}
This is an administrative operation that changes the value of the filter setting of the specified Log Stream. Thus, only the Log Records 
meeting this criterion are allowed to enter the Log Stream.




\section{Pre-created Log Stream Object}
\subsection{Configuration Attributes}


\subsubsection{clLogStreamName}
\index{clLogStreamName@{clLogStreamName}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamName: clNameT [1] {CONFIG}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Scope of Log Stream. Refer to ClLogStreamScopeT in the Type Definitions section.


\subsubsection{clLogStreamNodeName}
\index{clLogStreamNodeName@{clLogStreamNodeName}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamNodeName: clStringT [1] {CONFIG}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Name of the node where the Log Stream is available. It remains empty if clLogStreamScope is set to CL\_\-LOG\_\-STREAM\_\-GLOBAL.


\subsubsection{clLogStreamFileName}
\index{clLogStreamFileName@{clLogStreamFileName}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamFileName: clStringT [1] {CONFIG}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Name of the Log File where this Log Stream is being persisted. This is the prefix for actual OS file names.


\subsubsection{clLogStreamFilePath}
\index{clLogStreamFilePath@{clLogStreamFilePath}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamFilePath: clStringT [1] {CONFIG}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Path of the Log File where this Log Stream is persisted. The path can be specified as
\newline
\tt{<nodeName>:<absolutePath>}
\newline
where the <nodeName> is the logical node name in the cluster and <absolutePath> is the absolute path where the file should be stored on that node.



\subsubsection{clLogStreamMaxFileSize}
\index{clLogStreamMaxFileSize@{clLogStreamMaxFileSize}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamMaxFileSize: clUint32T [1] {CONFIG}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Maximum size of a Log File Unit measured in bytes. There is no pre-defined limit on
Log File Unit size if this attribute is set to zero.



\subsubsection{clLogStreamRecordSize}
\index{clLogStreamRecordSize@{clLogStreamRecordSize}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamRecordSize: clUint32T [1] {CONFIG}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Size of each Log Record in this Log Stream. This is measured in bytes.


\subsubsection{clLogStreamHaProperty}
\index{clLogStreamHaProperty@{clLogStreamHaProperty}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamHaProperty: clBoolT [1] {CONFIG}}
\begin{Desc}
 \item[Description:]
\end{Desc}
If set to CL\_\-TRUE, it implies that the Log File where this Log Stream is being persisted, must always be available. It implies Log File replication.



\subsubsection{clLogStreamFileFullAction}
\index{clLogStreamFileFullAction@{clLogStreamFileFullAction}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamFileFullAction: clLogFileFullActionT [1] {CONFIG}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Action that the Log Service should take when the Log File Unit becomes full.



\subsubsection{clLogStreamFileFullAction}
\index{clLogStreamFileFullAction@{clLogStreamFileFullAction}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamMaxFilesRotated: clUint32T [1] {CONFIG}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Number of Log File Units in the Log File where this Log Stream is being persisted.



\subsubsection{clLogStreamFlushFreq}
\index{clLogStreamFlushFreq@{clLogStreamFlushFreq}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamFlushFreq: clUint32T [1] {CONFIG}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Number of Log Records after which the Log Stream must be cleared. This is the maximum number of records on a node which are not persisted at any 
given point of time.


\subsubsection{clLogStreamFlushInterval}
\index{clLogStreamFlushInterval@{clLogStreamFlushInterval}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamFlushInterval: clTimeT [1] {CONFIG}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Time in nanoseconds after which the Log Stream must be cleared. This is the maximum time for which Log Records can remain in the local memory before
it is persisted.

\subsubsection{clLogStreamHighWatermark}
\index{clLogStreamHighWatermark@{clLogStreamHighWatermark}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamHighWatermark: clUint8T [1] {CONFIG}}
\begin{Desc}
 \item[Description:]
\end{Desc}
High limit of the watermark measured in percentage of Log File size. An event is published and an alarm is issued when this limit is reached.

\subsubsection{clLogStreamLowWatermark}
\index{clLogStreamLowWatermark@{clLogStreamLowWatermark}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamLowWatermark: clUint8T [1] {CONFIG}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Low limit of the watermark measured in percentage of Log File size. No event
is published or alarm is issued until this low limit is reached and high limit is reached again.



\subsection{Runtime Attributes}
\subsubsection{clLogStreamCreationTimestamp}
\index{clLogStreamCreationTimestamp@{clLogStreamCreationTimestamp}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamCreationTimestamp: clTimeT [1] {RUNTIME, CACHED}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Creation time of this Log Stream.

\subsubsection{clLogStreamSeverityFilter}
\index{clLogStreamSeverityFilter@{clLogStreamSeverityFilter}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamSeverityFilter: clLogSeverityT [1] {RUNTIME, CACHED}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Current filter settings of this Log Stream.

\subsubsection{clLogStreamNumOpeners}
\index{clLogStreamNumOpeners@{clLogStreamNumOpeners}}
\begin{Desc}
\item[Syntax:]
\end{Desc}
\textit{clLogStreamNumOpeners: clUint32T [1] {RUNTIME, CACHED}}
\begin{Desc}
 \item[Description:]
\end{Desc}
Number of Loggers who have currently opened this Log Stream.


\subsection{Management Interfaces}
\subsubsection{CL\_\-LOG\_\-ADMIN\_\-CHANGE\_\-FILTER}
\index{CL\_\-LOG\_\-ADMIN\_\-CHANGE\_\-FILTER@{CL\_\-LOG\_\-ADMIN\_\-CHANGE\_\-FILTER}}
\begin{Desc}
\item[Parameters:]
\begin{description}
\item[{\em operationId}]:(in) CL\_\-LOG\_\-ADMIN\_\-CHANGE\_\-FILTER
\item[{\em objectName}]:(in) A 3-tuple consisting of <streamName>, <streamScope> and <streamNodeName>. This should be set to clLogStreamName, 
clLogStreamScope and clLogStreamNodeName runtime attributes of this object.
\item[{\em param}]:(in) A structure of clLogFilterT indicating new filter settings.
\end{description}
\end{Desc}
\begin{Desc}
 \item[Description:]
\end{Desc}
This is an administrative operation that changes the value of the filter setting of the specified Log Stream. Thus, only the Log Records 
meeting this criterion are allowed to enter the Log Stream.





\chapter{Service Notifications}
\index{Service Notifications@{Service Notifications}}
This section is currently not applicable. It will become applicable once MGM-MDW-001 feature of PRD is implemented.
This section describes notifications other than the callbacks invoked on Log Service Clients. These are issued by Log Service to convey important 
information regarding its operational and functional state an administrator or a management system.



\section{Alarms}
\subsection{Log Service Impaired}
\begin{Desc}
\item[Description:]\end{Desc}
The Log Service is currently not able to provide service or is in degraded state because of certain issues with memory, resource, communication or 
other constraints.
\begin{Desc}
\item[Clearing Method:]\end{Desc}
\begin{itemize}
\item
Manually after taking appropriate administrative action or
\item
Log Service has recovered itself or with the help of AMF and explicitly clears the alarm.
\end{itemize}
\begin{Desc}
\item[Payload:]\end{Desc}
Currently no payload is sent with this alarm.




\subsection{Watermark}
\begin{Desc}
\item[Description:]\end{Desc}
One of the Log File maintained by Log Service has reached the high watermark configured for the Log Streams being persisted in that Log File.
\begin{Desc}
\item[Clearing Method:]\end{Desc}
\begin{itemize}
\item
Manually after taking appropriate administrative action or
\item
An external Archiver has siphoned off oldest Log Records and now the Log File utilization has fallen below the low watermark.\end{itemize}
\begin{Desc}
\item[Payload:]\end{Desc}
Currently no payload is sent with this alarm.


\section{Other Notifications}
Currently ASP does not have a different notification service, thus all the notifications are published as events only. This will change once the 
notification service is implemented.


\subsection{Stream Creation}
\begin{Desc}
\item[Description:]\end{Desc}
This notification announces the creation of a Log Stream. It also identifies the scope and attributes of the Log Stream. This notification alerts 
the administrator and other applications in the cluster that Log Records are being put into this Stream and are available for inspection. Administrators,
if desired, may change the filter associated with this stream. Stream Handlers may register themselves for handling the Log Records of this Log Stream.
\begin{Desc}
\item[Channel Name:]\end{Desc}
CL\_\-LOG\_\-EVENT\_\-CHANNEL
\begin{Desc}
\item[Pattern:]\end{Desc}
The first pattern is of type ClUint32T and set to following value.
#define CL\_\-LOG\_\-STREAM\_\-CREATED	0x1
\begin{Desc}
\item[Payload:]\end{Desc}
An object of type ClLogStreamInfoT marshaled for endian and architecture safety is the payload of this notification.


\subsection{Stream Closure}
\begin{Desc}
\item[Description:]\end{Desc}
This notification announces the last closure of a Log Stream. It marks the deletion of the Log Stream. No application can put Log Records into this 
stream beyond this point in time. This notification alerts the administrator and other applications in the cluster that Log Stream is ready for final 
archiving. Stream Handlers may deregister themselves for handling the Log Records of this Log Stream.\begin{Desc}
\item[Channel Name:]\end{Desc}
CL\_\-LOG\_\-EVENT\_\-CHANNEL
\begin{Desc}
\item[Pattern:]\end{Desc}
The first pattern is of type ClUint32T and set to following value.
#define CL\_\-LOG\_\-STREAM\_\-CLOSED	0x2
\begin{Desc}
\item[Payload:]\end{Desc}
All the members of this payload are marshaled for endian and architecture safety. Following are the members of this payload in the order given here:
\begin{itemize}
\item
streamName of type ClNameT identifying the name of the Log Stream.
\item
streamScope of type ClLogStreamScopeT identifying the scope of the Log Stream.
\item
pNodeName of type ClCharT*, a NULL terminated string identifying the node on which this stream was available. This is non-empty only if
streamScope is set to CL\_\-LOG\_\-STREAM\_\-LOCAL.
\end{itemize}




\subsection{File Creation}
\begin{Desc}
\item[Description:]\end{Desc}
This notification announces the creation of a Log File. It also identifies the location of the Log Stream. This notification alerts the administrator
and other applications in the cluster that Log File has been created and is available for inspection. File Handlers may register themselves for handling
the Log Records of all the Log Streams being persisted in this Log File.\begin{Desc}
\item[Channel Name:]\end{Desc}
CL\_\-LOG\_\-EVENT\_\-CHANNEL
\begin{Desc}
\item[Pattern:]\end{Desc}
The first pattern is of type ClUint32T and set to following value.
#define CL\_\-LOG\_\-FILE\_\-CREATED	0x3
\begin{Desc}
\item[Payload:]\end{Desc}
All the members of this payload are marshaled for endian and architecture safety. Following are the members of this payload in the order given here:
\begin{itemize}
\item
fileName of type ClCharT*, a NULL terminated string, identifying the prefix for the Log File Unit names.
\item
filePath of type ClCharT*, a NULL terminated string, identifying the node name and absolute path name on that string for all the Log File Units.
\end{itemize}



\subsection{File Closure}
\begin{Desc}
\item[Description:]\end{Desc}
This notification announces the closure of a Log File. It marks the deletion of the last Log Stream being persisted in this Log File. This notification
alerts the administrator and other applications in the cluster that Log File is ready for final archiving. File Handlers may deregister themselves for 
handling the Log Records of all the Log Streams being persisted in this file.
\begin{Desc}
\item[Channel Name:]\end{Desc}
CL\_\-LOG\_\-EVENT\_\-CHANNEL
\begin{Desc}
\item[Pattern:]\end{Desc}
The first pattern is of type ClUint32T and set to following value.
#define CL\_\-LOG\_\-FILE\_\-CLOSED	0x4
\begin{Desc}
\item[Payload:]\end{Desc}
All the members of this payload are marshaled for endian and architecture safety. Following are the members of this payload in the order given here:
\begin{itemize}
\item
fileName of type ClCharT*, a NULL terminated string, identifying the prefix for the Log File Unit names.
\item
filePath of type ClCharT*, a NULL terminated string, identifying the node name and absolute path name on that string for all the Log File Units.
\end{itemize}


\chapter{Configuration}

Till the time all configuration data goes in COR, following configuration will be used. This must be available in clLogCfg.xml in
/ASP/<model-name>/config directory.
\footnotesize\begin{verbatim}        	

<log:BootConfig xmlns:log="log.ecore">
<logStream
name="firstStream"
streamScope="local"
nodeName="PayLoad0">
<logStreamAttributes
	fileName="sawtooth"
	filePath="SCN0:/etc/asp/logs/"
	maxFileSize="4MB"
	recordSize="211"
	haProperty="CL_TRUE"
	fileFullAction="CL_LOG_FILE_FULL_ACTION_ROTATE"
	maxFilesRotated="13"
	flushFreq="5"
	flushInterval="10s"/>
<logStreamWatermark high="85" low="75"/>
</logStream>
</log:BootConfig>

\end{verbatim}
\normalsize

Semantics of all these parameters is explained in section ClLogStreamInfoT. Attributes maxFileSize and recordSize can take numerical arguments with 
suffix B (bytes), KB (KiloBytes), MB (MegaBytes), GB (GigaBytes) also. If no suffix is given, bytes is assumed. Attribute haProperty must take value 
CL\_\-TRUE or CL\_\-FALSE. Attribute fileFullAction can take any value defined in ClLogFileFullActionT. Attribute flushInterval can take numerical arguments with 
suffix m (minutes), s (seconds), ms (milliseconds), us (microseconds), ns (nanoseconds). If no suffix is given, nanosecond is assumed. Attributes 
high and low takes numerical arguments and treated as percentages of file size.








\chapter*{Glossary}
\index{Glossary@{Glossary}}
\begin{Desc}
\item[Glossary of Log Service Terms:]
\par
\par
\begin{description}

\item[Log Service] ASP Service that provides logging facility to various applications / ASP components in the cluster.
\end{description}
\begin{description}

\item[Logger] A component using the Log Service to record its events of interest.
\end{description}


\begin{description}

\item[Log Record] One unit of an ordered set of information related to an event. Log Record has two parts - header and user data. Header contains 
meta-information about the event and the data contains the information.
\end{description}

\begin{description}

\item[Log Stream] A conceptual flow of Log Records. Every Log Stream has a theme to help the consumer decide if the stream contains the event which 
the consumer is intrested in. Streams have names which can be used for addressing.
\end{description}

\begin{description}

\item[Local Log Stream] A Log Stream local to one node. This stream is not visible for Logging on any other node in the system. Components running on
the same node only can log into this stream. But consumers on any node can consume this Log Stream.
\end{description}


\begin{description}
\item[Global Log Stream: A Log Stream visible in the cluster. Any component in the cluster can log into this stream.
\end{description}

\begin{description}
\item[Log File] Destination for Log Stream and persistent storage for Log Records. A collection of Log Streams flow into one Log File for the ease of 
management of data.
\end{description}


\begin{description}
\item[Log Configuration File] Persistent storage that contains the configuration information of a Log File. 
\end{description}

\begin{description}
\item[Log File Unit] A Log File is a logical collection of Log File Units, where one Log File Unit maps to one physical file on disc.
\end{description}

\begin{description}
\item[Log Client] Interfaces the Log Service with the Logger. 
\end{description}


\begin{description}
\item[Log Service Element] A process in an ASP enabled node (in the cluster) that contributes to the functionality of the Log Service. All the Log 
Service Elements along with Log Clients form the Log Service. This element is the owner for all the Local Log Streams on its node.
\end{description}


\begin{description}
\item[Master Log Service Element] Log Service Element running on the System Controller node. This element is the owner of all the Global Log Streams 
in the cluster.
\end{description}

\begin{description}
\item[Log Stream Handler] An application that has registered for receiving Log Records in real-time mode from the Log Service Element. These records 
are available to the Log Stream Handler in push mode. Except the Log File Handler, no other handler is part of Log Service.
\end{description}

\begin{description}
\item[Log File Handler] Log File Handler is a Log Stream Handler which receives the Log Records from the Log Stream and persists them in the Log File. 
This is the only handler part of the Log Service.
\end{description}


\begin{description}
\item[Log Viewer] Application used for viewing the logged records. This is not part of Log Service. The viewers are of two types - offline viewer and 
online viewer. Offline viewer interacts with either the Log File Handler or archived files to display Log Records. Online viewer registers itself as 
a Log Stream Handler and displays the records in real-time.
\end{description}


\begin{description}
\item[Archiver] Application used for siphoning off the logged records to some other form of persistent storage. This is not part of Log Service.
\end{description}

\begin{description}
\item[Log Reader] Application that programmatically consumes the logged records. Most readers are applications looking for missing 
Notifications/Events.
\end{description}


\begin{description}
\item[Filter] A pattern that controls the logging of records. Only the Log Records matching this pattern are logged into the Log Stream.
\end{description}


\end{Desc}



\end{flushleft}