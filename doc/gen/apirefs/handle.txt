/**
 *  \defgroup handle Handle Management
 *  \brief This is the interface to a client side handle management service.
 */

//-----------------------------------------------------------
 
/**
 *  \defgroup handle_intro Functional Description
 *  \brief Description of Handle Management.
 *  \ingroup handle
 *
 *   Handle library provides facility to create handle as many as user want. 
 *   In order to create handles, handle database should get created first.
 *   Then handles can be created and for each handles size of the memory
 *   should be given while creating handles. The memory will be allocated
 *   during handle creation. Whenever we checkout the handle
 *   the particular allocated memory for the handle will be given to the user,
 *   user can use the memory, for each checkout should be associated with
 *   checkin. Once the usage of handles are over, handles should be deleted. 
 *   Finally the handle database should be destroyed.
 * 
 */

//-----------------------------------------------------------

/**
 * \defgroup handle_usage API Usage Examples
 * \brief Code Examples.
 * \ingroup handle
 *
 *  
 * The usage of handle library described as below.
 * The handle database should be created for creating handles,
 * this could be done by following API.
 *  
 * \code 
 * void hdlCallbackDestructor(void *pData)
 * {
 *   /*
 *    * this callback will get called for each handle destroy
 *    * Handle data will be passed as part of the destroy callback.
 *    */  
 * }
 * \endcode
 *
 * Creating the database as follows.
 * \code 
 * 
 *   ClHandleDatabaseHandleT  dbHandle = CL_HANDLE_INVALID_VALUE;
 *   ClHandleT                handle   = CL_HANDLE_INVALID_VALUE;
 *   ClXXXXDataT              *pData   = NULL;
 * 
 *   rc = clHandleDatabaseCreate(hdlCallbackDestructor, &dbhandle);
 *   if( CL_OK != rc ) 
 *   {
 *      /* do cleanup */
 *      return rc;
 *   }
 *  
 *   /*Creating the handle from the database. */
 *   rc = clHandleCreate(dbHandle, sizeof(ClXXXXDataT), &handle); 
 *   if( CL_OK != rc )
 *   {
 *      /* do cleanup */
 *      return rc;
 *   }
 *   rc = clHandleCheckout(dbHandle, handle, (void **) &pData);
 *   if( CL_OK != rc )
 *   {
 *      /* do cleanup */
 *      return rc;
 *   }
 *   /* Use the pData */
 *   pData->data = XXXX;
 *   
 *   rc = clHandleCheckin(dbHandle, handle);
 *   if( CL_OK != rc )
 *   {
 *      /* do cleanup */
 *      return rc;
 *   }
 *   /* after the usage of handle, during the finalize, the allocated
 *      handle can be deleted by the following apis
 *   */
 *   rc = clHandleDestroy(dbHandle, handle);
 *   if( CL_OK != rc )
 *   {
 *      /* do cleanup */
 *       return rc;
 *   }
 *   /* everything is done with all the handles, the database should be
 *      destroyed. 
 *   */
 *   rc = clHandleDatabaseDestroy(dbHandle)
 *   if( CL_OK != rc )
 *   {
 *     return rc;
 *   }
 * \endcode
 * 
 */


//-----------------------------------------------------------

/**
 *  \defgroup handle_error Error/Return Codes
 *  \brief Common and Component specific Error Codes.
 *  \ingroup handle
 *
 *  The majority of ASP API functions return a <b>Return Code</b> as their return value. 
 *  A zero return code (CL_OK) always indicates success. Non-zero return codes 
 *  always carry two types of information, masked into one single value: 
 *  a <b>Component Identifier</b> and an <b>Error Code</b>. The component 
 *  identifier identifies the component (or software layer) in which the problem 
 *  occurred, while the error code describes the nature of the problem. 
 *  Some error codes are common across all components, while others are 
 *  component specific. 
 *
 *  The format of the Return Codes is 0xCCNNNN (given in hex),
 *  where 0xCC is the ASP Component Identifier and 0xNNNN is the Error Code.
 *
 *  \note <b>Only the Error Codes are listed as Return values 
 *  in the Function Documentation of the API Reference pages. The real 
 *  return value also contains the Component Identifier!</b> 
 *
 *  The following links are useful while interpreting Handle Management 
 *  generated return codes:
 *  - \ref apirefs_errorcodes_compid_CL_CID_HANDLE "Handle Management Component Identifier"
 *  - \ref apirefs_errorcodes_common
 *
 *  For further details and information about all error/return codes visit 
 *  page \ref apirefs_errorcodes.
 */

//-----------------------------------------------------------

/**
 *  \defgroup handle_apis API Reference Pages
 *  \brief Defines, Structures, Typedefs, Functions. 
 *  \ingroup handle
 */

//-----------------------------------------------------------
