/**
 *  \defgroup prov Provisioning Library 
 *  \brief The OpenClovis Provisioning Library links Configuration MO(Managed Object),
 *  and its corresponding OI(Object Implementer). "Configuration MO" will be referred 
 *  as "Prov MSO" throughout this document. 
 *  \par It allows 
 *  \arg Pre-provisioning of the resources. 
 *  \arg Notification for configuration changes of a Prov MSO
 *  \arg Manage life cycle of Prov MSO.
 */
 
/**
 *  \defgroup prov_intro Functional Description
 *  \brief Description of the Provisioning Library. 
 *  \ingroup prov 
 * 
 */

/**
 *  \defgroup prov_usage  API Usage Examples
 *  \brief Code Examples.
 *  \ingroup prov
 * 
 */

/**
 *  \defgroup prov_error Error/Return Codes
 *  \brief Common and Component specific Error Codes.
 *  \ingroup prov
 *
 *  The majority of ASP API functions return a <b>Return Code</b> as their return value. 
 *  A zero return code (CL_OK) always indicates success. Non-zero return codes 
 *  always carry two types of information, masked into one single value: 
 *  a <b>Component Identifier</b> and an <b>Error Code</b>. The component 
 *  identifier identifies the component (or software layer) in which the problem 
 *  occurred, while the error code describes the nature of the problem. 
 *  Some error codes are common across all components, while others are 
 *  component specific. 
 *
 *  The format of the Return Codes is 0xCCNNNN (given in hex),
 *  where 0xCC is the ASP Component Identifier and 0xNNNN is the Error Code.
 *
 *  \note <b>Only the Error Codes are listed as Return values 
 *  in the Function Documentation of the API Reference pages. The real 
 *  return value also contains the Component Identifier!</b> 
 *
 *  The following links are useful while interpreting Provisioning Library 
 *  generated return codes:
 *  - \ref apirefs_errorcodes_compid_CL_CID_PROV "Provisioning Library Component Identifier"
 *  - \ref apirefs_errorcodes_common
 *  - \ref apirefs_errorcodes_prov
 *
 *  For further details and information about all error/return codes visit 
 *  page \ref apirefs_errorcodes.
 */

/**
 *  \defgroup prov_apis API Reference Pages
 *  \brief Defines, Structures, Typedefs, Functions.
 *  \ingroup prov
 */

//-----------------------------------------------------------
//-----------------------------------------------------------

/**

\addtogroup prov_intro
\brief Description of Prov MSO.

Any physical, logical resource(s) in a system that needs to be configured from north bound interface(SNMP,CLI) has to be modeled as Prov MSO in COR. Prov MSO can have one or more instances and has a corresponding associated OI. 
An OI is a component/process which implements given Prov MSO.

\section sec_prov_intro_1 Modeling Prov MSO and associating with corresponding OI

IDE provides a way to model Prov MSO and also to associate given Prov MSO(s) to given OI(s).
IDE provides a way to associate all the Prov MSO instances to given OI(s) or associate set of Prov MSO instances to 
given OI(s). Those associations are captured in <nodeInstanceName>_rt.xml file. This files can be found in 
$ASP_CONFIG folder.

\subsection sec_prov_intro_11 Prov MSO attribute characteristics

Each MO attribute has the following characteristics:
\arg Type associated with attribute values: 
<br>Prov MSO supporting signed/unsigned char, signed/unsigned short, signed/unsigned int, signed/unsigned int64.
\arg Default value
\arg Qualifier
\arg Sub Qualifiers

The qualifiers supported are:
<br>Every attribute must be qualified as a CONFIG, RUNTIME or KEY attribute - the qualifiers are mutually exclusive.

\par Configuration attribute
  A configuration attribute is always persisted and cached. The following sub- qualifiers 
  (either singly or in any combination) can be associated with a configuration attribute:
    - The INITIALIZED sub-qualifier indicates that a value must be specified for this attribute 
      when the object is created. This sub qualifier may not be set in the definition of a configuration 
      attribute, which includes a default value for the attribute.
    - The WRITABLE sub-qualifier indicates that the attribute can be modified at run time.
    - The MULTI-VALUED sub-qualifier indicates that the attribute can take on multiple values.
    .
    
\par Run-time attribute
  A runtime attribute is not persisted or cached by default. Runtime attributes are not allowed to take on 
  the writable or initialized sub-qualifiers. The following sub-qualifiers (either singly or in any combination) 
  can be associated with a runtime attribute:
    - The PERSISTENT sub-qualifier for runtime attributes indicates that the attribute must be stored in a 
      persistent manner by the COR Service.
    - The CACHED sub-qualifier for runtime attribute indicates that the attribute must be cached by the COR service
    - The MULTI-VALUED sub-qualifier indicates that the attribute can take on multiple values.
    .
  Runtime attributes are used for data provided by Object Implementers. They are 'read only' from 
  North bound interface.
    - A runtime attribute that is cached will be updated by the Object Implementer whenever the value has changed. 
    - A read request on such a runtime attribute will be honored from the cache.
    - On the other hand, a read request on a runtime attribute that is not cached will trigger a synchronous request 
    to the Object Implementer who is expected to return with the value of the attribute.
    .

\par Managing life cycle of Prov MSO 
Prov MSO objects can be created when its corresponding OI comes up. During modeling through IDE, there is an option to specify whether the Prov MSO should be created or not when Provisioning library is initialized.

Provisioning Library provides two APIs to create/delete Prov MSO at run time.
\arg Create Prov MSO at run time clProvObjectCreate().
\arg Delete Prov MSO at run time clProvObjectDelete().


\par Prov MSO change notification
Any change in Prov MSO will be notified using following call back functions. 
\arg cl<OIName><MSOName>ProvConstructor()
\arg cl<OIName><MSOName>ProvDestructor()
\arg cl<OIName><MSOName>ProvValidate()
\arg cl<OIName><MSOName>ProvUpdate()
\arg cl<OIName><MSOName>ProvRollback()

The above functions are generated by IDE. Those functions can be found in $ASP_MODEL/$ASP_MODEL_NAME/app/<OIName>/cl<OIName><MSOName>.c file. 
User can fill in their bussiness logic inside those functions.

cl<OIName><MSOName>ProvConstructor() callback function is called when Prov MSO is created.
cl<OIName><MSOName>ProvDestructor() callback function is called when given Prov MSO is deleted.

Any change in configuration attributes are informed to OI by using two phase transaction. cl<OIName><MSOName>ProvValidate 
function will be called first. In this function can have a logic to validate the value of the changed 
configuration attribute. This function return success or failure based on its logic. In case if it returns non-success 
value, Provisioning Library will call cl<OIName><MSOName>ProvRollback function. In this function can have a logic to
release any resource which are allocalted in cl<OIName><MSOName>ProvValidate function. 
In case of success of cl<OIName><MSOName>ProvValidate function, cl<OIName><MSOName>ProvUpdate function will called. 

\section sec_prov_intro_2 Pre-Provisioning 

Provisioning Library provides a way to pre-configure Prov MSO even before OI is running. When Provisioning Library is being initialized, it
finds out the Prov MSOs managed by the OI to which it is linked. If the Prov MSOs are already created then it pulls the information from COR and informs the OI. This activity happens when clProvInitialize function is called which is called just before calling OI clAppInitalize function.

*/
 
//-----------------------------------------------------------

 /**
 *  \addtogroup prov_usage
 *  \brief Code Examples.
 *
 *  The provision attributes for a hardware/software resource is specified
 *  during the modeling of the system. These resources are mere types and
 *  needs to be instantiated before using them. These resources needs to be
 *  associated with a component/application which creates the instances on 
 *  coming up.
 *  The following example shows how to create/delete Prov MSO instances.
 *  \code
 *  ClRcT rc = CL_OK;
 *  ClCorMOIdPtrT moId;
 *  ClCorAttributeValueListPtrT attrList;
 *  ClCorObjectHandleT handle;
 *  ClUint32T attrData = 10; 
 *  ClNameT moIdName;
 *  ClCorAttributeValueT attrValue[] = {
 *     { NULL,             // Attribute path is NULL
 *     0x10,               // Specify attribute ID of WRITE-INITIALIZED 
 *                         // attribute. Attribute ID can be found in 
 *                         // $ASP_CONFIG/clCorMetaStruct.h file.
 *     -1,                 // As this is a simple attribute give -1 for index
 *     (ClPtrT)&attrData,  // Value of WRITE-INITIALIZED attribute
 *     sizeof(ClUint32T) } // Size of the given attribute
 *     }
 *  ClCorAttributeValueListT attrValueList = {
 *     sizeof(attrValue)/sizeof(ClCorAttributeValueT), 
 *     &attrValue }
 * 
 *  // SM_CFG_TBL_SIM1_TABLE_MO has one WRITE-INITALIZED attibute and 
 *  // one WRITE attribute. WRITE-INITALIZED attribute should be initialized 
 *  // at the time object creation.
 *  #define SM_CFG_TBL_SIM1_TABLE_MO "\\Chassis:0\\smCfgTblSim1Table:0"
 *
 *  // Get MOID from MO Name
 *  strcpy(moIdName.value, SM_CFG_TBL_SIM1_TABLE_MO);
 *  moIdName.length = strlen(SM_CFG_TBL_SIM1_TABLE_MO);
 *  
 *  rc = clCorMoIdNameToMoIdGet(&moIdName, &moId);
 *  if(CL_OK != rc) {
 *    return rc;
 *  }
 *  // Create Prov MSO 
 *  rc = clProvObjectCreate(&moId, &attrValue, &handle);
 *  if(CL_OK != rc) {
 *      return rc;
 *  }
 *  \endcode
 *
 *
 *  \code
 *  ClRcT rc = CL_OK;
 *  // Delete Prov MSO at run time
 *  rc = clProvObjectDelete(handle);
 *  if(CL_OK != rc) {
 *  //Error occurred. Take appropriate action.
 *     return rc;
 *  }
 *  \endcode
 *
 *  After the creation of Prov MSO, the Object Implementor (OI) can receive
 *  all change notifications like set, delete, create for the resource. 
 *  Provisioning library on initialization registers its callbacks with
 *  Transaction Agent and also registers the OI with Clovis Object
 *  Repository(COR) on the creation of Prov objects.
 *  Subsequent requests like create, set, delete on this object will invoke
 *  the callbacks registered by Prov.
 *  Following code segment explains how to handle provisioning attribute change notifications.
 *
 *  \code
 *  // This function prints attribute information
 *   ClRcT clProvTxnInfoPrint(ClProvTxnDataT* pProvTxnData)
 *   {
 *     clLog(CL_LOG_INFO, CL_PROV, CL_PROV_CALL_BACKS, 
 *          "Attr ID[0x%x] AttrType[0x%x] AttrDataType [0x%x] Operation[0x%x]",\
 *           pProvTxnData->attrId, pProvTxnData->attrType, 
 *           pProvTxnData->attrDataType, pProvTxnData->provCmd);
 *     switch(pProvTxnData->attrType)
 *     {
 *       case CL_COR_SIMPLE_ATTR:
 *       {
 *        switch(pProvTxnData->attrDataType)
 *        {
 *         case CL_COR_INT8:
 *         case CL_COR_UINT8:
 *         {
 *          clLog(CL_LOG_INFO, CL_PROV, CL_PROV_CALL_BACKS, "Data8[%c]",
 *                *(ClCharT*)pProvTxnData->pProvData);
 *          break;
 *         }
 *         case CL_COR_INT16:
 *         case CL_COR_UINT16:
 *         {
 *          clLog(CL_LOG_INFO, CL_PROV, CL_PROV_CALL_BACKS, "Data16[%x]",
 *                *(ClUint16T*)pProvTxnData->pProvData);
 *          break;
 *         }
 *         case CL_COR_INT32:
 *         case CL_COR_UINT32:
 *         {
 *          clLog(CL_LOG_INFO, CL_PROV, CL_PROV_CALL_BACKS, "Data32[%x]",
 *                *(ClUint32T*)pProvTxnData->pProvData);
 *          break;
 *         }
 *         case CL_COR_INT64:
 *         case CL_COR_UINT64:
 *         {
 *          clLog(CL_LOG_INFO, CL_PROV, CL_PROV_CALL_BACKS, "Data64[%llx]",
 *                *(ClUint64T*)pProvTxnData->pProvData);
 *          break;
 *         }
 *        }
 *       }
 *    }
 *   
 *  // Callback function to validate attribute change
 *  ClRcT cl<OIName><MSOName>ProvValidate(CL_OM_PROV_CLASS* pThis, 
 *                                        ClHandleT txnHandle, 
 *                                        ClProvTxnDataT* pProvTxnData)
 *  {
 *      ClRcT rc = CL_OK;
 *      // Perform some logic here to do validation of the attribute. 
 *      // For ex: range checking, checking for valid type etc
 *      clLog(CL_LOG_INFO, CL_PROV, CL_PROV_CALL_BACKS, "Prov Validate");
 *      return rc;
 *  }
 *  
 *  // Callback function to update attribute change
 *  ClRcT cl<OIName><MSOName>ProvUpdate(CL_OM_PROV_CLASS* pThis, 
 *                                      ClHandleT txnHandle, 
 *                                      ClProvTxnDataT* pProvTxnData)
 *  {
 *    ClRcT rc = CL_OK;
 *    // If any attribute of Prov MSO is changed  
 *    if(pProvTxnData->provCmd == CL_COR_OP_SET)
 *    {
 *      // Perform logic here to do set on the attribute
 *    }
 *   
 *    clLog(CL_LOG_INFO, CL_PROV, CL_PROV_CALL_BACKS, "Prov Update");
 *    clProvTxnInfoPrint(pProvTxnData);
 *    return rc;
 *  }
 * 
 *  // Callback function to rollback in case cl<OIName><MSOName>Validate 
 *  // function returns error value 
 *  ClRcT cl<OIName><MSOName>ProvRollback(CL_OM_PROV_CLASS* pThis, 
 *                                        ClHandleT txnHandle, 
 *                                        ClProvTxnDataT* pProvTxnData)
 *  {
 *    ClRcT rc = CL_OK;
 *
 *    // Perform logic here to rollback the changes done at validation phase
 *    clLog(CL_LOG_INFO, CL_PROV, CL_PROV_CALL_BACKS, "Prov Rollback");
 *    return rc;
 *  }
 *  \endcode
 *
 *  Provisioning library registers Read callback with Transaction Agent on
 *  initialization. This is being invoked when there is a request to read the
 *  attribute value of a resource. This is assuming the fact that the OI has
 *  done clCorPrimaryOISet() during its initialization.
 *  Following function will be called when get request comes to run-time 
 *  attribute of given Prov MSO
 *  \code
 *  ClRcT cl<OIName><MSOName>ProvRead(CL_OM_PROV_CLASS* pThis, 
 *                                    ClHandleT txnHandle, 
 *                                    ClProvTxnDataT* pProvTxnData)
 *  {
 *
 *    // Need to have a logic to get the proper value for given attribute ID
 *    ClUint32T tempData = 10; 
 *
 *    // Find out proper size of given attribute
 *    ClUint32T dataLen  = sizeof(tempData); 
 * 
 *    memcpy((pProvTxnData->pProvData), &tempData, dataLen);
 *    clLog(CL_LOG_INFO, CL_PROV, CL_PROV_CALL_BACKS, "Prov Read callback");
 *  }
 *  \endcode
 */

//-----------------------------------------------------------
