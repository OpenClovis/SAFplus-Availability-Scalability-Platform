/**
 *  \defgroup bitmap Bitmap Management
 *  \brief The OpenClovis bitmap library provides the interface to create 
 *  and perform the bit level operations on an object of bitmap type. 
 *   
 */

//-----------------------------------------------------------
 
/**
 *  \defgroup bitmap_intro Functional Description
 *  \brief OpenClovis bitmap library.
 *   
 *  The OpenClovis bitmap library provides the interface to perform
 *  the bit level operations (set, clear, etc). 
 *  It provides the ways to map (convert) different types of data (buffer 
 *  and position list) to the bitmap type and viceversa.
 *  It also allows the operations like locked and unlocked walk on the bitmap.
 *  \ingroup bitmap
 * 
 */

//-----------------------------------------------------------

/**
 *  \defgroup bitmap_usage API Usage Examples
 *  \brief Code Examples.
 *  \ingroup bitmap
 *
 *  Create a bitmap of specified length
 *  \code 
 *  ClBitmapHandleT bitHdl  =   CL_BM_INVALID_BITMAP_HANDLE;
 *  ClRcT           rc      =   CL_OK;
 *  ClUint32T       bitNum  =   10;
 *  /*Creates a bitmap of length 10 (bit 0-9)*/
 *  rc = clBitmapCreate(&bitHdl, bitNum);
 *  if(CL_OK != rc)
 *  {
 *      clLogError("EXP","BIT", "Failed to create bitmap.");
 *      return rc;
 *  }
 *  \endcode 
 *
 *  Set a bit of the bitmap
 *  \code 
 *  ClUint32T       bitNum  =   5;
 *
 *  /*Get bitHdl by calling clBitmapCreate()*/
 *  rc = clBitmapBitSet(bitHdl, bitNum);
 *  if(CL_OK != rc)
 *  {
 *      clLogError("EXP","BIT", "Failed to set the bit 5.");
 *      return rc;
 *  }
 *  \endcode 
 *
 *  Check the status of a bit of the bitmap
 *  \code 
 *  ClUint32T       bitNum      =   5;
 *  ClRcT           retVal      =   CL_OK;
 *  ClInt32T        bitStatus   =   CL_BM_BIT_UNDEF;
 *
 *  /*Get bitHdl by calling clBitmapCreate()*/
 *  bitStatus = clBitmapIsBitSet(bitHdl, bitNum, &retVal);
 *  if(CL_OK != retVal)
 *  {
 *      clLogError("EXP","BIT", "Failed to check the bit status.");
 *      return rc;
 *  }
 *  
 *  if(CL_BM_BIT_SET == bitStatus)
 *  {
 *      clLogInfo("EXP","BIT", "Bit 5 is set.");
 *  }
 *  else if(CL_BM_BIT_CLEAR == bitStatus)
 *  {
 *      clLogInfo("EXP","BIT", "Bit 5 is not set.");
 *  }
 *  else
 *  {
 *      clLogInfo("EXP","BIT", "Bit 5 is undefined.");
 *  }
 *
 *  \endcode 
 * 
 *  Clear a bit of the bitmap
 *  \code 
 *  ClUint32T       bitNum  =   3;
 *
 *  Clear a bit of the bitmap
 *  /*Get bitHdl by calling clBitmapCreate()*/
 *  rc = clBitmapBitClear(bitHdl, bitNum);
 *  if(CL_OK != rc)
 *  {
 *      clLogError("EXP","BIT", "Failed to clear bit number 3.");
 *      return rc;
 *  }
 *  \endcode 
 * 
 *  Get the length of the bitmap
 *  \code 
 *  ClUint32T       bitmapLength  =   0;
 *  /*Get bitHdl by calling clBitmapCreate()*/
 *  bitmapLength = clBitmapLen(bitHdl);
 *  if(0 == bitmapLength)
 *  {
 *      clLogError("EXP","BIT", "Failed to get the bitmap length.");
 *  }
 *  else
 *  {
 *      clLogInfo("EXP","BIT", "Bitmap length = %d.", bitmapLength);
 *  }
 *  \endcode 
 *  Get the number of bits set in the bitmap
 *  \code 
 *  ClUint32T   numBitSet  =   0;
 *  /*Get bitHdl by calling clBitmapCreate()*/
 *  rc = clBitmapNumBitsSet(bitHdl, &numBitSet);
 *  if(CL_OK != rc)
 *  {
 *      clLogError("EXP","BIT", "Failed to get the bitmap length.");
 *      return rc;
 *  }
 *  else
 *  {
 *      clLogInfo("EXP","BIT", "Number of bits set in the bitmap = %d.",
 *                 numBitSet);
 *  }
 *  \endcode 
 *
 *  Destroy the Bitmap
 *  \code
 *  /*Get bitHdl by calling clBitmapCreate()*/
 *  rc = clBitmapDestroy(bitHdl);
 *  if(CL_OK != rc)
 *  {
 *      clLogError("EXP","BIT", "Failed to destroy the bitmap.");
 *      return rc;
 *  }
 *  \endcode 
 * 
 */

//-----------------------------------------------------------

/**
 *  \defgroup bitmap_error Error/Return Codes
 *  \brief Common and Component specific Error Codes.
 *  \ingroup bitmap
 *
 *  The majority of ASP API functions return a <b>Return Code</b> as their return value. 
 *  A zero return code (CL_OK) always indicates success. Non-zero return codes 
 *  always carry two types of information, masked into one single value: 
 *  a <b>Component Identifier</b> and an <b>Error Code</b>. The component 
 *  identifier identifies the component (or software layer) in which the problem 
 *  occurred, while the error code describes the nature of the problem. 
 *  Some error codes are common across all components, while others are 
 *  component specific. 
 *
 *  \note <b>Only the Error Codes are listed as Return values 
 *  in the Function Documentation of the API Reference pages. The real 
 *  return value also contains the Component Identifier!</b> 
 *
 *  The format of the Return Codes is 0xCCNNNN (given in hex),
 *  where 0xCC is the ASP Component Identifier and 0xNNNN is the Error Code.
 *
 *  The following links are useful while interpreting Bitmap Library 
 *  generated return codes:
 *  - \ref apirefs_errorcodes_compid_CL_CID_BITMAP "Bitmap Library Component Identifier"
 *  - \ref apirefs_errorcodes_common
 *
 *  For further details and information about all error/return codes visit 
 *  page \ref apirefs_errorcodes.
 */

//-----------------------------------------------------------

/**
 *  \defgroup bitmap_apis API Reference Pages
 *  \brief Defines, Structures, Typedefs, Functions.
 *  \ingroup bitmap
 */

//-----------------------------------------------------------

