/**
 *  \defgroup heap Heap Management
 *  \brief Computer programs use dynamic memory allocation to access memory 
 *   area whose size is not known at compile time. The OpenClovis Heap Library
 *   provides the ability to optimize the performance and reduce fragmentation 
 *   of free memory.Components and applications built on ASP can use this 
 *   implementation for their dynamic memory requirements. 
 */

//-----------------------------------------------------------

/**

\defgroup heap_intro Functional Description
\brief Description of Heap Management.
\ingroup heap 

Computer programs use dynamic memory allocation to access memory 
area whose size is not known at compile time. The OpenClovis Heap Library
provides the ability to optimize the performance and reduce fragmentation 
of free memory. Components and applications built on ASP can use this 
implementation for their dynamic memory requirements. 

Applications can take ownership of a certain amount of memory using the
clHeapAllocate(), clHeapCalloc() or clHeapRealloc() functions. The ownership
of the memory chunk remains with the application until it is explicitly
freed by invoking clHeapFree() API. After the memory is freed, it can be
used for re-allocation.

Using the heap library, an application can specify any of the following to be
used for dynamic memory allocation:
- Native 'C' implementation
- OpenClovis implementation
- Any other implementation

If the OpenClovis implementation is used, the heap library creates pools of
memory chunks of one size. Thus different pools for different chunk
sizes can be created within the same heap library. Each pool is created
with an initial size that can later grow until an upper limit on the
size of that pool or a process wide upper limit on dynamic memory is
reached.

The pools grow in quantum of \e incrementPoolSize parameter.
The size can be configured in the heap library during its initialization
using clHeapLibInitialize() function. The library must be initialized before
any call for dynamic memory allocation is made. When the process is
terminated, the heap library must be finalized using clHeapLibFinalize()
function. After finalizing the call, no dynamic memory allocation or
de-allocation of memory should be attempted. The OpenClovis implementation
also provides Notifications for conditions when the process limit crosses
certain values. This enables the resource managers to take appropriate action.

OpenClovis implementation of the heap utility helps the application developer
in detecting certain dynamic memory related issues. For example,
detection of double free of a chunk, writing over the upper limit of a chunk
(overrun),  or writing below the lower limit of a chunk. These facilities are
provided by setting the debug level of the library. It can also detect free
memory chunk that is not allocated from the heap library or any attempt to
free a partial chunk. An application can provide its own implementation of
dynamic memory allocation using CL_HEAP_CUSTOM_MODE while invoking the
clHeapLibInitialize() API. It can plug-in its own functions for allocation,
re-allocation, and de-allocation of memory. All ASP components linked to this
application can use the application registered functions for their own
requirements.

*/
 
//-----------------------------------------------------------

 
/**
 *  \defgroup heap_usage API Usage Examples
 *  \brief Code Examples.
 *  \ingroup heap
 *
 *  Here the allocation and deallocation of the memory is shown. These are
 *  very simple operations and very similar to malloc() and free() system
 *  calls.
 *
 *  \code
 *  ClRcT retCode = CL_OK;
 *  ClCharT *pStr = NULL;
 *  
 *  pStr = (ClCharT*) clHeapAllocate(1024);
 *
 *  if(pStr == NULL)
 *  {
 *      // There is insufficient memory and because of it the memory
 *      // allocation failed.
 *  }
 *
 *  // Now the memory allocate in pStr can be used like a character array.
 *
 *  retCode = clHeapFree(pStr);
 *  if(CL_OK != retCode)
 *  {
 *      // Freeing of the allocated memory failed.
 *  }
 *
 *  // allocated memory is freed successfully.
 *  \endcode
 *
 */
 
//-----------------------------------------------------------

/**
 *  \defgroup heap_error Error/Return Codes
 *  \brief Common and Component specific Error Codes.
 *  \ingroup heap
 *
 *  The majority of ASP API functions return a <b>Return Code</b> as their return value. 
 *  A zero return code (CL_OK) always indicates success. Non-zero return codes 
 *  always carry two types of information, masked into one single value: 
 *  a <b>Component Identifier</b> and an <b>Error Code</b>. The component 
 *  identifier identifies the component (or software layer) in which the problem 
 *  occurred, while the error code describes the nature of the problem. 
 *  Some error codes are common across all components, while others are 
 *  component specific. 
 *
 *  The format of the Return Codes is 0xCCNNNN (given in hex),
 *  where 0xCC is the ASP Component Identifier and 0xNNNN is the Error Code.
 *
 *  \note <b>Only the Error Codes are listed as Return values 
 *  in the Function Documentation of the API Reference pages. The real 
 *  return value also contains the Component Identifier!</b> 
 *
 *  The following links are useful while interpreting Heap Library 
 *  generated return codes:
 *  - \ref apirefs_errorcodes_compid_CL_CID_HEAP "Heap Library Component Identifier"
 *  - \ref apirefs_errorcodes_common
 *
 *  For further details and information about all error/return codes visit 
 *  page \ref apirefs_errorcodes.
 */
 
//-----------------------------------------------------------

/**
 *  \defgroup heap_apis API Reference Pages
 *  \brief Defines, Structures, Typedefs, Functions. 
 *  \ingroup heap
 */

//-----------------------------------------------------------
