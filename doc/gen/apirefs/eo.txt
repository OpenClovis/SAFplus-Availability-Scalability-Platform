/**
 *  \defgroup eo Execution Object (EO) Service
 *  \brief The OpenClovis Execution Object (EO) encapsulates each distinct 
 *  OpenClovis ASP aware software component and provides an execution 
 *  environment for the components. It provides a uniform interface between 
 *  the software component and the rest of the system components. 
 */
 
//-----------------------------------------------------------

/**
 *  \defgroup eo_intro Functional Description
 *  \brief Description of EO Service.
 *  \ingroup eo
 * 
 *  The OpenClovis Execution Object (EO) encapsulates each distinct OpenClovis 
 *  ASP aware software component and provides an execution environment for
 *  the components. It provides a uniform interface between the software 
 *  component and the rest of the system components. 
 *
 *  The interfaces fall into the following two categories:
 *  \arg <b>Management Interface</b> - This interface is used to control and 
 *  configure the software components. 
 *  \arg <b>Service Interface</b> - This interface allows software components 
 *  to expose component specific functionality. 
 *
 *  Both management and service interfaces are exposed using RMD APIs. 
 *  EO provides threads for receiving RMD messages and worker threads to process
 *  them. It provides an execution environment, required by a software component,
 *  to the component user and component manager. 
 *
 *  The OpenClovis product suite provides a process of integrating a third party 
 *  software component with OpenClovis ASP. This process is known as 
 *  Componentization. Using Componentization, both management and service 
 *  interfaces are exposed through RMD. 
 *
 *  Componentization provides the following functionality: 
 *  \arg Component re-start
 *  \arg Service Migration 
 *  \arg Location Transparency 
 *  \arg Easy debugging, statistics gathering, and profiling 
 *
 *  Componentization helps in features such as: 
 *  \arg Resource Management 
 *  \arg Component start, stop, and restart 
 *  \arg Debugging
 *
 *  EO communicates to other components using the OpenClovis Communication 
 *  Core components such as Event Manager (EM), Remote Method Dispatch (RMD), 
 *  Intelligent Object Communication (IOC), and Name Service. 
 */

//-----------------------------------------------------------

/**
 *  \defgroup eo_usage API Usage Examples
 *  \brief Code Examples.
 *  \ingroup eo
 *
 *  The code for EO is generated by the IDE (refer IDE User Guide). The users
 *  might want to be cautious when using the CL_EO_USE_THREAD_FOR_APP. The
 *  application take control of the main thread and has to hold the thread
 *  through it's lifetime. If the thread is released prematurely the behavior
 *  is undefined. The only way the application can be shutdown is through the
 *  invocation of clCpmComponentTerminate() which in turn invokes the callback
 *  clCompAppTerminate(). The logic to unblock the main thread should reside
 *  in this callback just before clCpmResponse().
 *
 *  The appropriate callbacks are as shown below:
 *
 *  \code
 *  ClBoolT unblockMainThread = CL_FALSE;
 *  
 *  ClRcT
 *  clCompAppInitialize(
 *      ClUint32T argc,
 *      ClCharT *argv[])
 *  {
 *      ClNameT             appName;
 *      ClCpmCallbacksT     callbacks;
 *      ClVersionT          version;
 *      ClIocPortT          iocPort;
 *      ClRcT               rc = CL_OK;
 *  
 *      /*
 *       * Get the pid for the process and store it in global variable.
 *       */
 *  
 *      mypid = getpid();
 *  
 *      /*
 *       * Initialize and register with CPM. 'version' specifies the 
 *       * version of AMF with which this application would like to 
 *       * interface. 'callbacks' is used to register the callbacks 
 *       * this component expects to receive.
 *       */
 *  
 *      version.releaseCode               = 'B';
 *      version.majorVersion              = 01;
 *      version.minorVersion              = 01;
 *      
 *      callbacks.appHealthCheck          = NULL;
 *      callbacks.appTerminate            = clCompAppTerminate;
 *      callbacks.appCSISet               = clCompAppAMFCSISet;
 *      callbacks.appCSIRmv               = clCompAppAMFCSIRemove;
 *      callbacks.appProtectionGroupTrack = NULL;
 *          
 *      /*
 *       * Get IOC Address, Port and Name. Register with AMF.
 *       */
 *  
 *      clEoMyEoIocPortGet(&iocPort);
 *  
 *      if ( (rc = clCpmClientInitialize(&cpmHandle, &callbacks, &version)) ) 
 *          goto errorexit;
 *  
 *      /*
 *       * If this component will provide a service, register it now.
 *       */
 *  
 *  #if HAS_EO_SERVICES
 *  
 *  
 *      rc = clSAFComponent1EO0ClientInstall();
 *  
 *  #endif
 *  
 *      /*
 *       * Do the application specific initialization here.
 *       */
 *  
 *      /*
 *       * ---BEGIN_APPLICATION_CODE---
 *       */
 *  
 *      // ...
 *  
 *      /*
 *       * ---END_APPLICATION_CODE---
 *       */
 *  
 *      /*
 *       * Now register the component with AMF. At this point it is
 *       * ready to provide service, i.e. take work assignments.
 *       */
 *  
 *      if ( (rc = clCpmComponentNameGet(cpmHandle, &appName)) ) 
 *          goto errorexit;
 *      if ( (rc = clCpmComponentRegister(cpmHandle, &appName, NULL)) ) 
 *          goto errorexit;
 *  
 *      /*
 *       * Print out standard information for this component.
 *       */
 *  
 *      clprintf ("Component [%s] : PID [%d]. Initializing\n", 
 *                 appName.value, mypid);
 *      clprintf ("   IOC Address     : 0x%x\n", clIocLocalAddressGet());
 *      clprintf ("   IOC Port        : 0x%x\n", iocPort);
 *  
 *      /*
 *       * This is where the application code starts. If the main thread 
 *       * usage policy is CL_EO_USE_THREAD_FOR_APP, then return from this 
 *       * fn only after the application terminates. If the main thread 
 *       * usage policy is CL_EO_USE_THREAD_FOR_RECV, then return from 
 *       * this fn after doing the application specific initialization 
 *       * and registration.
 *       */
 *  
 *      /*
 *       * ---BEGIN_APPLICATION_CODE---
 *       */
 *      ClTimerTimeOutT timeOut = { 1, 0 };
 *  
 *      // Do some processing
 *  
 *      while (unblockMainThread == CL_FALSE)
 *      {
 *          clOsalTaskDelay(timeOut);
 *      }
 *  
 *      // Release the main thread...
 *  
 *      /*
 *       * ---END_APPLICATION_CODE---
 *       */
 *  
 *      return rc;
 *  
 *  errorexit:
 *  
 *      clprintf ("Component [%s] : PID [%d]. Initialization error [0x%x]\n",
 *                appName.value, mypid, rc);
 *  
 *      return rc;
 *  }
 *  
 *  ClRcT
 *  clCompAppTerminate(
 *      ClInvocationT       invocation,
 *      const ClNameT       *compName)
 *  {
 *      ClRcT rc = CL_OK;
 *  
 *      clprintf ("Component [%s] : PID [%d]. Terminating\n",
 *                compName->value, mypid);
 *  
 *      /*
 *       * ---BEGIN_APPLICATION_CODE--- 
 *       */
 *  
 *      // ...
 *  
 *      /*
 *       * ---END_APPLICATION_CODE---
 *       */
 *      
 *      /*
 *       * Unregister with AMF and send back a response
 *       */
 *  
 *      if ( (rc = clCpmComponentUnregister(cpmHandle, compName, NULL)) )
 *          goto errorexit;
 *      if ( (rc = clCpmClientFinalize(cpmHandle)) )
 *          goto errorexit;
 *  
 *      unblockMainThread = CL_TRUE;
 *      clCpmResponse(cpmHandle, invocation, CL_OK);
 *  
 *      clprintf ("Component [%s] : PID [%d]. Terminated\n", 
 *                 compName->value, mypid);
 *  
 *      return rc;
 *  
 *  errorexit:
 *  
 *      clprintf ("Component [%s] : PID [%d]. Termination error [0x%x]\n",
 *                compName->value, mypid, rc);
 *  
 *      return rc;
 *  }
 *  \endcode
 *  
 * 
 */

//-----------------------------------------------------------

/**
 *  \defgroup eo_error Error/Return Codes
 *  \brief Common and Component specific Error Codes.
 *  \ingroup eo
 *
 *  The majority of ASP API functions return a <b>Return Code</b> as their return value. 
 *  A zero return code (CL_OK) always indicates success. Non-zero return codes 
 *  always carry two types of information, masked into one single value: 
 *  a <b>Component Identifier</b> and an <b>Error Code</b>. The component 
 *  identifier identifies the component (or software layer) in which the problem 
 *  occurred, while the error code describes the nature of the problem. 
 *  Some error codes are common across all components, while others are 
 *  component specific. 
 *
 *  The format of the Return Codes is 0xCCNNNN (given in hex),
 *  where 0xCC is the ASP Component Identifier and 0xNNNN is the Error Code.
 *
 *  \note <b>Only the Error Codes are listed as Return values 
 *  in the Function Documentation of the API Reference pages. The real 
 *  return value also contains the Component Identifier!</b> 
 *
 *  The following links are useful while interpreting Execution Object  
 *  generated return codes:
 *  - \ref apirefs_errorcodes_compid_CL_CID_EO "EO Component Identifier"
 *  - \ref apirefs_errorcodes_common
 *  - \ref apirefs_errorcodes_eo
 *
 *  For further details and information about all error/return codes visit 
 *  page \ref apirefs_errorcodes.
 */

//-----------------------------------------------------------

/**
 *  \defgroup eo_apis API Reference Pages
 *  \brief Defines, Structures, Typedefs, Functions.
 *  \ingroup eo
 */

//-----------------------------------------------------------
