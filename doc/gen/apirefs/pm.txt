/**
 *  \defgroup pm Performance Management Library 
 *  \brief The OpenClovis Performance Management Library is used monitor and
 *  collect statistics information on the resources. 
 *  \par It helps to  
 *  \arg Collect statistical information from the PM attributes at the configured interval.
 *  \arg Define Threshold Crossing Alarms (TCA) to the PM attributes with lower and upper 
 *  threshold boundaries.
 *  \arg Fetch PM attributes values (in the configured interval) and cache into
 *  COR for fast retrieval from north bound.
 */

/**
 *  \defgroup pm_intro Functional Description
 *  \brief Description of the Performance Management Libary.
 *  \ingroup pm 
 * 
 */

/**
 *  \defgroup pm_usage  API Usage Examples
 *  \brief Code Examples.
 *  \ingroup pm
 * 
 */

/**
 *  \defgroup pm_error Error/Return Codes
 *  \brief Common and Component specific Error Codes.
 *  \ingroup pm
 *
 */

/**
 *  \defgroup pm_apis API Reference Pages
 *  \brief Defines, Structures, Typedefs, Functions.
 *  \ingroup pm
 */

//-----------------------------------------------------------
//-----------------------------------------------------------

/**

\addtogroup pm_intro
\brief Description of PM MSO.

The physical or logical resources's attributes which needs to be monitored are 
modeled as PM attributes which will be part of PM MSO in COR. It can have one
reset attribute which will be used to reset the PM attributes' values from
north bound. The PM MSO should be associated with one Primary Object
Implementer (POI).

\section sec_pm_intro_1 Modeling PM MSO and associating with POI.

IDE provides the way to select PM attributes from the list of available 
attributes. It facilitates to define the threshold values for each PM
attribute and associate alarms. These associations can be found in 
$ASP_CONFIG/clPMConfig.xml file.

\subsection sec_pm_intro_11 PM MSO attribute characteristics

PM MSO can contain two types of attributes.
\arg PM attribute
\arg PM reset attribute

\par PM attributes

Each PM attribute has the following characteristics:
\arg Type of the attribute
<br>    PM attributes can be of signed/unsigned char, signed/unsigned short,
signed/unsigned int 32, signed/unsigned int 64.
\arg Default Values
<br>    Min, Max and Initial values for the PM attribute.
\arg Cached/Non-cached
<br>    If the PM attribute is cached, its value is stored in COR otherwise it
is not.
\arg Persisted/Non-persisted
<br>    If the PM attribute is persisted, the value will be retained across
cluster reboots. The attribute can be persisted only if it cached.

\par PM reset attributes

There can be only one reset attribute configured for a PM MSO. In the reset
attribute callback provided, the user has to reset the PM attributes.

\subsection sec_pm_intro12 PM Life cycle

The PM MSO life cycle includes 

\arg PM attribute configuration.
\arg PM reset attribute configuration.
\arg Threshold Crossing Alarms (TCA).
\arg PM interval configuration & PM operation.
\arg PM registration & deregistration.

Please refer OpenClovis IDE User's Guide to get know how to configure.

\par PM attribute & PM reset attribute configuration

In the IDE, PM attributes can be selected from the list of available
attributes. Each PM attribute can be configured cached/non-cached,
persisted/non-persisted.

IDE provides the way to configure PM reset attribute for the list of PM
attributes selected. We can select one attribute as the PM reset attribute
from list of 'writable' attributes available.

\par Threshold Crossing Alarms (TCA)

Threshold Crossing Alarms or TCA is the unique feature of PM. The PM attributes 
can be associated with the alarms available with the configured lower and
upper threshold values along with the alarm severity. So that when 
the PM attributes' value falls within the boundary, the configured alarm will be raised. 

There can be many levels of thresholds configured and alarms 
associated. When the PM attributes'
value goes from one threshold boundary to another, the alarm associated with
the first boundary is cleared and the alarm for the next boundary will be
raised. So that the user can configure less severity alarms for low
thresholds and higher severity alarms for the high thresholds.

\par PM interval configuration & PM operation

The PM interval configuration is specified in milli seconds. In this interval,
the PM library will fetch the registered PM resources's attributes from the
POI and process the data, which is called as PM operation. This PM operation
also includes updating the cached attributes values into COR and processing
the TCA's registered with the threshold boundaries and raise/clear the alarms.

\par PM registration & deregistration

For the PM operation to happen, the user has to register the resource with the
PM library. Following are the apis used for PM registration and
deregistration which will accept the list of MoIds.

\arg clPMStart()
\arg clPMStop()

\subsection sec_pm_intro13 Primary OI association

In the IDE each PM MSO can be associated with a Primary OI. During PM
operation the PM library will fetch the values from Primary OI and process it, 
and also when the non-cached PM attributes are read from north bound, the PM
library will fetch it from the primary OI. If the PM attribute is cached, then the
value in COR is returned.

The Primary OI needs to implement two callbacks.

\arg ClPMObjectReadCallbackT()
\arg ClPMObjectResetCallbackT()

The first callback will get called when the non-cached PM attributes' are read
from northbound and the user is supposed to provide the values. It is also
called by the PM library for the PM operation in the configured interval.

The second callback will get called when the PM reset attribute is SET from
north bound and the user is supposed to reset all the PM attributes.

*/

/**

\addtogroup pm_error

The majority of ASP API functions return a <b>Return Code</b> as their return value. 
A zero return code (CL_OK) always indicates success. Non-zero return codes 
always carry two types of information, masked into one single value: 
a <b>Component Identifier</b> and an <b>Error Code</b>. The component 
identifier identifies the component (or software layer) in which the problem 
occurred, while the error code describes the nature of the problem. 
Some error codes are common across all components, while others are 
component specific. 

The format of the Return Codes is 0xCCNNNN (given in hex),
where 0xCC is the ASP Component Identifier and 0xNNNN is the Error Code.

\note <b>Only the Error Codes are listed as Return values 
in the Function Documentation of the API Reference pages. The real 
return value also contains the Component Identifier!</b> 

The following links are useful while interpreting PM Library 
generated return codes:
- \ref apirefs_errorcodes_compid_CL_CID_PM "Performance Management Library Component Identifier"
- \ref apirefs_errorcodes_common
- \ref apirefs_errorcodes_pm

For further details and information about all error/return codes visit 
page \ref apirefs_errorcodes.

*/

/**
\addtogroup pm_usage
\brief Code Examples.

The PM MSOs can be configured to be autocreated in IDE in which case COR
server will create it when the node is coming up. Otherwise it can be
created later by the user explicitly using COR Apis. Please refer COR
section in this API reference guide for the usage examples.

The below code shows how to register the resources (or MOs) with the PM
library so that the PM operation will be performed on those MOs.
\code

ClRcT rc = CL_OK;
//Resource names on which PM operation has to be started.
ClCharT* resources[] = {
    "\\Chassis:0\\CorFunTestL1:0\\corFunMOCommB1L3:0",
    "\\Chassis:0\\CorFunTestL1:0\\corFunMOCommB1L3:2",
    "\\Chassis:0\\CorFunTestL1:0\\corFunMOCommB1L3:3",
    "\\Chassis:0\\CorFunTestL1:0\\corFunMOCommB1L3:4"
};
ClUint32T count = 4;
ClUint32T i = 0;
ClNameT moIdName = {0};

pMoIdList = (ClCorMOIdListPtrT) clHeapAllocate( sizeof(ClCorMOIdListT) + (count - 1) * sizeof(ClCorMOIdT));

//Populate pMoIdList to be registered with PM.
for (i=0 ; i<count; i++)
{   
    clNameSet(&moIdName, resources[i]);

    //Get the MoId from the name.
    rc = clCorMoIdNameToMoIdGet(&moIdName, &pMoIdList->moId[i]);
    if (rc != CL_OK)
    {
        clLogError("APP", "INT", "Failed to get moId from moId name.  rc [0x%x]", rc);
        clHeapFree(pMoIdList);
        return rc; 
    }

    //Set the PM MSO service.
    clCorMoIdServiceSet(&pMoIdList->moId[i], CL_COR_SVC_ID_PM_MANAGEMENT);
}   

pMoIdList->moIdCnt = count;

//Start the PM operation.
rc = clPMStart(pMoIdList);
if (rc != CL_OK)
{   
    clLogError("APP", "INT", "Failed to start PM operation on the given Moid list.  rc [0x%x]", rc);
    clHeapFree(pMoIdList);
    return rc; 
}
\endcode

The below code shows the Primary OI implementation for PM Read

\code 
ClRcT clCompAppPMObjectRead(ClHandleT txnHandle, ClPMObjectDataPtrT pObjectData)
{
    ClUint32T i = 0;

    clLogNotice("APP", "READ", "***Invoking read callback function***");

    clLogNotice("APP", "READ", "INFO : MoId :");
    clCorMoIdShow(pObjectData->pMoId);

    clLogNotice("APP", "READ", "Attr Count : [%u]", pObjectData->attrCount);

    for (i=0; i<pObjectData->attrCount; i++)
    {   
        clLogNotice("APP", "READ", "--------------------");
        clLogNotice("APP", "READ", "Attr Id : [%d]", pObjectData->pAttrData[i].attrId);
        clLogNotice("APP", "READ", "Attr Type : [%d]", pObjectData->pAttrData[i].attrType);
        clLogNotice("APP", "READ", "Attr DataType : [%d]", pObjectData->pAttrData[i].attrDataType);
        clLogNotice("APP", "READ", "Attr Size : [%u]", pObjectData->pAttrData[i].size);
        clLogNotice("APP", "READ", "Attr Index : [%d]", pObjectData->pAttrData[i].index);

        //This sample code assumes that all attributes read are of ClInt8T type.
        clLogNotice("APP", "READ", "Return value [%d]", i); 
        *(ClInt8T *) pObjectData->pAttrData[i].pPMData = i;

        clLogNotice("APP", "READ", "--------------------");
    }   

    return CL_OK;
}
\endcode

The below code shows how to access the PM reset value. The user is
supposed to reset all the PM attributes depending on the PM reset value.

\code

ClRcT clCompAppPMObjectReset(ClHandleT txnHandle, ClPMObjectDataPtrT pObjectData)
{
    clLogNotice("APP", "RESET", "***Invoking RESET callback function***");

    clLogNotice("APP", "RESET", "--------------------");

    clLogNotice("APP", "RESET", "INFO : MoId :");
    clCorMoIdShow(pObjectData->pMoId);

    clLogNotice("APP", "RESET", "Attr Id : [%d]", pObjectData->pAttrData[0].attrId);
    clLogNotice("APP", "RESET", "Attr Type : [%d]", pObjectData->pAttrData[0].attrType);
    clLogNotice("APP", "RESET", "Attr DataType : [%d]", pObjectData->pAttrData[0].attrDataType);
    clLogNotice("APP", "RESET", "Attr Size : [%u]", pObjectData->pAttrData[0].size);
    clLogNotice("APP", "RESET", "Attr Index : [%d]", pObjectData->pAttrData[0].index);

    clLogNotice("APP", "RESET", "Reset Value [%d]", *(ClInt8T *) pObjectData->pAttrData[0].pPMData);

    clLogNotice("APP", "RESET", "--------------------");

    return CL_OK;
}

\endcode

The below code shows how to stop PM operation on a particular set of
MoIds.

\code

//Stop the PM operation on the first two resources in the above list.
pMoIdList->moIdCnt = 2;

rc = clPMStop(pMoIdList);
if (rc != CL_OK)
{   
    clLogError("APP", "RESET", "Failed to stop PM operation on the moId list. rc [0x%x]", rc);
    clHeapFree(pMoIdList);
    return rc; 
}   

\endcode

*/
