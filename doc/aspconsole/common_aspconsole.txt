/**
 * \addtogroup common_aspconsole Common ASP Console Commands
 * \{
 */

/**
*****************************************
\brief Exit current mode. 
This command returns you to the root mode of the ASP Console prompt. 
This command is helpful while switching from one mode to other.

\par Usage: 
\code end \endcode

\par Output:
\code 
cli[Test:SysNodeI0]-> setc cpm
cli[Test:SysNodeI0:CPM]-> end
cli[Test:SysNodeI0]->
\endcode 
***************************************** 
*/
end;

/**
*****************************************
\brief Quit debugging: This command terminates the application and 
the CLI session.

\par Usage: 
\code bye \endcode

\par Output:
\code 
cli[Test:SysNodeI0]-> bye 
Good bye!!
\endcode 
***************************************** 
*/
bye;

/**
*****************************************
\brief Lists commands in current mode. These commands display the list 
of commands available in the current mode.

\par Usage: 
\code help \endcode

\par Output:
\code 
cli[Test:SysNodeI0]-> help
\endcode 
***************************************** 
*/
help;

/**
*****************************************
\brief Lists commands in current mode.

\par Usage: 
\code ? \endcode

\par Output:
\code 
cli[Test:SysNodeI0]-> ?
\endcode 
***************************************** 
*/
questionmark;

/**
*****************************************
\brief Display the last 100 commands executed. 
This command displays the list of recently used commands.

\par Usage: 
\code history \endcode

\par Output:
\code 
cli[Test:SysNodeI0:CPM]-> history
   list
   setc 1 
   list 
   ? 
   end
   setc 1 
   setc cpm
   end 
   setc cpm 
   history 
cli[Test:SysNodeI0:CPM]->
\endcode 
***************************************** 
*/
history; 


/**
*****************************************
\brief Set the log level of the component. 
This command is used to set the log level of the component. 
By default, log level of every component is <code>CL_LOG_ERROR</code>.

\note A message generated by the component is logged only when the log level 
of the message is equal to or higher than the log level of the component.

\par Usage: 
\code loglevelset <loglevel> \endcode

\param <loglevel>[STRING] This is a string corresponding to the different log level names. The following are the valid values of a string:
\arg <code>CL_LOG_EMERGENCY</code> 
\arg <code>CL_LOG_ALERT</code> 
\arg <code>CL_LOG_CRITICAL</code> 
\arg <code>CL_LOG_ERROR</code> 
\arg <code>CL_LOG_WARNING</code> 
\arg <code>CL_LOG_NOTICE</code> 
\arg <code>CL_LOG_INFORMATIONAL</code> 
\arg <code>CL_LOG_DEBUG</code> 

\par Output:
***************************************** 
*/
loglevelset; 

/**
*****************************************
\brief Get the log level of the component. 
This command is used to return the log level of the component.

\par Usage: 
\code loglevelget \endcode

\par Output:
\code 
cli[Test:SysNodeI0:CPM]-> loglevelget
log level is CL_LOG_ERROR
\endcode 
***************************************** 
*/
loglevelget;

/**
*****************************************
\brief Set context - enter a certain context from the current context

When started, the CLI is at its root context, which corresponds to the cluster.
From this level, the setc command allows the user to enter the context of any
of the cluster nodes. At the node context the user can reach the various ASP
components running on that node. User applications can also register with the
ASP Console, in which case they would show up as sub-contexts of the node they
run on.

\par Usage: 
\code setc <node/component>\endcode

\param <node/component> Component:
\arg  <code>cpm</code> - CPM Mode. All the CPM test commands along with a set of Common ASP Console Commands are available for use.
\arg  <code>ckptServer_<nodename></code> - Checkpointing Mode. Here, all the checkpointing test commands along with a set of Common ASP Console Commands are available for use.
\arg  <code>nameServer_<nodename></code> - Name Service Mode. Here, all the Name service test commands along with a set of Common ASP Console Commands are available for use.
\arg  <code>gmsServer_<nodename></code> - GMS mode. Here, all the GMS test commands along with a set of Common ASP Console Commands are available for use.
\arg  <code>eventServer_<nodename></code> - Event Service Mode. Here, all the EM test commands along with a set of Common ASP Console Commands are available for use.
\arg  <code>alarmServer_<nodename></code> - Alarm Management Mode. Here, all the AM test commands along with a set of Common ASP Console Commands are available for use.
\arg  <code>logServer_<nodename></code> - Log Service Mode. Here, all the Log Service test commands along with a set of Common ASP Console Commands are available for use.
\arg  <code>txnServer_<nodename></code> - TM Mode. Here, all the TM test commands along with a set of Common ASP Console Commands are available for use.
\arg  <code>faultServer_<nodename></code> - This command takes you to the FM mode. Here, all the FM test commands along with a set of Common ASP Console Commands are available for use.
\arg  <code>cmServer_<nodename></code> - CM Mode. Here, all the CM test commands along with a set of Common ASP Console Commands are available for use.
\arg  <code>corServer_<nodename></code> - COR Mode. Here, all the COR test commands along with a set of Common ASP Console Commands are available for use.


\note You cannot switch directly from one node/component to another.
You should use <code>end</code> command to return back to
<code>cli[Test:SysNodeI0]-></code> prompt and issue the <code>setc</code>
command from the prompt.

\par Output:
\code 
cli[Test]-> list
Slot    Node
1       SysNodeI0
2       WorkerNodeI0
cli[Test]->setc 1
cli[Test:SysNodeI0]-> setc cpm
cli[Test:SysNodeI0:CPM]-> end
cli[Test:SysNodeI0]-> setc corServer_SysNodeI0
cli[Test:SysNodeI0:COR]-> end
cli[Test:SysNodeI0]-> end
cli[Test]-> setc 2
cli[Test:WorkerNodeI0]->
\endcode 
***************************************** 
*/
setc;

/**
*****************************************
\brief List nodes/components to which setc can be performed in current mode

\par Usage: 
\code list \endcode

\par Output:
\code 
cli[Test]-> list
Slot    Node
1       SysNodeI0
2       WorkerNodeI0
cli[Test]-> setc 1
cli[Test:SysNodeI0]->
\endcode 
***************************************** 
*/
list;

/**
*****************************************
\brief Return the status of the last executed command. 0 indicates success and
1 indicates failure.

\par Usage: 
\code status \endcode

\par Output:
\code 
cli[Test]-> list
Slot    Node
1       SysNodeI0
2       WorkerNodeI0
cli[Test]-> status 
0
cli[Test]-> setc 3

Invalid slot number
Type 'list' to see valid slots

cli[Test]-> status
1
cli[Test]-> 
\endcode 
***************************************** 
*/
status;

/**
*****************************************
\brief Return the errorCode of the last executed command. 

\par Usage: 
\code errno \endcode

\par Output:
\code 
cli[Test]-> list
Slot    Node
1       SysNodeI0
2       WorkerNodeI0
cli[Test]-> errno 
0
cli[Test]-> setc 3

Invalid slot number
Type 'list' to see valid slots

cli[Test]-> errno 
e0012
cli[Test]-> 
\endcode 
***************************************** 
*/
errno;

/**
 * \}
 */
