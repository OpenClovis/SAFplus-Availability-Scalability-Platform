/**
 * \addtogroup cor_aspconsole COR ASP Console Commands
 * The COR exposes the CLI commands to have some insight into the runtime status of the repository. 
 * Using these commands the user can create or delete classes, see the class information, create or delete the MO-classes, create or delete objects, perform get or set operations on the objects present in the COR repository. Also there are bunch of commands which show the latest states of the COR repository information like the object tree, route/station list and the object show command.
 * 
 * The COR CLI commands are separated into different groups which are as follows:
 * 
 * COR Class related CLI commands:
 * \arg ::corClassCreate
 * \arg ::corClassDelete
 * \arg ::corClassAttrCreate
 * \arg ::corClassAttrValSet
 * \arg ::niShow
 * \arg ::dmShow
 *
 * COR MO-Class Tree related CLI commands:
 * \arg ::moClassCreate
 * \arg ::msoClassCreate
 * \arg ::moClassDelete
 * \arg ::msoClassDelete
 *
 * COR Object related CLI commands:
 * \arg ::corObjCreate
 * \arg ::corObjDelete
 * \arg ::corMoMsoObjCreate
 * \arg ::corMoMsoObjDelete
 * \arg ::attrGet
 * \arg ::attrSet
 *
 * COR Bundle related CLI commands:
 * \arg ::corBundleInitialize
 * \arg ::corBundleGetJobAdd
 * \arg ::corBundleApply
 * \arg ::corBundleFinalize
 *
 * COR repository show commands:
 * \arg ::rmShow
 * \arg ::objectShow
 * \arg ::objTreeShow
 * \{
 */

/**
*****************************************
\brief Creates a COR Class.
 
\par Usage: 
\code corClassCreate <ClassName> <ClassId> <ParentClassId> \endcode

\param <ClassName>[STRING] Example: chassis. It should not include special characters
\param <ClassId>[HEXorDEC] Example: 0x102 or 258
\param <ParentClassId>[HEXorDEC] Example: 0x103 or 259

\par Output:
\code 
corClassCreate test  258 0
Created COR class 0x102 .... 
\endcode 
***************************************** 
*/
corClassCreate;

/**
*****************************************
\brief Deletes a COR Class.
 
\par Usage: 
\code corClassDelete <ClassId> \endcode

\param <ClassId>[HEXorDEC] Example: 0x102 or 258

\par Output: 
\code 
corClassDelete 258
class deleted 
\endcode 
***************************************** 
*/
corClassDelete;

/**
*****************************************
\brief Create an Attribute for a COR class.
 
\par Usage: 
\code corClassAttrCreate <ClassId> <AttrId> <AttrType> \endcode

\param <ClassId>[HEXorDEC] Example: 0x102 or 258
\param <AttrId>[HEXorDEC] Example: 0x1022 or 4130
\param <AttrType>[STRING] UINT8, INT8, UINT16, INT16, UINT32, INT32, UINT64, INT64

\par Output:
\code 
corClassAttrCreate 258 4130 UINT16
Class Attribute created successfully .... 
\endcode 
***************************************** 
*/
corClassAttrCreate;

/**
*****************************************
\brief Set the initial, minimum, and maximum values for a class attribute.
 
\par Usage: 
\code corClassAttrValSet <ClassId> <AttrId> <Init> <Min> <Max> \endcode

\param <ClassId>[HEXorDEC] Example: 0x102 or 258
\param <AttrId>[HEXorDEC] Example: 0x1022 or 4130
\param <Init>[HEXorDEC] Initial value for the attribute.
\param <Min>[HEXorDEC] Minimum value which the attribute can take.
\param <Max>[HEXorDEC] Maximum value which the attribute can take.

\par Output:
\code 
corClassAttrValSet 258 4130 5 1 10
Class Attribute value set successfully .... 
\endcode 
***************************************** 
*/
corClassAttrValSet;

/**
*****************************************
\brief Create a MO Class.
 
\par Usage: 
\code moClassCreate <MoId> <MaxInstances> \endcode 

\param <MoId>[HEXorSTRING] Example: \\chassis:0\\blade:1 or \\0x102:0\\0x103:1
\param <MaxInstances>[HEXorDEC] Maximum number of instances for the MO class.

\par Output: 
\code moClassCreate \test1 2 \endcode 

***************************************** 
*/
moClassCreate;

/**
*****************************************
\brief Delete a MO Class.
 
\par Usage: 
\code moClassDelete <MoId> \endcode

\param <MoId>[HEXorSTRING] Example: \\chassis:0\\blade:1 or \\0x102:0\\0x103:1 

\par Output: 
\code 
moClassDelete test1
INFO: clCorMOClassDeleteNodeByName() completed 
\endcode 
***************************************** 
*/
moClassDelete;

/**
*****************************************
\brief Create a MSO Class.
 
\par Usage: 
\code msoClassCreate <MoId> <ServiceID> <ClassType> \endcode

\param <MoId>[HEXorSTRING] Example: \\chassis:0\\blade:1 or \\0x102:0\\0x103:1
\param <ServiceID>[HEXorDEC] Service ID of the MSO class.
\param <ClassType>[HEXorDEC] Ex. 0x104. Class ID of the MSO class.

\par Output: 
\code 
msoClassCreate test 2 0x104
msoClassCreate completed 
\endcode 
***************************************** 
*/
msoClassCreate;

/**
*****************************************
\brief Delete a MSO Class.
 
\par Usage: 
\code msoClassDelete <MoId> <ServiceID> \endcode

\param <MoId>[HEXorSTRING] Example:  \\chassis:0\\blade:1 or \\0x102:0\\0x103:1
\param <ServiceID>[HEXorDEC] Service ID of the MSO class.

\par Output: 
\code 
msoClassDelete test 2
MSOClassDelete completed 
\endcode 
***************************************** 
*/
msoClassDelete;

/**
*****************************************
\brief Create an Object.
 
\par Usage: 
\code corObjCreate <MoId> <ServiceID> \endcode 

\param <MoId>[HEXorSTRING] Example : \\chassis:0\\blade:1 or \\0x102:0\\0x103:1
\param <ServiceID>[HEXorDEC] Service ID of the Object.

\par Output: 
\code corObjCreate tester\test3 2 \endcode 
***************************************** 
*/
corObjCreate;

/**
*****************************************
\brief Delete an Object.
 
\par Usage: 
\code corObjDelete <MoId> <ServiceID> \endcode

\param <MoId>[HEXorSTRING] Example: \\chassis:0\\blade:1 or \\0x102:0\\0x103:1
\param <ServiceID>[HEXorDEC] Service ID of the Object.

\par Output: 
\code corObjDelete tester\test3 2 \endcode 

***************************************** 
*/
corObjDelete;

/**
*****************************************
\brief Create MO and associated MSO Objects.
 
\par Usage: 
\code corMoMsoObjCreate <MoId> \endcode

\param <MoId>[HEXorSTRING] Example: \\chassis:0\\blade:1 or \\0x102:0\\0x103:1 

\par Output: 
\code  
CorMoMsoObjCreate
corMoMsoObjCreate \0x5555:1\0x6666:1
Created MO and MSO objects successfully 
\endcode 
***************************************** 
*/
corMoMsoObjCreate;

/**
*****************************************
\brief Delete MO and associated MSO Objects.
 
\par Usage: 
\code corMoMsoObjDelete <MoId> \endcode 

\param <MoId>[HEXorSTRING] Example: \\chassis:0\\blade:1 or \\0x102:0\\0x103:1 

\par Output: 
\code 
CorMoMsoObjDelete
corMoMsoObjDelete \0x5555:1\0x6666:1
Deleted MO and MSO objects successfully 
\endcode 
***************************************** 
*/
corMoMsoObjDelete;

/**
*****************************************
\brief Set the attribute value
 
\par Usage: 
\code 
attrSet <MoId> <Service ID> <AttributePath> <AttributeID> <Index> <Value> 
\endcode

\param <MoId>[HEXorSTRING] Example: \\chassis:0\\blade:1 or \\0x102:0\\0x103:1
\param <ServiceID>[HEXorDEC] Service Id of the object.
\param <AttributePath>[HEXorSTRING] Example: \\AttrA:0 \\AttrB:0 or \\0x1034:0\\0x201:1. It can be null.
\param <AttributeID>[HEXorDEC] Example:  0x300. Attribute to be set.
\param <Index>[HEXorDEC] It is -1 for Simple Attribute. Some valid value for Array Attribute.
\param <Value>[HEXorDEC] Value to set.

\par Ouput: 
\code 
attrSet
attrSet \0x10001:0\0x10012:0 3 null 0x13 -1 101
Execution Result : Passed 
\endcode 
***************************************** 
*/
attrSet;

/**
*****************************************
\brief Get the attribute value.
 
\par Usage: 
\code 
attrGet <MoId> <ServiceID> <AttributePath> <AttributeID> <Index> 
\endcode

\param <MoId>[HEXorSTRING] Example: \\chassis:0\\blade:1 or \\0x102:0\\0x103:1
\param <ServiceID>[HEXorDEC] Service Id of the object.
\param <AttributePath>[HEXorSTRING] Example: \\AttrA:0\\AttrB:0 or \\0x1034:0\\0x201:1. It can be null.
\param <AttributeID>[HEXorDEC] Example: 0x300. Attribute to be get.
\param <Index>[HEXorDEC] It is -1 for Simple Attribute. Some valid value for Array Attribute.

\par Output: 
\code 
attrGet
attrGet \0x10001:0\0x10012:0 3 null 0x13 -1

 AttrId [0x13], Value :  [10]

\endcode 
***************************************** 
*/
attrGet;

/**
*****************************************
\brief Show the object contents. 

\par Usage: 
\code objectShow <MoId> <ServiceID> <AttributePath> \endcode

\par Description:
It take the MOID, service identifier and attribute path as parameter. The service Id
and attribute path are optional. The service Identifier is the valid only for viewing
the attributes of the MSO (alarm or provisioning) otherwise -1 is used for viewing 
attributes of the MO. The attribute path is used only for alarm MSO. It shows all the 
attributes with their names and attribute identifier which are part of the object. <br>
The display shows the moId of the object. It then shows the classId of the object. If it is 
MO it the class Id of the last entry in the MOID. For MSO it is the class Id of the MSO. After
that it will display all the attributes of the object with its attribute name, attribute Id and
then its current values.

\param <MoId>[HEXorSTRING] Example: \\chassis:0\\blade:1 or \\0x102:0\\0x103:1
\param <ServiceID>[HEXorDEC] Service Id of the object.
\param <AttributePath>[HEXorSTRING] Example: \\AttrA:0\\AttrB:1 or \\0x1034:0\\0x201:1 

\par Output: 
\code 
objectShow
objectShow \chassis:0\blade:1 3 

Showing Object
ClCorMOId:[Svc: 3] (/).(10001:0000).(1000e:0000):

[Class:0x1000f] Object
{
[SYSTEMCONTROLLER_POWER_SUPPLY ] [0x000f] = [0]
[SYSTEMCONTROLLER_FAN_SPEED    ] [0x0010] = [1000]
}

\endcode 
***************************************** 
*/
objectShow;

/**
*****************************************
\brief Show the class information of COR.

\param <all> [STRING] : This option shows the class information for all the classes.
\param <Class Id> [HEXorDEC]: The class Id of any class defined in COR.

\par Usage: 
\code dmShow [all|<hexClassId>] \endcode

\par Description:
This command when supplied with the class Id will show the details of Class  and its attributes. 
If no argument or "all" is specified it will show all classes that are part of COR. <br>
For the classId this command displays information about the class and the attribute information which includes
attribute Id, offset, size, type and user flags. The user flags that are displayed for each attribute
will have following combination 
of characters to give detail about its type:
\arg CF       - Configuration attribute.
\arg RT       - Runtime attribute.
\arg WRBLE    - Writable attribute .
\arg N-WRBLE  - Non-writable attribute. An initialized attribute is always non-writable attribute.
\arg C$       - Cached attribute. 
\arg N-C$     - Non cached attribute. 
\arg PERS     - Persistent attribute.
\arg N-PERS   - Non-persistent attribute.
\arg INITED   -  Initialized attribute. This means the attribute should be supplied a initial value while creating the object.
\arg N-INITED -  Non-Initialized attribute.
 
\par Output: The command is given without any parameter
\code 
Class 0x7d04 [CL_CPM_CLASS_SU]  parent:0x0000 attrs: 3 
flag:0x00 ver:0 nxtrec:1 objcount:0 sz:264[alloc:0/8]  
Class 0x10005 [T3Port]  parent:0x0000 attrs: 0 
flag:0x00 ver:0 nxtrec:1 objcount:0 sz:0[alloc:0/8]
Class 0x1000c [MasterControllerSW]  parent:0x0000 attrs: 0 
flag:0x00 ver:0 nxtrec:3 objcount:2 sz:0[alloc:8/8]
Class 0x10013 [CLASS_GigeBlade_PROV_MSO]  parent:0x0000 attrs: 2 
flag:0x00 ver:0 nxtrec:1 objcount:0 sz:5[alloc:0/8]
Class 0x0001 [CLALARMBASECLASS]  parent:0x0000 attrs: 1 
flag:0x80 ver:0 nxtrec:1 objcount:0 sz:1[alloc:0/8]
Class 0x7d05 [CL_CPM_CLASS_COMP]  parent:0x0000 attrs: 3 
flag:0x00 ver:0 nxtrec:1 objcount:0 sz:264[alloc:0/8]
Class 0x10006 [CLASS_T3Port_PROV_MSO]  parent:0x0000 attrs: 2 
flag:0x00 ver:0 nxtrec:1 objcount:0 sz:21[alloc:0/8]
Class 0x1000d [CLASS_MasterControllerSW_PROV_MSO]  parent:0x0000 attrs: 4 
flag:0x00 ver:0 nxtrec:3 objcount:2 sz:59[alloc:8/8]
Class 0x10014 [CLASS_GigeBlade_ALARM_MSO]  parent:0x0000 attrs: 8 
flag:0x00 ver:0 nxtrec:1 objcount:0 sz:210[alloc:0/8]
Class 0x0002 [ALARMINFO]  parent:0x0001 attrs:14 
flag:0x00 ver:0 nxtrec:1 objcount:0 sz:43[alloc:0/8]
Class 0x10007 [FPGAPort]  parent:0x0000 attrs: 0 
flag:0x00 ver:0 nxtrec:1 objcount:0 sz:0[alloc:0/8]
Class 0x1000e [FPGABlade]  parent:0x0000 attrs: 0 
flag:0x00 ver:0 nxtrec:1 objcount:0 sz:0[alloc:0/8]
Class 0x10015 [SystemController]  parent:0x0000 attrs: 0 
flag:0x00 ver:0 nxtrec:2 objcount:1 sz:0[alloc:8/8]

\endcode

\par Output: The command is given with a class Id.
\code 
dmshow 0x10014

*** Command:show dm [0x10014]
Class 10011 [CLASS_GIGEBLADE_PROV_MSO]  <parent:0000,ver:0,flag:0x0,seq:1,
                    objcnt:0,sz:5,blksz:8> {
  [GIGEBLADE_PROVGIGEINDEX] 0x11, unsignedINT8  = {64} / Range:<a,ff> / <0>  
  Index:: <0>  CF / N-INITED / WRBLE /   C$ / PERS
  [GIGEBLADE_PROVGIGETEMPTHRESHOLD] 0x12, signedINT32  = {14} / 
  Range:<ffffff6,1352> / <1>  Index:: <1>   CF / N-INITED / WRBLE / C$ / PERS
    }
\endcode
***************************************** 
*/
dmShow;

/**
*****************************************
\brief Show MO Class Tree

\par Usage: 
\code moClassTreeShow \endcode 

\par Description:
This shows the MO class tree which is blue print for creating the objet tree. It give the class Id and the 
maximum instances modeled for that class. This is the hierarchichal representation of the classes which
is defined at the modeling time. The MO classes are shown in the squre brackets and its maximum instances 
allowed is given next to "Max-inst". It shows the MSO assoicated to it in the list of class Ids below the MO
class description.


\par Output: 
\code  
moclassTreeshow
    output:
    Details {nodeSz:16}
    [0/0x1] (grps:4 0x4)
       [1/0x10001] (Max-inst:[1])
         0x0 0x0 0x0 0x0 0x0
         [1/0x1000e] (Max-inst:[1])
             0x0 0x0 0x0 0x1000f 0x0
             [1/0x10007] (Max-inst:[1])
                 0x0 0x0 0x10009 0x10008 0x0 
         [2/0x10010] (Max-inst:[3])
             0x0 0x0 0x0 0x10011 0x0
             [1/0x10005] (Max-inst:[2])
                 0x0 0x0 0x0 0x10006 0x0
         [3/0x10012] (Max-inst:[3])
             0x0 0x0 0x10014 0x10013 0x0
             [1/0x10002] (Max-inst:[2])
                 0x0 0x0 0x10004 0x10003 0x0 
\endcode 
***************************************** 
*/
moClassTreeShow;

/**
*****************************************
\brief Show Object Tree.

\par Usage: 
\code objTreeShow \endcode 

\par Description:
This shows the current state of the COR object repository. It shows the MO and its MSO if they are present.
The entry without asterix ("*") shows the MO object. The entry inside the square bracket gives it's instance 
Id. It also gives the class name and its class identifier. The entry with asterix ("*") is the MSO associated 
to the MO displayed above it. The entry in the square bracket after the asterix shows the service Id of the
MSO. It is 2 for alarm MSO and 3 for provisioning MSO.

\par Output: 
\code 
Objects (Instance Tree):
    [0] ClassName=Chassis ClassId=0x10001 inst=0 [flgs=0x508]
    [0] ClassName=SystemController ClassId=0x10015 inst=0 [flgs=0x508]
        *[3] ClassName=CLASS_SystemController_PROV_MSO ClassId=0x10016 inst=0 
        [flgs=0x508]
    [0] ClassName=ethernetPort ClassId=0x1000a inst=0 [flgs=0x508]
        *[3] ClassName=CLASS_ethernetPort_PROV_MSO ClassId=0x1000b inst=0 
        [flgs=0x508]
    [1] ClassName=ethernetPort ClassId=0x1000a inst=1 [flgs=0x508]
        *[3] ClassName=CLASS_ethernetPort_PROV_MSO ClassId=0x1000b inst=1 
        [flgs=0x508]
    [2] ClassName=ethernetPort ClassId=0x1000a inst=2 [flgs=0x508]
        *[3] ClassName=CLASS_ethernetPort_PROV_MSO ClassId=0x1000b inst=2 
        [flgs=0x508]
    [3] ClassName=ethernetPort ClassId=0x1000a inst=3 [flgs=0x508]
        *[3] ClassName=CLASS_ethernetPort_PROV_MSO ClassId=0x1000b 
        inst=3 [flgs=0x508]
    [0] ClassName=MasterControllerSW ClassId=0x1000c inst=0 [flgs=0x508]
        *[3] ClassName=CLASS_MasterControllerSW_PROV_MSO ClassId=0x1000d 
        inst=0 [flgs=0x508]
    [1] ClassName=MasterControllerSW ClassId=0x1000c inst=1 [flgs=0x508]
        *[3] ClassName=CLASS_MasterControllerSW_PROV_MSO ClassId=0x1000d 
        inst=1 [flgs=0x508]
\endcode
***************************************** 
*/
objTreeShow;

/**
*****************************************
\brief Show Class Identifier to class name mapping. 

\par Usage: 
\code niShow \endcode 

\par Description:
This CLI command gives the mapping of the class identifier and its class name. This is
command which fetches the mapping from the name-interface table of COR and displays it.
It doesn't take any argument.

\par Output:
\code
Class Id                     Class Name
========                     ==========
0x1                   CLALARMBASECLASS
0x2                          ALARMINFO
0x7d02            CL_CPM_CLASS_CLUSTER
0x7d03               CL_CPM_CLASS_NODE
0x7d04                 CL_CPM_CLASS_SU
0x7d05               CL_CPM_CLASS_COMP
0x10001                        Chassis
0x10002                       GigePort
0x10003        CLASS_GigePort_PROV_MSO
0x10004       CLASS_GigePort_ALARM_MSO
0x10005                         T1Port
0x10006          CLASS_T1Port_PROV_MSO
0x10007         CLASS_T1Port_ALARM_MSO
0x10008               SystemController
0x10009                      GigeBlade
0x1000a       CLASS_GigeBlade_PROV_MSO
0x1000b                        T1Blade
0x1000c         CLASS_T1Blade_PROV_MSO 
\endcode 
***************************************** 
*/
niShow;

/**
*****************************************
\brief Show Route Interface.

\par Usage: 
\code rmShow \endcode 

\par Description:
This command shows all the MOs and its registered OIs ( IOC address of the component). There are specific 
flags that are displayed with IOC address. These are as follows: <br>
\par 
STATUS  - This flag give the current status of the OI. This flag takes different values for depicting status of the OI:
\arg 1 - OI is enabled and ready to serve the request.
\arg 2 - OI is disabled. In this case the OI is still running but temporarily not serving the request.
\arg 3 - OI is deleted. This signifies that OI has gone down and it will no longer serve the request.
\par     
STN - This flag gives the IOC address of the component. This contains the node address and component 
      TIPC address separated by colon.
\par
PRIMARY - This status that depict that whether this OI is acting as a primary OI for the MO. The 
          following values show the significance of the OI.
\arg 0 - The OI is not a  primary OI for the MO/MSO. 
\arg 1 -  The OI is a primary OI for the MO/MSO.  

\par Output:
\code
rmshow

===========================================================
                     -- COR List --
COR-Id    COR-Comm-Info        FingerPrint Contact  Flags
===========================================================
0001  [0001:000d bb8ms,retry:3,5]*  0000    00000    0000
      -- Route Configuration (rules) --
===========================================================
Rule 00)ClCorMOId:[Svc:FFFFFFFF] (/).(0100:0000):
Expr:0x8f2cf8c Flags:0508 Routes: [STATUS: 1, STN: 1:2f, PRIMARY:0 ]
==========================================================
\endcode
***************************************** 
*/
rmShow;

/**
*****************************************
\brief Initializes the bundle and give a bundle handle on sucess.

\param <Bundle Type> [DEC]: This give the type of the bundle. It can take following values:
\arg 1 -  for transactional bundle. This argument is not supported in this release.
\arg 2 -  for non-transactional bundle. This is used for doing bundle get.


\par Usage: 
\code corBundleInitialize <Bundle Type>\endcode 

\par Description:
This command creates a bundle and returns a bundle handle. It take parameter to create a transactional 
or non-transactional bundle. Transactional bundle is not supported as of this release. This handle is 
unique throughout a given bundle. It should be used to add jobs in the bundle, apply the bundle and 
finalize the bundle.  <br>
In case of successful bundle initialization the bundle handle will be returned on the console. In case 
of failure the corresponding error code will be displayed. The error codes will be based on the error 
returned by clCorBundleInitialize API. 

\par Output:
\code
corBundleInitialize 2

The bundle handle is [1]

\endcode
***************************************** 
*/
corBundleInitialize;
/**
*****************************************
\brief  Add the get jobs to the bundle.

\param <bundleHandle> [DEC]:  Bundle Handle Obtained from the clCorBundleInitialize CLI.
\param <MoID> [HEXorSTRING]: MoID for the object. { Ex: \\Chassis:0\\SysController:0 or \\0x10001:0\\0x10002:0 }
\param <Svc-Id> [DEC]: Service Id of the MSO. The Svc-Id should be 3 for PROV MSO and 2 for alarm MSO.
\param <attrPath> [HEXorSTRING]: Attribute Path should be NULL for PROV MSOs.
\param <AttrId> [HEXorSTRING]: Attribute Id of the attribute for which get is performed.
\param <Index> [DEC]: In case of array attributes this specifies the index of the array from where the read must occur.

\par Usage: 
\code 
corBundleGetJobAdd <bundleHandle> <MoID> <Svc-Id> <attrPath> \
                   <AttrId> <Index> 
\endcode 

\par Description:
This command should be used to en-queue the MoID+attribute. After adding all the jobs in the bundle, 
corBundleApply needs to be called. In case of successful addition no message will be printed. In case 
of failure an appropriate error code will be displayed. The error codes will be based on the error 
returned by corBundleJobAdd API.

\par Output:
\code
 corBundleGetJobAdd 1 \0x100:0 -1 NULL 0x101 -1

 corBundleGetJobAdd 1 \0x100:0 -1 NULL 0x102 -1

\endcode
***************************************** 
*/
corBundleGetJobAdd;

/**
*****************************************
\brief To start the bundle operation.

\param <bundleHandle> [DEC] : Handle obtained from clCorBundleInitialize CLI.

\par Usage: 
\code corBundleApply <bundleHandle> \endcode 

\par Description:
This command should be used to apply the bundle which will send the all the jobs that are part of 
the bundle to the server for processing. This command is synchronous, i.e upon return of the command
appropriate message will be printed on the console or in case of any error the message will be printed
along with the error message. <br>
The data obtained is displayed on the console in the form of attribute id and value. If it is an array 
attribute then it would display value for all of its indexes. For other operation only the job 
(along with error code) which caused failure of the bundle will be displayed. If there was any error 
while processing a job, then it would display the moId and attribute id of that job along with the 
error code. This error code would take the value of jobStatus parameter of  clCorBundleJob.

\par Output:
\code
corBundleApply 1

 AttrId [0x101], Value :  [10]
 AttrId [0x102], Value :  [10]

\endcode
***************************************** 
*/
corBundleApply;

/**
*****************************************
\brief To finalize the bundle.

\param <bundleHandle> [DEC] : The handle obtained via calling corBundleInitialize CLI.

\par Usage: 
\code corBundleFinalize <bundleHandle> \endcode 

\par Description:
This command should be used to finalize a bundle. Upon finalization the bundleHandle is no more valid 
to be used.
In case of  success no error will be output. In case of failure an appropriate error code will be displayed. 
The error codes will be based on the error returned by corBundleFinalize API

\par Output:
\code
 corBundleFinalize 1

\endcode
***************************************** 
*/
corBundleFinalize;
/**
 * \}
 */
