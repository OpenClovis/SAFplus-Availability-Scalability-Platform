/**
\page aspinfo_start ASP Info

\section sec_aspinfo_start_1 How aspinfo and asp_console are related?

<code>asp_console</code> is a great tool to do low level peeking and poking in live ASP components. However, some of its commands are too low-level and require in-depth understanding of the underlying ASP components. Therefore it is deemed a bit hard to use for first-time users.

<code>aspinfo</code> has been designed to shorten the learning curve by providing more user friendly commands for many of the simpler tasks performed by first-time users and system evaluators.
Its scope is more limited than the scope of <code>asp_console</code>, but it is easer to use and it does offer a few convenient capabilities that <code>asp_console</code> currently lacks. Many of its commands are actually implemented using low-level <code>asp_console</code> commands.

Therefore, we recommend the two tools be used in a complementary fashion. A first time user should start using <code>aspinfo</code> during initial exploration of ASP, and as the scope of the work grows he or she should start using <code>asp_console</code> in addition to <code>aspinfo</code>.

\latexonly \includegraphics{OpenClovis_Note.png} \endlatexonly 
\htmlonly <img src="OpenClovis_Note.png" alt="OpenClovis_Note.png"> \endhtmlonly 
OpenClovis plans to merge the two tools into one in a future release.

\latexonly \includegraphics{OpenClovis_Note.png} \endlatexonly 
\htmlonly <img src="OpenClovis_Note.png" alt="OpenClovis_Note.png"> \endhtmlonly 
We recognize that some of the commands take significant amount of time to execute (few seconds).
Our intention is to optimize out the time lag in a future release.

\section sec_aspinfo_start_2 Main features of aspinfo

The main features of <code>aspinfo</code> are:
\arg Command to verify proper ASP installation on target (<code>::setup</code>)
\arg  Commands to determine run-time status of ASP on a given cluster node and the role of this node in the cluster (<code>::role, ::status, ::cluster</code>)
\arg Commands to explore the various HA entities and their state on the node and in the cluster (<code>::sgs, ::sg, ::sus, ::su, ::nodes, ::components, ::tree, ::forest, ::asp</code>)
\arg Change the Administrative State (AS) of Service Groups or Service Units (<code>::unlock, ::lock_i, ::lock_a</code>) 

Convenience features:
\arg All HA entity information can be viewed from any node in the cluster (process id will be shown only for local processes)
\arg Command completion
\arg Intelligent argument completion
\arg Command history, preserved across multiple runs
\arg Convenient shell command execution from the context of <code>aspinfo</code> (<code>::shell or !</code>)
\arg Color-coded output
\arg Direct access to low-level <code>asp_console</code> commands from within <code>aspinfo</code> (<code>::raw</code>)
\arg For easy orientation, prompt indicates name of ASP node on which <code>aspinfo</code> is running

\section sec_aspinfo_start_3 Running aspinfo

The <code>aspinfo</code> executable is located in the <code><asp-install-dir>/bin</code> directory on the <b>target</b>, where <code><asp-install-dir></code> denotes the directory under which ASP has been deployed on the target (typically <code>/root/asp</code>).
If this <code>bin</code> directory is on your PATH, you can start <code>aspinfo</code> as
\code
aspinfo [options] [command [command-args]]
\endcode
otherwise you need to specify the path (relative or absolute) when running it, for example:
\code
/root/asp/bin/aspinfo [options] [command [command-args]]
\endcode

\latexonly \includegraphics{OpenClovis_Note.png} \endlatexonly 
\htmlonly <img src="OpenClovis_Note.png" alt="OpenClovis_Note.png"> \endhtmlonly 
If you deployed and running ASP on the target as <code>root</code>, you should run <code>aspinfo</code> also as <code>root</code>.

Optional command line arguments:
\arg -h, --help     Print a brief usage page and exit
\arg -v, --verbose  Be more verbose. This option can be repeated to further increase verbosity level
\arg -c, --no-colors Disable output coloring. Useful when using <code>aspinfo</code> in a terminal with no color capabilities, or when the output of <code>aspinfo</code> needs to be further processed by some other Linux tools.

<code>aspinfo</code> can be run in one-shot mode or as an interactive tool.
If no command is specified at the command line, <code>aspinfo</code> will run in interactive mode providing its own prompt.
If a command (with its arguments) is provided, <code>aspinfo</code> will execute the command, print the command output, then exit.

The commands are described in the next section. The <code>help</code> command can be used to display the list of available commands (not the same as the --help command line option).

*/

//-----------------------------------------------------------

/**
 * \addtogroup common_aspinfo ASP Info Commands
 * \{
 */

/**
*****************************************
\brief Show list of ASP components on node

\par Usage: 
\code asp\endcode 

\par Description: 
Displays a list of ASP middleware components running on this node, together with various vital state information, including:
\arg COMPNAME: Component name (according to the middleware manager)
\arg R: Running state (Y: running)
\arg PID: Linux process ID of component
\arg H: Health state (Y: healthy)
\arg COMMAND: actual Linux command corresponding to the ASP middleware component
\arg %CPU: Percentage CPU utilization
\arg TH: Number of threads used by the component
\arg RSS: Resident memory use (same as in <code>ps l</code> Linux command)
\arg VSZ: Virtual memory use (same as in <code>ps l</code> Linux command)

\par Output:
\code
[aspinfo@SysCtrl0]==> asp
            COMPNAME  R  PID    H  COMMAND          %CPU  TH   RSS     VSZ
alarmServer_SysCtrl0  Y  20670  Y  asp_alarm         0.0   7  2788   80696
 ckptServer_SysCtrl0  Y  20629  Y  asp_ckpt          0.0   7  4492  123560
  corServer_SysCtrl0  Y  20630  Y  asp_cor           0.0   7  4524  136440
eventServer_SysCtrl0  Y  20589  Y  asp_event         0.0  11  4164  131704
faultServer_SysCtrl0  Y  20671  Y  asp_fault         0.0   7  2704   89056
  gmsServer_SysCtrl0  Y  20540  Y  asp_gms           0.0  13  5748  135152
  logServer_SysCtrl0  Y  20523  Y  asp_logd          0.0  13  5180  173708
 nameServer_SysCtrl0  Y  20628  Y  asp_name          0.0   8  3604   98788
  txnServer_SysCtrl0  Y  20590  Y  asp_txn           0.0   8  4272  106968
\endcode

\latexonly \includegraphics{OpenClovis_Note.png} \endlatexonly 
\htmlonly <img src="OpenClovis_Note.png" alt="OpenClovis_Note.png"> \endhtmlonly 
The Component manager and availability manager process, <code>asp_amf</code>, is not shown by this command.

***************************************** 
*/
asp;


/**
*****************************************
\brief Show list of nodes currently in the cluster

\par Usage: 
\code cluster\endcode 

\par Description: 
Displays the list of '''active''' nodes in the cluster together with the following information:
\arg NODE-NAME: Node instance name of node
\arg NODE-TYPE: If node is a (system) controller or a worker node
\arg HA-STATE: In case the node is a (system) controller, it shows if it is active or standby
\arg NODE-ADDR: Node address of the node
It also indicates (with a "this node" marker) which cluster node this node corresponds to

\par Output:
\code
[aspinfo@SysCtrl0]==> cluster
NODE-NAME   NODE-TYPE  HA-STATE  NODE-ADDR
 SysCtrl0  controller  active            1 <-- this node
  Worker0      worker  -                 2
  Worker1      worker  -                 3
\endcode
***************************************** 
*/
cluster;


/**
*****************************************
\brief Show list of user components on the node

\par Usage: 
\code components\endcode 

\par Description: 
Lists all user components running on this node. Its output is identical to the output of <code>asp</code> command.
<br>
\latexonly \includegraphics{OpenClovis_Note.png} \endlatexonly 
\htmlonly <img src="OpenClovis_Note.png" alt="OpenClovis_Note.png"> \endhtmlonly 
in addition to the user components, the list mistakenly includes a few of the special middleware components too.

\par Output:
\code
[aspinfo@SysCtrl0]==> components
            COMPNAME  R  PID    H  COMMAND          %CPU  TH   RSS     VSZ
     PerfEvtPubCompi  -  -      -  -                   -   -     -       -
  PerfRmdServerCompi  Y  20801  Y  PerfRmdServerCo   0.0   7  3340   82672
           TestOsali  Y  20780  Y  TestOsal          0.0   8  3460   90444
            TestXdri  Y  20786  Y  asp_xdrTest       0.0   7  3672   83568
   cmServer_SysCtrl0  -  -      -  -                   -   -     -       -
         cntTest_Ins  Y  20768  Y  asp_cntTest       0.0   7  3368   82852
  cpmServer_SysCtrl0  -  -      -  -                   -   -     -       -
      evtSubTest_Ins  Y  20802  Y  asp_evtSubTest    0.0   7  3680   83544
     evtUnitTest_Ins  Y  20796  Y  asp_evtUnitTest   0.0   7  3676   83564
  iocServer_SysCtrl0  -  -      -  -                   -   -     -       -
            sysctrl0  Y  20751  Y  SysCtrlComp       0.0   8  3208   98428
\endcode
***************************************** 
*/
components;

/**
*****************************************
\brief Exit the <code>aspinfo</code> utility

\par Usage: 
\code exit (or Ctrl-D) \endcode 

***************************************** 
*/
exit;

/**
*****************************************
\brief Show entity tree for all SGs

\par Usage: 
\code forest \endcode

\par Description:
Prints all entities associated with a given Service Group (SG), for all 
SGs in the system. It is the equivalent of calling the <code>tree</code> 
command repetitively for all SGs.

\par Output:
\code
[aspinfo@SysCtrl0]==> forest
SG Unused_sysctrl (redundancy:None, state:UL/UL)
   Node SysCtrl0
      SU SysCtrlSU (state:UL/UL)
         SI ctrlServiceInstance0 (state:active)
         Comp sysctrl0 (PS:Instantiated OS:Enabled RS:IS PID:20751)
              CSI ctrlComponentServiceInstance0 (state:active)
SG tcSg002b (redundancy:None, state:LA/LA)
   Node Worker1
      SU tcSu002b (state:UL/LA)
         Comp TestCommPingPong1 (PS:Instantiated OS:Enabled RS:OOS PID:22013)
SG tcSg001bClient (redundancy:None, state:LA/LA)
   Node Worker1
      SU MsgClient (state:UL/LA)
         Comp TestCommClient (PS:Instantiated OS:Enabled RS:OOS PID:22006)
SG tcSg002a (redundancy:None, state:LA/LA)
   Node Worker0
      SU tcSu002a (state:UL/LA)
         Comp TestCommPingPong0 (PS:Instantiated OS:Enabled RS:OOS PID:22737)
\endcode
***************************************** 
*/
forest;

/**
*****************************************
\brief Show help information

\par Usage: 
\code help \endcode 
\code help (or ?)\endcode 
\code help <command> \endcode 

\par Description:
With no argument, <code>help</code> prints the list of all available commands.
If a command name is provided as argument, it displays a brief summary about the command.

***************************************** 
*/
help;

/**
*****************************************
\brief Show various host information

\par Usage:
\code host \endcode

\par Description:
Print vital status and configuration information about the host OS of the current node. Same as executing the <code>nodeinfo</code> Linux command (in <code><asp-install-dir>/bin/</code>).

***************************************** 
*/
host;

/**
*****************************************
\brief Move named SG or SU into "locked assignment" administrative state
 
\par Usage: 
\code lock_a sg <sg-name> \endcode 
\code lock_a su <su-name> \endcode 
 
\par Output:
\code 
[aspinfo@SysCtrl0]==> lock_a sg tcSg002b
OK
\endcode 
***************************************** 
*/
lock_a;

/**
*****************************************
\brief Move named SG or SU into "locked instantiation" administrative state

\par Usage: 
\code lock_i sg <sg-name> \endcode 
\code lock_i su <su-name> \endcode  

\note Note that this transition request is rejected unless the SG or SU is in "locked assignment (LA)" state.

\par Output:
\code
[aspinfo@SysCtrl0]==> lock_i sg tcSg002b
OK
\endcode 
***************************************** 
*/
lock_i;
 
/**
*****************************************
\brief Show the list of defined node entities
 
\par Usage: 
\code nodes \endcode 

\par Description: 
Show the list of defined Node entities and the current state of each node. The per-node information includes:
\arg NODE: Node instance name
\arg CLASS: Node class (A: System controller node, C: worker node)
\arg AS: Administrative state (UL: Unlocked, LA: Locked Assignment, LI: Locked Instantiation)
\arg CAS: Calculated administrative state (same codes as above)
\arg PS: Presence state
\arg OS: Operational state
\arg INSTANTUABLE:
\arg CLUSTER-MEMBER: Is this node an active cluster member? (Y: Yes)
\arg ISU: Number of instantiated Service Units (SUs)
\arg ASU: Number of assigned SUs
 
\par Output:
\code 
[aspinfo@SysCtrl0]==> nodes
    NODE  CLASS  AS  CAS  PS  OS  INSTANTIABLE  CLUSTER-MEMBER  ISU  ASU
SysCtrl0      A  UL   UL   I   E             Y               Y    7    1
 Worker0      C  UL   UL   I   E             Y               Y   11    0
 Worker1      C  UL   UL   I   E             Y               Y    3    1
\endcode 
***************************************** 
*/
nodes;

/**
*****************************************
\brief Execute asp_console command(s)

\par Usage: 
\code raw <asp-console-command1> [; <asp_console_command2 ...]\endcode 

\par Description:
Execute an <code>asp_console</code> command or a sequence of commands. 
The initial context of <code>asp_console</code> is always its outer 
(root) context. When issuing multiple commands, they must be separated with 
semicolon(s).

\par Output:
\code 
[aspinfo@SysCtrl0]==> raw setc master; list
0

cpm
gmsServer_SysCtrl0
cntTest_Ins
evtUnitTest_Ins
alarmServer_SysCtrl0
eventServer_SysCtrl0
TestOsali
logServer_SysCtrl0
ckptServer_SysCtrl0
evtSubTest_Ins
sysctrl0
PerfRmdServerCompi
faultServer_SysCtrl0
nameServer_SysCtrl0
corServer_SysCtrl0
txnServer_SysCtrl0
TestXdri
\endcode 
***************************************** 
*/
raw;

/**
*****************************************
\brief Shows the role of this node in the cluster
 
\par Usage: 
\code role \endcode 

\par Output:
\code 
[aspinfo@SysCtrl0]==> role
node instance name:      SysCtrl0
node type:               controller
controller ha state:     active
\endcode 
***************************************** 
*/
role;

/**
*****************************************
\brief Check installation and show configuration information
 
\par Usage: 
\code setup\endcode 

\par Description:
Execute a simple installation sanity check and 
display crucial setup information of this ASP node instance. 
This command can be executed even before ASP is started on a given node.

\par Output:
\code 
[aspinfo@SysCtrl0]==> setup
installation:            OK
node instance name:      SysCtrl0
node class:              SysCtrl
node type:               controller
default node address:    1
node address assignment: default
tipc netid:              110
tipc address:            1.1.1
cluster interface(s):    eth0
gms multicast ip:        224.92.92.110
gms multicast port:      6110
\endcode 
***************************************** 
*/
setup;

/**
*****************************************
\brief Display detailed status information about a given Service Group (SG)
 
\par Usage: 
\code sg <sg-name> \endcode 

\par Output:
\code 
[aspinfo@SysCtrl0]==> sg tcSg002b
sg name:                 tcSg002b
admin state:             Unlocked
computed admin state:    Unlocked
redundancy model:        No Redundancy
failback option:         False
autorepair:              False
preferred active SUs:    1
preferred standby SUs:   0
preferred inservice SUs: 1
preferred assigned SUs:  2
collocation allowed:     True
started:                 True
instantiable SUs:        -
instantiated SUs:        -
inservice spare SUs:     -
assigned SUs:            tcSu002b
current active SUs       1
current standby SUs      0
\endcode 
***************************************** 
*/
sg;
 
/**
*****************************************
\brief List all defined Service Groups (SGs) in the cluster
 
\par Usage: 
\code sgs \endcode 

\par Description:
List all defined Service Groups (SGs) in the cluster. For each SG, the following information is displayed:
\arg SG-NAME: Name of the SG
\arg REDUND: Redundancy mode of the SG (None, 1+1, N+M, etc.)
\arg AS: Administrative State
\arg CAS: Calculated administrative state
\arg STARTED: Show if the SG has been started already
\arg A-SUS: Number of active Service Units (SUs) in the SG
\arg S-SUS: Number of standby SUs in the SG

\par Output:
\code 
[aspinfo@SysCtrl0]==> sgs
SG-NAME                   REDUND   AS  CAS  STARTED A-SUS  S-SUS
PerfSgEvtPub                None   LI   LI    False     0      0
PerfSgEvtSub                None   LI   LI    False     0      0
PerfSgRmdClient             None   LA   LA     True     0      0
Unused_sysctrl              None   UL   UL     True     1      0
evtPubTestSGi1              None   LA   LA     True     0      0
evtSubTestSGi1              None   LA   LA     True     0      0
evtUnitTestSGi1             None   LA   LA     True     0      0
perfSgRmdServer             None   LA   LA     True     0      0
tcSg001aServer               1+1   LA   LA     True     0      0
tcSg001bClient              None   LA   LA     True     0      0
tcSg002a                    None   LA   LA     True     0      0
tcSg002b                    None   UL   UL     True     1      0
tcSg003_01TimerAccuracy     None   LA   LA     True     0      0
tcSg004PingPongLocalA       None   LA   LA     True     0      0
tcSg004PingPongLocalB       None   LA   LA     True     0      0
tcSg005LogClient            None   LA   LA     True     0      0
tcSg006Osal                 None   LA   LA     True     0      0
tcSg007Cnt                  None   LA   LA     True     0      0
tcSg008Dbal                 None   LA   LA     True     0      0
tcSg009DebugCli             None   LA   LA     True     0      0
tcSg010Utils                None   LA   LA     True     0      0
tcSg011Xdr                  None   LA   LA     True     0      0
\endcode 
***************************************** 
*/
sgs;
 
/**
*****************************************
\brief Launch a Unix shell and execute a command or a command pipeline, 
and show its output

\par Usage: 
\code shell (or !) <shell-command(s)> \endcode 

\par Output:
\code 
[aspinfo@SysCtrl0]==> ! ps xa|grep asp_event
20589 ?        Ssl    0:01 asp_event
28884 pts/1    S+     0:00 /bin/sh -c ps xa|grep asp_event
28886 pts/1    S+     0:00 grep asp_event
[aspinfo@SysCtrl0]==>
\endcode 
***************************************** 
*/
shell;


/**
*****************************************
\brief Display vital status of this ASP node
 
\par Usage: 
\code status \endcode 

\note This command can be used to verify is ASP is running 
on the node or not.

\par Output:
\code 
[aspinfo@SysCtrl0]==> status
ASP run status:          up
pid of asp_amf:          20494
actual node address:     1
tipc kernel module:      loaded
tipc network id:         110
tipc node address:       1.1.1
tipc interface(s):       eth0
ASP local console:       available
ASP master console:      available
\endcode 
***************************************** 
*/
status;

/**
*****************************************
\brief Display detailed status information about a given Service Unit (SU)
 
\par Usage: 
\code su <su-name> \endcode 

\par Output:
\code 
[aspinfo@SysCtrl0]==> su PerfEvtPubSUi
su name:                 PerfEvtPubSUi
admin state:             Unlocked
computed admin state:    Locked Instantiation
member of sg:            PerfSgEvtPub
member of node:          SysCtrl0
restartable:             True
presence state:          Uninstantiated
readiness state:         Out of Service
operational state:       Enabled
number of active SIs:    0
number of standby SIs:   0
number of quiesced SIs:  0
SU restart count:        0
component restart count: 0
component list:          PerfEvtPubCompi
SI list:                 -
\endcode 
***************************************** 
*/
su;

/**
*****************************************
\brief List all SUs of a given node or all nodes

\par Usage: 
\code sus \endcode 
\code sus <node-name> \endcode 
\code sus all \endcode 

\par Description:
With no argument all SUs of the current node are displayed. 
If a node-name is provided, SUs associated with that node are displayed. 
If the <code>all</code> argument is used, all SUSs in the entire 
cluster are displayed.
 
\par Output:
\code 
[aspinfo@SysCtrl0]==> sus
         SU-NAME  MEMBER-OF-SG     ON-NODE  AS CAS PS OS RS  IC SIS
          CntSUi  tcSg007Cnt       SysCtrl0 UL LA  I  E  OOS  1 -
         OsalSUi  tcSg006Osal      SysCtrl0 UL LA  I  E  OOS  1 -
   PerfEvtPubSUi  PerfSgEvtPub     SysCtrl0 UL LI  U  E  OOS  0 -
PerfRmdServerSUi  perfSgRmdServer  SysCtrl0 UL LA  I  E  OOS  1 -
       SysCtrlSU  Unused_sysctrl   SysCtrl0 UL UL  I  E  IS   1 A
          XdrSUi  tcSg011Xdr       SysCtrl0 UL LA  I  E  OOS  1 -
   evtSubTestSUi  evtSubTestSGi1   SysCtrl0 UL LA  I  E  OOS  1 -
  evtUnitTestSUi  evtUnitTestSGi1  SysCtrl0 UL LA  I  E  OOS  1 -
\endcode 
***************************************** 
*/
sus;

/**
*****************************************
\brief Show all entities related to given Service Group (SG)
 
\par Usage: 
\code tree <sg-name> \endcode 

\par Description:
Display all AMF entities associated with a given Service Group, including:
\arg The Service Group itself (with SG name, redundancy model, administrative state and calculated administrative state)
\arg Node(s) on which SUs of this SG are located (with Node name)
\arg Service Unit(s) under the SG (SU name, administrative state, and calculated administrative state)
\arg Service Instance(s) (SIs) associated with the SU (with SI name, and active/standby state). The SI is shown only if the SU has assignments (SU must be in unlocked calculated state).
\arg Component(s) under given SU (component name, presence state, operational state, readiness state, and Linux process id (PID))
\arg Component Service Instance(s) for the given component (CSI name and active/standby state)

\par Output:
Example for an unlocked non-redundant SG:
\code 
[aspinfo@SysCtrl0]==> tree Unused_sysctrl
SG Unused_sysctrl (redundancy:None, state:UL/UL)
   Node SysCtrl0
        SU SysCtrlSU (state:UL/UL)
           SI ctrlServiceInstance0 (state:active)
           Comp sysctrl0 (PS:Instantiated OS:Enabled RS:IS PID:20751)
                CSI ctrlComponentServiceInstance0 (state:active)
\endcode 
***************************************** 
*/
tree;

/**
*****************************************
\brief Move a named SG or SU into "unlocked" administrative state

 
\par Usage: 
\code unlock sg <sg-name> \endcode 
\code unlock su <su-name> \endcode 

\note Note that this transition request is invalid unless the SG or 
SU is in "locked assignment" state.

\par Output:
\code 
[aspinfo@SysCtrl0]==> unlock sg tcSg002b
OK
\endcode 
***************************************** 
*/
unlock;

/**
 * \}
 */

