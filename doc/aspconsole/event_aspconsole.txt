/**
 * \addtogroup event_aspconsole Event Manager ASP Console Commands
 * \{
 */


/**
*****************************************
\brief Initialize the Event library.
 
\par Usage: 
\code initialize \endcode 

\par Output:
\code Initialize Successful, EvtHandle = [0x7] \endcode 

***************************************** 
*/
initialize;

/**
*****************************************
\brief Finalize the Event library.
 
\par Usage: 
\code finalize <EvtHandle> \endcode

\param EvtHandle[HEX] Handle returned on Initialize

\par Output:
\code 
finalize 0x7
Finalize Successful 
\endcode 
***************************************** 
*/
finalize;


/**
*****************************************
\brief Open an Event channel.
 
\par Usage: 
\code 
openchannel <EvtHandle> <ChannelName> <ChannelScope> <UserType>
\endcode

\param EvtHandle[HEX] Handle returned on Initialize
\param ChannelName[STRING] Event Channel Identifier
\param ChannelScope[DEC] Scope of the Channel [0:Local] [1:Global]
\param UserType[DEC] Type of the User [0:Subscriber] [1:Publisher] [2:Both]

\par Output:
\code 
openchannel 0x9 test 0 1
Channel Open Successful, ECH Handle[0x843C158] 
\endcode 
***************************************** 
*/
openchannel;

/**
*****************************************
\brief Open an Event channel asynchronously.
 
\par Usage: 
\code
asyncopenchannel <EvtHandle> <Invocation> <ChannelName> \
                 <ChannelScope> <UserType>
\endcode

\param EvtHandle[HEX] Handle returned on Initialize
\param Invocation[HEX] Value specified to Identify the Callback
\param ChannelName[STRING] Event Channel Identifier
\param ChannelScope[DEC] Scope of the Channel [0:Local] [1:Global]
\param UserType[DEC] Type of the User [0:Subscriber] [1:Publisher] [2:Both]

\par Output:
\code 
asyncopenchannel 0x9 0x2 test 1 2
Asynchronous Channel Open Successful 
\endcode 
***************************************** 
*/
asyncopenchannel;


/**
*****************************************
\brief Subscribe to an Event.
 
\par Usage: 
\code subscribe <EvtHandle> <ChannelHandle> <SubscriptionID> \endcode

\param EvtHandle[HEX] Handle returned on Initialize
\param ChannelHandle[HEX] Handle returned on Channel Open
\param SubscriptionID[HEX] Subscriber Identification

\par Output:
\code 
subscribe 0xA 0x843BB28 2
Subscription Successful 
\endcode 
***************************************** 
*/
subscribe;

/**
*****************************************
\brief Subscribe with specified integer filter.
 
\par Usage: 
\code subint <EvtHandle> <ChannelHandle> <Filter> <SubscriptionID> \endcode 

\param EvtHandle[HEX] Handle returned on Initialize
\param ChannelHandle[HEX] Handle returned on Channel Open
\param Filter[HEX] Integer Filter for the subscription
\param SubscriptionID[HEX] Subscriber Identification

\par Output:
\code 
subint 0xA 0x843BB28 0xb 0xcc
Subscription Successful 
\endcode 
***************************************** 
*/
subint;


/**
*****************************************
\brief Subscribe with specified string filter.
 
\par Usage: 
\code substr <EvtHandle> <ChannelHandle> <Filter> <SubscriptionID> \endcode 

\param EvtHandle[HEX] Handle returned on Initialize
\param ChannelHandle[HEX] Handle returned on Channel Open
\param Filter[STRING] String Filter for the subscription
\param SubscriptionID[HEX] Subscriber Identification

\par Output:
\code 
substr 0xA 0x843BB28 testing 0xbb
Subscription Successful 
\endcode 
***************************************** 
*/
substr;


/**
*****************************************
\brief Publish an Event.

\par Usage: 
\code publish <ChannelHandle> <PublisherName> \endcode

\param ChannelHandle[HEX] Handle returned on Channel Open.
\param PublisherName[STRING] Name of the Publisher.

\par Output:
\code 
publish 0x843BB28 test
Publish Successful 
\endcode 
***************************************** 
*/
publish;

 
/**
*****************************************
\brief Publish Event with specified integer pattern.
 
\par Usage: 
\code pubint <ChannelHandle> <Pattern> <PublisherName> \endcode 

\param ChannelHandle[HEX] Handle returned on Channel Open
\param Pattern[HEX] Integer Pattern to identify the Event
\param PublisherName[STRING] Name of the Publisher

\par Output:
\code 
pubint 0x843BB28 0xbb test
Publish Successful 
\endcode 
***************************************** 
*/
pubint;

/**
*****************************************
\brief Publish Event with specified string pattern.
 
\par Usage: 
\code pubstr <ChannelHandle> <Pattern> <PublisherName> \endcode

\param ChannelHandle[HEX] Handle returned on Channel Open
\param Pattern[STRING] String Pattern to identify the Event
\param PublisherName[STRING] Name of the Publisher

\par Output:
\code 
pubstr 0x843BB28 testing test1
Publish Successful 
\endcode 
***************************************** 
*/
pubstr;

/**
*****************************************
\brief Unsubscribe an Event.
 
\par Usage: 
\code unsubscribe <ChannelHandle> <SubscriptionID> \endcode

\param ChannelHandle[HEX] Handle returned on Channel Open.
\param SubscriptionID[HEX] Subscription Identifier.

\par Output:
\code 
unsubscribe 0x843BB28 2
Unsubscription Successful 
\endcode 
***************************************** 
*/
unsubscribe;
 
 
/**
*****************************************
\brief Close the event channel.
 
\par Usage: 
\code closechannel <ChannelHandle> \endcode

\param ChannelHandle[HEX] Handle returned on Channel Open

\par Output:
\code 
closechannel 0x843BB28 
Channel Close Successful 
\endcode 
***************************************** 
*/
closechannel;

/**
*****************************************
\brief Display the subscription Information.
 
\par Usage: 
\code display \endcode 

\par Output:
\code
=========================================================
        Info about Channel [COR_EVT_CHANNEL]
=========================================================
  Referance count:
        Subscriber [0] Publisher [1]
=========================================================

========================================================
        Info about Channel [CL_ALARM_EVENT_CHANNEL]
=========================================================
  Referance count:
        Subscriber [0] Publisher [1]
=========================================================

=========================================================
        Info about Channel [CKPT_UPDATE_CLIENT_CHANNEL]
=========================================================
  Referance count:
        Subscriber [1] Publisher [1]

 Subscriber Details:
        InitHandle [0x5]

    Subscriber Address [0x1]
        SubscriptionID [0x2]
        Cookie [0x0]

 Filter Details (Depicted as RBEs):
  NULL Filter
=========================================================

=========================================================
        Info about Channel [CPM_NODE_EVENT_CHANNEL]
=========================================================
  Referance count:
        Subscriber [2] Publisher [2]

 Subscriber Details:
        InitHandle [0x2]
        Subscriber Address [0xC]
        SubscriptionID [0x2]
        Cookie [0x0]

 Subscriber Details:
        InitHandle [0x3]
        Subscriber Address [0xD]
        SubscriptionID [0x2]
        Cookie [0x0]

 Filter Details (Depicted as RBEs):
  NULL Filter
=========================================================

=========================================================
        Info about Channel [CPM_EVENT_CHANNEL]
=========================================================
  Referance count:
        Subscriber [3] Publisher [2]

 Subscriber Details:
        InitHandle [0x4]
        Subscriber Address [0x5]
        SubscriptionID [0x2]
        Cookie [0x0]

 Filter Details (Depicted as RBEs):
_________________________________________________________

   Expr:0x80c625c

  Endian:LITTLE_END
  Flag:0x19
  Offset:0x0
  Len:0x1
  Next:(nil)
   Mask = 0xffffffff   Value: 0x       1
_________________________________________________________
  Subscriber Details:
        InitHandle [0x2]
        Subscriber Address [0xC]
        SubscriptionID [0x1]
        Cookie [0x0]

 Subscriber Details:
        InitHandle [0x3]
        Subscriber Address [0xD]
        SubscriptionID [0x1]
        Cookie [0x0]

 Filter Details (Depicted as RBEs):
  NULL Filter
 =========================================================
 =========================================================
        Info about Channel [test1]
=========================================================
  Referance count:
        Subscriber [1] Publisher [1]
  Subscriber Details:
        InitHandle [0xA]
        Subscriber Address [0x2]
        SubscriptionID [0xBB]
        Cookie [0xA]
  Filter Details (Depicted as RBEs):
_________________________________________________________
   Expr:0x843c864

  Endian:LITTLE_END
  Flag:0x19
  Offset:0x0
  Len:0x2
  Next:(nil)

  Mask = 0xffffffff   Value: 0x74736574
  Mask = 0x  ffffff   Value: 0x  676e69
_________________________________________________________
  Subscriber Details:
        InitHandle [0xA]
        Subscriber Address [0x2]
        SubscriptionID [0xCC]
        Cookie [0xA]

  Filter Details (Depicted as RBEs):
_________________________________________________________
   Expr:0x843ce68
   Endian:LITTLE_END
  Flag:0x19
  Offset:0x0
  Len:0x1
  Next:(nil)

  Mask = 0xffffffff   Value: 0x       b
_______________________________________________________
  Subscriber Details:
        InitHandle [0xA]
        Subscriber Address [0x2]
        SubscriptionID [0x2]
        Cookie [0xA]

  Filter Details (Depicted as RBEs):
_________________________________________________________
   Expr:0x843bafc
   Endian:LITTLE_END
  Flag:0x19
  Offset:0x0
  Len:0x2
  Next:0x843d840

  Mask = 0xffffffff   Value: 0x34333231
  Mask = 0x      ff   Value: 0x       0
_______________________________________________________
   Expr:0x843d840
   Endian:LITTLE_END
  Flag:0x19
  Offset:0x2
  Len:0x2
  Next:0x843d728

  Mask = 0xffffffff   Value: 0x34333231
  Mask = 0x    ffff   Value: 0x      35
_________________________________________________________
_________________________________________________________
   Expr:0x843d728

  Endian:LITTLE_END
  Flag:0x19
  Offset:0x4
  Len:0x2
  Next:0x843d958

  Mask = 0xffffffff   Value: 0x34333231
  Mask = 0x  ffffff   Value: 0x    3635
_________________________________________________________
_________________________________________________________
   Expr:0x843d958
   Endian:LITTLE_END
  Flag:0x19
  Offset:0x6
  Len:0x2
  Next:(nil)
   Mask = 0xffffffff   Value: 0x34333231
  Mask = 0xffffffff   Value: 0x  373635
_________________________________________________________
\endcode
***************************************** 
*/
display;

/**
*****************************************
\brief Checkpoint the Event Datastructures.
 
\par Usage: 
\code checkpoint <Choice> \endcode

\param Choice[DEC] [0:All] [1:UserInfo] [2:ECHInfo] [3:SubsInfo]

\par Output:
\code checkpoint 2 \endcode 
***************************************** 
*/
checkpoint;


/**
*****************************************
\brief Display the Checkpointed Data.
 
\par Usage: 
\code showcheckpoints <Choice> <ChannelScope> [Flag] \endcode

\param Choice[DEC] [0:All] [1:UserInfo] [2:ECHInfo] [3:SubsInfo]
\param ChannelScope[DEC] [0:Local] [1:Global]
\param Flag[DEC] Subscriber Info[0: Brief] [1: Detailed]

\par Output:
\code showcheckpoints 1 1 0 
============================
                     User Info
============================
Bytes Received = 84

Bytes Read     = 12
Operation = 1
User IOC Port  = 0x1
User EvtHandle = 0x1
=============================
\endcode
***************************************** 
*/
showcheckpoints;

/**
*****************************************
\brief Simulate Event Server Recovery.
 
\par Usage: 
\code recover \endcode 
***************************************** 
*/
recover;


/**
 * \}
 */
