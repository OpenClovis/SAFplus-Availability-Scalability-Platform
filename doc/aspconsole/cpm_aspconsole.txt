/**
 * \addtogroup cpm_aspconsole Component Manager ASP Console Commands
 * \{
 */

/**
***************************************** 
\brief Get Address of a specified component.

\par Usage: 
\code compAddressGet <CompName> <nodeIocAddress> \endcode

\param compName[STRING] Name of the component
\param nodeIocAddress[DEC] node ioc Address, where the component exist.

\par Output: 
\code 
compAddressGet ckptServer_SysController_0 1
Address 1 Port c 
\endcode
***************************************** 
*/ 
compAddressGet;


/**
***************************************** 
\brief Get compId of a specified component.

\par Usage: 
\code compIdGet <CompName> \endcode
        
\param compName[STRING] Name of the component.

\par Output: 
\code 
compIdGet ckptServer_SysController_0
compId is 65548 
\endcode
***************************************** 
*/ 
compIdGet;


/** 
***************************************** 
\brief Get stack trace of the specified component, available only if 
software exception.

\par Usage: 
\code compTraceGet <CompName> \endcode

\param compName[STRING] Name of the component

\note <code>compTraceGet</code> will return the stack trace of the last 
occurred Fault Condition.

\par Output: 
\code compTraceGet ckptServer_SysController_0 \endcode
***************************************** 
*/ 
compTraceGet;


/** 
***************************************** 
\brief Shutdown down a node.

\par Usage: 
\code nodeShutdown <iocAddress>\endcode

\param iocAddress[DEC] node IOC address

\par Output: 
\code nodeShutdown 1  \endcode
***************************************** 
*/ 
nodeShutdown;

/**
***************************************** 
\brief Report an error.

\par Usage: 
\code compReport <Component Name> <time> <recommondedRecovery> \endcode

\par Output: 
\code compReport ckptServer_SysController_0 10 50 \endcode
***************************************** 
*/ 
compReport;


/** 
***************************************** 
\brief Clear an error.

\par Usage: 
\code compClear <Component Name> \endcode

\par Output: 
\code compClear ckptServer_SysController_0 \endcode
***************************************** 
*/ 
compClear;


/** 
***************************************** 
\brief AMS Management Admin API for lock assignment of an entity.

\par Usage: 
\code amsLockAssignment entity_type entityname \endcode              
\param entity_type[STRING] node,sg,su,si
\param entityname[STRING]  SysNode0

\note
AMS lock assignment of an entity results in removal of work/CSI's for the components of the contained entities.When performed on node,SU's and SI's, it would switchover the work on these entities which would result in standby's getting reassigned to active.When performed on an SG, it would only result in removal of work assignments.

\par Example:
\code
amslockassignment su suname
valid entity types are:
         amslockassignment    [ node,sg,su,si ]
         amslockinstantiation [ node,sg,su    ]
         amsunlock            [ node,sg,su,si ]
         amsshutdown          [ node,sg,su,si ]
         amsrestart           [ node,su,comp  ]
         amsrepaired          [ node,su       ] 
\endcode

\par Output: 
\code amsLockAssignment su SG_1_Node_1_SU_1 \endcode
***************************************** 
*/ 
amsLockAssignment;


/**
***************************************** 
\brief AMS Management Admin API for lock instantiation of an entity.

\par Usage: 
\code amsLockInstantiation entity_type entityname \endcode              

\param entity_type[STRING] node,sg,su
\param entityname[STRING]  SysNode0

\note
AMS lock instantiation of an entity results in cleaning up of the components contained by that entity.

\par Example:
\code  
amslockinstantiation node nodename
valid entity types are:
          amslockassignment    [ node,sg,su,si ]
          amslockinstantiation [ node,sg,su    ]
          amsunlock            [ node,sg,su,si ]
          amsshutdown          [ node,sg,su,si ]
          amsrestart           [ node,su,comp  ]
          amsrepaired          [ node,su       ] 
\endcode

\par Output:
\code amsLockInstantiation node SysNode0  \endcode
***************************************** 
*/ 
amsLockInstantiation;

/**
***************************************** 
\brief AMS Management Admin API for unlocking an entity.

\par Usage: 
\code amsUnLock entity_type entityname  \endcode             

\param entity_type[STRING] node,sg,su,si
\param entityname[STRING]  SG_1_Node_1_SU_1

\note
AMS unlock of an entity results in work/CSI assignments to the components contained by that entity.
	
\par Example:
\code  
amsunlock su suname
valid entity types are:
          amslockassignment    [ node,sg,su,si ]
          amslockinstantiation [ node,sg,su    ]
          amsunlock            [ node,sg,su,si ]
          amsshutdown          [ node,sg,su,si ]
          amsrestart           [ node,su,comp  ]
          amsrepaired          [ node,su       ] 
\endcode
          
\par Output: 
\code amsUnLock su SG_1_Node_1_SU_1 \endcode
***************************************** 
*/ 
amsUnlock;
 
/** 
***************************************** 
\brief AMS Management Admin API for shutting down an entity.

\par Usage: 
\code amsShutdown entity_type entityname  \endcode           

\param entity_type[STRING] node,sg,su,si
\param entityname[STRING]  SG_1_Node_1_SU_1

\note
AMS shutdown of an entity results in work/CSI assignments getting removed from the components of the contained entities. Shutdown of node,su,si would result in switchover of the contained entities with standbys getting reassigned to active. Shutdown of SG results in removal of work assignments from the contained components.

\par Example:  
\code
amsshutdown su suname
valid entity types are:
          amslockassignment    [ node,sg,su,si ]
          amslockinstantiation [ node,sg,su    ]
          amsunlock            [ node,sg,su,si ]
          amsshutdown          [ node,sg,su,si ]
          amsrestart           [ node,su,comp  ]
          amsrepaired          [ node,su       ] 

\endcode

\par Output:
\code amsShutdown su SG_1_Node_1_SU_1 \endcode
***************************************** 
*/ 
amsShutdown;


/**
***************************************** 
\brief AMS Management Admin API for restarting an entity.

\par Usage: 
\code amsRestart entity_type entityname \endcode

\param entity_type[STRING] node,su,comp
\param entityname[STRING]  SysSU1_0

\note
AMS restart of en entity results in the components contained by the entities getting restarted. The same work/CSI is reassigned back to the components after the restart.

\par Example:  
\code 
amsunlock node nodename
valid entity types are:
          amslockassignment    [ node,sg,su,si ]
          amslockinstantiation [ node,sg,su    ]
          amsunlock            [ node,sg,su,si ]
          amsshutdown          [ node,sg,su,si ]
          amsrestart           [ node,su,comp  ]
          amsrepaired          [ node,su       ] 

\endcode

\par Output: \code amsRestart su SysSU1_0 \endcode
***************************************** 
*/ 
amsRestart;

/** 
***************************************** 
\brief AMS Management Admin API for marking an entity as repaired.
\par Usage: 
\code amsRepaired entity_type entityname \endcode              

\param entity_type[STRING] node,su
\param entityname[STRING]  SysNode0

\par Example:
\code
amsunlock node nodename
valid entity types are:
          amslockassignment    [ node,sg,su,si ]
          amslockinstantiation [ node,sg,su    ]
          amsunlock            [ node,sg,su,si ]
          amsshutdown          [ node,sg,su,si ]
          amsrestart           [ node,su,comp  ]
          amsrepaired          [ node,su       ]
\endcode
\par Output: 
\code amsRepaired node SysNode0 \endcode
***************************************** 
*/ 
amsRepaired;


/**
***************************************** 
\brief AMS Management Admin API for enabling debug for a particular entity.
Enables debug messages for an ams entity or entire ams.

\par Usage: 
\code 
amsdebugenable  entity_type entityname debugflags
amsdebugenable  node nodename all
amsdebugenable  all  all
\endcode 

\param entity_type[STRING] node,sg,su,si,comp,csi
\param entityname[STRING]  SysNode0
\param debugflags[STRING]  msg, timer, state_change, function_enter, all

\note
valid entitytypes are <code>[ node, sg, su, comp, si, csi ]</code>
<br>valid debug flags are <code>[msg,timer,state_change,function_enter,all]</code> 
\arg <code>msg</code>: debug flag for ams messages
\arg <code>timer</code>: debug flag for timer related ams messages
\arg <code>state_change</code>: debug flag for state change related ams messages
\arg <code>function_enter</code>: debug flag for function enter ams messages
\arg <code>all</code>: debug flag for all ams messages

\par Output: 
\code amsDebugEnable su SysSU1_0 all \endcode
***************************************** 
*/ 
amsDebugEnable;


/** 
***************************************** 
\brief AMS Management Admin API for disabling debug for a particular entity. 
Disables debug messages for an ams entity or entire ams.

\par Usage: 
\code 
amsdebugdisable  entity_type entityname debugflags
amsdebugdisable  node nodename all
amsdebugdisable  all  all
\endcode

\param entity_type[STRING] node,sg,su,si,comp,csi
\param entityname[STRING]  SysNode0
\param debugflags[STRING]  msg, timer, state_change, function_enter, all

\note       
valid entitytypes are <code>[ node, sg, su, comp, si, csi ]</code>
<br>valid debug flags are <code>[msg,timer,state_change,function_enter,all]</code>        
\arg <code>msg</code>: debug flag for ams messages
\arg <code>timer</code>: debug flag for timer related ams messages
\arg <code>state_change</code>: debug flag for state change related ams messages
\arg <code>function_enter</code>:debug flag for function enter ams messages
\arg <code>all</code>: debug flag for all ams messages

\par Output: 
\code amsDebugDisable su SysSU1_0 all  \endcode
***************************************** 
*/ 
amsDebugDisable;

/** 
***************************************** 
\brief AMS Management Admin API for enabling AMS log to console.

\par Usage: 
\code 
amsdebugenablelogtoconsole
\endcode

\par Output: 
\code amsDebugEnableLogToConsole  \endcode
***************************************** 
*/ 
amsDebugEnableLogToConsole;

/** 
***************************************** 
\brief AMS Management Admin API for disabling AMS log to console.

\par Usage: 
\code 
amsdebugdisablelogtoconsole
\endcode

\par Output: 
\code amsDebugDisableLogToConsole  \endcode
***************************************** 
*/ 
amsDebugDisableLogToConsole;

/** 
***************************************** 
\brief API for getting entity's debug information. 
Returns debug flags for ams entity or entire ams.

\par Usage: 
\code 
amsdebugget  entitytype entityname
amsdebugget  node nodename
amsdebugget  all
\endcode

\param entitytype[STRING] node,sg,su,si,comp,csi
\param entityname[STRING]  SysNode0

\note       
valid entitytypes are <code>[ node, sg, su, comp, si, csi ]</code>
<br>valid debug flags are <code>[msg,timer,state_change,function_enter,all]</code>        
\arg <code>msg</code>: debug flag for ams messages
\arg <code>timer</code>: debug flag for timer related ams messages
\arg <code>state_change</code>: debug flag for state change related ams messages
\arg <code>function_enter</code>:debug flag for function enter ams messages
\arg <code>all</code>: debug flag for all ams messages

\par Output: 
\code 
amsDebugGet su SysSU1_0
debug flags for entity[SysSU1_0] are 
[msg|timer|state_change|function_enter] 
\endcode
***************************************** 
*/ 
amsDebugGet ;


/** 
***************************************** 
\brief Utility API for printing the contents of AMS DB.
\par Usage: 
\code amsDbPrint \endcode
\par Output: 
\code amsDbPrint \endcode
***************************************** 
*/ 
amsDbPrint;

/**
*****************************************
\brief AMS Management Admin API for adding and/or modifying attributes of an
entity dynamically.

\par Usage:
\code amsMgmt action entity-type attribute [value]+ entity-name \endcode
\param action[STRING] Specifies whether we are creating a new entity or
modifying an attribute of an existing entity. Should have one of the values "create",
"delete" or "set".
\param entity-type[STRING] Type of the entity on which \e action is to
performed. Should have one of the values "node", "sg", "su", "si", "csi" or "comp".
\param entity-name[STRING] Name of the entity on which \action is being performed.
\param attribute[STRING] The name of the attribute which is being modified. Can
be used only when the \e action is "set".
\param value[STRING] One or more values of \e attribute. Can be used only when
the \e action is "set".

\par Using \e amsMgmt to create/delete entities:
The \e amsMgmt debug CLI command can be used to either create new entities,
delete existing entities, or to modify the attributes of an existing entities.

When used this way the usage of the command is
<br>
\code amsMgmt create|delete entity-type entity-name \endcode

For e.g. to create an SG named twoN_SG the command is
<br>
\code amsMgmt create sg twoN_SG \endcode

To delete an existing csi named twoN_CSI0 the command is
<br>
\code amsMgmt delete csi twoN_CSI0 \endcode

\par Using \e amsMgmt to modify the attributes of an existing entities:
The \e amsMgmt debug CLI commmand can also be used to modify the attributes of
the existing entities. Only brief description of the meaning of the attributes
are given below. For a detailed description please refer to OpenClovis SDK IDE
User Guide and SA Forum specification for the AMF.

When used this way the usage of the command is
<br>
\code amsMgmt set entity-type attribute value(s) entity-name \endcode

Lists of various attributes of entities that can be set:

- Attributes of SG
  - si_list - The list of SIs that are assigned to a SG. Repeated calls appends
  to the already existing list.
  - su_list - The list of SUs that are protected by this SG. Repeated calls
  appends to the already existing list.
  - redundancy_model - The redundancy model of this SG. Possible values are
  "no_redundancy", "twon" or "mplusn"
  - loading_strategy - The method of assigning SIs to SUs of this SG. Possible
  values are "least_si_per_su", "least_su_assigned", "least_load_per_su" or
  "by_si_preference"
  - auto_repair - Indicates whether the AMS should try to repair the failed
  SU belonging to this SG. Possible values are "true" or "false".
  - instantiate_duration - The time duration for which AMS has to wait before
  starting an SG.
  - num_pref_active_sus - Preferred number of SUs which should be assigned an
  active HA state for this SG.
  - num_pref_standby_sus - Preferred number of SUs which should be assigned an
  standby HA state for this SG.
  - num_pref_inservice_sus - Preferred number of SUs belonging to this SG, which
    should be started.
  - num_pref_assigned_sus - Preferred number of SUs belonging to this SG which
    should be assigned work by AMS.
  - max_active_sis_per_su - Maximum number of active SIs per SU.
  - max_standby_sis_per_su - Maximum number of standby SIs per SU.
  - comp_restart_duration - Specifies the duration within which if the component
    fails more then \e comp_restart_count_max the failure will be escalated to
    SU level.
  - comp_restart_count_max - Maximum number of times a component can be
  restarted before the failure is escalated to SU level failure.
  - su_restart_duration - Specifies the duration within which if the SU fails
    more then \e su_restart_count_max the failure will be escalated to node
    level.
  - su_restart_count_max - Maximum number of times a SU can be restarted before
  the failure is escalated to Node level failure.

- Attributes of SI
  - rank - Specifies work assignment priority for this SI. The higher the value
  is the priority. Must be a non-negative integer.
  - num_standby_assignments - Number of standby work assignments to this SI.
  - csi_list - The list of CSIs which is contained by this SI. Repeated calls
  appends to the already existing list.
  
- Attributes of CSI
  - name_value_pair - The name value pair associated with this CSI.

- Attributes of Node
  - su_list - List of SUs on this node. Repeated calls appends to the already
  existing list.
  - is_restartable - Specifies if the node is restartable. Possible values are
 "true" and "false".
  - auto_repair - Indicates whether the AMS should try to repair the failed
  node. Possible values are "true" or "false".
  - su_failover_duration - Specifies the time duration within which sequential
    failures of any two SUs in a node should not occur. If such an event occurs,
    the fault handling is escalated to Node Failover.
  - su_failover_count_max - Specifies the maximum number of SU failovers that
    can be tolerated on a node. If the SU failover count increases beyond this
    limit the Fault handling is escalated to Node Failover.

- Attributes of SU
  - comp_list - List of components belonging to this SU. Repeated calls appends
  to the already existing list.
  - rank - Specifies work assignment priority for this SU. The higher the value
  is the priority. Must be a non-negative integer.
  - is_restartable - Specifies if the SU is restartable. Possible values are
 "true" and "false".

- Attributes of Component
  - supported_csi_types - The CSIs supported by this component. This means that
  work represented by this CSI can be assigned to this component. Repeated calls
  appends to the already existing list.
  - capability_model - Specifies how many active and/or standby work assignments
  this component can take. Possible values are "x_and_y", "x_or_y", "one_or_x",
  "one_or_one", "x_active" or "one_active".
  - is_restartable - Specifies if the component is restartable. Possible values
 are "true" and "false".
  - num_max_active_csis - Specifies the maximum number of active CSIs that this
  component can support.
  - num_max_standby_csis - Specifies the maximum number of standby CSIs that
  this component can support.
  - timeouts - Specifies instantiation, termination, cleanup, quiescing
  complete, csi set, csi removal, instantiation delay timeouts.
  - recovery_on_timeout - Specifies recommended recovery action to be taken when
  the component fails. Possible values are "no_rec", "comp_restart",
  "comp_failover", "node_switchover", "node_failover" or "node_failfast".
  - instantiate_command - Specifies the executable for this component along with
  any arguments. The format string should be "executable-name arg0 arg1
  arg2... argn". The executable "executable-name" must be present in location
  pointed by ASP_BINDIR or bin directory of the sandbox.

For e.g. to set the executable name of the component name as "asp_testComp" and
arguments test1 and test2 the command is (assuming that the executable
asp_testComp is present in ASP_BINDIR) :
<br>
\code amsMgmt set comp instantiate_command asp_testComp test1 test2 \endcode

To set the list of SUs belonging to node test_node as test_su0 and test_su1 the
command is :
<br>
\code
amsMgmt set node su_list test_su0 test_node
amsMgmt set node su_list test_su1 test_node
\endcode

Finally here is an example to create a simple node dynamically which has one SG,
two SUs containing one component each and each component supporting one csi.

\code 
amsMgmt create sg test_sg

amsMgmt create si test_si

amsMgmt create csi test_csi

amsMgmt create node test_node

amsMgmt create su test_su0

amsMgmt create su test_su1

amsMgmt create comp test_su0_comp0

amsMgmt create comp test_su1_comp0

amsMgmt set sg si_list test_si test_sg

amsMgmt set sg su_list test_su0 test_sg

amsMgmt set sg su_list test_su1 test_sg

amsMgmt set si num_standby_assignments 1 test_si

amsMgmt set si csi_list test_csi test_si

amsMgmt set csi name_value_pair model twoN test_csi

amsMgmt set node su_list test_su0 test_node

amsMgmt set node su_list test_su1 test_node

amsMgmt set su comp_list test_su0_comp0 test_su0

amsMgmt set su comp_list test_su1_comp0 test_su1

amsMgmt set comp capability_model x_and_y test_su0_comp0

amsMgmt set comp capability_model x_and_y test_su1_comp0

amsMgmt set comp timeouts 20000 test_su0_comp0

amsMgmt set comp timeouts 30000 test_su0_comp1

amsMgmt set comp recovery_on_timeout comp_failover test_su0_comp0

amsMgmt set comp supported_csi_types test_csiType test_su0_comp0

amsMgmt set comp supported_csi_types test_csiType test_su1_comp0

amsMgmt set comp instantiate_command asp_twoNAdminComp dummy1 dummy2 test_su0_comp0

amsMgmt set comp instantiate_command asp_twoNAdminComp dummy test_su1_comp0

amsLockAssignment node test_node

amsUnlock node test_node

amsLockAssignment sg test_sg

amsLockAssignment si test_si

amsLockAssignment su test_su0

amsUnlock su test_su0

\endcode

*****************************************
*/
amsMgmt;


/** 
***************************************** 
\brief Displays list of available EOs on the local node similar 
to the one displayed below.

\par Usage: 
\code cpmEOShow \endcode

\par Output:
\code
ID  |   Port   |   Name    |   Health   |Recv Threads
=================================================================
 0xe| 0x12 |   debugCli |     ALIVE  | 0001
 0x5| 0xc |       ckpt |     ALIVE  | 0004
 0xb| 0x10 |     SNMPEo |     ALIVE  | 0002
 0x6| 0x5 |       name |     ALIVE  | 0001
 0x2| 0x9 | CLOVIS_GROUP_MEMBERSHIP_SERVICE |     ALIVE  | 0001
 0x3| 0x2 |   EVENT_EO |     ALIVE  | 0001
 0x8| 0x11 | ALARM_SERVER |     ALIVE  | 0002
 0x1| 0x4 |  LogServer |     ALIVE  | 0001
 0x10| 0x8000 | SAF_Aware_Component0EO |     ALIVE  | 0003
 0x4| 0xb | TxnService |     ALIVE  | 0002
 0xa| 0x8 |      fault |     ALIVE  | 0002
 0x9| 0xe | CLOVIS_CHASSIS_MANAGER |     ALIVE  | 0002
 0x7| 0xd |        COR |     ALIVE  | 0008 
\endcode
***************************************** 
*/ 
cpmEOShow;


/** 
***************************************** 
\brief Displays all the components and EOs on the local Node as given below.
\par Usage: 
\code compList \endcode

\par Output:
<table>
<tr><td>
\code
################### List Of Components ############ ## 
CompName | compId | shmId | eoPort | PID | RestartCount | PresenceState  | OperState
                     ID |     Port |     Name  |    Health |Recv Threads
================================================================
debugServer_SysController_0| 0x10007| 4653066| 0x0| 11229| 0 |INSTANTIATED|ENABLED
                   0xe  |  0x12   |  debugCli |    ALIVE  |0001
----------------------------------------------------------------
 ckptServer_SysController_0| 0x1000a| 4751373| 0xc|  6864| 0 |INSTANTIATED|ENABLED
                   0x5  |  0xc   |      ckpt |    ALIVE  |0004
----------------------------------------------------------------
 snmpServer_SysController_0| 0x10003| 4521988| 0x10| 6887| 0 |INSTANTIATED|ENABLED
                   0xb  |  0x10   |    SNMPEo |    ALIVE  |0002
----------------------------------------------------------------
 nameServer_SysController_0| 0x10009| 4718604| 0x5|  6860| 0 |INSTANTIATED|ENABLED
                   0x6  |  0x5   |      name |    ALIVE  |0001
----------------------------------------------------------------
  gmsServer_SysController_0| 0x1000b| 4784142| 0x9|  6845| 0 |INSTANTIATED|ENABLED
                   0x2  |  0x9   |CLOVIS_GROUP_MEMBERSHIP_SERVICE | ALIVE |0001
----------------------------------------------------------------
eventServer_SysController_0| 0x10008| 4685835| 0x2|  6852| 0 |INSTANTIATED|ENABLED
                   0x3  |  0x2   |  EVENT_EO |    ALIVE  |0001
-----------------------------------------------------------------
alarmServer_SysController_0| 0x1000d| 4849680| 0x11| 6881| 0 |INSTANTIATED|ENABLED
                   0x8  |  0x11   |ALARM_SERVER |    ALIVE  |0002
-----------------------------------------------------------------
  logServer_SysController_0| 0x10006| 4620297| 0x4|  6837| 0 |INSTANTIATED|ENABLED
                   0x1  |  0x4   | LogServer |    ALIVE  |0001
-----------------------------------------------------------------
 SG_1_Node_1_SU_1_Comp_1| 0x10001| 4456450| 0x8000| 25284| 0 |INSTANTIATED|ENABLED
                   0x10  |  0x8000   |SAF_Aware_Component0EO |    ALIVE  |0003
------------------------------------------------------------------
                     0xb| 0x10 |     SNMPEo |     ALIVE  | 0002
------------------------------------------------------------------
              SG_1_Node_1_SU_1|       1 | UNINSTANTIATED |   DISABLED
            SG_1_Node_1_SU_1_Comp_1| 0x10001| 8000| 25284| 0 |INSTANTIATED|ENABLED
                 0x10| 0x8000 | SAF_Aware_Component0EO |     ALIVE  | 0003
------------------------------------------------------------------
gmsSU_SysController_0|      11 |   INSTANTIATED |    ENABLED
          gmsServer_SysController_0| 0x1000b|    9|  6845| 0 |INSTANTIATED|ENABLED
                 0x2| 0x9 | CLOVIS_GROUP_MEMBERSHIP_SERVICE |     ALIVE  | 0001
------------------------------------------------------------------
txnSU_SysController_0|       5 |   INSTANTIATED |    ENABLED
          txnServer_SysController_0| 0x10005|    b|  6855| 0 |INSTANTIATED|ENABLED
                 0x4| 0xb | TxnService |     ALIVE  | 0002
--------------------------------------------------------------- 
\endcode
</td></tr>
</table>
***************************************** 
*/ 
compList;


/** 
***************************************** 
\brief Displays all the Service Units, components and EOs on the local 
Node similar to one as shown below.

\par Usage: 
\code suList \endcode

\par Output:
<table>
<tr><td>
\code
suName                |   suId  | PresenceState   | OperState
       CompName | compId | eoPort | PID | RestartCount | PresenceState | OperState
                ID  |   Port   |   Name    |   Health   |Recv Threads
------------------------------------------------------------------
 oampSU_SysController_0|      12 |   INSTANTIATED |    ENABLED
  alarmServer_SysController_0| 0x1000d | 11 |  6881 | 0 | INSTANTIATED | ENABLED
                 0x8| 0x11 | ALARM_SERVER |     ALIVE  | 0002
  faultServer_SysController_0| 0x1000c |  8 |  6883 | 0 | INSTANTIATED | ENABLED
                 0xa| 0x8 |      fault |     ALIVE  | 0002
------------------------------------------------------------------
eventSU_SysController_0|       8 |   INSTANTIATED |    ENABLED
  eventServer_SysController_0| 0x10008 |  2 |  6852 | 0 | INSTANTIATED | ENABLED
                 0x3| 0x2 |   EVENT_EO |     ALIVE  | 0001
------------------------------------------------------------------
  logSU_SysController_0|       6 |   INSTANTIATED |    ENABLED
    logServer_SysController_0| 0x10006 |  4 |  6837 | 0 | INSTANTIATED | ENABLED
                 0x1| 0x4 |  LogServer |     ALIVE  | 0001
------------------------------------------------------------------ 
 ckptSU_SysController_0|      10 |   INSTANTIATED |    ENABLED
   ckptServer_SysController_0| 0x1000a |  c |  6864 | 0 | INSTANTIATED | ENABLED
                 0x5| 0xc |       ckpt |     ALIVE  | 0004
----------------------------------------------------------------------
     SU_SysController_0|       2 |   INSTANTIATED |    ENABLED
     cmServer_SysController_0| 0x10002 |  e |  6885 | 0 | INSTANTIATED | ENABLED
                 0x9| 0xe | CLOVIS_CHASSIS_MANAGER |     ALIVE  | 0002
----------------------------------------------------------------------
 nameSU_SysController_0|       9 |   INSTANTIATED |    ENABLED
   nameServer_SysController_0| 0x10009 |  5 |  6860 | 0 | INSTANTIATED | ENABLED
                 0x6| 0x5 |       name |     ALIVE  | 0001
----------------------------------------------------------------------
  corSU_SysController_0|       4 |   INSTANTIATED |    ENABLED
    corServer_SysController_0| 0x10004 |  d |  6862 | 0 | INSTANTIATED | ENABLED
                 0x7| 0xd |        COR |     ALIVE  | 0008
----------------------------------------------------------------------
debugSU_SysController_0|       7 | UNINSTANTIATED |   DISABLED
  debugServer_SysController_0| 0x10007 |  0 | 11229 | 0 | INSTANTIATED | ENABLED
                 0xe| 0x12 |   debugCli |     ALIVE  | 0001
----------------------------------------------------------------------
 snmpSU_SysController_0|       3 |   INSTANTIATED |    ENABLED
   snmpServer_SysController_0| 0x10003 | 10 |  6887 | 0 | INSTANTIATED | ENABLED 
\endcode
</td></tr>
</table>
***************************************** 
*/ 
suList;


/** 
***************************************** 
\brief Displays cluster wide available Nodes.

\par Usage: 
\code clusterList \endcode

\par Output:
\code 
nodeName | status | iocAddress | iocPort
----------------------------------------------------------------------
GigeNode_0
----------------------------------------------------------------------
SysController_0 | ALIVE |        1 |   0x1
\endcode
***************************************** 
*/ 
clusterList;

/** 
***************************************** 
\brief Disables, enables or queries the status of component healthchecking.

\par Usage: 
\code heartbeat enable | disable | status \endcode

\par Output:
\code 
heartbeat status
disabled
\endcode
***************************************** 
*/ 
heartbeat;

/**
 * \}
 */
 

