################################################################################
# ModuleName  : com
# $File$
# $Author$
# $Date$
################################################################################
# Description :
# usage: python makefile.py
# create Makefile
################################################################################
import sys
import string
import xml.dom.minidom
from string import Template

makefileTemplate = Template("""\

################################################################################
#
# Makefile for component client library
#
# Auto-generated by OpenClovis IDE
#
################################################################################


# Component name (using all lowercase):

COMPNAME        := config

# List local source files needed for the component server:

SRC_FILES       :=      $(wildcard *.c)

# List other ASP components of which client libraries your component
# depends on:

DEP_COMP_LIST   := utils osal timer buffer cnt ioc rmd eo event debug ckpt cor om hal name fault cm alarm prov snmp med amf txn idl

# List any third party libs needed to get this server built (or None):
THIRD_PARTY_EZXML_PATH = $(CLOVIS_ROOT)/ASP/3rdparty/ezxml/stable

EXTRA_CPPFLAGS  := -I$(THIRD_PARTY_EZXML_PATH)

ifeq ($(HCL_CM),1)

CPPFLAGS += -I$(BUILDTOOLS_PATH)/include/radisys

else

CPPFLAGS += -I$(BUILDTOOLS_PATH)/include/openhpi

endif

# Library name:

LIB_NAMES       = libClConfig

# If there are more than one client libraries to be built here, you
# need to list the object files that will make up each library:
#
# Example:
#     libClTmpcomp_basic: file1.o file2.o
#     libClTmpcomp_advanced: file1.o file2.o file3.o file4.o
#
# If your component builds one library only, than this list will automatically
# obtained from the SRC_FILES variable above, so you don't need to create it.
#

include $(CLOVIS_ROOT)/ASP/mk/make-config.mk

""")

#------------------------------------------------------------------------------
#Script Execution Starts Here.
out_file = open("Makefile", "w")
out_file.write(makefileTemplate.safe_substitute())
out_file.close()

