
/*********************************************************************
* ModuleName  : idl
*********************************************************************/
/*********************************************************************
* Description : This file contains the declartions for client stub
*               routines
*     
* THIS FILE IS AUTO-GENERATED BY OPENCLOVIS IDE. EDIT THIS FILE AT
* YOUR OWN RISK. ANY CHANGE TO THIS FILE WILL BE OVERWRITTEN ON
* RE-GENERATION.
*     
*********************************************************************/
#ifndef _LOG_PORT_FILE_HDLR_CLIENT_H_
#define _LOG_PORT_FILE_HDLR_CLIENT_H_
#ifdef __cplusplus
extern "C" {
#endif
#include <clXdrApi.h>
#include <clIdlApi.h>
#include "../clientIDDefinitions.h"
#include "xdrClLogStreamMapT.h"
#include "xdrClLogFilterT.h"
#include "xdrClLogStreamAttrIDLT.h"
#include "xdrClLogCompDataT.h"



ClRcT clLogFileHdlrFileOpenClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClStringT* fileName, CL_IN ClStringT* fileLocation, CL_OUT ClUint32T* operatingLvl);

typedef void (*LogClLogFileHdlrFileOpenAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClStringT* fileName, CL_IN ClStringT* fileLocation, CL_OUT ClUint32T* operatingLvl, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef LogClLogFileHdlrFileOpenAsyncCallbackT_4_0_0 LogClLogFileHdlrFileOpenAsyncCallbackT;

ClRcT clLogFileHdlrFileOpenClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClStringT* fileName, CL_IN ClStringT* fileLocation, CL_OUT ClUint32T* operatingLvl,CL_IN LogClLogFileHdlrFileOpenAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clLogFileHdlrFileRecordsGetClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClStringT* fileName, CL_IN ClStringT* fileLocation, CL_IN ClUint16T isDelete, CL_INOUT ClUint64T* pStartRec, CL_INOUT ClUint32T* version, CL_INOUT ClUint32T* pNumRecords, CL_OUT ClUint32T* pBuffeLen, CL_OUT ClUint8T** pLogRecords);

typedef void (*LogClLogFileHdlrFileRecordsGetAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClStringT* fileName, CL_IN ClStringT* fileLocation, CL_IN ClUint16T  isDelete, CL_INOUT ClUint64T* pStartRec, CL_INOUT ClUint32T* version, CL_INOUT ClUint32T* pNumRecords, CL_OUT ClUint32T* pBuffeLen, CL_OUT ClUint8T** pLogRecords, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef LogClLogFileHdlrFileRecordsGetAsyncCallbackT_4_0_0 LogClLogFileHdlrFileRecordsGetAsyncCallbackT;

ClRcT clLogFileHdlrFileRecordsGetClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClStringT* fileName, CL_IN ClStringT* fileLocation, CL_IN ClUint16T  isDelete, CL_INOUT ClUint64T* pStartRec, CL_INOUT ClUint32T* version, CL_INOUT ClUint32T* pNumRecords, CL_OUT ClUint32T* pBuffeLen, CL_OUT ClUint8T** pLogRecords,CL_IN LogClLogFileHdlrFileRecordsGetAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clLogFileHdlrFileMetaDataGetClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClStringT* fileName, CL_IN ClStringT* fileLocation, CL_INOUT ClUint32T* version, CL_OUT ClLogStreamAttrIDLT_4_0_0* pStreamAttr, CL_OUT ClUint32T* pNumStreams, CL_OUT ClLogStreamMapT_4_0_0** pLogStreams);

typedef void (*LogClLogFileHdlrFileMetaDataGetAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClStringT* fileName, CL_IN ClStringT* fileLocation, CL_INOUT ClUint32T* version, CL_OUT ClLogStreamAttrIDLT_4_0_0* pStreamAttr, CL_OUT ClUint32T* pNumStreams, CL_OUT ClLogStreamMapT_4_0_0** pLogStreams, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef LogClLogFileHdlrFileMetaDataGetAsyncCallbackT_4_0_0 LogClLogFileHdlrFileMetaDataGetAsyncCallbackT;

ClRcT clLogFileHdlrFileMetaDataGetClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClStringT* fileName, CL_IN ClStringT* fileLocation, CL_INOUT ClUint32T* version, CL_OUT ClLogStreamAttrIDLT_4_0_0* pStreamAttr, CL_OUT ClUint32T* pNumStreams, CL_OUT ClLogStreamMapT_4_0_0** pLogStreams,CL_IN LogClLogFileHdlrFileMetaDataGetAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);


#ifdef __cplusplus
}
#endif
#endif /*_LOG_PORT_FILE_HDLR_CLIENT_H_*/
