
/*********************************************************************
* ModuleName  : idl
*********************************************************************/
/*********************************************************************
* Description : This file contains the declartions for client stub
*               routines
*     
* THIS FILE IS AUTO-GENERATED BY OPENCLOVIS IDE. EDIT THIS FILE AT
* YOUR OWN RISK. ANY CHANGE TO THIS FILE WILL BE OVERWRITTEN ON
* RE-GENERATION.
*     
*********************************************************************/
#ifndef _CKPT_EO_CKPT_SERVER_PEER_PEER_CLIENT_H_
#define _CKPT_EO_CKPT_SERVER_PEER_PEER_CLIENT_H_
#ifdef __cplusplus
extern "C" {
#endif
#include <clXdrApi.h>
#include <clIdlApi.h>
#include "../clientIDDefinitions.h"
#include "xdrClCkptIOVectorElementT.h"
#include "xdrCkptMasterDBClientInfoT.h"
#include "xdrCkptDynamicSyncupT.h"
#include "xdrCkptXlationDBEntryT.h"
#include "xdrCkptPeerListInfoT.h"
#include "xdrCkptCreateInfoT.h"
#include "xdrClCkptCheckpointCreationAttributesT.h"
#include "xdrClCkptSectionIdT.h"
#include "xdrCkptHdlDbT.h"
#include "xdrClCkptSectionDescriptorT.h"
#include "xdrCkptInfoT.h"
#include "xdrCkptMasterDBEntryIDLT.h"
#include "xdrCkptMasterDBInfoIDLT.h"
#include "xdrCkptOpenInfoT.h"
#include "xdrClCkptSectionCreationAttributesT.h"
#include "xdrClCkptCheckpointDescriptorT.h"
#include "xdrCkptDynamicInfoT.h"



typedef void (*CkptEoClCkptAllReplicaPresenceListUpdateAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClVersionT  inVersion, CL_IN ClHandleT  ckptActiveHdl, CL_IN ClUint32T  peerAddr, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptAllReplicaPresenceListUpdateAsyncCallbackT_4_0_0 CkptEoClCkptAllReplicaPresenceListUpdateAsyncCallbackT;

ClRcT clCkptAllReplicaPresenceListUpdateClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClVersionT  inVersion, CL_IN ClHandleT  ckptActiveHdl, CL_IN ClUint32T  peerAddr,CL_IN CkptEoClCkptAllReplicaPresenceListUpdateAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

typedef void (*CkptEoClCkptRemSvrWelcomeAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClUint32T  peerAddr, CL_IN ClUint8T  credential, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptRemSvrWelcomeAsyncCallbackT_4_0_0 CkptEoClCkptRemSvrWelcomeAsyncCallbackT;

ClRcT clCkptRemSvrWelcomeClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClUint32T  peerAddr, CL_IN ClUint8T  credential,CL_IN CkptEoClCkptRemSvrWelcomeAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

typedef void (*CkptEoClCkptRemSvrByeAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClVersionT  pVersion, CL_IN ClUint32T  peerAddr, CL_IN ClUint32T  portId, CL_IN ClUint32T  flags, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptRemSvrByeAsyncCallbackT_4_0_0 CkptEoClCkptRemSvrByeAsyncCallbackT;

ClRcT clCkptRemSvrByeClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClVersionT  pVersion, CL_IN ClUint32T  peerAddr, CL_IN ClUint32T  portId, CL_IN ClUint32T  flags,CL_IN CkptEoClCkptRemSvrByeAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

typedef void (*CkptEoClCkptNackReceiveAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClVersionT  version, CL_IN ClUint32T  nackId, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptNackReceiveAsyncCallbackT_4_0_0 CkptEoClCkptNackReceiveAsyncCallbackT;

ClRcT clCkptNackReceiveClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClVersionT  version, CL_IN ClUint32T  nackId,CL_IN CkptEoClCkptNackReceiveAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptMasterStatusInfoGetClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptActiveHdl, CL_OUT ClInt64T* time, CL_OUT ClUint32T* actAddr, CL_OUT ClUint32T* refCount, CL_OUT ClUint8T* flag);


#ifdef __cplusplus
}
#endif
#endif /*_CKPT_EO_CKPT_SERVER_PEER_PEER_CLIENT_H_*/
