
/*********************************************************************
* ModuleName  : idl
*********************************************************************/
/*********************************************************************
* Description : This file contains the declartions for client stub
*               routines
*     
* THIS FILE IS AUTO-GENERATED BY OPENCLOVIS IDE. EDIT THIS FILE AT
* YOUR OWN RISK. ANY CHANGE TO THIS FILE WILL BE OVERWRITTEN ON
* RE-GENERATION.
*     
*********************************************************************/
#ifndef _CKPT_EO_CKPT_SERVER_ACTIVE_PEER_CLIENT_H_
#define _CKPT_EO_CKPT_SERVER_ACTIVE_PEER_CLIENT_H_
#ifdef __cplusplus
extern "C" {
#endif
#include <clXdrApi.h>
#include <clIdlApi.h>
#include "../clientIDDefinitions.h"
#include "xdrClCkptIOVectorElementT.h"
#include "xdrCkptMasterDBClientInfoT.h"
#include "xdrCkptDynamicSyncupT.h"
#include "xdrCkptXlationDBEntryT.h"
#include "xdrCkptSectionInfoT.h"
#include "xdrCkptPeerListInfoT.h"
#include "xdrCkptCreateInfoT.h"
#include "xdrCkptCPInfoT.h"
#include "xdrClCkptCheckpointCreationAttributesT.h"
#include "xdrClCkptSectionIdT.h"
#include "xdrCkptHdlDbT.h"
#include "xdrCkptDPInfoT.h"
#include "xdrClCkptSectionDescriptorT.h"
#include "xdrCkptInfoT.h"
#include "xdrCkptMasterDBEntryIDLT.h"
#include "xdrCkptMasterDBInfoIDLT.h"
#include "xdrCkptOpenInfoT.h"
#include "xdrClCkptSectionCreationAttributesT.h"
#include "xdrClCkptCheckpointDescriptorT.h"
#include "xdrCkptUpdateFlagT.h"
#include "xdrCkptDynamicInfoT.h"



typedef void (*CkptEoClCkptRemSvrCkptInfoSyncAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptActHdl, CL_IN ClNameT* pCkptName, CL_IN CkptCPInfoT_4_0_0* pCpInfo, CL_IN CkptDPInfoT_4_0_0* pDpInfo, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptRemSvrCkptInfoSyncAsyncCallbackT_4_0_0 CkptEoClCkptRemSvrCkptInfoSyncAsyncCallbackT;

ClRcT clCkptRemSvrCkptInfoSyncClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptActHdl, CL_IN ClNameT* pCkptName, CL_IN CkptCPInfoT_4_0_0* pCpInfo, CL_IN CkptDPInfoT_4_0_0* pDpInfo,CL_IN CkptEoClCkptRemSvrCkptInfoSyncAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

typedef void (*CkptEoClCkptRemSvrCkptInfoSyncAsyncCallbackT_5_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptActHdl, CL_IN ClNameT* pCkptName, CL_IN CkptCPInfoT_5_0_0* pCpInfo, CL_IN CkptDPInfoT_4_0_0* pDpInfo, CL_IN ClRcT rc, CL_IN void* pCookie);

ClRcT clCkptRemSvrCkptInfoSyncClientAsync_5_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptActHdl, CL_IN ClNameT* pCkptName, CL_IN CkptCPInfoT_5_0_0* pCpInfo, CL_IN CkptDPInfoT_4_0_0* pDpInfo,CL_IN CkptEoClCkptRemSvrCkptInfoSyncAsyncCallbackT_5_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptRemSvrCkptInfoGetClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT ckptActHdl, CL_IN ClUint32T peerAddr, CL_OUT CkptInfoT_4_0_0* pCkptInfo);

typedef void (*CkptEoClCkptRemSvrCkptInfoGetAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptActHdl, CL_IN ClUint32T  peerAddr, CL_OUT CkptInfoT_4_0_0* pCkptInfo, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptRemSvrCkptInfoGetAsyncCallbackT_4_0_0 CkptEoClCkptRemSvrCkptInfoGetAsyncCallbackT;

ClRcT clCkptRemSvrCkptInfoGetClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptActHdl, CL_IN ClUint32T  peerAddr, CL_OUT CkptInfoT_4_0_0* pCkptInfo,CL_IN CkptEoClCkptRemSvrCkptInfoGetAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptRemSvrCkptInfoGetClientSync_5_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT ckptActHdl, CL_IN ClUint32T peerAddr, CL_OUT CkptInfoT_5_0_0* pCkptInfo);

typedef void (*CkptEoClCkptRemSvrCkptInfoGetAsyncCallbackT_5_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptActHdl, CL_IN ClUint32T  peerAddr, CL_OUT CkptInfoT_5_0_0* pCkptInfo, CL_IN ClRcT rc, CL_IN void* pCookie);

ClRcT clCkptRemSvrCkptInfoGetClientAsync_5_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptActHdl, CL_IN ClUint32T  peerAddr, CL_OUT CkptInfoT_5_0_0* pCkptInfo,CL_IN CkptEoClCkptRemSvrCkptInfoGetAsyncCallbackT_5_0_0 fpAsyncCallback, CL_IN void *cookie);

typedef void (*CkptEoClCkptRemSvrSectionInfoUpdateAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptActHdl, CL_IN CkptUpdateFlagT_4_0_0  updateFlag, CL_IN CkptSectionInfoT_4_0_0* pSecInfo, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptRemSvrSectionInfoUpdateAsyncCallbackT_4_0_0 CkptEoClCkptRemSvrSectionInfoUpdateAsyncCallbackT;

ClRcT clCkptRemSvrSectionInfoUpdateClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptActHdl, CL_IN CkptUpdateFlagT_4_0_0  updateFlag, CL_IN CkptSectionInfoT_4_0_0* pSecInfo,CL_IN CkptEoClCkptRemSvrSectionInfoUpdateAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

typedef void (*CkptEoClCkptRemSvrCkptDeleteAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptActHdl, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptRemSvrCkptDeleteAsyncCallbackT_4_0_0 CkptEoClCkptRemSvrCkptDeleteAsyncCallbackT;

ClRcT clCkptRemSvrCkptDeleteClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptActHdl,CL_IN CkptEoClCkptRemSvrCkptDeleteAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

typedef void (*CkptEoClCkptRemSvrCkptWriteAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  portId, CL_IN ClUint32T  numberOfElements, CL_IN ClCkptIOVectorElementT_4_0_0* pIoVector, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptRemSvrCkptWriteAsyncCallbackT_4_0_0 CkptEoClCkptRemSvrCkptWriteAsyncCallbackT;

ClRcT clCkptRemSvrCkptWriteClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  portId, CL_IN ClUint32T  numberOfElements, CL_IN ClCkptIOVectorElementT_4_0_0* pIoVector,CL_IN CkptEoClCkptRemSvrCkptWriteAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

typedef void (*CkptEoClCkptRemSvrSectionExpTimeSetAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptHdl, CL_IN ClCkptSectionIdT_4_0_0* sectionId, CL_IN ClInt64T  exprTime, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptRemSvrSectionExpTimeSetAsyncCallbackT_4_0_0 CkptEoClCkptRemSvrSectionExpTimeSetAsyncCallbackT;

ClRcT clCkptRemSvrSectionExpTimeSetClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptHdl, CL_IN ClCkptSectionIdT_4_0_0* sectionId, CL_IN ClInt64T  exprTime,CL_IN CkptEoClCkptRemSvrSectionExpTimeSetAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

typedef void (*CkptEoClCkptCheckpointReplicaRemoveAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptActiveHdl, CL_IN ClUint32T  replicaAddr, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptCheckpointReplicaRemoveAsyncCallbackT_4_0_0 CkptEoClCkptCheckpointReplicaRemoveAsyncCallbackT;

ClRcT clCkptCheckpointReplicaRemoveClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptActiveHdl, CL_IN ClUint32T  replicaAddr,CL_IN CkptEoClCkptCheckpointReplicaRemoveAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

typedef void (*CkptEoClCkptReplicaAppInfoNotifyAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptActiveHdl, CL_IN ClUint32T  replicaAddr, CL_IN ClUint32T  portId, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptReplicaAppInfoNotifyAsyncCallbackT_4_0_0 CkptEoClCkptReplicaAppInfoNotifyAsyncCallbackT;

ClRcT clCkptReplicaAppInfoNotifyClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptActiveHdl, CL_IN ClUint32T  replicaAddr, CL_IN ClUint32T  portId,CL_IN CkptEoClCkptReplicaAppInfoNotifyAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptActiveCallbackNotifyClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptActiveHdl, CL_IN ClUint32T replicaAddr, CL_IN ClUint32T portId);

typedef void (*CkptEoClCkptActiveCallbackNotifyAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptActiveHdl, CL_IN ClUint32T  replicaAddr, CL_IN ClUint32T  portId, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptActiveCallbackNotifyAsyncCallbackT_4_0_0 CkptEoClCkptActiveCallbackNotifyAsyncCallbackT;

ClRcT clCkptActiveCallbackNotifyClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptActiveHdl, CL_IN ClUint32T  replicaAddr, CL_IN ClUint32T  portId,CL_IN CkptEoClCkptActiveCallbackNotifyAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);


#ifdef __cplusplus
}
#endif
#endif /*_CKPT_EO_CKPT_SERVER_ACTIVE_PEER_CLIENT_H_*/
