
/*********************************************************************
* ModuleName  : idl
*********************************************************************/
/*********************************************************************
* Description : This file contains the declartions for client stub
*               routines
*     
* THIS FILE IS AUTO-GENERATED BY OPENCLOVIS IDE. EDIT THIS FILE AT
* YOUR OWN RISK. ANY CHANGE TO THIS FILE WILL BE OVERWRITTEN ON
* RE-GENERATION.
*     
*********************************************************************/
#ifndef _CKPT_EO_CKPT_SERVER_EXT_CLI_SERVER_FUNC_CLIENT_H_
#define _CKPT_EO_CKPT_SERVER_EXT_CLI_SERVER_FUNC_CLIENT_H_
#ifdef __cplusplus
extern "C" {
#endif
#include <clXdrApi.h>
#include <clIdlApi.h>
#include "../clientIDDefinitions.h"
#include "xdrCkptPeerListInfoT.h"
#include "xdrCkptCPInfoT.h"
#include "xdrClCkptIOVectorElementT.h"
#include "xdrClCkptSectionIdT.h"
#include "xdrCkptMasterDBEntryIDLT.h"
#include "xdrCkptDPInfoT.h"
#include "xdrCkptCreateInfoT.h"
#include "xdrClCkptSectionDescriptorT.h"
#include "xdrCkptMasterDBInfoIDLT.h"
#include "xdrCkptXlationDBEntryT.h"
#include "xdrCkptHdlDbT.h"
#include "xdrClCkptDifferenceIOVectorElementT.h"
#include "xdrCkptInfoT.h"
#include "xdrCkptOpenInfoT.h"
#include "xdrClCkptCheckpointDescriptorT.h"
#include "xdrCkptUpdateFlagT.h"
#include "xdrCkptDynamicInfoT.h"
#include "xdrCkptMasterDBClientInfoT.h"
#include "xdrCkptDynamicSyncupT.h"
#include "xdrCkptSectionInfoT.h"
#include "xdrClCkptCheckpointCreationAttributesT.h"
#include "xdrClCkptSectionCreationAttributesT.h"



ClRcT _ckptCheckpointWriteVectorClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptHandle, CL_IN ClUint32T nodeAddr, CL_IN ClUint32T portId, CL_IN ClUint32T numberOfElements, CL_IN ClCkptDifferenceIOVectorElementT_4_0_0* pDifferenceIoVector, CL_OUT ClUint32T* pError, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEo_ckptCheckpointWriteVectorAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  portId, CL_IN ClUint32T  numberOfElements, CL_IN ClCkptDifferenceIOVectorElementT_4_0_0* pDifferenceIoVector, CL_OUT ClUint32T* pError, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEo_ckptCheckpointWriteVectorAsyncCallbackT_4_0_0 CkptEo_ckptCheckpointWriteVectorAsyncCallbackT;

ClRcT _ckptCheckpointWriteVectorClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  portId, CL_IN ClUint32T  numberOfElements, CL_IN ClCkptDifferenceIOVectorElementT_4_0_0* pDifferenceIoVector, CL_OUT ClUint32T* pError, CL_INOUT ClVersionT* pVersion,CL_IN CkptEo_ckptCheckpointWriteVectorAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT _ckptSectionOverwriteVectorClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptHandle, CL_IN ClUint32T nodeAddr, CL_IN ClUint32T portId, CL_IN ClUint16T srcClient, CL_IN ClCkptSectionIdT_4_0_0* pSecId, CL_IN ClInt64T expryTime, CL_IN ClUint64T dataSize, CL_IN ClDifferenceVectorT* pDifferenceVector, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEo_ckptSectionOverwriteVectorAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  portId, CL_IN ClUint16T  srcClient, CL_IN ClCkptSectionIdT_4_0_0* pSecId, CL_IN ClInt64T  expryTime, CL_IN ClUint64T  dataSize, CL_IN ClDifferenceVectorT* pDifferenceVector, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEo_ckptSectionOverwriteVectorAsyncCallbackT_4_0_0 CkptEo_ckptSectionOverwriteVectorAsyncCallbackT;

ClRcT _ckptSectionOverwriteVectorClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  portId, CL_IN ClUint16T  srcClient, CL_IN ClCkptSectionIdT_4_0_0* pSecId, CL_IN ClInt64T  expryTime, CL_IN ClUint64T  dataSize, CL_IN ClDifferenceVectorT* pDifferenceVector, CL_INOUT ClVersionT* pVersion,CL_IN CkptEo_ckptSectionOverwriteVectorAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

typedef void (*CkptEoClCkptRemSvrCkptWriteVectorAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  portId, CL_IN ClUint32T  numberOfElements, CL_IN ClCkptDifferenceIOVectorElementT_4_0_0* pDifferenceIoVector, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptRemSvrCkptWriteVectorAsyncCallbackT_4_0_0 CkptEoClCkptRemSvrCkptWriteVectorAsyncCallbackT;

ClRcT clCkptRemSvrCkptWriteVectorClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  portId, CL_IN ClUint32T  numberOfElements, CL_IN ClCkptDifferenceIOVectorElementT_4_0_0* pDifferenceIoVector,CL_IN CkptEoClCkptRemSvrCkptWriteVectorAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);


#ifdef __cplusplus
}
#endif
#endif /*_CKPT_EO_CKPT_SERVER_EXT_CLI_SERVER_FUNC_CLIENT_H_*/
