
/*********************************************************************
* ModuleName  : idl
*********************************************************************/
/*********************************************************************
* Description : This file contains the declartions for client stub
*               routines
*     
* THIS FILE IS AUTO-GENERATED BY OPENCLOVIS IDE. EDIT THIS FILE AT
* YOUR OWN RISK. ANY CHANGE TO THIS FILE WILL BE OVERWRITTEN ON
* RE-GENERATION.
*     
*********************************************************************/
#ifndef _CKPT_EO_CKPT_SERVER_CLI_SERVER_FUNC_CLIENT_H_
#define _CKPT_EO_CKPT_SERVER_CLI_SERVER_FUNC_CLIENT_H_
#ifdef __cplusplus
extern "C" {
#endif
#include <clXdrApi.h>
#include <clIdlApi.h>
#include "../clientIDDefinitions.h"
#include "xdrClCkptIOVectorElementT.h"
#include "xdrClCkptCheckpointCreationAttributesT.h"
#include "xdrClCkptSectionIdT.h"
#include "xdrCkptHdlDbT.h"
#include "xdrClCkptSectionDescriptorT.h"
#include "xdrClCkptSectionCreationAttributesT.h"
#include "xdrClCkptCheckpointDescriptorT.h"



ClRcT clCkptMasterCkptOpenClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT ckptSvcHdl, CL_IN ClNameT* pCkptName, CL_IN ClCkptCheckpointCreationAttributesT_4_0_0* pCheckpointCreationAtrributes, CL_IN ClUint32T checkpointOpenFlags, CL_IN ClUint32T localAddr, CL_IN ClUint32T portId, CL_OUT CkptHdlDbT_4_0_0* pHdlInfo);

typedef void (*CkptEoClCkptMasterCkptOpenAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptSvcHdl, CL_IN ClNameT* pCkptName, CL_IN ClCkptCheckpointCreationAttributesT_4_0_0* pCheckpointCreationAtrributes, CL_IN ClUint32T  checkpointOpenFlags, CL_IN ClUint32T  localAddr, CL_IN ClUint32T  portId, CL_OUT CkptHdlDbT_4_0_0* pHdlInfo, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptMasterCkptOpenAsyncCallbackT_4_0_0 CkptEoClCkptMasterCkptOpenAsyncCallbackT;

ClRcT clCkptMasterCkptOpenClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptSvcHdl, CL_IN ClNameT* pCkptName, CL_IN ClCkptCheckpointCreationAttributesT_4_0_0* pCheckpointCreationAtrributes, CL_IN ClUint32T  checkpointOpenFlags, CL_IN ClUint32T  localAddr, CL_IN ClUint32T  portId, CL_OUT CkptHdlDbT_4_0_0* pHdlInfo,CL_IN CkptEoClCkptMasterCkptOpenAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptMasterCkptCloseClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptHandle, CL_IN ClUint32T localAddr, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEoClCkptMasterCkptCloseAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  localAddr, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptMasterCkptCloseAsyncCallbackT_4_0_0 CkptEoClCkptMasterCkptCloseAsyncCallbackT;

ClRcT clCkptMasterCkptCloseClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  localAddr, CL_INOUT ClVersionT* pVersion,CL_IN CkptEoClCkptMasterCkptCloseAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptMasterCkptUnlinkClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClNameT* pCkptName, CL_IN ClUint32T localAddr, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEoClCkptMasterCkptUnlinkAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClNameT* pCkptName, CL_IN ClUint32T  localAddr, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptMasterCkptUnlinkAsyncCallbackT_4_0_0 CkptEoClCkptMasterCkptUnlinkAsyncCallbackT;

ClRcT clCkptMasterCkptUnlinkClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClNameT* pCkptName, CL_IN ClUint32T  localAddr, CL_INOUT ClVersionT* pVersion,CL_IN CkptEoClCkptMasterCkptUnlinkAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT _ckptCheckpointStatusGetClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptHandle, CL_OUT ClCkptCheckpointDescriptorT_4_0_0* ckptStatusGet, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEo_ckptCheckpointStatusGetAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_OUT ClCkptCheckpointDescriptorT_4_0_0* ckptStatusGet, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEo_ckptCheckpointStatusGetAsyncCallbackT_4_0_0 CkptEo_ckptCheckpointStatusGetAsyncCallbackT;

ClRcT _ckptCheckpointStatusGetClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_OUT ClCkptCheckpointDescriptorT_4_0_0* ckptStatusGet, CL_INOUT ClVersionT* pVersion,CL_IN CkptEo_ckptCheckpointStatusGetAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT _ckptSectionCreateClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptActHandle, CL_IN ClUint16T srcClient, CL_IN ClCkptSectionCreationAttributesT_4_0_0* pSecCreationAttr, CL_IN ClUint8T* pData, CL_IN ClUint64T dataSize, CL_INOUT ClVersionT* pVersion, CL_INOUT ClUint32T* index);

typedef void (*CkptEo_ckptSectionCreateAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptActHandle, CL_IN ClUint16T  srcClient, CL_IN ClCkptSectionCreationAttributesT_4_0_0* pSecCreationAttr, CL_IN ClUint8T* pData, CL_IN ClUint64T  dataSize, CL_INOUT ClVersionT* pVersion, CL_INOUT ClUint32T* index, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEo_ckptSectionCreateAsyncCallbackT_4_0_0 CkptEo_ckptSectionCreateAsyncCallbackT;

ClRcT _ckptSectionCreateClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptActHandle, CL_IN ClUint16T  srcClient, CL_IN ClCkptSectionCreationAttributesT_4_0_0* pSecCreationAttr, CL_IN ClUint8T* pData, CL_IN ClUint64T  dataSize, CL_INOUT ClVersionT* pVersion, CL_INOUT ClUint32T* index,CL_IN CkptEo_ckptSectionCreateAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT _ckptSectionDeleteClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptHandle, CL_IN ClUint16T srcClient, CL_IN ClCkptSectionIdT_4_0_0* sectionId, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEo_ckptSectionDeleteAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClUint16T  srcClient, CL_IN ClCkptSectionIdT_4_0_0* sectionId, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEo_ckptSectionDeleteAsyncCallbackT_4_0_0 CkptEo_ckptSectionDeleteAsyncCallbackT;

ClRcT _ckptSectionDeleteClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClUint16T  srcClient, CL_IN ClCkptSectionIdT_4_0_0* sectionId, CL_INOUT ClVersionT* pVersion,CL_IN CkptEo_ckptSectionDeleteAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT _ckptCheckpointWriteClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptHandle, CL_IN ClUint32T nodeAddr, CL_IN ClUint32T portId, CL_IN ClUint32T numberOfElements, CL_IN ClCkptIOVectorElementT_4_0_0* pIoVector, CL_OUT ClUint32T* pError, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEo_ckptCheckpointWriteAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  portId, CL_IN ClUint32T  numberOfElements, CL_IN ClCkptIOVectorElementT_4_0_0* pIoVector, CL_OUT ClUint32T* pError, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEo_ckptCheckpointWriteAsyncCallbackT_4_0_0 CkptEo_ckptCheckpointWriteAsyncCallbackT;

ClRcT _ckptCheckpointWriteClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  portId, CL_IN ClUint32T  numberOfElements, CL_IN ClCkptIOVectorElementT_4_0_0* pIoVector, CL_OUT ClUint32T* pError, CL_INOUT ClVersionT* pVersion,CL_IN CkptEo_ckptCheckpointWriteAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT _ckptSectionOverwriteClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptHandle, CL_IN ClUint32T nodeAddr, CL_IN ClUint32T portId, CL_IN ClUint16T srcClient, CL_IN ClCkptSectionIdT_4_0_0* pSecId, CL_IN ClInt64T expryTime, CL_IN ClUint64T dataSize, CL_IN ClUint8T* pData, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEo_ckptSectionOverwriteAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  portId, CL_IN ClUint16T  srcClient, CL_IN ClCkptSectionIdT_4_0_0* pSecId, CL_IN ClInt64T  expryTime, CL_IN ClUint64T  dataSize, CL_IN ClUint8T* pData, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEo_ckptSectionOverwriteAsyncCallbackT_4_0_0 CkptEo_ckptSectionOverwriteAsyncCallbackT;

ClRcT _ckptSectionOverwriteClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  portId, CL_IN ClUint16T  srcClient, CL_IN ClCkptSectionIdT_4_0_0* pSecId, CL_IN ClInt64T  expryTime, CL_IN ClUint64T  dataSize, CL_IN ClUint8T* pData, CL_INOUT ClVersionT* pVersion,CL_IN CkptEo_ckptSectionOverwriteAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT _ckptCheckpointReadClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptHandle, CL_IN ClCkptIOVectorElementT_4_0_0* pInIOVector, CL_IN ClUint32T numberOfElements, CL_OUT ClCkptIOVectorElementT_4_0_0* pIoVector, CL_OUT ClUint32T* pError, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEo_ckptCheckpointReadAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClCkptIOVectorElementT_4_0_0* pInIOVector, CL_IN ClUint32T  numberOfElements, CL_OUT ClCkptIOVectorElementT_4_0_0* pIoVector, CL_OUT ClUint32T* pError, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEo_ckptCheckpointReadAsyncCallbackT_4_0_0 CkptEo_ckptCheckpointReadAsyncCallbackT;

ClRcT _ckptCheckpointReadClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClCkptIOVectorElementT_4_0_0* pInIOVector, CL_IN ClUint32T  numberOfElements, CL_OUT ClCkptIOVectorElementT_4_0_0* pIoVector, CL_OUT ClUint32T* pError, CL_INOUT ClVersionT* pVersion,CL_IN CkptEo_ckptCheckpointReadAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptSvrIterationInitializeClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT ckptHandle, CL_IN ClInt32T secChosen, CL_IN ClInt64T exprTime, CL_OUT ClUint32T* pSecCount, CL_OUT ClCkptSectionIdT_4_0_0** pSecId);

typedef void (*CkptEoClCkptSvrIterationInitializeAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptHandle, CL_IN ClInt32T  secChosen, CL_IN ClInt64T  exprTime, CL_OUT ClUint32T* pSecCount, CL_OUT ClCkptSectionIdT_4_0_0** pSecId, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptSvrIterationInitializeAsyncCallbackT_4_0_0 CkptEoClCkptSvrIterationInitializeAsyncCallbackT;

ClRcT clCkptSvrIterationInitializeClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  ckptHandle, CL_IN ClInt32T  secChosen, CL_IN ClInt64T  exprTime, CL_OUT ClUint32T* pSecCount, CL_OUT ClCkptSectionIdT_4_0_0** pSecId,CL_IN CkptEoClCkptSvrIterationInitializeAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT _ckptIterationNextGetClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptHandle, CL_IN ClCkptSectionIdT_4_0_0* pSecId, CL_OUT ClCkptSectionDescriptorT_4_0_0* pSecDescriptor, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEo_ckptIterationNextGetAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClCkptSectionIdT_4_0_0* pSecId, CL_OUT ClCkptSectionDescriptorT_4_0_0* pSecDescriptor, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEo_ckptIterationNextGetAsyncCallbackT_4_0_0 CkptEo_ckptIterationNextGetAsyncCallbackT;

ClRcT _ckptIterationNextGetClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClCkptSectionIdT_4_0_0* pSecId, CL_OUT ClCkptSectionDescriptorT_4_0_0* pSecDescriptor, CL_INOUT ClVersionT* pVersion,CL_IN CkptEo_ckptIterationNextGetAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptMasterActiveReplicaSetClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptHandle, CL_IN ClUint32T localAddr, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEoClCkptMasterActiveReplicaSetAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  localAddr, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptMasterActiveReplicaSetAsyncCallbackT_4_0_0 CkptEoClCkptMasterActiveReplicaSetAsyncCallbackT;

ClRcT clCkptMasterActiveReplicaSetClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  localAddr, CL_INOUT ClVersionT* pVersion,CL_IN CkptEoClCkptMasterActiveReplicaSetAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptMasterActiveReplicaSetSwitchOverClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptHandle, CL_IN ClUint32T localAddr, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEoClCkptMasterActiveReplicaSetSwitchOverAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  localAddr, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptMasterActiveReplicaSetSwitchOverAsyncCallbackT_4_0_0 CkptEoClCkptMasterActiveReplicaSetSwitchOverAsyncCallbackT;

ClRcT clCkptMasterActiveReplicaSetSwitchOverClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  localAddr, CL_INOUT ClVersionT* pVersion,CL_IN CkptEoClCkptMasterActiveReplicaSetSwitchOverAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptMasterCkptRetentionDurationSetClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptHandle, CL_IN ClInt64T retentionDuration, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEoClCkptMasterCkptRetentionDurationSetAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClInt64T  retentionDuration, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptMasterCkptRetentionDurationSetAsyncCallbackT_4_0_0 CkptEoClCkptMasterCkptRetentionDurationSetAsyncCallbackT;

ClRcT clCkptMasterCkptRetentionDurationSetClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClInt64T  retentionDuration, CL_INOUT ClVersionT* pVersion,CL_IN CkptEoClCkptMasterCkptRetentionDurationSetAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT _ckptCheckpointSynchronizeClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptHandle, CL_IN ClInt64T timeout, CL_IN ClUint16T flag, CL_IN ClHandleT ckptLocalHandle, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEo_ckptCheckpointSynchronizeAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClInt64T  timeout, CL_IN ClUint16T  flag, CL_IN ClHandleT  ckptLocalHandle, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEo_ckptCheckpointSynchronizeAsyncCallbackT_4_0_0 CkptEo_ckptCheckpointSynchronizeAsyncCallbackT;

ClRcT _ckptCheckpointSynchronizeClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClInt64T  timeout, CL_IN ClUint16T  flag, CL_IN ClHandleT  ckptLocalHandle, CL_INOUT ClVersionT* pVersion,CL_IN CkptEo_ckptCheckpointSynchronizeAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT _ckptSectionExpirationTimeSetClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptHandle, CL_IN ClCkptSectionIdT_4_0_0* pSectionId, CL_IN ClInt64T expryTime, CL_INOUT ClVersionT* pVersion);

typedef void (*CkptEo_ckptSectionExpirationTimeSetAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClCkptSectionIdT_4_0_0* pSectionId, CL_IN ClInt64T  expryTime, CL_INOUT ClVersionT* pVersion, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEo_ckptSectionExpirationTimeSetAsyncCallbackT_4_0_0 CkptEo_ckptSectionExpirationTimeSetAsyncCallbackT;

ClRcT _ckptSectionExpirationTimeSetClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClCkptSectionIdT_4_0_0* pSectionId, CL_IN ClInt64T  expryTime, CL_INOUT ClVersionT* pVersion,CL_IN CkptEo_ckptSectionExpirationTimeSetAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptMasterActiveAddrGetClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT masterHdl, CL_OUT ClUint32T* pNodeAddr);

typedef void (*CkptEoClCkptMasterActiveAddrGetAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  masterHdl, CL_OUT ClUint32T* pNodeAddr, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptMasterActiveAddrGetAsyncCallbackT_4_0_0 CkptEoClCkptMasterActiveAddrGetAsyncCallbackT;

ClRcT clCkptMasterActiveAddrGetClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClHandleT  masterHdl, CL_OUT ClUint32T* pNodeAddr,CL_IN CkptEoClCkptMasterActiveAddrGetAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT clCkptServerFinalizeClientSync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClUint32T nodeAddr, CL_IN ClUint32T iocPort);

typedef void (*CkptEoClCkptServerFinalizeAsyncCallbackT_4_0_0) (CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  iocPort, CL_IN ClRcT rc, CL_IN void* pCookie);

typedef CkptEoClCkptServerFinalizeAsyncCallbackT_4_0_0 CkptEoClCkptServerFinalizeAsyncCallbackT;

ClRcT clCkptServerFinalizeClientAsync_4_0_0(CL_IN ClIdlHandleT handle, CL_INOUT ClVersionT* pVersion, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  iocPort,CL_IN CkptEoClCkptServerFinalizeAsyncCallbackT_4_0_0 fpAsyncCallback, CL_IN void *cookie);

ClRcT _ckptSectionCheckClientSync_5_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT ckptHandle, CL_IN ClCkptSectionIdT_4_0_0* pSecId);

typedef void (*CkptEo_ckptSectionCheckAsyncCallbackT_5_0_0) (CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClCkptSectionIdT_4_0_0* pSecId, CL_IN ClRcT rc, CL_IN void* pCookie);

ClRcT _ckptSectionCheckClientAsync_5_0_0(CL_IN ClIdlHandleT handle, CL_IN ClHandleT  ckptHandle, CL_IN ClCkptSectionIdT_4_0_0* pSecId,CL_IN CkptEo_ckptSectionCheckAsyncCallbackT_5_0_0 fpAsyncCallback, CL_IN void *cookie);


#ifdef __cplusplus
}
#endif
#endif /*_CKPT_EO_CKPT_SERVER_CLI_SERVER_FUNC_CLIENT_H_*/
