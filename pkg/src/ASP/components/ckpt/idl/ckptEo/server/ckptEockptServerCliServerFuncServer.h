
/*********************************************************************
* File: 
*********************************************************************/
/*********************************************************************
* Description : This file contains the declartions for server stub
*               routines
*     
* THIS FILE IS AUTO-GENERATED BY OPENCLOVIS IDE. EDIT THIS FILE AT
* YOUR OWN RISK. ANY CHANGE TO THIS FILE WILL BE OVERWRITTEN ON
* RE-GENERATION.
*     
*********************************************************************/

#ifndef _CKPTEOCKPTSERVERCLISERVERFUNC_SERVER_H_
#define _CKPTEOCKPTSERVERCLISERVERFUNC_SERVER_H_
#ifdef __cplusplus
extern "C" {
#endif
#include <clXdrApi.h>
#include <clIdlApi.h>
#include <ipi/clRmdIpi.h>
#include "../clientIDDefinitions.h"
#include "xdrClCkptIOVectorElementT.h"
#include "xdrClCkptCheckpointCreationAttributesT.h"
#include "xdrClCkptSectionIdT.h"
#include "xdrCkptHdlDbT.h"
#include "xdrClCkptSectionDescriptorT.h"
#include "xdrClCkptSectionCreationAttributesT.h"
#include "xdrClCkptCheckpointDescriptorT.h"



ClRcT clCkptMasterCkptOpen_4_0_0(CL_INOUT ClVersionT*  pVersion, CL_IN ClHandleT  ckptSvcHdl, CL_IN ClNameT*  pCkptName, CL_IN ClCkptCheckpointCreationAttributesT_4_0_0*  pCheckpointCreationAtrributes, CL_IN ClUint32T  checkpointOpenFlags, CL_IN ClUint32T  localAddr, CL_IN ClUint32T  portId, CL_OUT CkptHdlDbT_4_0_0*  pHdlInfo);

ClRcT clCkptMasterCkptOpenResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion,CL_OUT  CkptHdlDbT_4_0_0  pHdlInfo);

ClRcT clCkptMasterCkptClose_4_0_0(CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  localAddr, CL_INOUT ClVersionT*  pVersion);

ClRcT clCkptMasterCkptCloseResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion);

ClRcT clCkptMasterCkptUnlink_4_0_0(CL_IN ClNameT*  pCkptName, CL_IN ClUint32T  localAddr, CL_INOUT ClVersionT*  pVersion);

ClRcT clCkptMasterCkptUnlinkResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion);

ClRcT _ckptCheckpointStatusGet_4_0_0(CL_IN ClHandleT  ckptHandle, CL_OUT ClCkptCheckpointDescriptorT_4_0_0*  ckptStatusGet, CL_INOUT ClVersionT*  pVersion);

ClRcT _ckptCheckpointStatusGetResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_OUT  ClCkptCheckpointDescriptorT_4_0_0  ckptStatusGet,CL_INOUT  ClVersionT  pVersion);

ClRcT _ckptSectionCreate_4_0_0(CL_IN ClHandleT  ckptActHandle, CL_IN ClUint16T  srcClient, CL_IN ClCkptSectionCreationAttributesT_4_0_0*  pSecCreationAttr, CL_IN ClUint8T*  pData, CL_IN ClUint64T  dataSize, CL_INOUT ClVersionT*  pVersion, CL_INOUT ClUint32T*  index);

ClRcT _ckptSectionCreateResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion,CL_INOUT  ClUint32T  index);

ClRcT _ckptSectionDelete_4_0_0(CL_IN ClHandleT  ckptHandle, CL_IN ClUint16T  srcClient, CL_IN ClCkptSectionIdT_4_0_0*  sectionId, CL_INOUT ClVersionT*  pVersion);

ClRcT _ckptSectionDeleteResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion);

ClRcT _ckptCheckpointWrite_4_0_0(CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  portId, CL_IN ClUint32T  numberOfElements, CL_IN ClCkptIOVectorElementT_4_0_0*  pIoVector, CL_OUT ClUint32T*  pError, CL_INOUT ClVersionT*  pVersion);

ClRcT _ckptCheckpointWriteResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_OUT  ClUint32T  pError,CL_INOUT  ClVersionT  pVersion);

ClRcT _ckptSectionOverwrite_4_0_0(CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  portId, CL_IN ClUint16T  srcClient, CL_IN ClCkptSectionIdT_4_0_0*  pSecId, CL_IN ClInt64T  expryTime, CL_IN ClUint64T  dataSize, CL_IN ClUint8T*  pData, CL_INOUT ClVersionT*  pVersion);

ClRcT _ckptSectionOverwriteResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion);

ClRcT _ckptCheckpointRead_4_0_0(CL_IN ClHandleT  ckptHandle, CL_IN ClCkptIOVectorElementT_4_0_0*  pInIOVector, CL_IN ClUint32T  numberOfElements, CL_OUT ClCkptIOVectorElementT_4_0_0*  pIoVector, CL_OUT ClUint32T*  pError, CL_INOUT ClVersionT*  pVersion);

ClRcT _ckptCheckpointReadResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_IN ClUint32T numberOfElements,CL_OUT ClCkptIOVectorElementT_4_0_0*  pIoVector,CL_OUT  ClUint32T  pError,CL_INOUT  ClVersionT  pVersion);

ClRcT clCkptSvrIterationInitialize_4_0_0(CL_INOUT ClVersionT*  pVersion, CL_IN ClHandleT  ckptHandle, CL_IN ClInt32T  secChosen, CL_IN ClInt64T  exprTime, CL_OUT ClUint32T*  pSecCount, CL_OUT ClCkptSectionIdT_4_0_0** pSecId);

ClRcT clCkptSvrIterationInitializeResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion,CL_OUT  ClUint32T  pSecCount,ClCkptSectionIdT_4_0_0*  pSecId);

ClRcT _ckptIterationNextGet_4_0_0(CL_IN ClHandleT  ckptHandle, CL_IN ClCkptSectionIdT_4_0_0*  pSecId, CL_OUT ClCkptSectionDescriptorT_4_0_0*  pSecDescriptor, CL_INOUT ClVersionT*  pVersion);

ClRcT _ckptIterationNextGetResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_OUT  ClCkptSectionDescriptorT_4_0_0  pSecDescriptor,CL_INOUT  ClVersionT  pVersion);

ClRcT clCkptMasterActiveReplicaSet_4_0_0(CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  localAddr, CL_INOUT ClVersionT*  pVersion);

ClRcT clCkptMasterActiveReplicaSetResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion);

ClRcT clCkptMasterActiveReplicaSetSwitchOver_4_0_0(CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  localAddr, CL_INOUT ClVersionT*  pVersion);

ClRcT clCkptMasterActiveReplicaSetSwitchOverResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion);

ClRcT clCkptMasterCkptRetentionDurationSet_4_0_0(CL_IN ClHandleT  ckptHandle, CL_IN ClInt64T  retentionDuration, CL_INOUT ClVersionT*  pVersion);

ClRcT clCkptMasterCkptRetentionDurationSetResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion);

ClRcT _ckptCheckpointSynchronize_4_0_0(CL_IN ClHandleT  ckptHandle, CL_IN ClInt64T  timeout, CL_IN ClUint16T  flag, CL_IN ClHandleT  ckptLocalHandle, CL_INOUT ClVersionT*  pVersion);

ClRcT _ckptCheckpointSynchronizeResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion);

ClRcT _ckptSectionExpirationTimeSet_4_0_0(CL_IN ClHandleT  ckptHandle, CL_IN ClCkptSectionIdT_4_0_0*  pSectionId, CL_IN ClInt64T  expryTime, CL_INOUT ClVersionT*  pVersion);

ClRcT _ckptSectionExpirationTimeSetResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion);

ClRcT clCkptMasterActiveAddrGet_4_0_0(CL_INOUT ClVersionT*  pVersion, CL_IN ClHandleT  masterHdl, CL_OUT ClUint32T*  pNodeAddr);

ClRcT clCkptMasterActiveAddrGetResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion,CL_OUT  ClUint32T  pNodeAddr);

ClRcT clCkptServerFinalize_4_0_0(CL_INOUT ClVersionT*  pVersion, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  iocPort);

ClRcT clCkptServerFinalizeResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion);

ClRcT _ckptSectionCheck_5_0_0(CL_IN ClHandleT  ckptHandle, CL_IN ClCkptSectionIdT_4_0_0*  pSecId);

ClRcT _ckptSectionCheckResponseSend_5_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode);


#ifdef __cplusplus
}
#endif
#endif /*_CKPTEOCKPTSERVERCLISERVERFUNC_SERVER_H_*/
