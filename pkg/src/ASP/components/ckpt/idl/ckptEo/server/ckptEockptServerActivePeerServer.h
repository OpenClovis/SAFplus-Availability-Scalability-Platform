
/*********************************************************************
* File: 
*********************************************************************/
/*********************************************************************
* Description : This file contains the declartions for server stub
*               routines
*     
* THIS FILE IS AUTO-GENERATED BY OPENCLOVIS IDE. EDIT THIS FILE AT
* YOUR OWN RISK. ANY CHANGE TO THIS FILE WILL BE OVERWRITTEN ON
* RE-GENERATION.
*     
*********************************************************************/

#ifndef _CKPTEOCKPTSERVERACTIVEPEER_SERVER_H_
#define _CKPTEOCKPTSERVERACTIVEPEER_SERVER_H_
#ifdef __cplusplus
extern "C" {
#endif
#include <clXdrApi.h>
#include <clIdlApi.h>
#include <ipi/clRmdIpi.h>
#include "../clientIDDefinitions.h"
#include "xdrClCkptIOVectorElementT.h"
#include "xdrCkptMasterDBClientInfoT.h"
#include "xdrCkptDynamicSyncupT.h"
#include "xdrCkptXlationDBEntryT.h"
#include "xdrCkptSectionInfoT.h"
#include "xdrCkptPeerListInfoT.h"
#include "xdrCkptCreateInfoT.h"
#include "xdrCkptCPInfoT.h"
#include "xdrClCkptCheckpointCreationAttributesT.h"
#include "xdrClCkptSectionIdT.h"
#include "xdrCkptHdlDbT.h"
#include "xdrCkptDPInfoT.h"
#include "xdrClCkptSectionDescriptorT.h"
#include "xdrCkptInfoT.h"
#include "xdrCkptMasterDBEntryIDLT.h"
#include "xdrCkptMasterDBInfoIDLT.h"
#include "xdrCkptOpenInfoT.h"
#include "xdrClCkptSectionCreationAttributesT.h"
#include "xdrClCkptCheckpointDescriptorT.h"
#include "xdrCkptUpdateFlagT.h"
#include "xdrCkptDynamicInfoT.h"



ClRcT clCkptRemSvrCkptInfoSync_4_0_0(CL_INOUT ClVersionT*  pVersion, CL_IN ClHandleT  ckptActHdl, CL_IN ClNameT*  pCkptName, CL_IN CkptCPInfoT_4_0_0*  pCpInfo, CL_IN CkptDPInfoT_4_0_0*  pDpInfo);

ClRcT clCkptRemSvrCkptInfoSyncResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion);

ClRcT clCkptRemSvrCkptInfoSync_5_0_0(CL_INOUT ClVersionT*  pVersion, CL_IN ClHandleT  ckptActHdl, CL_IN ClNameT*  pCkptName, CL_IN CkptCPInfoT_5_0_0*  pCpInfo, CL_IN CkptDPInfoT_4_0_0*  pDpInfo);

ClRcT clCkptRemSvrCkptInfoSyncResponseSend_5_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion);

ClRcT clCkptRemSvrCkptInfoGet_4_0_0(CL_INOUT ClVersionT*  pVersion, CL_IN ClHandleT  ckptActHdl, CL_IN ClUint32T  peerAddr, CL_OUT CkptInfoT_4_0_0*  pCkptInfo);

ClRcT clCkptRemSvrCkptInfoGetResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion,CL_OUT  CkptInfoT_4_0_0  pCkptInfo);

ClRcT clCkptRemSvrCkptInfoGet_5_0_0(CL_INOUT ClVersionT*  pVersion, CL_IN ClHandleT  ckptActHdl, CL_IN ClUint32T  peerAddr, CL_OUT CkptInfoT_5_0_0*  pCkptInfo);

ClRcT clCkptRemSvrCkptInfoGetResponseSend_5_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion,CL_OUT  CkptInfoT_5_0_0  pCkptInfo);

ClRcT clCkptRemSvrSectionInfoUpdate_4_0_0(CL_INOUT ClVersionT*  pVersion, CL_IN ClHandleT  ckptActHdl, CL_IN CkptUpdateFlagT_4_0_0  updateFlag, CL_IN CkptSectionInfoT_4_0_0*  pSecInfo);

ClRcT clCkptRemSvrSectionInfoUpdateResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion);

ClRcT clCkptRemSvrCkptDelete_4_0_0(CL_INOUT ClVersionT*  pVersion, CL_IN ClHandleT  ckptActHdl);

ClRcT clCkptRemSvrCkptDeleteResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion);

ClRcT clCkptRemSvrCkptWrite_4_0_0(CL_INOUT ClVersionT*  pVersion, CL_IN ClHandleT  ckptHandle, CL_IN ClUint32T  nodeAddr, CL_IN ClUint32T  portId, CL_IN ClUint32T  numberOfElements, CL_IN ClCkptIOVectorElementT_4_0_0*  pIoVector);

ClRcT clCkptRemSvrCkptWriteResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion);

ClRcT clCkptRemSvrSectionExpTimeSet_4_0_0(CL_INOUT ClVersionT*  pVersion, CL_IN ClHandleT  ckptHdl, CL_IN ClCkptSectionIdT_4_0_0*  sectionId, CL_IN ClInt64T  exprTime);

ClRcT clCkptRemSvrSectionExpTimeSetResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode,CL_INOUT  ClVersionT  pVersion);

ClRcT clCkptCheckpointReplicaRemove_4_0_0(CL_IN ClHandleT  ckptActiveHdl, CL_IN ClUint32T  replicaAddr);

ClRcT clCkptCheckpointReplicaRemoveResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode);

ClRcT clCkptReplicaAppInfoNotify_4_0_0(CL_IN ClHandleT  ckptActiveHdl, CL_IN ClUint32T  replicaAddr, CL_IN ClUint32T  portId);

ClRcT clCkptReplicaAppInfoNotifyResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode);

ClRcT clCkptActiveCallbackNotify_4_0_0(CL_IN ClHandleT  ckptActiveHdl, CL_IN ClUint32T  replicaAddr, CL_IN ClUint32T  portId);

ClRcT clCkptActiveCallbackNotifyResponseSend_4_0_0(CL_IN ClIdlHandleT idlHdl,CL_IN ClRcT retCode);


#ifdef __cplusplus
}
#endif
#endif /*_CKPTEOCKPTSERVERACTIVEPEER_SERVER_H_*/
