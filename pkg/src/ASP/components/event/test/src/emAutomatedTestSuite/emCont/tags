!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
APP_A	emTestCases.c	48;"	d	file:
APP_A_COM	emTestCases.c	61;"	d	file:
APP_A_IOC	emTestCases.c	65;"	d	file:
APP_B	emTestCases.c	49;"	d	file:
APP_B_COM	emTestCases.c	62;"	d	file:
APP_B_IOC	emTestCases.c	66;"	d	file:
APP_C	emTestCases.c	50;"	d	file:
APP_C_COM	emTestCases.c	63;"	d	file:
APP_C_IOC	emTestCases.c	67;"	d	file:
CKPT_TEST	emTestCases.c	32;"	d	file:
CL_EVT_CONT_PORT	emCont.c	299;"	d	file:
CL_EVT_TEST_1_SEC	emTestCases.c	54;"	d	file:
CL_EVT_TEST_2_SEC	emTestCases.c	55;"	d	file:
CL_EVT_TEST_3_SEC	emTestCases.c	56;"	d	file:
CL_EVT_TEST_4_SEC	emTestCases.c	57;"	d	file:
CL_EVT_TEST_5_SEC	emTestCases.c	58;"	d	file:
COMPNAME	Makefile	/^COMPNAME        := emTestCont$/;"	m
ClEvtContPubKey	emCont.h	/^    } ClEvtContPubKey;$/;"	t
ClEvtContSubInfoStorage	emCont.h	/^    typedef struct ClEvtContSubInfoStorage$/;"	s
ClEvtContSubInfoStorageT	emCont.h	/^    } ClEvtContSubInfoStorageT;$/;"	t
ClEvtContSubKey	emCont.h	/^    } ClEvtContSubKey;$/;"	t
DEP_COMP_LIST	Makefile	/^DEP_COMP_LIST   := utils osal timer buffer ioc rmd eo event amf  debug$/;"	m
EXE_NAME	Makefile	/^EXE_NAME        = $(ASP_EXE_PREFIX)_$(COMPNAME)$/;"	m
INIT	emTestCases.c	115;"	d	file:
INTERRUPTIBLE	emTestCases.c	28;"	d	file:
Makefile	Makefile	1;"	F
ASP_LIBS	Makefile	/^ASP_LIBS       := libClTimer.a \\$/;"	m
SRC_FILES	Makefile	/^SRC_FILES       := emCont.c\\$/;"	m
SYS_LIBS	Makefile	/^SYS_LIBS        := -lpthread$/;"	m
TC0	emTestCases.c	35;"	d	file:
TC1	emTestCases.c	36;"	d	file:
TC12	emTestCases.c	46;"	d	file:
TC2	emTestCases.c	37;"	d	file:
TC3	emTestCases.c	38;"	d	file:
TC4	emTestCases.c	39;"	d	file:
TC5	emTestCases.c	40;"	d	file:
TC6	emTestCases.c	41;"	d	file:
TC7	emTestCases.c	42;"	d	file:
TC8	emTestCases.c	43;"	d	file:
TC9	emTestCases.c	44;"	d	file:
THIRDPARTY_LIBS	Makefile	/^THIRDPARTY_LIBS := None$/;"	m
_CL_CONT_H_	emCont.h	13;"	d
_CL_TEST_TEMP_H_	emTestTemplate.h	13;"	d
appName	emCont.h	/^        ClNameT appName;$/;"	m	struct:ClEvtContSubInfoStorage
appName	emCont.h	/^        ClNameT appName;$/;"	m	struct:clEvtContPubKey
channelName	emCont.h	/^        ClNameT channelName;$/;"	m	struct:clEvtContPubKey
channelName	emCont.h	/^        ClNameT channelName;$/;"	m	struct:clEvtContSubKey
clEoBasicLibs	emCont.c	/^ClUint8T clEoBasicLibs[] = {$/;"	v
clEoClientLibs	emCont.c	/^ClUint8T clEoClientLibs[] = {$/;"	v
clEoConfig	emCont.c	/^ClEoConfigT clEoConfig = {$/;"	v
clEventTerminate	emCont.c	/^ClRcT clEventTerminate(ClInvocationT invocation, const ClNameT *compName)$/;"	f
clEvntContAlloc	emContBrain.c	/^ClRcT clEvntContAlloc(ClEvtContTestHeadT *pTestHead, ClRcT *pRetCode)$/;"	f
clEvntContClose	emContBrain.c	/^ClRcT clEvntContClose(ClEvtContTestHeadT *pTestHead, ClRcT *pRetCode)$/;"	f
clEvntContGetAttr	emContBrain.c	/^ClRcT clEvntContGetAttr(ClEvtContTestHeadT *pTestHead, ClRcT *pRetCode)$/;"	f
clEvntContKill	emContBrain.c	/^ClRcT clEvntContKill(ClEvtContTestHeadT *pTestHead, ClRcT *pRetCode)$/;"	f
clEvntContPub	emContBrain.c	/^ClRcT clEvntContPub(ClEvtContTestHeadT *pTestHead, ClRcT *pRetCode)$/;"	f
clEvntContRestart	emContBrain.c	/^ClRcT clEvntContRestart(ClEvtContTestHeadT *pTestHead, ClRcT *pRetCode)$/;"	f
clEvntContSetAttr	emContBrain.c	/^ClRcT clEvntContSetAttr(ClEvtContTestHeadT *pTestHead, ClRcT *pRetCode)$/;"	f
clEvntContSub	emContBrain.c	/^ClRcT clEvntContSub(ClEvtContTestHeadT *pTestHead, ClRcT *pRetCode)$/;"	f
clEvntContUnsub	emContBrain.c	/^ClRcT clEvntContUnsub(ClEvtContTestHeadT *pTestHead, ClRcT *pRetCode)$/;"	f
clEvtContAppAddressGet	emTestCases.c	/^ClRcT clEvtContAppAddressGet(void)$/;"	f
clEvtContAppInfoReset	emTestCases.c	/^void clEvtContAppInfoReset()$/;"	f
clEvtContFin	emContBrain.c	/^ClRcT clEvtContFin(ClEvtContTestHeadT *pTestHead, ClRcT *pRetCode)$/;"	f
clEvtContGetApp	emTestCases.c	/^void clEvtContGetApp(ClUint32T *pNoOfApp)$/;"	f
clEvtContInit	emContBrain.c	/^ClRcT clEvtContInit(ClEvtContTestHeadT *pTestHead, ClRcT *pRetCode)$/;"	f
clEvtContIocAddreGet	emTestCases.c	/^ClRcT clEvtContIocAddreGet(ClNameT *appName, ClIocPhysicalAddressT *pIocAddress)$/;"	f
clEvtContOpen	emContBrain.c	/^ClRcT clEvtContOpen(ClEvtContTestHeadT *pTestHead, ClRcT *pRetCode)$/;"	f
clEvtContParseTestInfo	emTestCases.c	/^ClRcT clEvtContParseTestInfo()$/;"	f
clEvtContPrepareInfo	emContBrain.c	/^ClRcT clEvtContPrepareInfo(ClEvtContTestHeadT *pTestHead,$/;"	f
clEvtContPubDataDelete	emCont.c	/^void clEvtContPubDataDelete(ClCntKeyHandleT userKey, ClCntDataHandleT userData)$/;"	f
clEvtContPubKey	emCont.h	/^    typedef struct clEvtContPubKey$/;"	s
clEvtContPubKeyCompare	emCont.c	/^ClInt32T clEvtContPubKeyCompare(ClCntKeyHandleT key1, ClCntKeyHandleT key2)$/;"	f
clEvtContRest	emContBrain.c	/^ClRcT clEvtContRest(ClIocAddressT destAddr)$/;"	f
clEvtContResultPrint	emContBrain.c	/^void clEvtContResultPrint(ClRcT retCode, ClEvtContTestHeadT *pTestHead)$/;"	f
clEvtContRmd	emContBrain.c	/^ClRcT clEvtContRmd(ClEvtContTestHeadT *pTestHead, ClUint32T funcNo,$/;"	f
clEvtContSubDataDelete	emCont.c	/^void clEvtContSubDataDelete(ClCntKeyHandleT userKey, ClCntDataHandleT userData)$/;"	f
clEvtContSubInfoInc	emTestCases.c	/^void clEvtContSubInfoInc(ClNameT *appName)$/;"	f
clEvtContSubInfoWalk	emContBrain.c	/^ClRcT clEvtContSubInfoWalk(ClCntKeyHandleT userKey, ClCntDataHandleT userData,$/;"	f
clEvtContSubKey	emCont.h	/^    typedef struct clEvtContSubKey$/;"	s
clEvtContSubKeyCompare	emCont.c	/^ClInt32T clEvtContSubKeyCompare(ClCntKeyHandleT key1, ClCntKeyHandleT key2)$/;"	f
clEvtContSubResultGet	emContBrain.c	/^ClRcT clEvtContSubResultGet(ClIocAddressT destAddr, ClUint32T noOfSubs)$/;"	f
clEvtContTestDbInit	emCont.c	/^void clEvtContTestDbInit()$/;"	f
clEvtContUtilsNameCmp	emContBrain.c	/^ClInt32T clEvtContUtilsNameCmp(ClNameT *pName1, ClNameT *pName2)$/;"	f
clEvtContUtilsNameCpy	emContBrain.c	/^void clEvtContUtilsNameCpy(ClNameT *pNameDst, const ClNameT *pNameSrc)$/;"	f
clEvtContValidateResult	emTestCases.c	/^ClRcT clEvtContValidateResult()$/;"	f
clEvtCpmInit	emCont.c	/^ClRcT clEvtCpmInit()$/;"	f
clEvtCpmReplyCb	emCont.c	/^ClRcT clEvtCpmReplyCb(ClUint32T data, ClBufferHandleT inMsgHandle,$/;"	f
clEvtTestContFinalize	emCont.c	/^ClRcT clEvtTestContFinalize()$/;"	f
clEvtTestContHealthCheck	emCont.c	/^ClRcT clEvtTestContHealthCheck(ClEoSchedFeedBackT *schFeedback)$/;"	f
clEvtTestContInitialize	emCont.c	/^ClRcT clEvtTestContInitialize(ClUint32T argc, ClCharT *argv[])$/;"	f
clEvtTestContResultGet	emCont.c	/^ClRcT clEvtTestContResultGet(ClUint32T cData, ClBufferHandleT inMsg,$/;"	f
clEvtTestContStateChange	emCont.c	/^ClRcT clEvtTestContStateChange(ClEoStateT eoState)$/;"	f
emCont.c	emCont.c	1;"	F
emCont.h	emCont.h	1;"	F
emContBrain.c	emContBrain.c	1;"	F
emTestCases.c	emTestCases.c	1;"	F
emTestTemplate.h	emTestTemplate.h	1;"	F
filterNo	emCont.h	/^        ClUint32T filterNo;$/;"	m	struct:clEvtContSubKey
gClEvtTestContCpmHandle	emCont.c	/^static ClCpmHandleT gClEvtTestContCpmHandle;$/;"	v	file:
gClEvtTestContFuncList	emCont.c	/^static ClEoPayloadWithReplyCallbackT gClEvtTestContFuncList[] = {$/;"	v	file:
gEmTestCases	emTestCases.c	/^ClEvtContTestCaseT gEmTestCases[] = {$/;"	v
gEvtAppToIoc	emTestCases.c	/^ClEvtContAppToIocAddrT gEvtAppToIoc[] = {$/;"	v
gEvtContPubInfo	emContBrain.c	/^ClCntHandleT gEvtContPubInfo = 0;$/;"	v
gEvtContPubKey	emContBrain.c	/^ClEvtContPubKey gEvtContPubKey;$/;"	v
gEvtContSubInfo	emContBrain.c	/^ClCntHandleT gEvtContSubInfo = 0;$/;"	v
gEvtContSubTempInfo	emContBrain.c	/^ClCntHandleT gEvtContSubTempInfo = 0;$/;"	v
gTC12Alloc	emTestCases.c	/^ClEvtContAllocT gTC12Alloc[] = {$/;"	v
gTC12AttrSet	emTestCases.c	/^ClEvtContAttrSetT gTC12AttrSet[] = {$/;"	v
gTC12Close	emTestCases.c	/^ClEvtContChCloseT gTC12Close[] = {$/;"	v
gTC12Open	emTestCases.c	/^ClEvtContChOpenT gTC12Open[] = {$/;"	v
gTC12Pub	emTestCases.c	/^ClEvtContPubT gTC12Pub[] = {$/;"	v
gTC12Sub1	emTestCases.c	/^ClEvtContSubT gTC12Sub1[] = {$/;"	v
gTC1Alloc	emTestCases.c	/^ClEvtContAllocT gTC1Alloc[] = {$/;"	v
gTC1AttrSet	emTestCases.c	/^ClEvtContAttrSetT gTC1AttrSet[] = {$/;"	v
gTC1Close	emTestCases.c	/^ClEvtContChCloseT gTC1Close[] = {$/;"	v
gTC1Head	emTestCases.c	/^ClEvtContTestHeadT gTC1Head[] = {$/;"	v
gTC1Open	emTestCases.c	/^ClEvtContChOpenT gTC1Open[] = {$/;"	v
gTC1Pub	emTestCases.c	/^ClEvtContPubT gTC1Pub[] = {$/;"	v
gTC1Sub	emTestCases.c	/^ClEvtContSubT gTC1Sub[] = {$/;"	v
gTC2Alloc	emTestCases.c	/^ClEvtContAllocT gTC2Alloc[] = {$/;"	v
gTC2AttrSet	emTestCases.c	/^ClEvtContAttrSetT gTC2AttrSet[] = {$/;"	v
gTC2Close	emTestCases.c	/^ClEvtContChCloseT gTC2Close[] = {$/;"	v
gTC2Head	emTestCases.c	/^ClEvtContTestHeadT gTC2Head[] = {$/;"	v
gTC2Open	emTestCases.c	/^ClEvtContChOpenT gTC2Open[] = {$/;"	v
gTC2Pub	emTestCases.c	/^ClEvtContPubT gTC2Pub[] = {$/;"	v
gTC2Sub	emTestCases.c	/^ClEvtContSubT gTC2Sub[] = {$/;"	v
gTC3Alloc	emTestCases.c	/^ClEvtContAllocT gTC3Alloc[] = {$/;"	v
gTC3AttrSet	emTestCases.c	/^ClEvtContAttrSetT gTC3AttrSet[] = {$/;"	v
gTC3Close	emTestCases.c	/^ClEvtContChCloseT gTC3Close[] = {$/;"	v
gTC3Head	emTestCases.c	/^ClEvtContTestHeadT gTC3Head[] = {$/;"	v
gTC3Open4Pub	emTestCases.c	/^ClEvtContChOpenT gTC3Open4Pub[] = {$/;"	v
gTC3Open4Sub	emTestCases.c	/^ClEvtContChOpenT gTC3Open4Sub[] = {$/;"	v
gTC3Pub	emTestCases.c	/^ClEvtContPubT gTC3Pub[] = {$/;"	v
gTC3Sub	emTestCases.c	/^ClEvtContSubT gTC3Sub[3][3] = {$/;"	v
gTC3Unsub	emTestCases.c	/^ClEvtContUnsubT gTC3Unsub[] = {$/;"	v
gTC4Alloc	emTestCases.c	/^ClEvtContAllocT gTC4Alloc[] = {$/;"	v
gTC4AttrSet	emTestCases.c	/^ClEvtContAttrSetT gTC4AttrSet[] = {$/;"	v
gTC4Close	emTestCases.c	/^ClEvtContChCloseT gTC4Close[] = {$/;"	v
gTC4CloseBC	emTestCases.c	/^ClEvtContChCloseT gTC4CloseBC[] = {$/;"	v
gTC4Head	emTestCases.c	/^ClEvtContTestHeadT gTC4Head[] = {$/;"	v
gTC4Open4Both	emTestCases.c	/^ClEvtContChOpenT gTC4Open4Both[] = {$/;"	v
gTC4Open4PubBC	emTestCases.c	/^ClEvtContChOpenT gTC4Open4PubBC[] = {$/;"	v
gTC4Open4Sub	emTestCases.c	/^ClEvtContChOpenT gTC4Open4Sub[] = {$/;"	v
gTC4Open4SubBC	emTestCases.c	/^ClEvtContChOpenT gTC4Open4SubBC[] = {$/;"	v
gTC4Pub	emTestCases.c	/^ClEvtContPubT gTC4Pub[] = {$/;"	v
gTC4SubAB	emTestCases.c	/^ClEvtContSubT gTC4SubAB[] = {$/;"	v
gTC4SubABC	emTestCases.c	/^ClEvtContSubT gTC4SubABC[] = {$/;"	v
gTC4SubBC	emTestCases.c	/^ClEvtContSubT gTC4SubBC[3][3] = {$/;"	v
gTC4UnsubBC	emTestCases.c	/^ClEvtContUnsubT gTC4UnsubBC[3][3] = {$/;"	v
gTC5Alloc	emTestCases.c	/^ClEvtContAllocT gTC5Alloc[] = {$/;"	v
gTC5AttrSet	emTestCases.c	/^ClEvtContAttrSetT gTC5AttrSet[] = {$/;"	v
gTC5Close	emTestCases.c	/^ClEvtContChCloseT gTC5Close[] = {$/;"	v
gTC5Head	emTestCases.c	/^ClEvtContTestHeadT gTC5Head[] = {$/;"	v
gTC5Open	emTestCases.c	/^ClEvtContChOpenT gTC5Open[] = {$/;"	v
gTC5Pub	emTestCases.c	/^ClEvtContPubT gTC5Pub[] = {$/;"	v
gTC5Sub	emTestCases.c	/^ClEvtContSubT gTC5Sub[] = {$/;"	v
gTC6Alloc	emTestCases.c	/^ClEvtContAllocT gTC6Alloc[] = {$/;"	v
gTC6AttrSet	emTestCases.c	/^ClEvtContAttrSetT gTC6AttrSet[] = {$/;"	v
gTC6Close	emTestCases.c	/^ClEvtContChCloseT gTC6Close[] = {$/;"	v
gTC6Head	emTestCases.c	/^ClEvtContTestHeadT gTC6Head[] = {$/;"	v
gTC6Open	emTestCases.c	/^ClEvtContChOpenT gTC6Open[] = {$/;"	v
gTC6Pub	emTestCases.c	/^ClEvtContPubT gTC6Pub[] = {$/;"	v
gTC6Sub	emTestCases.c	/^ClEvtContSubT gTC6Sub[3][6] = {$/;"	v
gTC6Unsub	emTestCases.c	/^ClEvtContUnsubT gTC6Unsub[3][3] = {$/;"	v
gTC7Alloc	emTestCases.c	/^ClEvtContAllocT gTC7Alloc[] = {$/;"	v
gTC7AttrSet	emTestCases.c	/^ClEvtContAttrSetT gTC7AttrSet[] = {$/;"	v
gTC7Close	emTestCases.c	/^ClEvtContChCloseT gTC7Close[] = {$/;"	v
gTC7Head	emTestCases.c	/^ClEvtContTestHeadT gTC7Head[] = {$/;"	v
gTC7Open	emTestCases.c	/^ClEvtContChOpenT gTC7Open[] = {$/;"	v
gTC7Pub	emTestCases.c	/^ClEvtContPubT gTC7Pub[] = {$/;"	v
gTC7Sub	emTestCases.c	/^ClEvtContSubT gTC7Sub[] = {$/;"	v
gTC8Alloc	emTestCases.c	/^ClEvtContAllocT gTC8Alloc[] = {$/;"	v
gTC8AttrSet	emTestCases.c	/^ClEvtContAttrSetT gTC8AttrSet[] = {$/;"	v
gTC8Close	emTestCases.c	/^ClEvtContChCloseT gTC8Close[] = {$/;"	v
gTC8Head	emTestCases.c	/^ClEvtContTestHeadT gTC8Head[] = {$/;"	v
gTC8Open	emTestCases.c	/^ClEvtContChOpenT gTC8Open[] = {$/;"	v
gTC8Pub	emTestCases.c	/^ClEvtContPubT gTC8Pub[] = {$/;"	v
gTC8Sub	emTestCases.c	/^ClEvtContSubT gTC8Sub[] = {$/;"	v
gTC9Alloc	emTestCases.c	/^ClEvtContAllocT gTC9Alloc[] = {$/;"	v
gTC9AttrSet	emTestCases.c	/^ClEvtContAttrSetT gTC9AttrSet[] = {$/;"	v
gTC9Close	emTestCases.c	/^ClEvtContChCloseT gTC9Close[] = {$/;"	v
gTC9Head	emTestCases.c	/^ClEvtContTestHeadT gTC9Head[] = {$/;"	v
gTC9Open	emTestCases.c	/^ClEvtContChOpenT gTC9Open[] = {$/;"	v
gTC9Pub	emTestCases.c	/^ClEvtContPubT gTC9Pub[] = {$/;"	v
gTC9Sub	emTestCases.c	/^ClEvtContSubT gTC9Sub[] = {$/;"	v
gTCInit	emTestCases.c	/^ClNameT gTCInit = CL_NAME_SET(INIT);$/;"	v
gTCNode	emTestCases.c	/^ClNameT gTCNode[] = {$/;"	v
gpPubInfo	emContBrain.c	/^ClEvtContPubT *gpPubInfo;$/;"	v
gpSubStorage	emCont.c	/^ClEvtContSubInfoStorageT *gpSubStorage;$/;"	v
noOfSubs	emCont.h	/^        ClUint32T noOfSubs;$/;"	m	struct:ClEvtContSubInfoStorage
