################################################################################
# ModuleName  : 
# $File$
# $Author$
# $Date$
################################################################################
# Description :
################################################################################

import sys
from os import open
import os.path
import re
import getopt
import commands

verbose_level = 0
fname = '' # input file name

def dbmsg(level, msg):
    global verbose_level, fname
    if level <= verbose_level:
        print '%s: %s' % (fname, msg),
        sys.stdout.flush()

def dbmsg_c(level, msg):
    global verbose_level
    if level <= verbose_level:
        print msg

def warn(msg):
    global fname
    print '%s: Warning: %s' % (fname, msg)

def err(msg):
    global fname
    print '%s: Error: %s' % (fname, msg)
    #sys.exit(1)
      
def usage(exitcode=0):
    print 'Usage: %s -[hvw] <file.h>' % os.path.basename(sys.argv[0])
    print ''
    print 'Checks for various consistency errors in C header files'
    print ''
    print 'Options:'
    print '    -v, --verbose     : Verbose feedback (-vv even more verbose)'
    print '    -h, --help        : Print this help'
    print ''
    sys.exit(exitcode)

def main():
    global fname, verbose_level, write_flag 
    write_flag = False
    
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hvw", ["help", "verbose", "write"])
    except getopt.GetoptError:
        usage(1)
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
        if o in ("-v", "--verbose"):
            verbose_level += 1
        if o in ("-w", "--write"):
            write_flag = True
        if o in ("-c"):
            import coloring
            coloring.setcoloring(0)
    
    # Check arguments:
    if not len(args) == 1:
        usage()
        sys.exit(1)
    file_list_stdin, file_list_stdout = os.popen2("find " + args[0] + " -name \"*.h\"")

    for fname in file_list_stdout:
        fname = fname[:-1]
        # Check if input file can be opened for read:
        try:
            f = file(fname, 'r')
        except Exception, inst:
            print inst
            sys.exit(1)
        except:
            err('Could not open input file %s' % fname)
            # Does not return

        # Read the input file into 'content':
        content = f.read()
        temp_file_content = ''
        f.close()
        
        #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        # Checking if #ifndef _SOMENAME_ is used:
        dbmsg(1, 'Checking for opening "#ifndef _SOMENAME_" ...')
        
        # Absorb leading comment and any whitespace before and after.
        # Comment block may be repeated.
        re_c = re.compile('(\s*)(/\*([^\*]|\*(?!/))*\*/)(\s*)', \
                          re.MULTILINE|re.DOTALL) # eat one comment
        mo = re_c.match(content)
        while not mo == None:
            dbmsg(2, '\n- Found leading space/comment of %d bytes. Last 20 bytes: "%s"\n' % \
                  ((mo.end()-mo.start()), content[mo.end()-20:mo.end()].__repr__()))
            temp_file_content = temp_file_content + content[:mo.end()]
            content = content[mo.end():]    # Eating up all what we found so far
            mo = re_c.match(content)
        
        # Expect an '#ifndef _SOMENAME_' line. Allow trailing space and tabs.
        pattern = '\s*(^#[ \t]*ifndef)[ \t]+(?P<label>\w+)[ \t]*\r?\n'
        
        # FIXME: Need to add more dbmsg(2, XXX) commands for detailed feedback.
        mo = re.match(pattern, content, re.MULTILINE|re.DOTALL)
        if mo == None:
            err('File does not start with "#ifndef _SOMENAME_" line')
            continue
            # Does not return
        temp_file_content = temp_file_content + content[:mo.end()]
        
        content = content[mo.end():]    # Eating up all what we found so far
        label = mo.groupdict()['label'] # Extracting label used in ifndef
        dbmsg_c(1, '(found %s) Good' % label)
        
        #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        # Checking if label is consistent with filename
        dbmsg(1, 'Checking for labelname consistency ...')

        l = os.path.basename(fname)
        # Label should be derived from filename using following rules:
        # - starting '_' added
        # - trailing '_' added
        # - '.' is replaced by '_'
        # - '_' inserted in front of each capital letter, except if 2 or more
        #   capital letters follow each other
        # _ Finally, all small letters converted to capital letters 
        l = l.replace('.', '_')
        l = re.sub('(?<=[a-z0-9])([A-Z])', r'_\1', l)
        l = re.sub('(?<=[A-Z])([A-Z])([a-z0-9])', r'_\1\2', l)
        l = l.upper()
        l = l + '_'
        if not l[0] == '_': l = '_'+l
        if not l == label:
            warn('Label should be "%s", but it is "%s"' % (l, label))
            temp_file_content = temp_file_content.replace(label,l)
            
        else:
            dbmsg_c(1, 'Good')
            
        #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        dbmsg(1, 'Checking for corresponding "#define %s" ...' % label)

        # Next line should be a '#define _SOMENAME_'. Allow trailing space and tabs and newlines.
        pattern = '\s*(^#[ \t]*define)[ \t]+(?P<def_label>\w+)[ \t]*\r?\n'
        mo = re.match(pattern, content, re.MULTILINE|re.DOTALL)
        if mo == None:
            err('No matching #define.')
            continue #Does not return
        else:
            def_label = mo.groupdict()['def_label'] # Extracting label used in ifndef
            if not def_label == l:
                warn('#define %s-Inconsistency in the label name' % label)
                temp_str = content[:mo.end()].replace(def_label,l) 
            else:
                temp_str = content[:mo.end()]
            temp_file_content = temp_file_content + temp_str
            content = content[mo.end():]    # Eating up all what we found so far

        #checking if "ifdef __cplusplus" is present in any of the follwing lines.
        pattern = '([\s]*)(^#[ \t]*ifdef)[ \t]+(__cplusplus)[ \t]*\r?\n(\s*(extern[ \t]+"C"\s*{\s*)(^#[ \t]*endif))'
        mo = re.match(pattern, content, re.MULTILINE|re.DOTALL)
        if mo == None:
            warn('Could not find #ifdef __cplusplus...adding the corresponding code')
            temp_file_content = temp_file_content + '''
# ifdef __cplusplus
extern "C"
{
# endif
'''
        else:
            dbmsg_c(1, 'Good')
            temp_file_content = temp_file_content + content[:mo.end()]
            content = content[mo.end():]    # Eating up all what we found so far
            
        #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        # Checking for #ifdef __cplusplus in the end

        pattern = '(?P<code>(.*))(^#[ \t]*ifdef)[ \t]+(__cplusplus)[ \t]*\r?\n(\s*}\s*(^#[ \t]*endif))'
        mo = re.match(pattern, content, re.MULTILINE|re.DOTALL)
        if mo == None:
            warn('Could not find #ifdef __cplusplus in the end...adding the corresponding code')
            pattern = '(?P<code>(.*))(^#[ \t]*endif)'
            m = re.match(pattern, content, re.MULTILINE|re.DOTALL)
            if m ==None: 
                err('Could not find closing "#endif" ')
                continue
            else:
                code = m.groupdict()['code']
                temp_file_content = temp_file_content + code
                content = content[m.end('code'):]
                temp_file_content = temp_file_content + '''
# ifdef __cplusplus
}
# endif
'''
        else:
            dbmsg_c(1, 'Good')
            temp_file_content = temp_file_content + content[:mo.end()]
            content = content[mo.end():]    # Eating up all what we found so far
        # Need to eat up all content till final #endif is found 
        pattern = '(.*)(^#[ \t]*endif)'
        mo = re.match(pattern, content, re.MULTILINE|re.DOTALL)
        if mo == None:
            err('Could not find closing "#endif" candidate')
            continue
            # Does not return
        temp_file_content = temp_file_content + content[:mo.end()]
        content = content[mo.end():]    # Eating up all what we found so far
        
        # Looking for the comment after the #endif
        pattern = '[ \t]*(/\*[ \t]*(?P<label>\w+)[ \t]*\*/)'
        mo = re.match(pattern, content, re.MULTILINE|re.DOTALL)
        if mo == None:
            warn('No "/* %s */" provided after the closing #endif' % l)
            temp_file_content = temp_file_content + "\t\t\t\t\t\t\t/* " + l + " */"
            pattern = '[ \t]*//[ \t\w]*\r?\n'
            m = re.match(pattern, content, re.MULTILINE|re.DOTALL)
            if not m == None:
                # "incorrect comment removed", content[:m.end()]
                content = content[m.end():]
        else:
            temp_str = content[:mo.end()]
            c_label = mo.groupdict()['label']
            if not label == c_label:
                warn('Closing label in "#endif /* %s */" does not match opening "%s"-Label Inconsistency' % \
                     (c_label, label))
                temp_str = temp_str.replace(c_label, l)
            else:
                temp_str = temp_str.replace(label, l)
            temp_file_content = temp_file_content + temp_str
            content = content[mo.end():]    # Eating up all what we found so far
            dbmsg_c(1, 'Good')

        #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        # No content after closing #endif
        dbmsg(1, 'Checking for zero content after closing "#endif" ...')
        
        if re.match('\s*[^\s]', content, re.MULTILINE|re.DOTALL) != None:
            pass
            #warn('Found non-whitespace matter after closing "#endif"')
            # Does not return
        dbmsg_c(1, 'Good')
        temp_file_content = temp_file_content + content
        #print temp_file_content
        if True == write_flag:
            try:
                f = file(fname,'w')
            except:
                err('Could not open input file %s for write' % fname)
                continue
            f.write(temp_file_content)
            f.close()

 
    return 0
    
if __name__ == '__main__':
    main()
